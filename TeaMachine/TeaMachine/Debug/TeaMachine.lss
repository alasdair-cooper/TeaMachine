
TeaMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000084a  00800200  00007f2e  00007fc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007f2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  00800a4a  00800a4a  0000880c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000880c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000883c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001318  00000000  00000000  0000887c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00032727  00000000  00000000  00009b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00007e41  00000000  00000000  0003c2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000abe2  00000000  00000000  000440fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003b1c  00000000  00000000  0004ece0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000084d9  00000000  00000000  000527fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00013201  00000000  00000000  0005acd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000011b8  00000000  00000000  0006ded6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c2       	rjmp	.+1218   	; 0x4c4 <__dtors_end>
       2:	00 00       	nop
       4:	90 c2       	rjmp	.+1312   	; 0x526 <__bad_interrupt>
       6:	00 00       	nop
       8:	8e c2       	rjmp	.+1308   	; 0x526 <__bad_interrupt>
       a:	00 00       	nop
       c:	8c c2       	rjmp	.+1304   	; 0x526 <__bad_interrupt>
       e:	00 00       	nop
      10:	8a c2       	rjmp	.+1300   	; 0x526 <__bad_interrupt>
      12:	00 00       	nop
      14:	88 c2       	rjmp	.+1296   	; 0x526 <__bad_interrupt>
      16:	00 00       	nop
      18:	86 c2       	rjmp	.+1292   	; 0x526 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	84 c2       	rjmp	.+1288   	; 0x526 <__bad_interrupt>
      1e:	00 00       	nop
      20:	82 c2       	rjmp	.+1284   	; 0x526 <__bad_interrupt>
      22:	00 00       	nop
      24:	80 c2       	rjmp	.+1280   	; 0x526 <__bad_interrupt>
      26:	00 00       	nop
      28:	7e c2       	rjmp	.+1276   	; 0x526 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7c c2       	rjmp	.+1272   	; 0x526 <__bad_interrupt>
      2e:	00 00       	nop
      30:	7a c2       	rjmp	.+1268   	; 0x526 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__vector_13>
      38:	76 c2       	rjmp	.+1260   	; 0x526 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	74 c2       	rjmp	.+1256   	; 0x526 <__bad_interrupt>
      3e:	00 00       	nop
      40:	72 c2       	rjmp	.+1252   	; 0x526 <__bad_interrupt>
      42:	00 00       	nop
      44:	70 c2       	rjmp	.+1248   	; 0x526 <__bad_interrupt>
      46:	00 00       	nop
      48:	6e c2       	rjmp	.+1244   	; 0x526 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6c c2       	rjmp	.+1240   	; 0x526 <__bad_interrupt>
      4e:	00 00       	nop
      50:	6a c2       	rjmp	.+1236   	; 0x526 <__bad_interrupt>
      52:	00 00       	nop
      54:	68 c2       	rjmp	.+1232   	; 0x526 <__bad_interrupt>
      56:	00 00       	nop
      58:	66 c2       	rjmp	.+1228   	; 0x526 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 ac 35 	jmp	0x6b58	; 0x6b58 <__vector_23>
      60:	62 c2       	rjmp	.+1220   	; 0x526 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 0e 33 	jmp	0x661c	; 0x661c <__vector_25>
      68:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__vector_26>
      6c:	5c c2       	rjmp	.+1208   	; 0x526 <__bad_interrupt>
      6e:	00 00       	nop
      70:	5a c2       	rjmp	.+1204   	; 0x526 <__bad_interrupt>
      72:	00 00       	nop
      74:	58 c2       	rjmp	.+1200   	; 0x526 <__bad_interrupt>
      76:	00 00       	nop
      78:	56 c2       	rjmp	.+1196   	; 0x526 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	54 c2       	rjmp	.+1192   	; 0x526 <__bad_interrupt>
      7e:	00 00       	nop
      80:	52 c2       	rjmp	.+1188   	; 0x526 <__bad_interrupt>
      82:	00 00       	nop
      84:	50 c2       	rjmp	.+1184   	; 0x526 <__bad_interrupt>
      86:	00 00       	nop
      88:	4e c2       	rjmp	.+1180   	; 0x526 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c c2       	rjmp	.+1176   	; 0x526 <__bad_interrupt>
      8e:	00 00       	nop
      90:	4a c2       	rjmp	.+1172   	; 0x526 <__bad_interrupt>
      92:	00 00       	nop
      94:	48 c2       	rjmp	.+1168   	; 0x526 <__bad_interrupt>
      96:	00 00       	nop
      98:	46 c2       	rjmp	.+1164   	; 0x526 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	44 c2       	rjmp	.+1160   	; 0x526 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	42 c2       	rjmp	.+1156   	; 0x526 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	40 c2       	rjmp	.+1152   	; 0x526 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3e c2       	rjmp	.+1148   	; 0x526 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3c c2       	rjmp	.+1144   	; 0x526 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	3a c2       	rjmp	.+1140   	; 0x526 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	38 c2       	rjmp	.+1136   	; 0x526 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	36 c2       	rjmp	.+1132   	; 0x526 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	34 c2       	rjmp	.+1128   	; 0x526 <__bad_interrupt>
      be:	00 00       	nop
      c0:	32 c2       	rjmp	.+1124   	; 0x526 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	30 c2       	rjmp	.+1120   	; 0x526 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2e c2       	rjmp	.+1116   	; 0x526 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2c c2       	rjmp	.+1112   	; 0x526 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	2a c2       	rjmp	.+1108   	; 0x526 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	28 c2       	rjmp	.+1104   	; 0x526 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	26 c2       	rjmp	.+1100   	; 0x526 <__bad_interrupt>
      da:	00 00       	nop
      dc:	24 c2       	rjmp	.+1096   	; 0x526 <__bad_interrupt>
      de:	00 00       	nop
      e0:	22 c2       	rjmp	.+1092   	; 0x526 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fa 04       	cpc	r15, r10
      e6:	30 05       	cpc	r19, r0
      e8:	5b 05       	cpc	r21, r11
      ea:	77 05       	cpc	r23, r7
      ec:	a7 05       	cpc	r26, r7
      ee:	06 06       	cpc	r0, r22
      f0:	86 08       	sbc	r8, r6
      f2:	2a 06       	cpc	r2, r26
      f4:	14 07       	cpc	r17, r20
      f6:	4e 07       	cpc	r20, r30
      f8:	78 07       	cpc	r23, r24
      fa:	fb 07       	cpc	r31, r27
      fc:	2e 08       	sbc	r2, r14
      fe:	5c 08       	sbc	r5, r12
     100:	c7 0f       	add	r28, r23
     102:	09 10       	cpse	r0, r9
     104:	cd 0f       	add	r28, r29
     106:	d0 0f       	add	r29, r16
     108:	d3 0f       	add	r29, r19
     10a:	d9 0f       	add	r29, r25
     10c:	09 10       	cpse	r0, r9
     10e:	09 10       	cpse	r0, r9
     110:	de 0f       	add	r29, r30
     112:	09 10       	cpse	r0, r9
     114:	e1 0f       	add	r30, r17
     116:	e6 0f       	add	r30, r22
     118:	09 10       	cpse	r0, r9
     11a:	eb 0f       	add	r30, r27
     11c:	f0 0f       	add	r31, r16
     11e:	09 10       	cpse	r0, r9
     120:	09 10       	cpse	r0, r9
     122:	f5 0f       	add	r31, r21
     124:	fa 0f       	add	r31, r26
     126:	ff 0f       	add	r31, r31
     128:	09 10       	cpse	r0, r9
     12a:	09 10       	cpse	r0, r9
     12c:	04 10       	cpse	r0, r4
     12e:	d1 1b       	sub	r29, r17
     130:	f0 1b       	sub	r31, r16
     132:	11 1c       	adc	r1, r1
     134:	37 1c       	adc	r3, r7
     136:	7d 1c       	adc	r7, r13
     138:	e7 1c       	adc	r14, r7
     13a:	11 1d       	adc	r17, r1
     13c:	39 1d       	adc	r19, r9
     13e:	6a 1d       	adc	r22, r10
     140:	bc 21       	and	r27, r12
     142:	c5 21       	and	r28, r5
     144:	ce 21       	and	r28, r14
     146:	d7 21       	and	r29, r7
     148:	e3 21       	and	r30, r3
     14a:	f9 21       	and	r31, r9
     14c:	02 22       	and	r0, r18
     14e:	0e 22       	and	r0, r30
     150:	1a 22       	and	r1, r26
     152:	32 22       	and	r3, r18
     154:	3e 22       	and	r3, r30
     156:	4a 22       	and	r4, r26
     158:	54 22       	and	r5, r20
     15a:	a2 28       	or	r10, r2
     15c:	43 28       	or	r4, r3
     15e:	53 28       	or	r5, r3
     160:	63 28       	or	r6, r3
     162:	65 28       	or	r6, r5
     164:	75 28       	or	r7, r5
     166:	85 28       	or	r8, r5
     168:	7d 2e       	mov	r7, r29
     16a:	7f 2e       	mov	r7, r31
     16c:	98 2e       	mov	r9, r24
     16e:	9b 2e       	mov	r9, r27
     170:	81 2e       	mov	r8, r17
     172:	83 2e       	mov	r8, r19
     174:	85 2e       	mov	r8, r21
     176:	89 2e       	mov	r8, r25
     178:	8e 2e       	mov	r8, r30
     17a:	93 2e       	mov	r9, r19
     17c:	9f 2e       	mov	r9, r31
     17e:	a4 2e       	mov	r10, r20
     180:	e7 36       	cpi	r30, 0x67	; 103
     182:	ea 36       	cpi	r30, 0x6A	; 106
     184:	d9 36       	cpi	r29, 0x69	; 105
     186:	dd 36       	cpi	r29, 0x6D	; 109
     188:	e3 36       	cpi	r30, 0x63	; 99
     18a:	21 37       	cpi	r18, 0x71	; 113
     18c:	ee 36       	cpi	r30, 0x6E	; 110
     18e:	f2 36       	cpi	r31, 0x62	; 98
     190:	f8 36       	cpi	r31, 0x68	; 104
     192:	fc 36       	cpi	r31, 0x6C	; 108
     194:	00 37       	cpi	r16, 0x70	; 112
     196:	06 37       	cpi	r16, 0x76	; 118
     198:	0a 37       	cpi	r16, 0x7A	; 122
     19a:	0e 37       	cpi	r16, 0x7E	; 126
     19c:	21 37       	cpi	r18, 0x71	; 113
     19e:	14 37       	cpi	r17, 0x74	; 116
     1a0:	18 37       	cpi	r17, 0x78	; 120
     1a2:	1c 37       	cpi	r17, 0x7C	; 124

000001a4 <__trampolines_end>:
     1a4:	00 40       	sbci	r16, 0x00	; 0
     1a6:	7a 10       	cpse	r7, r10
     1a8:	f3 5a       	subi	r31, 0xA3	; 163
     1aa:	00 a0       	ldd	r0, Z+32	; 0x20
     1ac:	72 4e       	sbci	r23, 0xE2	; 226
     1ae:	18 09       	sbc	r17, r8
     1b0:	00 10       	cpse	r0, r0
     1b2:	a5 d4       	rcall	.+2378   	; 0xafe <_ZN11BrewManager19AdvanceStateMachineEv+0x150>
     1b4:	e8 00       	.word	0x00e8	; ????
     1b6:	00 e8       	ldi	r16, 0x80	; 128
     1b8:	76 48       	sbci	r23, 0x86	; 134
     1ba:	17 00       	.word	0x0017	; ????
     1bc:	00 e4       	ldi	r16, 0x40	; 64
     1be:	0b 54       	subi	r16, 0x4B	; 75
     1c0:	02 00       	.word	0x0002	; ????
     1c2:	00 ca       	rjmp	.-3072   	; 0xfffff5c4 <__eeprom_end+0xff7ef5c4>
     1c4:	9a 3b       	cpi	r25, 0xBA	; 186
     1c6:	00 00       	nop
     1c8:	00 e1       	ldi	r16, 0x10	; 16
     1ca:	f5 05       	cpc	r31, r5
     1cc:	00 00       	nop
     1ce:	80 96       	adiw	r24, 0x20	; 32
     1d0:	98 00       	.word	0x0098	; ????
     1d2:	00 00       	nop
     1d4:	40 42       	sbci	r20, 0x20	; 32
     1d6:	0f 00       	.word	0x000f	; ????
     1d8:	00 00       	nop
     1da:	a0 86       	std	Z+8, r10	; 0x08
     1dc:	01 00       	.word	0x0001	; ????
     1de:	00 00       	nop
     1e0:	10 27       	eor	r17, r16
     1e2:	00 00       	nop
     1e4:	00 00       	nop
     1e6:	e8 03       	fmulsu	r22, r16
     1e8:	00 00       	nop
     1ea:	00 00       	nop
     1ec:	64 00       	.word	0x0064	; ????
     1ee:	00 00       	nop
     1f0:	00 00       	nop
     1f2:	0a 00       	.word	0x000a	; ????
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	01 00       	.word	0x0001	; ????
     1fa:	00 00       	nop
     1fc:	00 00       	nop
     1fe:	2c 76       	andi	r18, 0x6C	; 108
     200:	d8 88       	ldd	r13, Y+16	; 0x10
     202:	dc 67       	ori	r29, 0x7C	; 124
     204:	4f 08       	sbc	r4, r15
     206:	23 df       	rcall	.-442    	; 0x4e <__SREG__+0xf>
     208:	c1 df       	rcall	.-126    	; 0x18c <__SREG__+0x14d>
     20a:	ae 59       	subi	r26, 0x9E	; 158
     20c:	e1 b1       	in	r30, 0x01	; 1
     20e:	b7 96       	adiw	r30, 0x27	; 39
     210:	e5 e3       	ldi	r30, 0x35	; 53
     212:	e4 53       	subi	r30, 0x34	; 52
     214:	c6 3a       	cpi	r28, 0xA6	; 166
     216:	e6 51       	subi	r30, 0x16	; 22
     218:	99 76       	andi	r25, 0x69	; 105
     21a:	96 e8       	ldi	r25, 0x86	; 134
     21c:	e6 c2       	rjmp	.+1484   	; 0x7ea <_ZN11BrewManager12BeginProcessEv+0x3c>
     21e:	84 26       	eor	r8, r20
     220:	eb 89       	ldd	r30, Y+19	; 0x13
     222:	8c 9b       	sbis	0x11, 4	; 17
     224:	62 ed       	ldi	r22, 0xD2	; 210
     226:	40 7c       	andi	r20, 0xC0	; 192
     228:	6f fc       	.word	0xfc6f	; ????
     22a:	ef bc       	out	0x2f, r14	; 47
     22c:	9c 9f       	mul	r25, r28
     22e:	40 f2       	brcs	.-112    	; 0x1c0 <__trampolines_end+0x1c>
     230:	ba a5       	ldd	r27, Y+42	; 0x2a
     232:	6f a5       	ldd	r22, Y+47	; 0x2f
     234:	f4 90       	lpm	r15, Z
     236:	05 5a       	subi	r16, 0xA5	; 165
     238:	2a f7       	brpl	.-54     	; 0x204 <__trampolines_end+0x60>
     23a:	5c 93       	st	X, r21
     23c:	6b 6c       	ori	r22, 0xCB	; 203
     23e:	f9 67       	ori	r31, 0x79	; 121
     240:	6d c1       	rjmp	.+730    	; 0x51c <__do_global_ctors+0x1e>
     242:	1b fc       	.word	0xfc1b	; ????
     244:	e0 e4       	ldi	r30, 0x40	; 64
     246:	0d 47       	sbci	r16, 0x7D	; 125
     248:	fe f5       	brtc	.+126    	; 0x2c8 <_ZL11dscrc_table+0x2a>
     24a:	20 e6       	ldi	r18, 0x60	; 96
     24c:	b5 00       	.word	0x00b5	; ????
     24e:	d0 ed       	ldi	r29, 0xD0	; 208
     250:	90 2e       	mov	r9, r16
     252:	03 00       	.word	0x0003	; ????
     254:	94 35       	cpi	r25, 0x54	; 84
     256:	77 05       	cpc	r23, r7
     258:	00 80       	ld	r0, Z
     25a:	84 1e       	adc	r8, r20
     25c:	08 00       	.word	0x0008	; ????
     25e:	00 20       	and	r0, r0
     260:	4e 0a       	sbc	r4, r30
     262:	00 00       	nop
     264:	00 c8       	rjmp	.-4096   	; 0xfffff266 <__eeprom_end+0xff7ef266>
     266:	0c 33       	cpi	r16, 0x3C	; 60
     268:	33 33       	cpi	r19, 0x33	; 51
     26a:	33 0f       	add	r19, r19
     26c:	98 6e       	ori	r25, 0xE8	; 232
     26e:	12 83       	std	Z+2, r17	; 0x02
     270:	11 41       	sbci	r17, 0x11	; 17
     272:	ef 8d       	ldd	r30, Y+31	; 0x1f
     274:	21 14       	cp	r2, r1
     276:	89 3b       	cpi	r24, 0xB9	; 185
     278:	e6 55       	subi	r30, 0x56	; 86
     27a:	16 cf       	rjmp	.-468    	; 0xa8 <__SREG__+0x69>
     27c:	fe e6       	ldi	r31, 0x6E	; 110
     27e:	db 18       	sub	r13, r11
     280:	d1 84       	ldd	r13, Z+9	; 0x09
     282:	4b 38       	cpi	r20, 0x8B	; 139
     284:	1b f7       	brvc	.-58     	; 0x24c <__trampolines_end+0xa8>
     286:	7c 1d       	adc	r23, r12
     288:	90 1d       	adc	r25, r0
     28a:	a4 bb       	out	0x14, r26	; 20
     28c:	e4 24       	eor	r14, r4
     28e:	20 32       	cpi	r18, 0x20	; 32
     290:	84 72       	andi	r24, 0x24	; 36
     292:	5e 22       	and	r5, r30
     294:	81 00       	.word	0x0081	; ????
     296:	c9 f1       	breq	.+114    	; 0x30a <_ZL11dscrc_table+0x6c>
     298:	24 ec       	ldi	r18, 0xC4	; 196
     29a:	a1 e5       	ldi	r26, 0x51	; 81
     29c:	3d 27       	eor	r19, r29

0000029e <_ZL11dscrc_table>:
     29e:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
     2ae:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
     2be:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
     2ce:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     2de:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     2ee:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     2fe:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     30e:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     31e:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     32e:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     33e:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     34e:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     35e:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     36e:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     37e:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     38e:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

0000039e <digital_pin_to_timer_PGM>:
     39e:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     3ca:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000003e4 <digital_pin_to_bit_mask_PGM>:
     3e4:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     3f4:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     404:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     414:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     424:	04 08 10 20 40 80                                   ... @.

0000042a <digital_pin_to_port_PGM>:
     42a:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     43a:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     44a:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     45a:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     46a:	0b 0b 0b 0b 0b 0b                                   ......

00000470 <port_to_input_PGM>:
     470:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     480:	00 01 00 00 03 01 06 01 09 01                       ..........

0000048a <port_to_output_PGM>:
     48a:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     49a:	02 01 00 00 05 01 08 01 0b 01                       ..........

000004a4 <port_to_mode_PGM>:
     4a4:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     4b4:	01 01 00 00 04 01 07 01 0a 01                       ..........

000004be <__ctors_start>:
     4be:	bd 13       	cpse	r27, r29
     4c0:	76 33       	cpi	r23, 0x36	; 54

000004c2 <__ctors_end>:
     4c2:	c1 13       	cpse	r28, r17

000004c4 <__dtors_end>:
     4c4:	11 24       	eor	r1, r1
     4c6:	1f be       	out	0x3f, r1	; 63
     4c8:	cf ef       	ldi	r28, 0xFF	; 255
     4ca:	d1 e2       	ldi	r29, 0x21	; 33
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	cd bf       	out	0x3d, r28	; 61
     4d0:	00 e0       	ldi	r16, 0x00	; 0
     4d2:	0c bf       	out	0x3c, r16	; 60

000004d4 <__do_copy_data>:
     4d4:	1a e0       	ldi	r17, 0x0A	; 10
     4d6:	a0 e0       	ldi	r26, 0x00	; 0
     4d8:	b2 e0       	ldi	r27, 0x02	; 2
     4da:	ee e2       	ldi	r30, 0x2E	; 46
     4dc:	ff e7       	ldi	r31, 0x7F	; 127
     4de:	00 e0       	ldi	r16, 0x00	; 0
     4e0:	0b bf       	out	0x3b, r16	; 59
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <__do_copy_data+0x14>
     4e4:	07 90       	elpm	r0, Z+
     4e6:	0d 92       	st	X+, r0
     4e8:	aa 34       	cpi	r26, 0x4A	; 74
     4ea:	b1 07       	cpc	r27, r17
     4ec:	d9 f7       	brne	.-10     	; 0x4e4 <__do_copy_data+0x10>

000004ee <__do_clear_bss>:
     4ee:	2a e0       	ldi	r18, 0x0A	; 10
     4f0:	aa e4       	ldi	r26, 0x4A	; 74
     4f2:	ba e0       	ldi	r27, 0x0A	; 10
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <.do_clear_bss_start>

000004f6 <.do_clear_bss_loop>:
     4f6:	1d 92       	st	X+, r1

000004f8 <.do_clear_bss_start>:
     4f8:	af 3f       	cpi	r26, 0xFF	; 255
     4fa:	b2 07       	cpc	r27, r18
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <.do_clear_bss_loop>

000004fe <__do_global_ctors>:
     4fe:	12 e0       	ldi	r17, 0x02	; 2
     500:	c1 e6       	ldi	r28, 0x61	; 97
     502:	d2 e0       	ldi	r29, 0x02	; 2
     504:	00 e0       	ldi	r16, 0x00	; 0
     506:	06 c0       	rjmp	.+12     	; 0x514 <__do_global_ctors+0x16>
     508:	21 97       	sbiw	r28, 0x01	; 1
     50a:	01 09       	sbc	r16, r1
     50c:	80 2f       	mov	r24, r16
     50e:	fe 01       	movw	r30, r28
     510:	0e 94 93 3a 	call	0x7526	; 0x7526 <__tablejump2__>
     514:	cf 35       	cpi	r28, 0x5F	; 95
     516:	d1 07       	cpc	r29, r17
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	08 07       	cpc	r16, r24
     51c:	a9 f7       	brne	.-22     	; 0x508 <__do_global_ctors+0xa>
     51e:	0e 94 a4 33 	call	0x6748	; 0x6748 <main>
     522:	0c 94 86 3f 	jmp	0x7f0c	; 0x7f0c <__do_global_dtors>

00000526 <__bad_interrupt>:
     526:	6c cd       	rjmp	.-1320   	; 0x0 <__vectors>

00000528 <_ZN21ATMegaApplicationBase10InitialiseEv>:
//	Initialise system
//
bool ATMegaApplicationBase::Initialise()
{
	return true;
}
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	08 95       	ret

0000052c <_ZN21ATMegaApplicationBaseC1Ev>:
//#include "System.h"

//
//	Default constructor
//
ATMegaApplicationBase::ATMegaApplicationBase()
     52c:	22 e2       	ldi	r18, 0x22	; 34
     52e:	32 e0       	ldi	r19, 0x02	; 2
     530:	fc 01       	movw	r30, r24
     532:	31 83       	std	Z+1, r19	; 0x01
     534:	20 83       	st	Z, r18
{
	m_pTheSystem = NULL;
     536:	13 82       	std	Z+3, r1	; 0x03
     538:	12 82       	std	Z+2, r1	; 0x02
     53a:	08 95       	ret

0000053c <_ZN21ATMegaApplicationBaseD1Ev>:
}

//
//	Default destructor
//
ATMegaApplicationBase::~ATMegaApplicationBase()
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	22 e2       	ldi	r18, 0x22	; 34
     542:	32 e0       	ldi	r19, 0x02	; 2
     544:	fc 01       	movw	r30, r24
     546:	31 83       	std	Z+1, r19	; 0x01
     548:	20 83       	st	Z, r18
{
	delete m_pTheSystem;
     54a:	c2 81       	ldd	r28, Z+2	; 0x02
     54c:	d3 81       	ldd	r29, Z+3	; 0x03
     54e:	20 97       	sbiw	r28, 0x00	; 0
     550:	41 f0       	breq	.+16     	; 0x562 <_ZN21ATMegaApplicationBaseD1Ev+0x26>
     552:	ce 01       	movw	r24, r28
     554:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <_ZN6SystemD1Ev>
     558:	ce 01       	movw	r24, r28
}
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
//
//	Default destructor
//
ATMegaApplicationBase::~ATMegaApplicationBase()
{
	delete m_pTheSystem;
     55e:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <_ZdlPv>
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	08 95       	ret

00000568 <_ZN21ATMegaApplicationBase9GetSystemEv>:

System *ATMegaApplicationBase::GetSystem()
{
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	ec 01       	movw	r28, r24
	if( m_pTheSystem == NULL )
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	9b 81       	ldd	r25, Y+3	; 0x03
     576:	89 2b       	or	r24, r25
     578:	49 f4       	brne	.+18     	; 0x58c <_ZN21ATMegaApplicationBase9GetSystemEv+0x24>
	{
		m_pTheSystem = new System();
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
     582:	8c 01       	movw	r16, r24
     584:	0e 94 15 1f 	call	0x3e2a	; 0x3e2a <_ZN6SystemC1Ev>
     588:	1b 83       	std	Y+3, r17	; 0x03
     58a:	0a 83       	std	Y+2, r16	; 0x02
	}
	
	return m_pTheSystem;
}
     58c:	8a 81       	ldd	r24, Y+2	; 0x02
     58e:	9b 81       	ldd	r25, Y+3	; 0x03
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	08 95       	ret

0000059a <_ZN11BagConveyorC1EP10TeaMachine>:
} //BagConveyor

//
//	Default destructor
//
BagConveyor::~BagConveyor()
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
     5a0:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
     5a4:	8a e2       	ldi	r24, 0x2A	; 42
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	99 83       	std	Y+1, r25	; 0x01
     5aa:	88 83       	st	Y, r24
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <_ZN11BagConveyor12BeginAdvanceEv>:
//	BeginAdvance
//
//	Advance the conveyor
//
bool BagConveyor::BeginAdvance()
{
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_BAGCON_ADVANCE);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	8c 81       	ldd	r24, Y+4	; 0x04
     5be:	9d 81       	ldd	r25, Y+5	; 0x05
     5c0:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	delay(500);
     5c4:	64 ef       	ldi	r22, 0xF4	; 244
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
	m_pSystem->ClearOutputRegisterBit(OUTREG_BAGCON_ADVANCE);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	8c 81       	ldd	r24, Y+4	; 0x04
     5d6:	9d 81       	ldd	r25, Y+5	; 0x05
     5d8:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	
	return true;
}
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <_ZN11BagConveyor4TestEv>:
//
//	Perform hardware tests
//
bool BagConveyor::Test()
{
	BeginAdvance();
     5e4:	e6 df       	rcall	.-52     	; 0x5b2 <_ZN11BagConveyor12BeginAdvanceEv>
     5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <_ZN11BagConveyor4TestEv+0x2>

000005e8 <_ZN11BagConveyor12IsStationaryEv>:
//
//	Returns true if the conveyor motor has stopped
//
bool BagConveyor::IsStationary()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
     5e8:	fc 01       	movw	r30, r24
     5ea:	84 81       	ldd	r24, Z+4	; 0x04
     5ec:	95 81       	ldd	r25, Z+5	; 0x05
     5ee:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>

	return ((wInputRegister & INREGMASK_BAGCON_STATIONARY) != 0);
     5f2:	26 e0       	ldi	r18, 0x06	; 6
     5f4:	96 95       	lsr	r25
     5f6:	87 95       	ror	r24
     5f8:	2a 95       	dec	r18
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <_ZN11BagConveyor12IsStationaryEv+0xc>
}
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	08 95       	ret

00000600 <_ZN11BagConveyor4StopEv>:
//	Stop
//
//	Stop the conveyor
//
void BagConveyor::Stop()
{
     600:	08 95       	ret

00000602 <_ZN6Boiler10InitialiseEv>:
//
Boiler::Boiler()
{
	m_pOneWire = NULL;
	m_pSensors = NULL;
} //Masher
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	8c 01       	movw	r16, r24
     60c:	8e e0       	ldi	r24, 0x0E	; 14
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
     614:	ec 01       	movw	r28, r24
     616:	68 e0       	ldi	r22, 0x08	; 8
     618:	0e 94 b5 19 	call	0x336a	; 0x336a <_ZN7OneWireC1Eh>
     61c:	f8 01       	movw	r30, r16
     61e:	d7 83       	std	Z+7, r29	; 0x07
     620:	c6 83       	std	Z+6, r28	; 0x06
     622:	83 e1       	ldi	r24, 0x13	; 19
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
     62a:	ec 01       	movw	r28, r24
     62c:	f8 01       	movw	r30, r16
     62e:	66 81       	ldd	r22, Z+6	; 0x06
     630:	77 81       	ldd	r23, Z+7	; 0x07
     632:	0e 94 46 0c 	call	0x188c	; 0x188c <_ZN17DallasTemperatureC1EP7OneWire>
     636:	f8 01       	movw	r30, r16
     638:	d1 87       	std	Z+9, r29	; 0x09
     63a:	c0 87       	std	Z+8, r28	; 0x08
     63c:	ce 01       	movw	r24, r28
     63e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN17DallasTemperature5beginEv>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	1f 91       	pop	r17
     64a:	0f 91       	pop	r16
     64c:	08 95       	ret

0000064e <_ZN6BoilerC1EP10TeaMachine>:

//
//	Default constructor
//
Boiler::Boiler(TeaMachine *pTeaMachine) : TeaMachineComponent( pTeaMachine )
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ec 01       	movw	r28, r24
     654:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
     658:	8a e4       	ldi	r24, 0x4A	; 74
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	99 83       	std	Y+1, r25	; 0x01
     65e:	88 83       	st	Y, r24
{
	m_pOneWire = NULL;
     660:	1f 82       	std	Y+7, r1	; 0x07
     662:	1e 82       	std	Y+6, r1	; 0x06
	m_pSensors = NULL;
     664:	19 86       	std	Y+9, r1	; 0x09
     666:	18 86       	std	Y+8, r1	; 0x08
} //Boiler
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <_ZN6BoilerD1Ev>:

//
//	Default destructor
//
Boiler::~Boiler()
     66e:	2a e4       	ldi	r18, 0x4A	; 74
     670:	32 e0       	ldi	r19, 0x02	; 2
     672:	fc 01       	movw	r30, r24
     674:	31 83       	std	Z+1, r19	; 0x01
     676:	20 83       	st	Z, r18
     678:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <_ZN19TeaMachineComponentD1Ev>

0000067c <_ZN6Boiler18MonitorTemperatureEv>:
		
	return true;	
}

void Boiler::MonitorTemperature()
{
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
		// call sensors.requestTemperatures() to issue a global temperature
		// request to all devices on the bus
		//Serial.print(" Requesting boiler temperature...");
		//		  sensors.requestTemperatures(); // Send the command to get temperatures
		m_pSensors->requestTemperatures(); // Send the command to get temperatures
     682:	88 85       	ldd	r24, Y+8	; 0x08
     684:	99 85       	ldd	r25, Y+9	; 0x09
     686:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN17DallasTemperature19requestTemperaturesEv>
		//Serial.println("DONE");

		Serial.print("Boiler temperature is: ");
     68a:	6e e2       	ldi	r22, 0x2E	; 46
     68c:	72 e0       	ldi	r23, 0x02	; 2
     68e:	85 e5       	ldi	r24, 0x55	; 85
     690:	9a e0       	ldi	r25, 0x0A	; 10
     692:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
		//		  Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"?
		Serial.print(m_pSensors->getTempCByIndex(0)); // Why "byIndex"?
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	88 85       	ldd	r24, Y+8	; 0x08
     69a:	99 85       	ldd	r25, Y+9	; 0x09
     69c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <_ZN17DallasTemperature15getTempCByIndexEh>
     6a0:	ab 01       	movw	r20, r22
     6a2:	bc 01       	movw	r22, r24
     6a4:	22 e0       	ldi	r18, 0x02	; 2
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	85 e5       	ldi	r24, 0x55	; 85
     6aa:	9a e0       	ldi	r25, 0x0A	; 10
     6ac:	0e 94 ab 35 	call	0x6b56	; 0x6b56 <_ZN5Print5printEdi>
        Serial.print("\n");
     6b0:	6a e3       	ldi	r22, 0x3A	; 58
     6b2:	7a e0       	ldi	r23, 0x0A	; 10
     6b4:	85 e5       	ldi	r24, 0x55	; 85
     6b6:	9a e0       	ldi	r25, 0x0A	; 10
		// You can have more than one IC on the same bus.
		// 0 refers to the first IC on the wire
		//delay(1000);
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
		//Serial.println("DONE");

		Serial.print("Boiler temperature is: ");
		//		  Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"?
		Serial.print(m_pSensors->getTempCByIndex(0)); // Why "byIndex"?
        Serial.print("\n");
     6bc:	0c 94 ff 33 	jmp	0x67fe	; 0x67fe <_ZN5Print5printEPKc>

000006c0 <_ZN6Boiler12EnableHeaterEb>:
	
	return true;
}

bool Boiler::EnableHeater(bool bSwitchOn)
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
     6c6:	8c 81       	ldd	r24, Y+4	; 0x04
     6c8:	9d 81       	ldd	r25, Y+5	; 0x05
	if( bSwitchOn )
     6ca:	66 23       	and	r22, r22
     6cc:	39 f0       	breq	.+14     	; 0x6dc <_ZN6Boiler12EnableHeaterEb+0x1c>
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_BOILERCTRL);	
     6ce:	61 e0       	ldi	r22, 0x01	; 1
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
		MonitorTemperature();	
     6d6:	ce 01       	movw	r24, r28
     6d8:	d1 df       	rcall	.-94     	; 0x67c <_ZN6Boiler18MonitorTemperatureEv>
     6da:	04 c0       	rjmp	.+8      	; 0x6e4 <_ZN6Boiler12EnableHeaterEb+0x24>
	}
	else
	{
		m_pSystem->ClearOutputRegisterBit(OUTREG_BOILERCTRL);
     6dc:	61 e0       	ldi	r22, 0x01	; 1
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	}
		
	return true;	
}
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <_ZN6Boiler4TestEv>:
    m_pSensors->requestTemperatures();
	return m_pSensors->getTempCByIndex(0);
}

bool Boiler::Test()
{   
     6ec:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch action switch setting
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
     6ee:	8c 81       	ldd	r24, Y+4	; 0x04
     6f0:	9d 81       	ldd	r25, Y+5	; 0x05
     6f2:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     6f6:	93 ff       	sbrs	r25, 3
     6f8:	0f c0       	rjmp	.+30     	; 0x718 <_ZN6Boiler4TestEv+0x2c>

bool Boiler::EnableHeater(bool bSwitchOn)
{
	if( bSwitchOn )
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_BOILERCTRL);	
     6fa:	61 e0       	ldi	r22, 0x01	; 1
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	8c 81       	ldd	r24, Y+4	; 0x04
     700:	9d 81       	ldd	r25, Y+5	; 0x05
     702:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
		MonitorTemperature();	
     706:	ce 01       	movw	r24, r28
     708:	b9 df       	rcall	.-142    	; 0x67c <_ZN6Boiler18MonitorTemperatureEv>
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
		{
			// Switch boiler on
			EnableHeater(true);
				
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
     70a:	8c 81       	ldd	r24, Y+4	; 0x04
     70c:	9d 81       	ldd	r25, Y+5	; 0x05
     70e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     712:	93 fd       	sbrc	r25, 3
     714:	fa cf       	rjmp	.-12     	; 0x70a <_ZN6Boiler4TestEv+0x1e>
     716:	eb cf       	rjmp	.-42     	; 0x6ee <_ZN6Boiler4TestEv+0x2>
		}
		else
		{
			// Switch boiler off
			EnableHeater(false);
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	ce 01       	movw	r24, r28
     71c:	d1 df       	rcall	.-94     	; 0x6c0 <_ZN6Boiler12EnableHeaterEb>
						
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
     71e:	8c 81       	ldd	r24, Y+4	; 0x04
     720:	9d 81       	ldd	r25, Y+5	; 0x05
     722:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     726:	93 ff       	sbrs	r25, 3
     728:	fa cf       	rjmp	.-12     	; 0x71e <_ZN6Boiler4TestEv+0x32>
     72a:	e1 cf       	rjmp	.-62     	; 0x6ee <_ZN6Boiler4TestEv+0x2>

0000072c <_ZN6Boiler15EnableExitValveEb>:
		// 0 refers to the first IC on the wire
		//delay(1000);
}

bool Boiler::EnableExitValve(bool bOpen)
{
     72c:	fc 01       	movw	r30, r24
     72e:	84 81       	ldd	r24, Z+4	; 0x04
     730:	95 81       	ldd	r25, Z+5	; 0x05
	if( bOpen )
     732:	66 23       	and	r22, r22
     734:	29 f0       	breq	.+10     	; 0x740 <_ZN6Boiler15EnableExitValveEb+0x14>
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_VALVECTRL);
     736:	62 e0       	ldi	r22, 0x02	; 2
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
     73e:	04 c0       	rjmp	.+8      	; 0x748 <_ZN6Boiler15EnableExitValveEb+0x1c>
	}
	else
	{
		m_pSystem->ClearOutputRegisterBit(OUTREG_VALVECTRL);
     740:	62 e0       	ldi	r22, 0x02	; 2
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	}
	
	return true;
}
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	08 95       	ret

0000074c <_ZN6Boiler19GetWaterTemperatureEv>:

float Boiler::GetWaterTemperature()
{
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
    m_pSensors->requestTemperatures();
     752:	88 85       	ldd	r24, Y+8	; 0x08
     754:	99 85       	ldd	r25, Y+9	; 0x09
     756:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_ZN17DallasTemperature19requestTemperaturesEv>
	return m_pSensors->getTempCByIndex(0);
     75a:	60 e0       	ldi	r22, 0x00	; 0
     75c:	88 85       	ldd	r24, Y+8	; 0x08
     75e:	99 85       	ldd	r25, Y+9	; 0x09
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
}

float Boiler::GetWaterTemperature()
{
    m_pSensors->requestTemperatures();
	return m_pSensors->getTempCByIndex(0);
     764:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <_ZN17DallasTemperature15getTempCByIndexEh>

00000768 <_ZN6Boiler13TestExitValveEv>:
	
	return true;
}

bool Boiler::TestExitValve()
{
     768:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch action switch setting
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
     76a:	8c 81       	ldd	r24, Y+4	; 0x04
     76c:	9d 81       	ldd	r25, Y+5	; 0x05
     76e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     772:	93 ff       	sbrs	r25, 3
     774:	0d c0       	rjmp	.+26     	; 0x790 <_ZN6Boiler13TestExitValveEv+0x28>

bool Boiler::EnableExitValve(bool bOpen)
{
	if( bOpen )
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_VALVECTRL);
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	8c 81       	ldd	r24, Y+4	; 0x04
     77c:	9d 81       	ldd	r25, Y+5	; 0x05
     77e:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
		{
			// Open valve
			EnableExitValve(true);
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	9d 81       	ldd	r25, Y+5	; 0x05
     786:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     78a:	93 fd       	sbrc	r25, 3
     78c:	fa cf       	rjmp	.-12     	; 0x782 <_ZN6Boiler13TestExitValveEv+0x1a>
     78e:	ed cf       	rjmp	.-38     	; 0x76a <_ZN6Boiler13TestExitValveEv+0x2>
		}
		else
		{
			// Close valve
			EnableExitValve(false);
     790:	60 e0       	ldi	r22, 0x00	; 0
     792:	ce 01       	movw	r24, r28
     794:	cb df       	rcall	.-106    	; 0x72c <_ZN6Boiler15EnableExitValveEb>
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
     796:	8c 81       	ldd	r24, Y+4	; 0x04
     798:	9d 81       	ldd	r25, Y+5	; 0x05
     79a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     79e:	93 ff       	sbrs	r25, 3
     7a0:	fa cf       	rjmp	.-12     	; 0x796 <_ZN6Boiler13TestExitValveEv+0x2e>
     7a2:	e3 cf       	rjmp	.-58     	; 0x76a <_ZN6Boiler13TestExitValveEv+0x2>

000007a4 <_ZN11BrewManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     7a4:	fc 01       	movw	r30, r24
     7a6:	13 a2       	std	Z+35, r1	; 0x23
     7a8:	10 8e       	std	Z+24, r1	; 0x18
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	08 95       	ret

000007ae <_ZN11BrewManager12BeginProcessEv>:
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	2c 97       	sbiw	r28, 0x0c	; 12
     7bc:	0f b6       	in	r0, 0x3f	; 63
     7be:	f8 94       	cli
     7c0:	de bf       	out	0x3e, r29	; 62
     7c2:	0f be       	out	0x3f, r0	; 63
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	8c 01       	movw	r16, r24
     7c8:	dc 01       	movw	r26, r24
     7ca:	59 96       	adiw	r26, 0x19	; 25
     7cc:	8d 91       	ld	r24, X+
     7ce:	9c 91       	ld	r25, X
     7d0:	5a 97       	sbiw	r26, 0x1a	; 26
     7d2:	bc df       	rcall	.-136    	; 0x74c <_ZN6Boiler19GetWaterTemperatureEv>
     7d4:	f8 01       	movw	r30, r16
     7d6:	64 ab       	std	Z+52, r22	; 0x34
     7d8:	75 ab       	std	Z+53, r23	; 0x35
     7da:	86 ab       	std	Z+54, r24	; 0x36
     7dc:	97 ab       	std	Z+55, r25	; 0x37
     7de:	10 a6       	std	Z+40, r1	; 0x28
     7e0:	11 a6       	std	Z+41, r1	; 0x29
     7e2:	12 a6       	std	Z+42, r1	; 0x2a
     7e4:	13 a6       	std	Z+43, r1	; 0x2b
     7e6:	06 80       	ldd	r0, Z+6	; 0x06
     7e8:	f7 81       	ldd	r31, Z+7	; 0x07
     7ea:	e0 2d       	mov	r30, r0
     7ec:	83 85       	ldd	r24, Z+11	; 0x0b
     7ee:	94 85       	ldd	r25, Z+12	; 0x0c
     7f0:	88 0f       	add	r24, r24
     7f2:	99 1f       	adc	r25, r25
     7f4:	09 2e       	mov	r0, r25
     7f6:	00 0c       	add	r0, r0
     7f8:	aa 0b       	sbc	r26, r26
     7fa:	bb 0b       	sbc	r27, r27
     7fc:	f8 01       	movw	r30, r16
     7fe:	84 a7       	std	Z+44, r24	; 0x2c
     800:	95 a7       	std	Z+45, r25	; 0x2d
     802:	a6 a7       	std	Z+46, r26	; 0x2e
     804:	b7 a7       	std	Z+47, r27	; 0x2f
     806:	10 aa       	std	Z+48, r1	; 0x30
     808:	11 aa       	std	Z+49, r1	; 0x31
     80a:	12 aa       	std	Z+50, r1	; 0x32
     80c:	13 aa       	std	Z+51, r1	; 0x33
     80e:	6e e4       	ldi	r22, 0x4E	; 78
     810:	72 e0       	ldi	r23, 0x02	; 2
     812:	ce 01       	movw	r24, r28
     814:	07 96       	adiw	r24, 0x07	; 7
     816:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     81a:	f8 01       	movw	r30, r16
     81c:	44 a5       	ldd	r20, Z+44	; 0x2c
     81e:	55 a5       	ldd	r21, Z+45	; 0x2d
     820:	66 a5       	ldd	r22, Z+46	; 0x2e
     822:	77 a5       	ldd	r23, Z+47	; 0x2f
     824:	ce 01       	movw	r24, r28
     826:	07 96       	adiw	r24, 0x07	; 7
     828:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <_ZN6String6concatEl>
     82c:	6a e3       	ldi	r22, 0x3A	; 58
     82e:	7a e0       	ldi	r23, 0x0A	; 10
     830:	ce 01       	movw	r24, r28
     832:	07 96       	adiw	r24, 0x07	; 7
     834:	0e 94 ae 38 	call	0x715c	; 0x715c <_ZN6String6concatEPKc>
     838:	be 01       	movw	r22, r28
     83a:	69 5f       	subi	r22, 0xF9	; 249
     83c:	7f 4f       	sbci	r23, 0xFF	; 255
     83e:	ce 01       	movw	r24, r28
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
     846:	be 01       	movw	r22, r28
     848:	6f 5f       	subi	r22, 0xFF	; 255
     84a:	7f 4f       	sbci	r23, 0xFF	; 255
     84c:	c8 01       	movw	r24, r16
     84e:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     852:	ce 01       	movw	r24, r28
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	d8 01       	movw	r26, r16
     85e:	93 96       	adiw	r26, 0x23	; 35
     860:	8c 93       	st	X, r24
     862:	93 97       	sbiw	r26, 0x23	; 35
     864:	58 96       	adiw	r26, 0x18	; 24
     866:	1c 92       	st	X, r1
     868:	ce 01       	movw	r24, r28
     86a:	07 96       	adiw	r24, 0x07	; 7
     86c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	2c 96       	adiw	r28, 0x0c	; 12
     874:	0f b6       	in	r0, 0x3f	; 63
     876:	f8 94       	cli
     878:	de bf       	out	0x3e, r29	; 62
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	cd bf       	out	0x3d, r28	; 61
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <_ZN11BrewManager4StopEv>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	ec 01       	movw	r28, r24
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	89 8d       	ldd	r24, Y+25	; 0x19
     892:	9a 8d       	ldd	r25, Y+26	; 0x1a
     894:	15 df       	rcall	.-470    	; 0x6c0 <_ZN6Boiler12EnableHeaterEb>
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	89 8d       	ldd	r24, Y+25	; 0x19
     89a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     89c:	47 df       	rcall	.-370    	; 0x72c <_ZN6Boiler15EnableExitValveEb>
     89e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8a0:	98 a1       	ldd	r25, Y+32	; 0x20
     8a2:	0e 94 89 13 	call	0x2712	; 0x2712 <_ZN9Extractor4StopEv>
     8a6:	89 a1       	ldd	r24, Y+33	; 0x21
     8a8:	9a a1       	ldd	r25, Y+34	; 0x22
     8aa:	0e 94 0c 14 	call	0x2818	; 0x2818 <_ZN6Masher4StopEv>
     8ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8b2:	a6 de       	rcall	.-692    	; 0x600 <_ZN11BagConveyor4StopEv>
     8b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	81 c7       	rjmp	.+3842   	; 0x17c0 <_ZN13CupLevelProbe4StopEv>

000008be <_ZN11BrewManager4TestEv>:
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	63 97       	sbiw	r28, 0x13	; 19
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	8c 01       	movw	r16, r24
     8de:	ce 01       	movw	r24, r28
     8e0:	01 96       	adiw	r24, 0x01	; 1
     8e2:	6c 01       	movw	r12, r24
     8e4:	0e 94 30 13 	call	0x2660	; 0x2660 <_ZN5DrinkC1Ev>
     8e8:	d8 01       	movw	r26, r16
     8ea:	17 96       	adiw	r26, 0x07	; 7
     8ec:	dc 92       	st	X, r13
     8ee:	ce 92       	st	-X, r12
     8f0:	16 97       	sbiw	r26, 0x06	; 6
     8f2:	f8 01       	movw	r30, r16
     8f4:	82 81       	ldd	r24, Z+2	; 0x02
     8f6:	93 81       	ldd	r25, Z+3	; 0x03
     8f8:	37 de       	rcall	.-914    	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
     8fa:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
     8fe:	93 ff       	sbrs	r25, 3
     900:	f8 cf       	rjmp	.-16     	; 0x8f2 <_ZN11BrewManager4TestEv+0x34>
     902:	d8 01       	movw	r26, r16
     904:	ed 91       	ld	r30, X+
     906:	fc 91       	ld	r31, X
     908:	02 80       	ldd	r0, Z+2	; 0x02
     90a:	f3 81       	ldd	r31, Z+3	; 0x03
     90c:	e0 2d       	mov	r30, r0
     90e:	c8 01       	movw	r24, r16
     910:	19 95       	eicall
     912:	f8 2e       	mov	r15, r24
     914:	81 11       	cpse	r24, r1
     916:	07 c0       	rjmp	.+14     	; 0x926 <_ZN11BrewManager4TestEv+0x68>
     918:	d8 01       	movw	r26, r16
     91a:	ed 91       	ld	r30, X+
     91c:	fc 91       	ld	r31, X
     91e:	04 80       	ldd	r0, Z+4	; 0x04
     920:	f5 81       	ldd	r31, Z+5	; 0x05
     922:	e0 2d       	mov	r30, r0
     924:	f4 cf       	rjmp	.-24     	; 0x90e <_ZN11BrewManager4TestEv+0x50>
     926:	c6 01       	movw	r24, r12
     928:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5DrinkD1Ev>
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	b2 e0       	ldi	r27, 0x02	; 2
     930:	fb 12       	cpse	r15, r27
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	63 96       	adiw	r28, 0x13	; 19
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	df 91       	pop	r29
     942:	cf 91       	pop	r28
     944:	1f 91       	pop	r17
     946:	0f 91       	pop	r16
     948:	ff 90       	pop	r15
     94a:	df 90       	pop	r13
     94c:	cf 90       	pop	r12
     94e:	08 95       	ret

00000950 <_ZN11BrewManager12ClearMembersEv>:
     950:	fc 01       	movw	r30, r24
     952:	12 8e       	std	Z+26, r1	; 0x1a
     954:	11 8e       	std	Z+25, r1	; 0x19
     956:	14 8e       	std	Z+28, r1	; 0x1c
     958:	13 8e       	std	Z+27, r1	; 0x1b
     95a:	16 8e       	std	Z+30, r1	; 0x1e
     95c:	15 8e       	std	Z+29, r1	; 0x1d
     95e:	10 a2       	std	Z+32, r1	; 0x20
     960:	17 8e       	std	Z+31, r1	; 0x1f
     962:	12 a2       	std	Z+34, r1	; 0x22
     964:	11 a2       	std	Z+33, r1	; 0x21
     966:	13 a2       	std	Z+35, r1	; 0x23
     968:	10 a6       	std	Z+40, r1	; 0x28
     96a:	11 a6       	std	Z+41, r1	; 0x29
     96c:	12 a6       	std	Z+42, r1	; 0x2a
     96e:	13 a6       	std	Z+43, r1	; 0x2b
     970:	14 a6       	std	Z+44, r1	; 0x2c
     972:	15 a6       	std	Z+45, r1	; 0x2d
     974:	16 a6       	std	Z+46, r1	; 0x2e
     976:	17 a6       	std	Z+47, r1	; 0x2f
     978:	14 a2       	std	Z+36, r1	; 0x24
     97a:	15 a2       	std	Z+37, r1	; 0x25
     97c:	16 a2       	std	Z+38, r1	; 0x26
     97e:	17 a2       	std	Z+39, r1	; 0x27
     980:	14 aa       	std	Z+52, r1	; 0x34
     982:	15 aa       	std	Z+53, r1	; 0x35
     984:	16 aa       	std	Z+54, r1	; 0x36
     986:	17 aa       	std	Z+55, r1	; 0x37
     988:	10 aa       	std	Z+48, r1	; 0x30
     98a:	11 aa       	std	Z+49, r1	; 0x31
     98c:	12 aa       	std	Z+50, r1	; 0x32
     98e:	13 aa       	std	Z+51, r1	; 0x33
     990:	10 ae       	std	Z+56, r1	; 0x38
     992:	08 95       	ret

00000994 <_ZN11BrewManagerC1EP20TeaMachineController>:
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	ec 01       	movw	r28, r24
     99a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
     99e:	83 e1       	ldi	r24, 0x13	; 19
     9a0:	94 e0       	ldi	r25, 0x04	; 4
     9a2:	99 83       	std	Y+1, r25	; 0x01
     9a4:	88 83       	st	Y, r24
     9a6:	ce 01       	movw	r24, r28
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	d1 cf       	rjmp	.-94     	; 0x950 <_ZN11BrewManager12ClearMembersEv>

000009ae <_ZN11BrewManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse BrewManager::AdvanceStateMachine()
{
     9ae:	8f 92       	push	r8
     9b0:	9f 92       	push	r9
     9b2:	af 92       	push	r10
     9b4:	bf 92       	push	r11
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	2c 97       	sbiw	r28, 0x0c	; 12
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
     9d2:	dc 01       	movw	r26, r24
     9d4:	93 96       	adiw	r26, 0x23	; 35
     9d6:	4c 91       	ld	r20, X
     9d8:	93 97       	sbiw	r26, 0x23	; 35
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	4e 30       	cpi	r20, 0x0E	; 14
     9de:	51 05       	cpc	r21, r1
     9e0:	08 f0       	brcs	.+2      	; 0x9e4 <_ZN11BrewManager19AdvanceStateMachineEv+0x36>
     9e2:	94 c3       	rjmp	.+1832   	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
     9e4:	7c 01       	movw	r14, r24
     9e6:	fa 01       	movw	r30, r20
     9e8:	88 27       	eor	r24, r24
     9ea:	ee 58       	subi	r30, 0x8E	; 142
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	8f 4f       	sbci	r24, 0xFF	; 255
     9f0:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__tablejump2__>
    {
        // Reset step 1: Raise extractor and cup level probe, switch off boiler and close exit vale
        case BrewResetRaiseMasher:
            LogProcessEvent("State: BrewResetRaiseMasher\n");
     9f4:	60 e6       	ldi	r22, 0x60	; 96
     9f6:	72 e0       	ldi	r23, 0x02	; 2
     9f8:	ce 01       	movw	r24, r28
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     a00:	be 01       	movw	r22, r28
     a02:	6f 5f       	subi	r22, 0xFF	; 255
     a04:	7f 4f       	sbci	r23, 0xFF	; 255
     a06:	c7 01       	movw	r24, r14
     a08:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            m_pCupLevelProbe->Raise();
     a14:	f7 01       	movw	r30, r14
     a16:	85 8d       	ldd	r24, Z+29	; 0x1d
     a18:	96 8d       	ldd	r25, Z+30	; 0x1e
     a1a:	ac d6       	rcall	.+3416   	; 0x1774 <_ZN13CupLevelProbe5RaiseEv>
            m_pBoiler->EnableHeater(false);
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	d7 01       	movw	r26, r14
     a20:	59 96       	adiw	r26, 0x19	; 25
     a22:	8d 91       	ld	r24, X+
     a24:	9c 91       	ld	r25, X
     a26:	5a 97       	sbiw	r26, 0x1a	; 26
     a28:	4b de       	rcall	.-874    	; 0x6c0 <_ZN6Boiler12EnableHeaterEb>
            m_pBoiler->EnableExitValve(false);
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	f7 01       	movw	r30, r14
     a2e:	81 8d       	ldd	r24, Z+25	; 0x19
     a30:	92 8d       	ldd	r25, Z+26	; 0x1a
     a32:	7c de       	rcall	.-776    	; 0x72c <_ZN6Boiler15EnableExitValveEb>
            m_pMasher->Raise();
     a34:	d7 01       	movw	r26, r14
     a36:	91 96       	adiw	r26, 0x21	; 33
     a38:	8d 91       	ld	r24, X+
     a3a:	9c 91       	ld	r25, X
     a3c:	92 97       	sbiw	r26, 0x22	; 34
     a3e:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_ZN6Masher5RaiseEv>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	f7 01       	movw	r30, r14
     a46:	83 a3       	std	Z+35, r24	; 0x23
            m_pBoiler->EnableExitValve(false);
            m_pMasher->Raise();
          
            // Set next state and timeout
            SetNextState(BrewResetRaiseExtractor);
            SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
     a48:	00 e1       	ldi	r16, 0x10	; 16
     a4a:	10 e0       	ldi	r17, 0x00	; 0
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	48 e8       	ldi	r20, 0x88	; 136
     a52:	53 e1       	ldi	r21, 0x13	; 19
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	c7 01       	movw	r24, r14
     a5a:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
     a5e:	56 c3       	rjmp	.+1708   	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            break;
            
        // Reset step 2: If the masher is raised, raise the extractor 
        case BrewResetRaiseExtractor:
            if(m_pMasher->IsRaised())
     a60:	91 96       	adiw	r26, 0x21	; 33
     a62:	8d 91       	ld	r24, X+
     a64:	9c 91       	ld	r25, X
     a66:	92 97       	sbiw	r26, 0x22	; 34
     a68:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN6Masher8IsRaisedEv>
     a6c:	88 23       	and	r24, r24
     a6e:	09 f4       	brne	.+2      	; 0xa72 <_ZN11BrewManager19AdvanceStateMachineEv+0xc4>
     a70:	4d c3       	rjmp	.+1690   	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewResetRaiseExtractor\n");
     a72:	6d e7       	ldi	r22, 0x7D	; 125
     a74:	72 e0       	ldi	r23, 0x02	; 2
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     a7e:	be 01       	movw	r22, r28
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	c7 01       	movw	r24, r14
     a86:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     a8a:	ce 01       	movw	r24, r28
     a8c:	01 96       	adiw	r24, 0x01	; 1
     a8e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
                m_pExtractor->Raise();
     a92:	f7 01       	movw	r30, r14
     a94:	87 8d       	ldd	r24, Z+31	; 0x1f
     a96:	90 a1       	ldd	r25, Z+32	; 0x20
     a98:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN9Extractor5RaiseEv>
                SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
     a9c:	01 e1       	ldi	r16, 0x11	; 17
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	48 ef       	ldi	r20, 0xF8	; 248
     aa6:	5a e2       	ldi	r21, 0x2A	; 42
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	c7 01       	movw	r24, r14
     aae:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	fd c2       	rjmp	.+1530   	; 0x10b0 <_ZN11BrewManager19AdvanceStateMachineEv+0x702>
            }                    
            break;
            
        // Reset step 3: If the extractor is raised, reset is complete
        case BrewResetComplete:
            if(m_pExtractor->IsRaised())
     ab6:	fd 01       	movw	r30, r26
     ab8:	87 8d       	ldd	r24, Z+31	; 0x1f
     aba:	90 a1       	ldd	r25, Z+32	; 0x20
     abc:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN9Extractor8IsRaisedEv>
     ac0:	88 23       	and	r24, r24
     ac2:	09 f4       	brne	.+2      	; 0xac6 <_ZN11BrewManager19AdvanceStateMachineEv+0x118>
     ac4:	23 c3       	rjmp	.+1606   	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewResetComplete\n");
     ac6:	6d e9       	ldi	r22, 0x9D	; 157
     ac8:	72 e0       	ldi	r23, 0x02	; 2
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     ad2:	be 01       	movw	r22, r28
     ad4:	6f 5f       	subi	r22, 0xFF	; 255
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	c7 01       	movw	r24, r14
     ada:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				
                // Process step complete - reset has finished
                ClearTimeout();
     ae6:	c7 01       	movw	r24, r14
     ae8:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
     aec:	0d c3       	rjmp	.+1562   	; 0x1108 <_ZN11BrewManager19AdvanceStateMachineEv+0x75a>
            }
            break;
        
        // Brew step 1: Lower the extractor and switch on the boiler
        case BrewDispenseLowerExtractor:
            LogProcessEvent("State: BrewDispenseLowerExtractor\n");
     aee:	67 eb       	ldi	r22, 0xB7	; 183
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	c7 01       	movw	r24, r14
     b02:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     b06:	ce 01       	movw	r24, r28
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
     b0e:	d7 01       	movw	r26, r14
     b10:	16 96       	adiw	r26, 0x06	; 6
     b12:	ed 91       	ld	r30, X+
     b14:	fc 91       	ld	r31, X
     b16:	17 97       	sbiw	r26, 0x07	; 7
			if( m_pDrink->GetType() == Tea )
     b18:	80 81       	ld	r24, Z
     b1a:	81 11       	cpse	r24, r1
     b1c:	06 c0       	rjmp	.+12     	; 0xb2a <_ZN11BrewManager19AdvanceStateMachineEv+0x17c>
			{
				m_pExtractor->Lower();
     b1e:	5f 96       	adiw	r26, 0x1f	; 31
     b20:	8d 91       	ld	r24, X+
     b22:	9c 91       	ld	r25, X
     b24:	90 97       	sbiw	r26, 0x20	; 32
     b26:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN9Extractor5LowerEv>
			}
            m_pBoiler->EnableHeater(true);
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	f7 01       	movw	r30, r14
     b2e:	81 8d       	ldd	r24, Z+25	; 0x19
     b30:	92 8d       	ldd	r25, Z+26	; 0x1a
     b32:	c6 dd       	rcall	.-1140   	; 0x6c0 <_ZN6Boiler12EnableHeaterEb>
            SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
     b34:	01 e1       	ldi	r16, 0x11	; 17
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	48 ef       	ldi	r20, 0xF8	; 248
     b3e:	5a e2       	ldi	r21, 0x2A	; 42
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	c7 01       	movw	r24, r14
     b46:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	b1 c2       	rjmp	.+1378   	; 0x10b0 <_ZN11BrewManager19AdvanceStateMachineEv+0x702>
            SetNextState(BrewDispenseTeabag);
            break;
        
        // Brew step 2: If extractor is lowered, dispense teabag from bag conveyor    
        case BrewDispenseTeabag:
            if( m_pExtractor->IsLowered() )
     b4e:	fd 01       	movw	r30, r26
     b50:	87 8d       	ldd	r24, Z+31	; 0x1f
     b52:	90 a1       	ldd	r25, Z+32	; 0x20
     b54:	0e 94 9c 13 	call	0x2738	; 0x2738 <_ZN9Extractor9IsLoweredEv>
     b58:	88 23       	and	r24, r24
     b5a:	09 f4       	brne	.+2      	; 0xb5e <_ZN11BrewManager19AdvanceStateMachineEv+0x1b0>
     b5c:	d7 c2       	rjmp	.+1454   	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewDispenseTeabag\n");
     b5e:	6a ed       	ldi	r22, 0xDA	; 218
     b60:	72 e0       	ldi	r23, 0x02	; 2
     b62:	ce 01       	movw	r24, r28
     b64:	01 96       	adiw	r24, 0x01	; 1
     b66:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     b6a:	be 01       	movw	r22, r28
     b6c:	6f 5f       	subi	r22, 0xFF	; 255
     b6e:	7f 4f       	sbci	r23, 0xFF	; 255
     b70:	c7 01       	movw	r24, r14
     b72:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
     b7e:	d7 01       	movw	r26, r14
     b80:	16 96       	adiw	r26, 0x06	; 6
     b82:	ed 91       	ld	r30, X+
     b84:	fc 91       	ld	r31, X
     b86:	17 97       	sbiw	r26, 0x07	; 7
				
				// Check cup is still present before dispensing teabag
				if( m_pController->GetDrinkLocation(m_pDrink->GetID()) == ST_BREW )
     b88:	65 85       	ldd	r22, Z+13	; 0x0d
     b8a:	76 85       	ldd	r23, Z+14	; 0x0e
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	8d 91       	ld	r24, X+
     b90:	9c 91       	ld	r25, X
     b92:	15 97       	sbiw	r26, 0x05	; 5
     b94:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
     b98:	04 97       	sbiw	r24, 0x04	; 4
				{
					m_pBagConveyor->BeginAdvance();
     b9a:	89 f4       	brne	.+34     	; 0xbbe <_ZN11BrewManager19AdvanceStateMachineEv+0x210>
     b9c:	f7 01       	movw	r30, r14
     b9e:	83 8d       	ldd	r24, Z+27	; 0x1b
     ba0:	94 8d       	ldd	r25, Z+28	; 0x1c
     ba2:	07 dd       	rcall	.-1522   	; 0x5b2 <_ZN11BagConveyor12BeginAdvanceEv>
					SetTimeout(BREW_TIMEOUT_CONVEYOR, BREW_ERR_TIMEOUT_CONVEYOR);
     ba4:	02 e1       	ldi	r16, 0x12	; 18
     ba6:	10 e0       	ldi	r17, 0x00	; 0
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	48 eb       	ldi	r20, 0xB8	; 184
     bae:	5b e0       	ldi	r21, 0x0B	; 11
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	c7 01       	movw	r24, r14
     bb6:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	79 c2       	rjmp	.+1266   	; 0x10b0 <_ZN11BrewManager19AdvanceStateMachineEv+0x702>
    bool        SelectionIsConfirmed() { return m_bSelectionIsConfirmed; }

    int         GetID() { return m_nDrinkID; }
    
    DrinkState  GetState() { return m_State; }
    void        SetState( DrinkState state ){ m_State = state; }
     bbe:	d7 01       	movw	r26, r14
     bc0:	16 96       	adiw	r26, 0x06	; 6
     bc2:	ed 91       	ld	r30, X+
     bc4:	fc 91       	ld	r31, X
     bc6:	17 97       	sbiw	r26, 0x07	; 7
     bc8:	84 e0       	ldi	r24, 0x04	; 4
     bca:	81 83       	std	Z+1, r24	; 0x01
				}
				else
				{
					// Cup is not present, so abandon this drink by marking it as invalid
					m_pDrink->SetState( Invalid );
					m_bDrinkAbandoned = true;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	d8 96       	adiw	r26, 0x38	; 56
     bd0:	8c 93       	st	X, r24
     bd2:	d8 97       	sbiw	r26, 0x38	; 56
					m_pBoiler->EnableHeater(false);
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	59 96       	adiw	r26, 0x19	; 25
     bd8:	8d 91       	ld	r24, X+
     bda:	9c 91       	ld	r25, X
     bdc:	5a 97       	sbiw	r26, 0x1a	; 26
     bde:	70 dd       	rcall	.-1312   	; 0x6c0 <_ZN6Boiler12EnableHeaterEb>
					m_pExtractor->Raise();
     be0:	f7 01       	movw	r30, r14
     be2:	87 8d       	ldd	r24, Z+31	; 0x1f
     be4:	90 a1       	ldd	r25, Z+32	; 0x20
     be6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN9Extractor5RaiseEv>
					LogProcessEvent("Cup has been removed - drink abandoned\n");
     bea:	65 ef       	ldi	r22, 0xF5	; 245
     bec:	72 e0       	ldi	r23, 0x02	; 2
     bee:	ce 01       	movw	r24, r28
     bf0:	01 96       	adiw	r24, 0x01	; 1
     bf2:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     bf6:	be 01       	movw	r22, r28
     bf8:	6f 5f       	subi	r22, 0xFF	; 255
     bfa:	7f 4f       	sbci	r23, 0xFF	; 255
     bfc:	c7 01       	movw	r24, r14
     bfe:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            }
            break;
			
        // Brew step 3: If teabag is dispensed, await a rise in water temperature
        case BrewAwaitBoil:
            if( m_pBagConveyor->IsStationary() )
     c0a:	46 c2       	rjmp	.+1164   	; 0x1098 <_ZN11BrewManager19AdvanceStateMachineEv+0x6ea>
     c0c:	fd 01       	movw	r30, r26
     c0e:	83 8d       	ldd	r24, Z+27	; 0x1b
     c10:	94 8d       	ldd	r25, Z+28	; 0x1c
     c12:	ea dc       	rcall	.-1580   	; 0x5e8 <_ZN11BagConveyor12IsStationaryEv>
     c14:	88 23       	and	r24, r24
     c16:	09 f4       	brne	.+2      	; 0xc1a <_ZN11BrewManager19AdvanceStateMachineEv+0x26c>
     c18:	79 c2       	rjmp	.+1266   	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
				LogProcessEvent("State: BrewAwaitBoil\n");
     c1a:	6d e1       	ldi	r22, 0x1D	; 29
     c1c:	73 e0       	ldi	r23, 0x03	; 3
     c1e:	ce 01       	movw	r24, r28
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     c26:	be 01       	movw	r22, r28
     c28:	6f 5f       	subi	r22, 0xFF	; 255
     c2a:	7f 4f       	sbci	r23, 0xFF	; 255
     c2c:	c7 01       	movw	r24, r14
     c2e:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				SetTimeout(BREW_TIMEOUT_HEAT, BREW_ERR_TIMEOUT_HEAT);
     c3a:	03 e1       	ldi	r16, 0x13	; 19
     c3c:	10 e0       	ldi	r17, 0x00	; 0
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e4       	ldi	r20, 0x40	; 64
     c44:	5d e0       	ldi	r21, 0x0D	; 13
     c46:	63 e0       	ldi	r22, 0x03	; 3
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	c7 01       	movw	r24, r14
     c4c:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     c50:	87 e0       	ldi	r24, 0x07	; 7
			break;
        
        // Brew step 4: If water is up to temperature, deploy level probe and open the water valve
        case BrewReleaseWater:
			{
				float waterTemperature = m_pBoiler->GetWaterTemperature();
     c52:	2e c2       	rjmp	.+1116   	; 0x10b0 <_ZN11BrewManager19AdvanceStateMachineEv+0x702>
     c54:	fd 01       	movw	r30, r26
     c56:	81 8d       	ldd	r24, Z+25	; 0x19
     c58:	92 8d       	ldd	r25, Z+26	; 0x1a
     c5a:	78 dd       	rcall	.-1296   	; 0x74c <_ZN6Boiler19GetWaterTemperatureEv>
     c5c:	4b 01       	movw	r8, r22
     c5e:	5c 01       	movw	r10, r24
				if( millis() > (m_lLastTemperatureSent + 5000) )
     c60:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
     c64:	d7 01       	movw	r26, r14
     c66:	d0 96       	adiw	r26, 0x30	; 48
     c68:	0d 91       	ld	r16, X+
     c6a:	1d 91       	ld	r17, X+
     c6c:	2d 91       	ld	r18, X+
     c6e:	3c 91       	ld	r19, X
     c70:	d3 97       	sbiw	r26, 0x33	; 51
     c72:	08 57       	subi	r16, 0x78	; 120
     c74:	1c 4e       	sbci	r17, 0xEC	; 236
     c76:	2f 4f       	sbci	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	06 17       	cp	r16, r22
     c7c:	17 07       	cpc	r17, r23
     c7e:	28 07       	cpc	r18, r24
     c80:	39 07       	cpc	r19, r25
     c82:	70 f5       	brcc	.+92     	; 0xce0 <_ZN11BrewManager19AdvanceStateMachineEv+0x332>
				{
					// Log water temperature every five seconds
					String strTempText = "Water temperature: ";
     c84:	63 e3       	ldi	r22, 0x33	; 51
     c86:	73 e0       	ldi	r23, 0x03	; 3
     c88:	ce 01       	movw	r24, r28
     c8a:	07 96       	adiw	r24, 0x07	; 7
     c8c:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
	String & operator += (float num)		{concat(num); return (*this);}
     c90:	b5 01       	movw	r22, r10
     c92:	a4 01       	movw	r20, r8
     c94:	ce 01       	movw	r24, r28
     c96:	07 96       	adiw	r24, 0x07	; 7
     c98:	0e 94 48 39 	call	0x7290	; 0x7290 <_ZN6String6concatEf>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     c9c:	6a e3       	ldi	r22, 0x3A	; 58
     c9e:	7a e0       	ldi	r23, 0x0A	; 10
     ca0:	ce 01       	movw	r24, r28
     ca2:	07 96       	adiw	r24, 0x07	; 7
     ca4:	0e 94 ae 38 	call	0x715c	; 0x715c <_ZN6String6concatEPKc>
					strTempText += waterTemperature;
					strTempText += "\n";
					LogProcessEvent(strTempText);
     ca8:	be 01       	movw	r22, r28
     caa:	69 5f       	subi	r22, 0xF9	; 249
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
     cb6:	be 01       	movw	r22, r28
     cb8:	6f 5f       	subi	r22, 0xFF	; 255
     cba:	7f 4f       	sbci	r23, 0xFF	; 255
     cbc:	c7 01       	movw	r24, r14
     cbe:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     cc2:	ce 01       	movw	r24, r28
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
					
					m_lLastTemperatureSent = millis();
     cca:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
     cce:	f7 01       	movw	r30, r14
     cd0:	60 ab       	std	Z+48, r22	; 0x30
     cd2:	71 ab       	std	Z+49, r23	; 0x31
     cd4:	82 ab       	std	Z+50, r24	; 0x32
     cd6:	93 ab       	std	Z+51, r25	; 0x33
			{
				float waterTemperature = m_pBoiler->GetWaterTemperature();
				if( millis() > (m_lLastTemperatureSent + 5000) )
				{
					// Log water temperature every five seconds
					String strTempText = "Water temperature: ";
     cd8:	ce 01       	movw	r24, r28
     cda:	07 96       	adiw	r24, 0x07	; 7
     cdc:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
					LogProcessEvent(strTempText);
					
					m_lLastTemperatureSent = millis();
				}
                
				if( (waterTemperature > (m_fInitialWaterTemp + 5)) || (waterTemperature > (BREW_WATERTEMPERATURE_MIN - 5)) )
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 ea       	ldi	r20, 0xA0	; 160
     ce6:	50 e4       	ldi	r21, 0x40	; 64
     ce8:	d7 01       	movw	r26, r14
     cea:	d4 96       	adiw	r26, 0x34	; 52
     cec:	6d 91       	ld	r22, X+
     cee:	7d 91       	ld	r23, X+
     cf0:	8d 91       	ld	r24, X+
     cf2:	9c 91       	ld	r25, X
     cf4:	d7 97       	sbiw	r26, 0x37	; 55
     cf6:	0e 94 18 30 	call	0x6030	; 0x6030 <__addsf3>
     cfa:	9b 01       	movw	r18, r22
     cfc:	ac 01       	movw	r20, r24
     cfe:	c5 01       	movw	r24, r10
     d00:	b4 01       	movw	r22, r8
     d02:	0e 94 0a 31 	call	0x6214	; 0x6214 <__gesf2>
     d06:	18 16       	cp	r1, r24
     d08:	54 f0       	brlt	.+20     	; 0xd1e <_ZN11BrewManager19AdvanceStateMachineEv+0x370>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	46 e9       	ldi	r20, 0x96	; 150
     d10:	52 e4       	ldi	r21, 0x42	; 66
     d12:	c5 01       	movw	r24, r10
     d14:	b4 01       	movw	r22, r8
     d16:	0e 94 0a 31 	call	0x6214	; 0x6214 <__gesf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	5c f4       	brge	.+22     	; 0xd34 <_ZN11BrewManager19AdvanceStateMachineEv+0x386>
				{
					// Water temperature is rising, so heater is probably OK
					// Only need to time out if water doesn't boil   
					SetTimeout(BREW_TIMEOUT_BOIL, BREW_ERR_TIMEOUT_BOIL);
     d1e:	04 e1       	ldi	r16, 0x14	; 20
     d20:	10 e0       	ldi	r17, 0x00	; 0
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 ee       	ldi	r20, 0xE0	; 224
     d28:	53 e9       	ldi	r21, 0x93	; 147
     d2a:	64 e0       	ldi	r22, 0x04	; 4
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	c7 01       	movw	r24, r14
     d30:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
				}                    
                
				if( waterTemperature > BREW_WATERTEMPERATURE_MIN )
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 ea       	ldi	r20, 0xA0	; 160
     d3a:	52 e4       	ldi	r21, 0x42	; 66
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	0e 94 0a 31 	call	0x6214	; 0x6214 <__gesf2>
     d44:	18 16       	cp	r1, r24
     d46:	0c f0       	brlt	.+2      	; 0xd4a <_ZN11BrewManager19AdvanceStateMachineEv+0x39c>
     d48:	e1 c1       	rjmp	.+962    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
				{
					LogProcessEvent("State: BrewReleaseWater\n");
     d4a:	67 e4       	ldi	r22, 0x47	; 71
     d4c:	73 e0       	ldi	r23, 0x03	; 3
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     d56:	be 01       	movw	r22, r28
     d58:	6f 5f       	subi	r22, 0xFF	; 255
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	c7 01       	movw	r24, r14
     d5e:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>

					// Water has attained correct temperature for brewing, so switch off heater
					m_pBoiler->EnableHeater(false);
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	f7 01       	movw	r30, r14
     d6e:	81 8d       	ldd	r24, Z+25	; 0x19
     d70:	92 8d       	ldd	r25, Z+26	; 0x1a
     d72:	a6 dc       	rcall	.-1716   	; 0x6c0 <_ZN6Boiler12EnableHeaterEb>
     d74:	d7 01       	movw	r26, r14
     d76:	16 96       	adiw	r26, 0x06	; 6
     d78:	ed 91       	ld	r30, X+
     d7a:	fc 91       	ld	r31, X
     d7c:	17 97       	sbiw	r26, 0x07	; 7

					// Check cup is still present before opening valve
					if( m_pController->GetDrinkLocation(m_pDrink->GetID()) == ST_BREW )
     d7e:	65 85       	ldd	r22, Z+13	; 0x0d
     d80:	76 85       	ldd	r23, Z+14	; 0x0e
     d82:	14 96       	adiw	r26, 0x04	; 4
     d84:	8d 91       	ld	r24, X+
     d86:	9c 91       	ld	r25, X
     d88:	15 97       	sbiw	r26, 0x05	; 5
     d8a:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
     d8e:	04 97       	sbiw	r24, 0x04	; 4
					{
						// Lower the cup-level probe and release water
						m_pCupLevelProbe->Lower();
     d90:	f1 f4       	brne	.+60     	; 0xdce <_ZN11BrewManager19AdvanceStateMachineEv+0x420>
     d92:	f7 01       	movw	r30, r14
     d94:	85 8d       	ldd	r24, Z+29	; 0x1d
     d96:	96 8d       	ldd	r25, Z+30	; 0x1e
     d98:	00 d5       	rcall	.+2560   	; 0x179a <_ZN13CupLevelProbe5LowerEv>
						delay(1000);    // Avoids big EMI pulse
     d9a:	68 ee       	ldi	r22, 0xE8	; 232
     d9c:	73 e0       	ldi	r23, 0x03	; 3
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
						m_pBoiler->EnableExitValve(true);
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	d7 01       	movw	r26, r14
     daa:	59 96       	adiw	r26, 0x19	; 25
     dac:	8d 91       	ld	r24, X+
     dae:	9c 91       	ld	r25, X
     db0:	5a 97       	sbiw	r26, 0x1a	; 26
     db2:	bc dc       	rcall	.-1672   	; 0x72c <_ZN6Boiler15EnableExitValveEb>
						SetTimeout(BREW_TIMEOUT_CUPFILL, BREW_ERR_TIMEOUT_CUPFILL);
     db4:	05 e1       	ldi	r16, 0x15	; 21
     db6:	10 e0       	ldi	r17, 0x00	; 0
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e3       	ldi	r20, 0x30	; 48
     dbe:	55 e7       	ldi	r21, 0x75	; 117
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	c7 01       	movw	r24, r14
     dc6:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     dca:	88 e0       	ldi	r24, 0x08	; 8
     dcc:	44 c1       	rjmp	.+648    	; 0x1056 <_ZN11BrewManager19AdvanceStateMachineEv+0x6a8>
     dce:	d7 01       	movw	r26, r14
     dd0:	16 96       	adiw	r26, 0x06	; 6
     dd2:	ed 91       	ld	r30, X+
     dd4:	fc 91       	ld	r31, X
     dd6:	17 97       	sbiw	r26, 0x07	; 7
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	81 83       	std	Z+1, r24	; 0x01
					}
					else
					{
						// Cup is not present, so abandon this drink by marking it as invalid
						m_pDrink->SetState( Invalid );
						m_bDrinkAbandoned = true;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	d8 96       	adiw	r26, 0x38	; 56
     de0:	8c 93       	st	X, r24
     de2:	d8 97       	sbiw	r26, 0x38	; 56
						m_pExtractor->Raise();
     de4:	5f 96       	adiw	r26, 0x1f	; 31
     de6:	8d 91       	ld	r24, X+
     de8:	9c 91       	ld	r25, X
     dea:	90 97       	sbiw	r26, 0x20	; 32
     dec:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN9Extractor5RaiseEv>
						LogProcessEvent("Cup has been removed - drink abandoned\n");
     df0:	65 ef       	ldi	r22, 0xF5	; 245
     df2:	72 e0       	ldi	r23, 0x02	; 2
     df4:	ce 01       	movw	r24, r28
     df6:	01 96       	adiw	r24, 0x01	; 1
     df8:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     dfc:	be 01       	movw	r22, r28
     dfe:	6f 5f       	subi	r22, 0xFF	; 255
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	c7 01       	movw	r24, r14
     e04:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
						SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
     e10:	01 e1       	ldi	r16, 0x11	; 17
     e12:	10 e0       	ldi	r17, 0x00	; 0
     e14:	20 e0       	ldi	r18, 0x00	; 0
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	48 ef       	ldi	r20, 0xF8	; 248
     e1a:	5a e2       	ldi	r21, 0x2A	; 42
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	c7 01       	movw	r24, r14
     e22:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
			}
            break;
        
        // Brew step 5: If cup is full, raise probe, close valve and switch off boiler
        case BrewRaiseProbe:
            if( m_pCupLevelProbe->CupIsFull() )
     e26:	38 c0       	rjmp	.+112    	; 0xe98 <_ZN11BrewManager19AdvanceStateMachineEv+0x4ea>
     e28:	5d 96       	adiw	r26, 0x1d	; 29
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	5e 97       	sbiw	r26, 0x1e	; 30
     e30:	da d4       	rcall	.+2484   	; 0x17e6 <_ZN13CupLevelProbe9CupIsFullEv>
     e32:	88 23       	and	r24, r24
     e34:	09 f4       	brne	.+2      	; 0xe38 <_ZN11BrewManager19AdvanceStateMachineEv+0x48a>
     e36:	6a c1       	rjmp	.+724    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewRaiseProbe\n");
     e38:	60 e6       	ldi	r22, 0x60	; 96
     e3a:	73 e0       	ldi	r23, 0x03	; 3
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     e44:	be 01       	movw	r22, r28
     e46:	6f 5f       	subi	r22, 0xFF	; 255
     e48:	7f 4f       	sbci	r23, 0xFF	; 255
     e4a:	c7 01       	movw	r24, r14
     e4c:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     e50:	ce 01       	movw	r24, r28
     e52:	01 96       	adiw	r24, 0x01	; 1
                m_pCupLevelProbe->Raise();
     e54:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
     e58:	f7 01       	movw	r30, r14
     e5a:	85 8d       	ldd	r24, Z+29	; 0x1d
     e5c:	96 8d       	ldd	r25, Z+30	; 0x1e
                m_pBoiler->EnableExitValve(false);
     e5e:	8a d4       	rcall	.+2324   	; 0x1774 <_ZN13CupLevelProbe5RaiseEv>
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	d7 01       	movw	r26, r14
     e64:	59 96       	adiw	r26, 0x19	; 25
     e66:	8d 91       	ld	r24, X+
     e68:	9c 91       	ld	r25, X
     e6a:	5a 97       	sbiw	r26, 0x1a	; 26
     e6c:	5f dc       	rcall	.-1858   	; 0x72c <_ZN6Boiler15EnableExitValveEb>
                SetTimeout(BREW_TIMEOUT_PROBE, BREW_ERR_TIMEOUT_PROBE);
     e6e:	06 e1       	ldi	r16, 0x16	; 22
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	48 e8       	ldi	r20, 0x88	; 136
     e78:	53 e1       	ldi	r21, 0x13	; 19
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	c7 01       	movw	r24, r14
     e80:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
     e84:	d7 01       	movw	r26, r14
     e86:	16 96       	adiw	r26, 0x06	; 6
     e88:	ed 91       	ld	r30, X+
     e8a:	fc 91       	ld	r31, X
				if( m_pDrink->GetType() == Tea )
     e8c:	17 97       	sbiw	r26, 0x07	; 7
     e8e:	80 81       	ld	r24, Z
     e90:	81 11       	cpse	r24, r1
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <_ZN11BrewManager19AdvanceStateMachineEv+0x4ea>
     e94:	89 e0       	ldi	r24, 0x09	; 9
     e96:	0d c1       	rjmp	.+538    	; 0x10b2 <_ZN11BrewManager19AdvanceStateMachineEv+0x704>
     e98:	8d e0       	ldi	r24, 0x0D	; 13
            break;
        
        // Brew step 5A: If probe is in raised position, lower the masher
        case BrewMashTeabag:
            {
                if(m_pCupLevelProbe->IsRaised())
     e9a:	dd c0       	rjmp	.+442    	; 0x1056 <_ZN11BrewManager19AdvanceStateMachineEv+0x6a8>
     e9c:	5d 96       	adiw	r26, 0x1d	; 29
     e9e:	8d 91       	ld	r24, X+
     ea0:	9c 91       	ld	r25, X
     ea2:	5e 97       	sbiw	r26, 0x1e	; 30
     ea4:	94 d4       	rcall	.+2344   	; 0x17ce <_ZN13CupLevelProbe8IsRaisedEv>
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <_ZN11BrewManager19AdvanceStateMachineEv+0x4fe>
     eaa:	30 c1       	rjmp	.+608    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
                {
                    LogProcessEvent("State: BrewMashTeabag\n");
     eac:	67 e7       	ldi	r22, 0x77	; 119
     eae:	73 e0       	ldi	r23, 0x03	; 3
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     eb8:	be 01       	movw	r22, r28
     eba:	6f 5f       	subi	r22, 0xFF	; 255
     ebc:	7f 4f       	sbci	r23, 0xFF	; 255
     ebe:	c7 01       	movw	r24, r14
     ec0:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
                    m_pMasher->Lower();
     ecc:	f7 01       	movw	r30, r14
     ece:	81 a1       	ldd	r24, Z+33	; 0x21
     ed0:	92 a1       	ldd	r25, Z+34	; 0x22
     ed2:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN6Masher5LowerEv>
                    SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
     ed6:	00 e1       	ldi	r16, 0x10	; 16
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	48 e8       	ldi	r20, 0x88	; 136
     ee0:	53 e1       	ldi	r21, 0x13	; 19
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	c7 01       	movw	r24, r14
     ee8:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     eec:	8a e0       	ldi	r24, 0x0A	; 10
     eee:	e0 c0       	rjmp	.+448    	; 0x10b0 <_ZN11BrewManager19AdvanceStateMachineEv+0x702>
            }
            break;
        
        // Brew step 6: If masher is lowered, raise it
        case BrewRaiseMasher:
            if(m_pMasher->IsLowered() )
     ef0:	fd 01       	movw	r30, r26
     ef2:	81 a1       	ldd	r24, Z+33	; 0x21
     ef4:	92 a1       	ldd	r25, Z+34	; 0x22
     ef6:	0e 94 24 14 	call	0x2848	; 0x2848 <_ZN6Masher9IsLoweredEv>
     efa:	88 23       	and	r24, r24
     efc:	09 f4       	brne	.+2      	; 0xf00 <_ZN11BrewManager19AdvanceStateMachineEv+0x552>
     efe:	06 c1       	rjmp	.+524    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewRaiseMasher\n");
     f00:	6e e8       	ldi	r22, 0x8E	; 142
     f02:	73 e0       	ldi	r23, 0x03	; 3
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
     f0c:	be 01       	movw	r22, r28
     f0e:	6f 5f       	subi	r22, 0xFF	; 255
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	c7 01       	movw	r24, r14
     f14:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     f18:	ce 01       	movw	r24, r28
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
                m_pMasher->Raise();
     f20:	d7 01       	movw	r26, r14
     f22:	91 96       	adiw	r26, 0x21	; 33
     f24:	8d 91       	ld	r24, X+
     f26:	9c 91       	ld	r25, X
     f28:	92 97       	sbiw	r26, 0x22	; 34
     f2a:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <_ZN6Masher5RaiseEv>
                m_lMashCount++;
     f2e:	f7 01       	movw	r30, r14
     f30:	80 a5       	ldd	r24, Z+40	; 0x28
     f32:	91 a5       	ldd	r25, Z+41	; 0x29
     f34:	a2 a5       	ldd	r26, Z+42	; 0x2a
     f36:	b3 a5       	ldd	r27, Z+43	; 0x2b
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	a1 1d       	adc	r26, r1
     f3c:	b1 1d       	adc	r27, r1
     f3e:	80 a7       	std	Z+40, r24	; 0x28
     f40:	91 a7       	std	Z+41, r25	; 0x29
     f42:	a2 a7       	std	Z+42, r26	; 0x2a
     f44:	b3 a7       	std	Z+43, r27	; 0x2b
				
				String strMashCycleText = "Mash cycle: ";
     f46:	66 ea       	ldi	r22, 0xA6	; 166
     f48:	73 e0       	ldi	r23, 0x03	; 3
     f4a:	ce 01       	movw	r24, r28
     f4c:	07 96       	adiw	r24, 0x07	; 7
     f4e:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
     f52:	d7 01       	movw	r26, r14
     f54:	98 96       	adiw	r26, 0x28	; 40
     f56:	4d 91       	ld	r20, X+
     f58:	5d 91       	ld	r21, X+
     f5a:	6d 91       	ld	r22, X+
     f5c:	7c 91       	ld	r23, X
     f5e:	9b 97       	sbiw	r26, 0x2b	; 43
     f60:	ce 01       	movw	r24, r28
     f62:	07 96       	adiw	r24, 0x07	; 7
     f64:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <_ZN6String6concatEl>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
     f68:	6a e3       	ldi	r22, 0x3A	; 58
     f6a:	7a e0       	ldi	r23, 0x0A	; 10
     f6c:	ce 01       	movw	r24, r28
     f6e:	07 96       	adiw	r24, 0x07	; 7
     f70:	0e 94 ae 38 	call	0x715c	; 0x715c <_ZN6String6concatEPKc>
				strMashCycleText += m_lMashCount;
				strMashCycleText += "\n";
				LogProcessEvent( strMashCycleText );
     f74:	be 01       	movw	r22, r28
     f76:	69 5f       	subi	r22, 0xF9	; 249
     f78:	7f 4f       	sbci	r23, 0xFF	; 255
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
     f82:	be 01       	movw	r22, r28
     f84:	6f 5f       	subi	r22, 0xFF	; 255
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	c7 01       	movw	r24, r14
     f8a:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
     f8e:	ce 01       	movw	r24, r28
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				
                SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
     f96:	00 e1       	ldi	r16, 0x10	; 16
     f98:	10 e0       	ldi	r17, 0x00	; 0
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	48 e8       	ldi	r20, 0x88	; 136
     fa0:	53 e1       	ldi	r21, 0x13	; 19
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	c7 01       	movw	r24, r14
     fa8:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
                if( m_lMashCount < m_lMashesRequired )
     fac:	f7 01       	movw	r30, r14
     fae:	40 a5       	ldd	r20, Z+40	; 0x28
     fb0:	51 a5       	ldd	r21, Z+41	; 0x29
     fb2:	62 a5       	ldd	r22, Z+42	; 0x2a
     fb4:	73 a5       	ldd	r23, Z+43	; 0x2b
     fb6:	84 a5       	ldd	r24, Z+44	; 0x2c
     fb8:	95 a5       	ldd	r25, Z+45	; 0x2d
     fba:	a6 a5       	ldd	r26, Z+46	; 0x2e
     fbc:	b7 a5       	ldd	r27, Z+47	; 0x2f
     fbe:	48 17       	cp	r20, r24
     fc0:	59 07       	cpc	r21, r25
     fc2:	6a 07       	cpc	r22, r26
     fc4:	7b 07       	cpc	r23, r27
     fc6:	84 f4       	brge	.+32     	; 0xfe8 <_ZN11BrewManager19AdvanceStateMachineEv+0x63a>
                {
                   // Keep mashing, using partial mashes
                    m_lTimeRaiseMustStop = millis() + BREW_PARTIALRAISEDELAY;
     fc8:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	8c 50       	subi	r24, 0x0C	; 12
     fd2:	9e 4f       	sbci	r25, 0xFE	; 254
     fd4:	af 4f       	sbci	r26, 0xFF	; 255
     fd6:	bf 4f       	sbci	r27, 0xFF	; 255
     fd8:	f7 01       	movw	r30, r14
     fda:	84 a3       	std	Z+36, r24	; 0x24
     fdc:	95 a3       	std	Z+37, r25	; 0x25
     fde:	a6 a3       	std	Z+38, r26	; 0x26
     fe0:	b7 a3       	std	Z+39, r27	; 0x27
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     fe2:	8b e0       	ldi	r24, 0x0B	; 11
     fe4:	83 a3       	std	Z+35, r24	; 0x23
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <_ZN11BrewManager19AdvanceStateMachineEv+0x63e>
     fe8:	8c e0       	ldi	r24, 0x0C	; 12
     fea:	83 a3       	std	Z+35, r24	; 0x23
            {
                LogProcessEvent("State: BrewRaiseMasher\n");
                m_pMasher->Raise();
                m_lMashCount++;
				
				String strMashCycleText = "Mash cycle: ";
     fec:	ce 01       	movw	r24, r28
     fee:	07 96       	adiw	r24, 0x07	; 7
     ff0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
     ff4:	8b c0       	rjmp	.+278    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            }
            break;
        
        // Brew step 6a: If masher is partially raised, lower it again
        case BrewLowerMasherAgain:
            if( millis() > m_lTimeRaiseMustStop )
     ff6:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
     ffa:	f7 01       	movw	r30, r14
     ffc:	84 a0       	ldd	r8, Z+36	; 0x24
     ffe:	95 a0       	ldd	r9, Z+37	; 0x25
    1000:	a6 a0       	ldd	r10, Z+38	; 0x26
    1002:	b7 a0       	ldd	r11, Z+39	; 0x27
    1004:	86 16       	cp	r8, r22
    1006:	97 06       	cpc	r9, r23
    1008:	a8 06       	cpc	r10, r24
    100a:	b9 06       	cpc	r11, r25
    100c:	08 f0       	brcs	.+2      	; 0x1010 <_ZN11BrewManager19AdvanceStateMachineEv+0x662>
    100e:	7e c0       	rjmp	.+252    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewLowerMasherAgain\n");
    1010:	63 eb       	ldi	r22, 0xB3	; 179
    1012:	73 e0       	ldi	r23, 0x03	; 3
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    101c:	be 01       	movw	r22, r28
    101e:	6f 5f       	subi	r22, 0xFF	; 255
    1020:	7f 4f       	sbci	r23, 0xFF	; 255
    1022:	c7 01       	movw	r24, r14
    1024:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    1028:	ce 01       	movw	r24, r28
    102a:	01 96       	adiw	r24, 0x01	; 1
    102c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
                m_pMasher->Lower();
    1030:	d7 01       	movw	r26, r14
    1032:	91 96       	adiw	r26, 0x21	; 33
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	92 97       	sbiw	r26, 0x22	; 34
    103a:	0e 94 f7 13 	call	0x27ee	; 0x27ee <_ZN6Masher5LowerEv>
                SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
    103e:	00 e1       	ldi	r16, 0x10	; 16
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	48 e8       	ldi	r20, 0x88	; 136
    1048:	53 e1       	ldi	r21, 0x13	; 19
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	c7 01       	movw	r24, r14
    1050:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
    1054:	8a e0       	ldi	r24, 0x0A	; 10
    1056:	f7 01       	movw	r30, r14
    1058:	83 a3       	std	Z+35, r24	; 0x23
    105a:	58 c0       	rjmp	.+176    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
                
            break;
        
        // Brew step 7: If masher is raised, raise the extractor
        case BrewRaiseExtractor:
            if(m_pMasher->IsRaised() )
    105c:	91 96       	adiw	r26, 0x21	; 33
    105e:	8d 91       	ld	r24, X+
    1060:	9c 91       	ld	r25, X
    1062:	92 97       	sbiw	r26, 0x22	; 34
    1064:	0e 94 13 14 	call	0x2826	; 0x2826 <_ZN6Masher8IsRaisedEv>
    1068:	88 23       	and	r24, r24
    106a:	09 f4       	brne	.+2      	; 0x106e <_ZN11BrewManager19AdvanceStateMachineEv+0x6c0>
    106c:	4f c0       	rjmp	.+158    	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            {
                LogProcessEvent("State: BrewRaiseExtractor\n");
    106e:	60 ed       	ldi	r22, 0xD0	; 208
    1070:	73 e0       	ldi	r23, 0x03	; 3
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    107a:	be 01       	movw	r22, r28
    107c:	6f 5f       	subi	r22, 0xFF	; 255
    107e:	7f 4f       	sbci	r23, 0xFF	; 255
    1080:	c7 01       	movw	r24, r14
    1082:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    1086:	ce 01       	movw	r24, r28
    1088:	01 96       	adiw	r24, 0x01	; 1
    108a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
                m_pExtractor->Raise();
    108e:	f7 01       	movw	r30, r14
    1090:	87 8d       	ldd	r24, Z+31	; 0x1f
    1092:	90 a1       	ldd	r25, Z+32	; 0x20
    1094:	0e 94 63 13 	call	0x26c6	; 0x26c6 <_ZN9Extractor5RaiseEv>
                SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
    1098:	01 e1       	ldi	r16, 0x11	; 17
    109a:	10 e0       	ldi	r17, 0x00	; 0
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	48 ef       	ldi	r20, 0xF8	; 248
    10a2:	5a e2       	ldi	r21, 0x2A	; 42
    10a4:	60 e0       	ldi	r22, 0x00	; 0
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	c7 01       	movw	r24, r14
    10aa:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
    10ae:	8d e0       	ldi	r24, 0x0D	; 13
    10b0:	d7 01       	movw	r26, r14
    10b2:	93 96       	adiw	r26, 0x23	; 35
    10b4:	8c 93       	st	X, r24
    10b6:	2a c0       	rjmp	.+84     	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
            }
            break;
        
        // Brew step 8: If teabag recovery is complete, the process has successfully completed
        case BrewComplete:
			if(m_pExtractor->IsRaised())
    10b8:	fd 01       	movw	r30, r26
    10ba:	87 8d       	ldd	r24, Z+31	; 0x1f
    10bc:	90 a1       	ldd	r25, Z+32	; 0x20
    10be:	0e 94 90 13 	call	0x2720	; 0x2720 <_ZN9Extractor8IsRaisedEv>
    10c2:	88 23       	and	r24, r24
    10c4:	19 f1       	breq	.+70     	; 0x110c <_ZN11BrewManager19AdvanceStateMachineEv+0x75e>
			{
				LogProcessEvent("State: BrewComplete\n");
    10c6:	6b ee       	ldi	r22, 0xEB	; 235
    10c8:	73 e0       	ldi	r23, 0x03	; 3
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    10d2:	be 01       	movw	r22, r28
    10d4:	6f 5f       	subi	r22, 0xFF	; 255
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	c7 01       	movw	r24, r14
    10da:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    10de:	ce 01       	movw	r24, r28
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>

				// Brew process is complete
				response = ProcessComplete;
				ClearTimeout();
    10e6:	c7 01       	movw	r24, r14
    10e8:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
            
				// The brewing stage of the drink is now complete
				m_pDrink->SetState( m_bDrinkAbandoned ? Invalid : BrewStageComplete );
    10ec:	d7 01       	movw	r26, r14
    10ee:	d8 96       	adiw	r26, 0x38	; 56
    10f0:	8c 91       	ld	r24, X
    10f2:	81 11       	cpse	r24, r1
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <_ZN11BrewManager19AdvanceStateMachineEv+0x74c>
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <_ZN11BrewManager19AdvanceStateMachineEv+0x74e>
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	d7 01       	movw	r26, r14
    10fe:	16 96       	adiw	r26, 0x06	; 6
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	17 97       	sbiw	r26, 0x07	; 7
    1106:	81 83       	std	Z+1, r24	; 0x01
			if(m_pExtractor->IsRaised())
			{
				LogProcessEvent("State: BrewComplete\n");

				// Brew process is complete
				response = ProcessComplete;
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	01 c0       	rjmp	.+2      	; 0x110e <_ZN11BrewManager19AdvanceStateMachineEv+0x760>
//
//  Initiate the next step of the process
//
ProcessManagerResponse BrewManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    110c:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
    } // switch            
            
	return response;
}
    110e:	2c 96       	adiw	r28, 0x0c	; 12
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	bf 90       	pop	r11
    1128:	af 90       	pop	r10
    112a:	9f 90       	pop	r9
    112c:	8f 90       	pop	r8
    112e:	08 95       	ret

00001130 <_ZN11BrewManager8ContinueEv>:
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse BrewManager::Continue()
{
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	2c 97       	sbiw	r28, 0x0c	; 12
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	fc 01       	movw	r30, r24
    114a:	80 8d       	ldd	r24, Z+24	; 0x18
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	09 f4       	brne	.+2      	; 0x1152 <_ZN11BrewManager8ContinueEv+0x22>
    1150:	51 c0       	rjmp	.+162    	; 0x11f4 <_ZN11BrewManager8ContinueEv+0xc4>
    1152:	82 30       	cpi	r24, 0x02	; 2
    1154:	09 f4       	brne	.+2      	; 0x1158 <_ZN11BrewManager8ContinueEv+0x28>
    1156:	4e c0       	rjmp	.+156    	; 0x11f4 <_ZN11BrewManager8ContinueEv+0xc4>
    1158:	8f 01       	movw	r16, r30
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    115a:	cf 01       	movw	r24, r30
    115c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    1160:	81 11       	cpse	r24, r1
    1162:	06 c0       	rjmp	.+12     	; 0x1170 <_ZN11BrewManager8ContinueEv+0x40>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    1164:	c8 01       	movw	r24, r16
    1166:	23 dc       	rcall	.-1978   	; 0x9ae <_ZN11BrewManager19AdvanceStateMachineEv>
            strTimeoutText += GetLastError();
            strTimeoutText + "\n";
            LogProcessEvent(strTimeoutText);
        }
    
        if( response == ProcessFailed)
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	09 f0       	breq	.+2      	; 0x116e <_ZN11BrewManager8ContinueEv+0x3e>
    116c:	41 c0       	rjmp	.+130    	; 0x11f0 <_ZN11BrewManager8ContinueEv+0xc0>
    116e:	37 c0       	rjmp	.+110    	; 0x11de <_ZN11BrewManager8ContinueEv+0xae>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
            String strTimeoutText = "TIMEOUT code: ";
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	74 e0       	ldi	r23, 0x04	; 4
    1174:	ce 01       	movw	r24, r28
    1176:	07 96       	adiw	r24, 0x07	; 7
    1178:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
    117c:	d8 01       	movw	r26, r16
    117e:	50 96       	adiw	r26, 0x10	; 16
    1180:	4d 91       	ld	r20, X+
    1182:	5d 91       	ld	r21, X+
    1184:	6d 91       	ld	r22, X+
    1186:	7c 91       	ld	r23, X
    1188:	53 97       	sbiw	r26, 0x13	; 19
    118a:	ce 01       	movw	r24, r28
    118c:	07 96       	adiw	r24, 0x07	; 7
    118e:	0e 94 19 39 	call	0x7232	; 0x7232 <_ZN6String6concatEm>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    1192:	be 01       	movw	r22, r28
    1194:	69 5f       	subi	r22, 0xF9	; 249
    1196:	7f 4f       	sbci	r23, 0xFF	; 255
    1198:	ce 01       	movw	r24, r28
    119a:	01 96       	adiw	r24, 0x01	; 1
    119c:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
            strTimeoutText += GetLastError();
            strTimeoutText + "\n";
    11a0:	6a e3       	ldi	r22, 0x3A	; 58
    11a2:	7a e0       	ldi	r23, 0x0A	; 10
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 88 39 	call	0x7310	; 0x7310 <_ZplRK15StringSumHelperPKc>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    11ac:	ce 01       	movw	r24, r28
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            LogProcessEvent(strTimeoutText);
    11b4:	be 01       	movw	r22, r28
    11b6:	69 5f       	subi	r22, 0xF9	; 249
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ba:	ce 01       	movw	r24, r28
    11bc:	01 96       	adiw	r24, 0x01	; 1
    11be:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
    11c2:	be 01       	movw	r22, r28
    11c4:	6f 5f       	subi	r22, 0xFF	; 255
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	c8 01       	movw	r24, r16
    11ca:	0e 94 0e 1b 	call	0x361c	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    11ce:	ce 01       	movw	r24, r28
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
            String strTimeoutText = "TIMEOUT code: ";
    11d6:	ce 01       	movw	r24, r28
    11d8:	07 96       	adiw	r24, 0x07	; 7
    11da:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
        }
    
        if( response == ProcessFailed)
        {
            // Brewing process has failed, so make sure everything is switched off
            Stop();
    11de:	d8 01       	movw	r26, r16
    11e0:	ed 91       	ld	r30, X+
    11e2:	fc 91       	ld	r31, X
    11e4:	06 80       	ldd	r0, Z+6	; 0x06
    11e6:	f7 81       	ldd	r31, Z+7	; 0x07
    11e8:	e0 2d       	mov	r30, r0
    11ea:	c8 01       	movw	r24, r16
    11ec:	19 95       	eicall
    11ee:	81 e0       	ldi	r24, 0x01	; 1
	void SetTimeout(unsigned long lTimeout, long lApplicableErrorCode );
    void ClearTimeout();                            // Remove the timeout
	bool CheckTimeoutExpired();						// Check timeout
	void SetErrorCode(long lErrorCode);	            // Set process error code

    void SetResponse( ProcessManagerResponse response ) { m_LastResponse = response; }
    11f0:	f8 01       	movw	r30, r16
    11f2:	80 8f       	std	Z+24, r24	; 0x18
    
        SetResponse(response);        
    }
    
    return response;
}
    11f4:	2c 96       	adiw	r28, 0x0c	; 12
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	de bf       	out	0x3e, r29	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	cd bf       	out	0x3d, r28	; 61
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <_ZN11BrewManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the brew manager to begin a new brewing process
//
bool BrewManager::Initialise()
{
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    1214:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN18ProcessManagerBase10InitialiseEv>
 
 	// Create instances of all Tea Machine components required by the brewing process
	m_pBoiler = new Boiler(m_pTeaMachine);
    1218:	8a e0       	ldi	r24, 0x0A	; 10
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    1220:	8c 01       	movw	r16, r24
    1222:	6a 81       	ldd	r22, Y+2	; 0x02
    1224:	7b 81       	ldd	r23, Y+3	; 0x03
    1226:	13 da       	rcall	.-3034   	; 0x64e <_ZN6BoilerC1EP10TeaMachine>
    1228:	1a 8f       	std	Y+26, r17	; 0x1a
    122a:	09 8f       	std	Y+25, r16	; 0x19
	m_pBagConveyor = new BagConveyor(m_pTeaMachine);
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    1234:	8c 01       	movw	r16, r24
    1236:	6a 81       	ldd	r22, Y+2	; 0x02
    1238:	7b 81       	ldd	r23, Y+3	; 0x03
    123a:	af d9       	rcall	.-3234   	; 0x59a <_ZN11BagConveyorC1EP10TeaMachine>
    123c:	1c 8f       	std	Y+28, r17	; 0x1c
    123e:	0b 8f       	std	Y+27, r16	; 0x1b
	m_pCupLevelProbe = new CupLevelProbe(m_pTeaMachine);
    1240:	86 e0       	ldi	r24, 0x06	; 6
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    1248:	8c 01       	movw	r16, r24
    124a:	6a 81       	ldd	r22, Y+2	; 0x02
    124c:	7b 81       	ldd	r23, Y+3	; 0x03
    124e:	86 d2       	rcall	.+1292   	; 0x175c <_ZN13CupLevelProbeC1EP10TeaMachine>
    1250:	1e 8f       	std	Y+30, r17	; 0x1e
    1252:	0d 8f       	std	Y+29, r16	; 0x1d
	m_pExtractor = new Extractor(m_pTeaMachine);
    1254:	86 e0       	ldi	r24, 0x06	; 6
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    125c:	8c 01       	movw	r16, r24
    125e:	6a 81       	ldd	r22, Y+2	; 0x02
    1260:	7b 81       	ldd	r23, Y+3	; 0x03
    1262:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN9ExtractorC1EP10TeaMachine>
    1266:	18 a3       	std	Y+32, r17	; 0x20
    1268:	0f 8f       	std	Y+31, r16	; 0x1f
	m_pMasher = new Masher(m_pTeaMachine);
    126a:	87 e0       	ldi	r24, 0x07	; 7
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    1272:	8c 01       	movw	r16, r24
    1274:	6a 81       	ldd	r22, Y+2	; 0x02
    1276:	7b 81       	ldd	r23, Y+3	; 0x03
    1278:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN6MasherC1EP10TeaMachine>
    127c:	1a a3       	std	Y+34, r17	; 0x22
    127e:	09 a3       	std	Y+33, r16	; 0x21
	
	// Initialise all components
	m_pBoiler->Initialise();
    1280:	89 8d       	ldd	r24, Y+25	; 0x19
    1282:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1284:	dc 01       	movw	r26, r24
    1286:	ed 91       	ld	r30, X+
    1288:	fc 91       	ld	r31, X
    128a:	01 90       	ld	r0, Z+
    128c:	f0 81       	ld	r31, Z
    128e:	e0 2d       	mov	r30, r0
    1290:	19 95       	eicall
	m_pBagConveyor->Initialise();
    1292:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1294:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1296:	dc 01       	movw	r26, r24
    1298:	ed 91       	ld	r30, X+
    129a:	fc 91       	ld	r31, X
    129c:	01 90       	ld	r0, Z+
    129e:	f0 81       	ld	r31, Z
    12a0:	e0 2d       	mov	r30, r0
    12a2:	19 95       	eicall
	m_pCupLevelProbe->Initialise();
    12a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12a8:	dc 01       	movw	r26, r24
    12aa:	ed 91       	ld	r30, X+
    12ac:	fc 91       	ld	r31, X
    12ae:	01 90       	ld	r0, Z+
    12b0:	f0 81       	ld	r31, Z
    12b2:	e0 2d       	mov	r30, r0
    12b4:	19 95       	eicall
	m_pExtractor->Initialise();
    12b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12b8:	98 a1       	ldd	r25, Y+32	; 0x20
    12ba:	dc 01       	movw	r26, r24
    12bc:	ed 91       	ld	r30, X+
    12be:	fc 91       	ld	r31, X
    12c0:	01 90       	ld	r0, Z+
    12c2:	f0 81       	ld	r31, Z
    12c4:	e0 2d       	mov	r30, r0
    12c6:	19 95       	eicall
	m_pMasher->Initialise();
    12c8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ca:	9a a1       	ldd	r25, Y+34	; 0x22
    12cc:	dc 01       	movw	r26, r24
    12ce:	ed 91       	ld	r30, X+
    12d0:	fc 91       	ld	r31, X
    12d2:	01 90       	ld	r0, Z+
    12d4:	f0 81       	ld	r31, Z
    12d6:	e0 2d       	mov	r30, r0
    12d8:	19 95       	eicall

    return true;
}
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	1f 91       	pop	r17
    12e2:	0f 91       	pop	r16
    12e4:	08 95       	ret

000012e6 <_ZN15ConveyorManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void ConveyorManager::SetNextState( ConveyorState nextState )
{
    m_State = nextState;
    12e6:	fc 01       	movw	r30, r24
    12e8:	13 8e       	std	Z+27, r1	; 0x1b
    12ea:	10 8e       	std	Z+24, r1	; 0x18
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	08 95       	ret

000012f0 <_ZN15ConveyorManager12BeginProcessEv>:
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
    12f8:	ec 01       	movw	r28, r24
    12fa:	00 e2       	ldi	r16, 0x20	; 32
    12fc:	10 e0       	ldi	r17, 0x00	; 0
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e1       	ldi	r20, 0x10	; 16
    1304:	57 e2       	ldi	r21, 0x27	; 39
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	8b 8f       	std	Y+27, r24	; 0x1b
    1312:	18 8e       	std	Y+24, r1	; 0x18
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <_ZN15ConveyorManager4StopEv>:
    1320:	fc 01       	movw	r30, r24
    1322:	81 8d       	ldd	r24, Z+25	; 0x19
    1324:	92 8d       	ldd	r25, Z+26	; 0x1a
    1326:	f3 c0       	rjmp	.+486    	; 0x150e <_ZN11CupConveyor4StopEv>

00001328 <_ZN15ConveyorManager4TestEv>:
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	1a d9       	rcall	.-3532   	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    1334:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    1338:	93 ff       	sbrs	r25, 3
    133a:	f9 cf       	rjmp	.-14     	; 0x132e <_ZN15ConveyorManager4TestEv+0x6>
    133c:	e8 81       	ld	r30, Y
    133e:	f9 81       	ldd	r31, Y+1	; 0x01
    1340:	01 90       	ld	r0, Z+
    1342:	f0 81       	ld	r31, Z
    1344:	e0 2d       	mov	r30, r0
    1346:	ce 01       	movw	r24, r28
    1348:	19 95       	eicall
    134a:	81 11       	cpse	r24, r1
    134c:	06 c0       	rjmp	.+12     	; 0x135a <_ZN15ConveyorManager4TestEv+0x32>
    134e:	e8 81       	ld	r30, Y
    1350:	f9 81       	ldd	r31, Y+1	; 0x01
    1352:	04 80       	ldd	r0, Z+4	; 0x04
    1354:	f5 81       	ldd	r31, Z+5	; 0x05
    1356:	e0 2d       	mov	r30, r0
    1358:	f6 cf       	rjmp	.-20     	; 0x1346 <_ZN15ConveyorManager4TestEv+0x1e>
    135a:	91 e0       	ldi	r25, 0x01	; 1
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	09 f0       	breq	.+2      	; 0x1362 <_ZN15ConveyorManager4TestEv+0x3a>
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	89 2f       	mov	r24, r25
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <_ZN15ConveyorManagerC1EP20TeaMachineController>:
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	ec 01       	movw	r28, r24
    1370:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    1374:	81 e8       	ldi	r24, 0x81	; 129
    1376:	94 e0       	ldi	r25, 0x04	; 4
    1378:	99 83       	std	Y+1, r25	; 0x01
    137a:	88 83       	st	Y, r24
    137c:	1a 8e       	std	Y+26, r1	; 0x1a
    137e:	19 8e       	std	Y+25, r1	; 0x19
    1380:	1b 8e       	std	Y+27, r1	; 0x1b
    1382:	df 91       	pop	r29
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <_ZN15ConveyorManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse ConveyorManager::AdvanceStateMachine()
{
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    1392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	b1 f0       	breq	.+44     	; 0x13c4 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x3c>
    1398:	28 f0       	brcs	.+10     	; 0x13a4 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x1c>
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	49 f1       	breq	.+82     	; 0x13f0 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x68>
    139e:	83 30       	cpi	r24, 0x03	; 3
    13a0:	d9 f5       	brne	.+118    	; 0x1418 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x90>
    13a2:	0e c0       	rjmp	.+28     	; 0x13c0 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x38>
    {
        // Reset step
        case ResetSynchroniseConveyor:
            Serial.print("State: ResetSynchroniseConveyor\n");
    13a4:	6f e1       	ldi	r22, 0x1F	; 31
    13a6:	74 e0       	ldi	r23, 0x04	; 4
    13a8:	85 e5       	ldi	r24, 0x55	; 85
    13aa:	9a e0       	ldi	r25, 0x0A	; 10
    13ac:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
            if( m_pCupConveyor->IsStationary() )
    13b0:	89 8d       	ldd	r24, Y+25	; 0x19
    13b2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13b4:	a3 d0       	rcall	.+326    	; 0x14fc <_ZN11CupConveyor12IsStationaryEv>
    13b6:	88 23       	and	r24, r24
    13b8:	79 f1       	breq	.+94     	; 0x1418 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x90>
            {
                // Process step complete - reset has finished
                ClearTimeout();
    13ba:	ce 01       	movw	r24, r28
    13bc:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
                response = ProcessComplete;
    13c0:	82 e0       	ldi	r24, 0x02	; 2
    13c2:	2b c0       	rjmp	.+86     	; 0x141a <_ZN15ConveyorManager19AdvanceStateMachineEv+0x92>
            
            break;
                    
        // Process step: Request conveyor advance
        case ConveyorBeginAdvance:
            Serial.print("State: ConveyorBeginAdvance\n");
    13c4:	60 e4       	ldi	r22, 0x40	; 64
    13c6:	74 e0       	ldi	r23, 0x04	; 4
    13c8:	85 e5       	ldi	r24, 0x55	; 85
    13ca:	9a e0       	ldi	r25, 0x0A	; 10
    13cc:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
            m_pCupConveyor->BeginAdvance();
    13d0:	89 8d       	ldd	r24, Y+25	; 0x19
    13d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13d4:	78 d0       	rcall	.+240    	; 0x14c6 <_ZN11CupConveyor12BeginAdvanceEv>
            SetTimeout(CONVEYOR_TIMEOUT_ADVANCE, CONVEYOR_ERR_TIMEOUT_ADVANCE);
    13d6:	00 e2       	ldi	r16, 0x20	; 32
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e1       	ldi	r20, 0x10	; 16
    13e0:	57 e2       	ldi	r21, 0x27	; 39
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 9d 1a 	call	0x353a	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void ConveyorManager::SetNextState( ConveyorState nextState )
{
    m_State = nextState;
    13ec:	82 e0       	ldi	r24, 0x02	; 2
    13ee:	13 c0       	rjmp	.+38     	; 0x1416 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x8e>
            SetNextState(ConveyorAdvancing);
            break;
                   
        // Process step: Conveyor advance is in process
        case ConveyorAdvancing:
			if( m_pCupConveyor->IsStationary())
    13f0:	89 8d       	ldd	r24, Y+25	; 0x19
    13f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13f4:	83 d0       	rcall	.+262    	; 0x14fc <_ZN11CupConveyor12IsStationaryEv>
    13f6:	88 23       	and	r24, r24
    13f8:	79 f0       	breq	.+30     	; 0x1418 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x90>
			{
				Serial.print("State: ConveyorAdvanceComplete\n");
    13fa:	6d e5       	ldi	r22, 0x5D	; 93
    13fc:	74 e0       	ldi	r23, 0x04	; 4
    13fe:	85 e5       	ldi	r24, 0x55	; 85
    1400:	9a e0       	ldi	r25, 0x0A	; 10
    1402:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
				ClearTimeout();
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
				m_pController->NotifyConveyorAdvanceComplete();
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	0e 94 de 24 	call	0x49bc	; 0x49bc <_ZN20TeaMachineController29NotifyConveyorAdvanceCompleteEv>
//
//  Set the next state in the process sequence
//
void ConveyorManager::SetNextState( ConveyorState nextState )
{
    m_State = nextState;
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	8b 8f       	std	Y+27, r24	; 0x1b
//
//  Initiate the next step of the process
//
ProcessManagerResponse ConveyorManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    1418:	80 e0       	ldi	r24, 0x00	; 0
			response = ProcessComplete;
			break;
    } // switch            
            
	return response;
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	08 95       	ret

00001424 <_ZN15ConveyorManager8ContinueEv>:
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse ConveyorManager::Continue()
{
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	ec 01       	movw	r28, r24
    142a:	88 8d       	ldd	r24, Y+24	; 0x18
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	11 f1       	breq	.+68     	; 0x1474 <_ZN15ConveyorManager8ContinueEv+0x50>
    1430:	82 30       	cpi	r24, 0x02	; 2
    1432:	01 f1       	breq	.+64     	; 0x1474 <_ZN15ConveyorManager8ContinueEv+0x50>
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    1434:	ce 01       	movw	r24, r28
    1436:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    143a:	81 11       	cpse	r24, r1
    143c:	03 c0       	rjmp	.+6      	; 0x1444 <_ZN15ConveyorManager8ContinueEv+0x20>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    143e:	ce 01       	movw	r24, r28
    1440:	a3 df       	rcall	.-186    	; 0x1388 <_ZN15ConveyorManager19AdvanceStateMachineEv>
    1442:	17 c0       	rjmp	.+46     	; 0x1472 <_ZN15ConveyorManager8ContinueEv+0x4e>
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	74 e0       	ldi	r23, 0x04	; 4
    1448:	85 e5       	ldi	r24, 0x55	; 85
    144a:	9a e0       	ldi	r25, 0x0A	; 10
    144c:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
    1450:	48 89       	ldd	r20, Y+16	; 0x10
    1452:	59 89       	ldd	r21, Y+17	; 0x11
    1454:	6a 89       	ldd	r22, Y+18	; 0x12
    1456:	7b 89       	ldd	r23, Y+19	; 0x13
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	85 e5       	ldi	r24, 0x55	; 85
    145e:	9a e0       	ldi	r25, 0x0A	; 10
    1460:	0e 94 71 34 	call	0x68e2	; 0x68e2 <_ZN5Print5printEmi>
            Serial.print("\n");
    1464:	6a e3       	ldi	r22, 0x3A	; 58
    1466:	7a e0       	ldi	r23, 0x0A	; 10
    1468:	85 e5       	ldi	r24, 0x55	; 85
    146a:	9a e0       	ldi	r25, 0x0A	; 10
    146c:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
{
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	88 8f       	std	Y+24, r24	; 0x18
        
        SetResponse(response);
    }
    
    return response;
}    
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <_ZN15ConveyorManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the conveyor manager
//
bool ConveyorManager::Initialise()
{
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	8c 01       	movw	r16, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    1484:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN18ProcessManagerBase10InitialiseEv>

    // Create and initialise a cup conveyor object
	m_pCupConveyor = new CupConveyor(m_pTeaMachine);
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    1490:	ec 01       	movw	r28, r24
    1492:	f8 01       	movw	r30, r16
    1494:	62 81       	ldd	r22, Z+2	; 0x02
    1496:	73 81       	ldd	r23, Z+3	; 0x03
    1498:	0a d0       	rcall	.+20     	; 0x14ae <_ZN11CupConveyorC1EP10TeaMachine>
    149a:	f8 01       	movw	r30, r16
    149c:	d2 8f       	std	Z+26, r29	; 0x1a
    149e:	c1 8f       	std	Z+25, r28	; 0x19
	
	return m_pCupConveyor->Initialise();
    14a0:	ce 01       	movw	r24, r28
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    ProcessManagerBase::Initialise();

    // Create and initialise a cup conveyor object
	m_pCupConveyor = new CupConveyor(m_pTeaMachine);
	
	return m_pCupConveyor->Initialise();
    14aa:	0c 94 ca 22 	jmp	0x4594	; 0x4594 <_ZN19TeaMachineComponent10InitialiseEv>

000014ae <_ZN11CupConveyorC1EP10TeaMachine>:
} //CupConveyor

//
//	Default destructor
//
CupConveyor::~CupConveyor()
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ec 01       	movw	r28, r24
    14b4:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    14b8:	81 e9       	ldi	r24, 0x91	; 145
    14ba:	94 e0       	ldi	r25, 0x04	; 4
    14bc:	99 83       	std	Y+1, r25	; 0x01
    14be:	88 83       	st	Y, r24
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

000014c6 <_ZN11CupConveyor12BeginAdvanceEv>:
//	BeginAdvance
//
//	Advance the conveyor
//
bool CupConveyor::BeginAdvance()
{
    14c6:	cf 93       	push	r28
    14c8:	df 93       	push	r29
    14ca:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_CUPCON_ADVANCE);
    14cc:	63 e0       	ldi	r22, 0x03	; 3
    14ce:	70 e0       	ldi	r23, 0x00	; 0
    14d0:	8c 81       	ldd	r24, Y+4	; 0x04
    14d2:	9d 81       	ldd	r25, Y+5	; 0x05
    14d4:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	delay(500);
    14d8:	64 ef       	ldi	r22, 0xF4	; 244
    14da:	71 e0       	ldi	r23, 0x01	; 1
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
	m_pSystem->ClearOutputRegisterBit(OUTREG_CUPCON_ADVANCE);
    14e4:	63 e0       	ldi	r22, 0x03	; 3
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	
	return true;
}
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	08 95       	ret

000014f8 <_ZN11CupConveyor4TestEv>:
//
//	Perform hardware tests
//
bool CupConveyor::Test()
{
	BeginAdvance();
    14f8:	e6 df       	rcall	.-52     	; 0x14c6 <_ZN11CupConveyor12BeginAdvanceEv>
    14fa:	ff cf       	rjmp	.-2      	; 0x14fa <_ZN11CupConveyor4TestEv+0x2>

000014fc <_ZN11CupConveyor12IsStationaryEv>:
//
//	Returns true if the conveyor motor has stopped
//
bool CupConveyor::IsStationary()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    14fc:	fc 01       	movw	r30, r24
    14fe:	84 81       	ldd	r24, Z+4	; 0x04
    1500:	95 81       	ldd	r25, Z+5	; 0x05
    1502:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>

	return ((wInputRegister & INREGMASK_CUPCON_STATIONARY) != 0);
}
    1506:	92 fb       	bst	r25, 2
    1508:	88 27       	eor	r24, r24
    150a:	80 f9       	bld	r24, 0
    150c:	08 95       	ret

0000150e <_ZN11CupConveyor4StopEv>:
//	Stop
//
//	Stop the conveyor
//
void CupConveyor::Stop()
{
    150e:	08 95       	ret

00001510 <_ZN11CupDetector12ClearMembersEv>:
    unsigned int distance = sonar.ping() / US_ROUNDTRIP_CM;
    
    m_bStationStates[nStation] = (distance > 0 );
    
    return m_bStationStates[nStation];
}
    1510:	fc 01       	movw	r30, r24
    1512:	36 96       	adiw	r30, 0x06	; 6
    1514:	40 96       	adiw	r24, 0x10	; 16
    1516:	11 92       	st	Z+, r1
    1518:	11 86       	std	Z+9, r1	; 0x09
    151a:	e8 17       	cp	r30, r24
    151c:	f9 07       	cpc	r31, r25
    151e:	d9 f7       	brne	.-10     	; 0x1516 <_ZN11CupDetector12ClearMembersEv+0x6>
    1520:	08 95       	ret

00001522 <_ZN11CupDetectorC1EP10TeaMachine>:
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	ec 01       	movw	r28, r24
    1528:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    152c:	8f ea       	ldi	r24, 0xAF	; 175
    152e:	94 e0       	ldi	r25, 0x04	; 4
    1530:	99 83       	std	Y+1, r25	; 0x01
    1532:	88 83       	st	Y, r24
    1534:	ce 01       	movw	r24, r28
    1536:	df 91       	pop	r29
    1538:	cf 91       	pop	r28
    153a:	ea cf       	rjmp	.-44     	; 0x1510 <_ZN11CupDetector12ClearMembersEv>

0000153c <_ZN11CupDetector10InitialiseEv>:
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	ec 01       	movw	r28, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	8d e0       	ldi	r24, 0x0D	; 13
    1546:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	89 e0       	ldi	r24, 0x09	; 9
    154e:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
    1552:	ce 01       	movw	r24, r28
    1554:	dd df       	rcall	.-70     	; 0x1510 <_ZN11CupDetector12ClearMembersEv>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <_ZN11CupDetector6UpdateEv>:
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	62 97       	sbiw	r28, 0x12	; 18
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	de bf       	out	0x3e, r29	; 62
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	cd bf       	out	0x3d, r28	; 61
    1582:	6c 01       	movw	r12, r24
    1584:	23 e0       	ldi	r18, 0x03	; 3
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	4d e0       	ldi	r20, 0x0D	; 13
    158a:	69 e0       	ldi	r22, 0x09	; 9
    158c:	ce 01       	movw	r24, r28
    158e:	01 96       	adiw	r24, 0x01	; 1
    1590:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN7NewPingC1Ehhi>
    1594:	89 e9       	ldi	r24, 0x99	; 153
    1596:	e8 2e       	mov	r14, r24
    1598:	84 e0       	ldi	r24, 0x04	; 4
    159a:	f8 2e       	mov	r15, r24
    159c:	92 e0       	ldi	r25, 0x02	; 2
    159e:	a9 2e       	mov	r10, r25
    15a0:	bb 24       	eor	r11, r11
    15a2:	b3 94       	inc	r11
    15a4:	f7 01       	movw	r30, r14
    15a6:	01 91       	ld	r16, Z+
    15a8:	11 91       	ld	r17, Z+
    15aa:	7f 01       	movw	r14, r30
    15ac:	a8 01       	movw	r20, r16
    15ae:	41 50       	subi	r20, 0x01	; 1
    15b0:	51 09       	sbc	r21, r1
    15b2:	6c e0       	ldi	r22, 0x0C	; 12
    15b4:	70 e0       	ldi	r23, 0x00	; 0
    15b6:	f6 01       	movw	r30, r12
    15b8:	84 81       	ldd	r24, Z+4	; 0x04
    15ba:	95 81       	ldd	r25, Z+5	; 0x05
    15bc:	0e 94 43 20 	call	0x4086	; 0x4086 <_ZN6System22SetOutRegisterBitGroupEji>
    15c0:	6e e1       	ldi	r22, 0x1E	; 30
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
    15cc:	ce 01       	movw	r24, r28
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	0e 94 41 18 	call	0x3082	; 0x3082 <_ZN7NewPing4pingEv>
    15d4:	f6 01       	movw	r30, r12
    15d6:	e0 0f       	add	r30, r16
    15d8:	f1 1f       	adc	r31, r17
    15da:	10 8a       	std	Z+16, r1	; 0x10
    15dc:	c9 97       	sbiw	r24, 0x39	; 57
    15de:	30 f0       	brcs	.+12     	; 0x15ec <_ZN11CupDetector6UpdateEv+0x8e>
    15e0:	86 81       	ldd	r24, Z+6	; 0x06
    15e2:	81 11       	cpse	r24, r1
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <_ZN11CupDetector6UpdateEv+0x98>
    15e6:	b6 82       	std	Z+6, r11	; 0x06
    15e8:	b0 8a       	std	Z+16, r11	; 0x10
    15ea:	05 c0       	rjmp	.+10     	; 0x15f6 <_ZN11CupDetector6UpdateEv+0x98>
    15ec:	86 81       	ldd	r24, Z+6	; 0x06
    15ee:	88 23       	and	r24, r24
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <_ZN11CupDetector6UpdateEv+0x98>
    15f2:	16 82       	std	Z+6, r1	; 0x06
    15f4:	a0 8a       	std	Z+16, r10	; 0x10
    15f6:	fb ea       	ldi	r31, 0xAB	; 171
    15f8:	ef 16       	cp	r14, r31
    15fa:	f4 e0       	ldi	r31, 0x04	; 4
    15fc:	ff 06       	cpc	r15, r31
    15fe:	91 f6       	brne	.-92     	; 0x15a4 <_ZN11CupDetector6UpdateEv+0x46>
    1600:	62 96       	adiw	r28, 0x12	; 18
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	bf 90       	pop	r11
    161e:	af 90       	pop	r10
    1620:	08 95       	ret

00001622 <_ZN11CupDetector20NotifyStationAdvanceEv>:
//  Called when the station positions advance by one (as a result
//  of the conveyor moving by one position). This allows the Cup Detector to
//	maintain correct station states and recognise subsequent station events correctly.
//
void CupDetector::NotifyStationAdvance()
{
    1622:	fc 01       	movw	r30, r24
    // Shift the station states by one position
    m_bStationStates[ST_COLLECTION_A] = m_bStationStates[ST_COLLECTION_B];
    1624:	86 85       	ldd	r24, Z+14	; 0x0e
    1626:	87 87       	std	Z+15, r24	; 0x0f
    m_bStationStates[ST_COLLECTION_B] = m_bStationStates[ST_COLLECTION_C];
    1628:	85 85       	ldd	r24, Z+13	; 0x0d
    162a:	86 87       	std	Z+14, r24	; 0x0e
    m_bStationStates[ST_COLLECTION_C] = m_bStationStates[ST_STIR];
    162c:	84 85       	ldd	r24, Z+12	; 0x0c
    162e:	85 87       	std	Z+13, r24	; 0x0d
    m_bStationStates[ST_STIR] = m_bStationStates[ST_MILK];
    1630:	83 85       	ldd	r24, Z+11	; 0x0b
    1632:	84 87       	std	Z+12, r24	; 0x0c
    m_bStationStates[ST_MILK] = m_bStationStates[ST_BREW];
    1634:	82 85       	ldd	r24, Z+10	; 0x0a
    1636:	83 87       	std	Z+11, r24	; 0x0b
    m_bStationStates[ST_BREW] = m_bStationStates[ST_RECEPTION_A];
    1638:	81 85       	ldd	r24, Z+9	; 0x09
    163a:	82 87       	std	Z+10, r24	; 0x0a
    m_bStationStates[ST_RECEPTION_A] = m_bStationStates[ST_RECEPTION_B];
    163c:	80 85       	ldd	r24, Z+8	; 0x08
    163e:	81 87       	std	Z+9, r24	; 0x09
    m_bStationStates[ST_RECEPTION_B] = m_bStationStates[ST_RECEPTION_C];
    1640:	87 81       	ldd	r24, Z+7	; 0x07
    1642:	80 87       	std	Z+8, r24	; 0x08
    m_bStationStates[ST_RECEPTION_C] = false;
    1644:	17 82       	std	Z+7, r1	; 0x07
    1646:	df 01       	movw	r26, r30
    1648:	50 96       	adiw	r26, 0x10	; 16
    164a:	7a 96       	adiw	r30, 0x1a	; 26
  
	// Clear station events
    for( int nStation = 0; nStation <= STATIONS; nStation++ )
    {
	    m_StationEvents[nStation] = StationEventNoChange;
    164c:	1d 92       	st	X+, r1
    m_bStationStates[ST_RECEPTION_A] = m_bStationStates[ST_RECEPTION_B];
    m_bStationStates[ST_RECEPTION_B] = m_bStationStates[ST_RECEPTION_C];
    m_bStationStates[ST_RECEPTION_C] = false;
  
	// Clear station events
    for( int nStation = 0; nStation <= STATIONS; nStation++ )
    164e:	ae 17       	cp	r26, r30
    1650:	bf 07       	cpc	r27, r31
    1652:	e1 f7       	brne	.-8      	; 0x164c <_ZN11CupDetector20NotifyStationAdvanceEv+0x2a>
    {
	    m_StationEvents[nStation] = StationEventNoChange;
    }
}
    1654:	08 95       	ret

00001656 <_ZN11CupDetector4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool CupDetector::Test()
{
    1656:	cf 93       	push	r28
    1658:	df 93       	push	r29
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	c3 54       	subi	r28, 0x43	; 67
    1660:	d1 09       	sbc	r29, r1
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	7c 01       	movw	r14, r24
    ClearMembers();
    166e:	50 df       	rcall	.-352    	; 0x1510 <_ZN11CupDetector12ClearMembersEv>
    Display testDisplay;
    1670:	ce 01       	movw	r24, r28
    1672:	01 96       	adiw	r24, 0x01	; 1
    1674:	6b d3       	rcall	.+1750   	; 0x1d4c <_ZN7DisplayC1Ev>
    testDisplay.Initialise();
    1676:	ce 01       	movw	r24, r28
    1678:	01 96       	adiw	r24, 0x01	; 1

	while( true )
	{
		Update();
    167a:	83 d7       	rcall	.+3846   	; 0x2582 <_ZN7Display10InitialiseEv>
    167c:	c7 01       	movw	r24, r14
    167e:	6f df       	rcall	.-290    	; 0x155e <_ZN11CupDetector6UpdateEv>
		bool bCupFound = false;
        String strStationStates;
    1680:	6b e3       	ldi	r22, 0x3B	; 59
    1682:	7a e0       	ldi	r23, 0x0A	; 10
    1684:	ce 01       	movw	r24, r28
    1686:	ce 96       	adiw	r24, 0x3e	; 62
    1688:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    168c:	57 01       	movw	r10, r14
    168e:	87 e0       	ldi	r24, 0x07	; 7
    1690:	a8 0e       	add	r10, r24
    1692:	b1 1c       	adc	r11, r1
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
    1694:	01 e0       	ldi	r16, 0x01	; 1
    1696:	10 e0       	ldi	r17, 0x00	; 0
    testDisplay.Initialise();

	while( true )
	{
		Update();
		bool bCupFound = false;
    1698:	d1 2c       	mov	r13, r1
        String strStationStates;
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
		{
           if( m_bStationStates[nStation] )
    169a:	f5 01       	movw	r30, r10
    169c:	81 91       	ld	r24, Z+
    169e:	5f 01       	movw	r10, r30
            {
	            // Cup is present
	            bCupFound = true;
	            testDisplay.Set( nStation, nStation );
    16a0:	20 e0       	ldi	r18, 0x00	; 0
		Update();
		bool bCupFound = false;
        String strStationStates;
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
		{
           if( m_bStationStates[nStation] )
    16a2:	88 23       	and	r24, r24
    16a4:	f1 f0       	breq	.+60     	; 0x16e2 <_ZN11CupDetector4TestEv+0x8c>
            {
	            // Cup is present
	            bCupFound = true;
	            testDisplay.Set( nStation, nStation );
    16a6:	a8 01       	movw	r20, r16
    16a8:	b8 01       	movw	r22, r16
    16aa:	ce 01       	movw	r24, r28
    16ac:	01 96       	adiw	r24, 0x01	; 1
    16ae:	a1 d3       	rcall	.+1858   	; 0x1df2 <_ZN7Display3SetEiib>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    16b0:	65 e9       	ldi	r22, 0x95	; 149
    16b2:	74 e0       	ldi	r23, 0x04	; 4
    16b4:	ce 01       	movw	r24, r28
    16b6:	c8 96       	adiw	r24, 0x38	; 56
    16b8:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
	            strStationStates = "X" + strStationStates;
    16bc:	be 01       	movw	r22, r28
    16be:	62 5c       	subi	r22, 0xC2	; 194
    16c0:	7f 4f       	sbci	r23, 0xFF	; 255
    16c2:	ce 01       	movw	r24, r28
    16c4:	c8 96       	adiw	r24, 0x38	; 56
    16c6:	0e 94 77 39 	call	0x72ee	; 0x72ee <_ZplRK15StringSumHelperRK6String>
    16ca:	bc 01       	movw	r22, r24
    16cc:	ce 01       	movw	r24, r28
    16ce:	ce 96       	adiw	r24, 0x3e	; 62
    16d0:	0e 94 65 38 	call	0x70ca	; 0x70ca <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    16d4:	ce 01       	movw	r24, r28
    16d6:	c8 96       	adiw	r24, 0x38	; 56
    16d8:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
		{
           if( m_bStationStates[nStation] )
            {
	            // Cup is present
	            bCupFound = true;
    16dc:	dd 24       	eor	r13, r13
    16de:	d3 94       	inc	r13
    16e0:	1c c0       	rjmp	.+56     	; 0x171a <_ZN11CupDetector4TestEv+0xc4>
	            strStationStates = "X" + strStationStates;
            }
            else
            {
		        // Cup is not present
		        testDisplay.Set( nStation, BLANK );
    16e2:	4f ef       	ldi	r20, 0xFF	; 255
    16e4:	5f ef       	ldi	r21, 0xFF	; 255
    16e6:	b8 01       	movw	r22, r16
    16e8:	ce 01       	movw	r24, r28
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	82 d3       	rcall	.+1796   	; 0x1df2 <_ZN7Display3SetEiib>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    16ee:	67 e9       	ldi	r22, 0x97	; 151
    16f0:	74 e0       	ldi	r23, 0x04	; 4
    16f2:	ce 01       	movw	r24, r28
    16f4:	c8 96       	adiw	r24, 0x38	; 56
    16f6:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
		        strStationStates = "-" + strStationStates;
    16fa:	be 01       	movw	r22, r28
    16fc:	62 5c       	subi	r22, 0xC2	; 194
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1700:	ce 01       	movw	r24, r28
    1702:	c8 96       	adiw	r24, 0x38	; 56
    1704:	0e 94 77 39 	call	0x72ee	; 0x72ee <_ZplRK15StringSumHelperRK6String>
    1708:	bc 01       	movw	r22, r24
    170a:	ce 01       	movw	r24, r28
    170c:	ce 96       	adiw	r24, 0x3e	; 62
    170e:	0e 94 65 38 	call	0x70ca	; 0x70ca <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1712:	ce 01       	movw	r24, r28
    1714:	c8 96       	adiw	r24, 0x38	; 56
    1716:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
	while( true )
	{
		Update();
		bool bCupFound = false;
        String strStationStates;
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
    171a:	0f 5f       	subi	r16, 0xFF	; 255
    171c:	1f 4f       	sbci	r17, 0xFF	; 255
    171e:	0a 30       	cpi	r16, 0x0A	; 10
    1720:	11 05       	cpc	r17, r1
    1722:	09 f0       	breq	.+2      	; 0x1726 <_ZN11CupDetector4TestEv+0xd0>
		        // Cup is not present
		        testDisplay.Set( nStation, BLANK );
		        strStationStates = "-" + strStationStates;
            }
		} // for
		testDisplay.Set( IndicatorLED_StatusGreen, bCupFound );
    1724:	ba cf       	rjmp	.-140    	; 0x169a <_ZN11CupDetector4TestEv+0x44>
    1726:	4d 2d       	mov	r20, r13
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	ce 01       	movw	r24, r28
    172c:	01 96       	adiw	r24, 0x01	; 1
		testDisplay.Update();
    172e:	98 d3       	rcall	.+1840   	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	1a d7       	rcall	.+3636   	; 0x256a <_ZN7Display6UpdateEv>
		Serial.println(strStationStates);
    1736:	be 01       	movw	r22, r28
    1738:	62 5c       	subi	r22, 0xC2	; 194
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	85 e5       	ldi	r24, 0x55	; 85
    173e:	9a e0       	ldi	r25, 0x0A	; 10
    1740:	0e 94 0a 34 	call	0x6814	; 0x6814 <_ZN5Print7printlnERK6String>
		delay(1000);
    1744:	68 ee       	ldi	r22, 0xE8	; 232
    1746:	73 e0       	ldi	r23, 0x03	; 3
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>

	while( true )
	{
		Update();
		bool bCupFound = false;
        String strStationStates;
    1750:	ce 01       	movw	r24, r28
    1752:	ce 96       	adiw	r24, 0x3e	; 62
    1754:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
{
    ClearMembers();
    Display testDisplay;
    testDisplay.Initialise();

	while( true )
    1758:	91 cf       	rjmp	.-222    	; 0x167c <_ZN11CupDetector4TestEv+0x26>

0000175a <_ZN13CupLevelProbe10InitialiseEv>:
} //CupLevelProbe

//
//	Default constructor
//
CupLevelProbe::~CupLevelProbe()
    175a:	08 95       	ret

0000175c <_ZN13CupLevelProbeC1EP10TeaMachine>:
    175c:	cf 93       	push	r28
    175e:	df 93       	push	r29
    1760:	ec 01       	movw	r28, r24
    1762:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    1766:	88 ef       	ldi	r24, 0xF8	; 248
    1768:	94 e0       	ldi	r25, 0x04	; 4
    176a:	99 83       	std	Y+1, r25	; 0x01
    176c:	88 83       	st	Y, r24
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	08 95       	ret

00001774 <_ZN13CupLevelProbe5RaiseEv>:
//	Raise
//
//	Raise the probe arm
//
bool CupLevelProbe::Raise()
{
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	ec 01       	movw	r28, r24
    m_pSystem->ClearOutputRegisterBit(OUTREG_CUPPROBE_UPDOWN);
    177a:	61 e1       	ldi	r22, 0x11	; 17
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8c 81       	ldd	r24, Y+4	; 0x04
    1780:	9d 81       	ldd	r25, Y+5	; 0x05
    1782:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
    m_pSystem->SetOutputRegisterBit(OUTREG_CUPPROBE_EN);
    1786:	60 e1       	ldi	r22, 0x10	; 16
    1788:	70 e0       	ldi	r23, 0x00	; 0
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <_ZN13CupLevelProbe5LowerEv>:
//	Lower
//
//	Lower the probe arm
//
bool CupLevelProbe::Lower()
{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_CUPPROBE_UPDOWN);
    17a0:	61 e1       	ldi	r22, 0x11	; 17
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	9d 81       	ldd	r25, Y+5	; 0x05
    17a8:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_CUPPROBE_EN);
    17ac:	60 e1       	ldi	r22, 0x10	; 16
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <_ZN13CupLevelProbe4StopEv>:
//
//	Stop the motor
//
void CupLevelProbe::Stop()
{
	m_pSystem->ClearOutputRegisterBit(OUTREG_CUPPROBE_EN);
    17c0:	60 e1       	ldi	r22, 0x10	; 16
    17c2:	70 e0       	ldi	r23, 0x00	; 0
    17c4:	fc 01       	movw	r30, r24
    17c6:	84 81       	ldd	r24, Z+4	; 0x04
    17c8:	95 81       	ldd	r25, Z+5	; 0x05
    17ca:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>

000017ce <_ZN13CupLevelProbe8IsRaisedEv>:
//
// Determine whether or not probe arm is raised
//
bool CupLevelProbe::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    17ce:	fc 01       	movw	r30, r24
    17d0:	84 81       	ldd	r24, Z+4	; 0x04
    17d2:	95 81       	ldd	r25, Z+5	; 0x05
    17d4:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_CUPPROBE_RETRACTED) != 0;   
    17d8:	84 e0       	ldi	r24, 0x04	; 4
    17da:	98 9f       	mul	r25, r24
    17dc:	81 2d       	mov	r24, r1
    17de:	99 27       	eor	r25, r25
    17e0:	11 24       	eor	r1, r1
}    
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	08 95       	ret

000017e6 <_ZN13CupLevelProbe9CupIsFullEv>:
//
//	Returns true if the cup level float switch indicates a full cup
//
bool CupLevelProbe::CupIsFull()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    17e6:	fc 01       	movw	r30, r24
    17e8:	84 81       	ldd	r24, Z+4	; 0x04
    17ea:	95 81       	ldd	r25, Z+5	; 0x05
    17ec:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>

	return ((wInputRegister & INREGMASK_CUPLEVEL_HILIMIT) != 0);
}
    17f0:	91 fb       	bst	r25, 1
    17f2:	88 27       	eor	r24, r24
    17f4:	80 f9       	bld	r24, 0
    17f6:	08 95       	ret

000017f8 <_ZN13CupLevelProbe4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool CupLevelProbe::Test()
{
    17f8:	ec 01       	movw	r28, r24
		else
		{
			// Lower the probe arm
			Lower();
			
			bool bIsFull = !CupIsFull();
    17fa:	01 e0       	ldi	r16, 0x01	; 1
bool CupLevelProbe::Test()
{
	while(true)
	{
		// Fetch mode
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    1804:	93 ff       	sbrs	r25, 3
    1806:	09 c0       	rjmp	.+18     	; 0x181a <_ZN13CupLevelProbe4TestEv+0x22>
		{
			// Raise the probe arm
			Raise();
    1808:	ce 01       	movw	r24, r28
    180a:	b4 df       	rcall	.-152    	; 0x1774 <_ZN13CupLevelProbe5RaiseEv>
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    1814:	93 fd       	sbrc	r25, 3
    1816:	fa cf       	rjmp	.-12     	; 0x180c <_ZN13CupLevelProbe4TestEv+0x14>
    1818:	24 c0       	rjmp	.+72     	; 0x1862 <_ZN13CupLevelProbe4TestEv+0x6a>
		}
		else
		{
			// Lower the probe arm
			Lower();
    181a:	ce 01       	movw	r24, r28
    181c:	be df       	rcall	.-132    	; 0x179a <_ZN13CupLevelProbe5LowerEv>
			
			bool bIsFull = !CupIsFull();
    181e:	ce 01       	movw	r24, r28
    1820:	e2 df       	rcall	.-60     	; 0x17e6 <_ZN13CupLevelProbe9CupIsFullEv>
    1822:	18 2f       	mov	r17, r24
    1824:	10 27       	eor	r17, r16
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0)
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    182e:	93 fd       	sbrc	r25, 3
    1830:	18 c0       	rjmp	.+48     	; 0x1862 <_ZN13CupLevelProbe4TestEv+0x6a>
			{
				if(CupIsFull())
    1832:	ce 01       	movw	r24, r28
    1834:	d8 df       	rcall	.-80     	; 0x17e6 <_ZN13CupLevelProbe9CupIsFullEv>
    1836:	88 23       	and	r24, r24
    1838:	51 f0       	breq	.+20     	; 0x184e <_ZN13CupLevelProbe4TestEv+0x56>
    183a:	11 11       	cpse	r17, r1
				{
					// Cup is full
					if(!bIsFull)
    183c:	f4 cf       	rjmp	.-24     	; 0x1826 <_ZN13CupLevelProbe4TestEv+0x2e>
    183e:	63 eb       	ldi	r22, 0xB3	; 179
					{
						bIsFull = true;
						Serial.print("Cup is FULL\n");
    1840:	74 e0       	ldi	r23, 0x04	; 4
    1842:	85 e5       	ldi	r24, 0x55	; 85
    1844:	9a e0       	ldi	r25, 0x0A	; 10
    1846:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
    184a:	11 e0       	ldi	r17, 0x01	; 1
				if(CupIsFull())
				{
					// Cup is full
					if(!bIsFull)
					{
						bIsFull = true;
    184c:	ec cf       	rjmp	.-40     	; 0x1826 <_ZN13CupLevelProbe4TestEv+0x2e>
    184e:	11 23       	and	r17, r17
					}
				}	
				else	
				{
					// Cup is not full
					if(bIsFull)
    1850:	51 f3       	breq	.-44     	; 0x1826 <_ZN13CupLevelProbe4TestEv+0x2e>
    1852:	60 ec       	ldi	r22, 0xC0	; 192
					{
						bIsFull = false;
						Serial.print("Cup is NOT FULL\n");
    1854:	74 e0       	ldi	r23, 0x04	; 4
    1856:	85 e5       	ldi	r24, 0x55	; 85
    1858:	9a e0       	ldi	r25, 0x0A	; 10
    185a:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
				else	
				{
					// Cup is not full
					if(bIsFull)
					{
						bIsFull = false;
    185e:	10 e0       	ldi	r17, 0x00	; 0
    1860:	e2 cf       	rjmp	.-60     	; 0x1826 <_ZN13CupLevelProbe4TestEv+0x2e>
						Serial.print("Cup is NOT FULL\n");
					}
				}		
			}
		}
        if(IsRaised())
    1862:	ce 01       	movw	r24, r28
    1864:	b4 df       	rcall	.-152    	; 0x17ce <_ZN13CupLevelProbe8IsRaisedEv>
    1866:	88 23       	and	r24, r24
    1868:	19 f0       	breq	.+6      	; 0x1870 <_ZN13CupLevelProbe4TestEv+0x78>
    186a:	61 ed       	ldi	r22, 0xD1	; 209
        {
            Serial.print("Probe is RAISED\n");
    186c:	74 e0       	ldi	r23, 0x04	; 4
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <_ZN13CupLevelProbe4TestEv+0x7c>
    1870:	62 ee       	ldi	r22, 0xE2	; 226
        }
        else
        {
            Serial.print("Probe is LOWERED\n");
    1872:	74 e0       	ldi	r23, 0x04	; 4
    1874:	85 e5       	ldi	r24, 0x55	; 85
    1876:	9a e0       	ldi	r25, 0x0A	; 10
    1878:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
    187c:	68 ee       	ldi	r22, 0xE8	; 232
        }
        delay(1000);
    187e:	73 e0       	ldi	r23, 0x03	; 3
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
    1888:	b9 cf       	rjmp	.-142    	; 0x17fc <_ZN13CupLevelProbe4TestEv+0x4>

0000188a <_ZN17DallasTemperature19defaultAlarmHandlerEPKh>:
//
//	Perform hardware tests
//
bool CupLevelProbe::Test()
{
	while(true)
    188a:	08 95       	ret

0000188c <_ZN17DallasTemperatureC1EP7OneWire>:
    DeviceAddress deviceAddress;
    getAddress(deviceAddress, deviceIndex);

    return requestTemperaturesByAddress(deviceAddress);

}
    188c:	fc 01       	movw	r30, r24
    188e:	85 e4       	ldi	r24, 0x45	; 69
    1890:	9c e0       	ldi	r25, 0x0C	; 12
    1892:	92 8b       	std	Z+18, r25	; 0x12
    1894:	81 8b       	std	Z+17, r24	; 0x11
    1896:	76 83       	std	Z+6, r23	; 0x06
    1898:	65 83       	std	Z+5, r22	; 0x05
    189a:	14 82       	std	Z+4, r1	; 0x04
    189c:	10 82       	st	Z, r1
    189e:	89 e0       	ldi	r24, 0x09	; 9
    18a0:	81 83       	std	Z+1, r24	; 0x01
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	82 83       	std	Z+2, r24	; 0x02
    18a6:	83 83       	std	Z+3, r24	; 0x03
    18a8:	08 95       	ret

000018aa <_ZN17DallasTemperature12validAddressEPKh>:
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	eb 01       	movw	r28, r22
    18b0:	67 e0       	ldi	r22, 0x07	; 7
    18b2:	ce 01       	movw	r24, r28
    18b4:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <_ZN7OneWire4crc8EPKhh>
    18b8:	91 e0       	ldi	r25, 0x01	; 1
    18ba:	2f 81       	ldd	r18, Y+7	; 0x07
    18bc:	28 13       	cpse	r18, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	89 2f       	mov	r24, r25
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <_ZN17DallasTemperature10getAddressEPhh>:
    18c8:	ef 92       	push	r14
    18ca:	ff 92       	push	r15
    18cc:	0f 93       	push	r16
    18ce:	1f 93       	push	r17
    18d0:	cf 93       	push	r28
    18d2:	df 93       	push	r29
    18d4:	8c 01       	movw	r16, r24
    18d6:	7b 01       	movw	r14, r22
    18d8:	d4 2f       	mov	r29, r20
    18da:	fc 01       	movw	r30, r24
    18dc:	85 81       	ldd	r24, Z+5	; 0x05
    18de:	96 81       	ldd	r25, Z+6	; 0x06
    18e0:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN7OneWire12reset_searchEv>
    18e4:	c0 e0       	ldi	r28, 0x00	; 0
    18e6:	b7 01       	movw	r22, r14
    18e8:	f8 01       	movw	r30, r16
    18ea:	85 81       	ldd	r24, Z+5	; 0x05
    18ec:	96 81       	ldd	r25, Z+6	; 0x06
    18ee:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_ZN7OneWire6searchEPh>
    18f2:	88 23       	and	r24, r24
    18f4:	51 f0       	breq	.+20     	; 0x190a <_ZN17DallasTemperature10getAddressEPhh+0x42>
    18f6:	dc 13       	cpse	r29, r28
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <_ZN17DallasTemperature10getAddressEPhh+0x3c>
    18fa:	b7 01       	movw	r22, r14
    18fc:	c8 01       	movw	r24, r16
    18fe:	d5 df       	rcall	.-86     	; 0x18aa <_ZN17DallasTemperature12validAddressEPKh>
    1900:	81 11       	cpse	r24, r1
    1902:	04 c0       	rjmp	.+8      	; 0x190c <_ZN17DallasTemperature10getAddressEPhh+0x44>
    1904:	cf 5f       	subi	r28, 0xFF	; 255
    1906:	dc 17       	cp	r29, r28
    1908:	70 f7       	brcc	.-36     	; 0x18e6 <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	08 95       	ret

0000191a <_ZN17DallasTemperature14readScratchPadEPKhPh>:
    191a:	ef 92       	push	r14
    191c:	ff 92       	push	r15
    191e:	0f 93       	push	r16
    1920:	1f 93       	push	r17
    1922:	cf 93       	push	r28
    1924:	df 93       	push	r29
    1926:	8c 01       	movw	r16, r24
    1928:	eb 01       	movw	r28, r22
    192a:	7a 01       	movw	r14, r20
    192c:	fc 01       	movw	r30, r24
    192e:	85 81       	ldd	r24, Z+5	; 0x05
    1930:	96 81       	ldd	r25, Z+6	; 0x06
    1932:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN7OneWire5resetEv>
    1936:	88 23       	and	r24, r24
    1938:	11 f1       	breq	.+68     	; 0x197e <_ZN17DallasTemperature14readScratchPadEPKhPh+0x64>
    193a:	be 01       	movw	r22, r28
    193c:	f8 01       	movw	r30, r16
    193e:	85 81       	ldd	r24, Z+5	; 0x05
    1940:	96 81       	ldd	r25, Z+6	; 0x06
    1942:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN7OneWire6selectEPKh>
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	6e eb       	ldi	r22, 0xBE	; 190
    194a:	f8 01       	movw	r30, r16
    194c:	85 81       	ldd	r24, Z+5	; 0x05
    194e:	96 81       	ldd	r25, Z+6	; 0x06
    1950:	0e 94 3b 19 	call	0x3276	; 0x3276 <_ZN7OneWire5writeEhh>
    1954:	e7 01       	movw	r28, r14
    1956:	f9 e0       	ldi	r31, 0x09	; 9
    1958:	ef 0e       	add	r14, r31
    195a:	f1 1c       	adc	r15, r1
    195c:	f8 01       	movw	r30, r16
    195e:	85 81       	ldd	r24, Z+5	; 0x05
    1960:	96 81       	ldd	r25, Z+6	; 0x06
    1962:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_ZN7OneWire4readEv>
    1966:	89 93       	st	Y+, r24
    1968:	ce 15       	cp	r28, r14
    196a:	df 05       	cpc	r29, r15
    196c:	b9 f7       	brne	.-18     	; 0x195c <_ZN17DallasTemperature14readScratchPadEPKhPh+0x42>
    196e:	f8 01       	movw	r30, r16
    1970:	85 81       	ldd	r24, Z+5	; 0x05
    1972:	96 81       	ldd	r25, Z+6	; 0x06
    1974:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN7OneWire5resetEv>
    1978:	91 e0       	ldi	r25, 0x01	; 1
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	09 f0       	breq	.+2      	; 0x1980 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x66>
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	89 2f       	mov	r24, r25
    1982:	df 91       	pop	r29
    1984:	cf 91       	pop	r28
    1986:	1f 91       	pop	r17
    1988:	0f 91       	pop	r16
    198a:	ff 90       	pop	r15
    198c:	ef 90       	pop	r14
    198e:	08 95       	ret

00001990 <_ZN17DallasTemperature11isConnectedEPKhPh>:
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	ea 01       	movw	r28, r20
    1996:	c1 df       	rcall	.-126    	; 0x191a <_ZN17DallasTemperature14readScratchPadEPKhPh>
    1998:	88 23       	and	r24, r24
    199a:	39 f0       	breq	.+14     	; 0x19aa <_ZN17DallasTemperature11isConnectedEPKhPh+0x1a>
    199c:	68 e0       	ldi	r22, 0x08	; 8
    199e:	ce 01       	movw	r24, r28
    19a0:	0e 94 5a 1a 	call	0x34b4	; 0x34b4 <_ZN7OneWire4crc8EPKhh>
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	28 85       	ldd	r18, Y+8	; 0x08
    19a8:	28 13       	cpse	r18, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	89 2f       	mov	r24, r25
    19ae:	df 91       	pop	r29
    19b0:	cf 91       	pop	r28
    19b2:	08 95       	ret

000019b4 <_ZN17DallasTemperature15readPowerSupplyEPKh>:
    19b4:	0f 93       	push	r16
    19b6:	1f 93       	push	r17
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	ec 01       	movw	r28, r24
    19be:	8b 01       	movw	r16, r22
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN7OneWire5resetEv>
    19c8:	b8 01       	movw	r22, r16
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	0e 94 89 19 	call	0x3312	; 0x3312 <_ZN7OneWire6selectEPKh>
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	64 eb       	ldi	r22, 0xB4	; 180
    19d6:	8d 81       	ldd	r24, Y+5	; 0x05
    19d8:	9e 81       	ldd	r25, Y+6	; 0x06
    19da:	0e 94 3b 19 	call	0x3276	; 0x3276 <_ZN7OneWire5writeEhh>
    19de:	8d 81       	ldd	r24, Y+5	; 0x05
    19e0:	9e 81       	ldd	r25, Y+6	; 0x06
    19e2:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN7OneWire8read_bitEv>
    19e6:	18 2f       	mov	r17, r24
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN7OneWire5resetEv>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	11 11       	cpse	r17, r1
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	df 91       	pop	r29
    19f8:	cf 91       	pop	r28
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <_ZN17DallasTemperature13getResolutionEPKh>:
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	29 97       	sbiw	r28, 0x09	; 9
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	fb 01       	movw	r30, r22
    1a16:	20 81       	ld	r18, Z
    1a18:	20 31       	cpi	r18, 0x10	; 16
    1a1a:	c9 f0       	breq	.+50     	; 0x1a4e <_ZN17DallasTemperature13getResolutionEPKh+0x4e>
    1a1c:	ae 01       	movw	r20, r28
    1a1e:	4f 5f       	subi	r20, 0xFF	; 255
    1a20:	5f 4f       	sbci	r21, 0xFF	; 255
    1a22:	b6 df       	rcall	.-148    	; 0x1990 <_ZN17DallasTemperature11isConnectedEPKhPh>
    1a24:	88 23       	and	r24, r24
    1a26:	89 f0       	breq	.+34     	; 0x1a4a <_ZN17DallasTemperature13getResolutionEPKh+0x4a>
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	8f 33       	cpi	r24, 0x3F	; 63
    1a2c:	61 f0       	breq	.+24     	; 0x1a46 <_ZN17DallasTemperature13getResolutionEPKh+0x46>
    1a2e:	20 f4       	brcc	.+8      	; 0x1a38 <_ZN17DallasTemperature13getResolutionEPKh+0x38>
    1a30:	8f 31       	cpi	r24, 0x1F	; 31
    1a32:	59 f4       	brne	.+22     	; 0x1a4a <_ZN17DallasTemperature13getResolutionEPKh+0x4a>
    1a34:	89 e0       	ldi	r24, 0x09	; 9
    1a36:	0c c0       	rjmp	.+24     	; 0x1a50 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    1a38:	8f 35       	cpi	r24, 0x5F	; 95
    1a3a:	19 f0       	breq	.+6      	; 0x1a42 <_ZN17DallasTemperature13getResolutionEPKh+0x42>
    1a3c:	8f 37       	cpi	r24, 0x7F	; 127
    1a3e:	39 f0       	breq	.+14     	; 0x1a4e <_ZN17DallasTemperature13getResolutionEPKh+0x4e>
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <_ZN17DallasTemperature13getResolutionEPKh+0x4a>
    1a42:	8b e0       	ldi	r24, 0x0B	; 11
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    1a46:	8a e0       	ldi	r24, 0x0A	; 10
    1a48:	03 c0       	rjmp	.+6      	; 0x1a50 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    1a4e:	8c e0       	ldi	r24, 0x0C	; 12
    1a50:	29 96       	adiw	r28, 0x09	; 9
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <_ZN17DallasTemperature5beginEv>:
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	28 97       	sbiw	r28, 0x08	; 8
    1a74:	0f b6       	in	r0, 0x3f	; 63
    1a76:	f8 94       	cli
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	0f be       	out	0x3f, r0	; 63
    1a7c:	cd bf       	out	0x3d, r28	; 61
    1a7e:	8c 01       	movw	r16, r24
    1a80:	fc 01       	movw	r30, r24
    1a82:	85 81       	ldd	r24, Z+5	; 0x05
    1a84:	96 81       	ldd	r25, Z+6	; 0x06
    1a86:	0e 94 a9 19 	call	0x3352	; 0x3352 <_ZN7OneWire12reset_searchEv>
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	14 82       	std	Z+4, r1	; 0x04
    1a8e:	ff 24       	eor	r15, r15
    1a90:	f3 94       	inc	r15
    1a92:	be 01       	movw	r22, r28
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	f8 01       	movw	r30, r16
    1a9a:	85 81       	ldd	r24, Z+5	; 0x05
    1a9c:	96 81       	ldd	r25, Z+6	; 0x06
    1a9e:	0e 94 d7 19 	call	0x33ae	; 0x33ae <_ZN7OneWire6searchEPh>
    1aa2:	88 23       	and	r24, r24
    1aa4:	61 f1       	breq	.+88     	; 0x1afe <_ZN17DallasTemperature5beginEv+0x9c>
    1aa6:	be 01       	movw	r22, r28
    1aa8:	6f 5f       	subi	r22, 0xFF	; 255
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	c8 01       	movw	r24, r16
    1aae:	fd de       	rcall	.-518    	; 0x18aa <_ZN17DallasTemperature12validAddressEPKh>
    1ab0:	88 23       	and	r24, r24
    1ab2:	79 f3       	breq	.-34     	; 0x1a92 <_ZN17DallasTemperature5beginEv+0x30>
    1ab4:	f8 01       	movw	r30, r16
    1ab6:	80 81       	ld	r24, Z
    1ab8:	81 11       	cpse	r24, r1
    1aba:	07 c0       	rjmp	.+14     	; 0x1aca <_ZN17DallasTemperature5beginEv+0x68>
    1abc:	be 01       	movw	r22, r28
    1abe:	6f 5f       	subi	r22, 0xFF	; 255
    1ac0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	77 df       	rcall	.-274    	; 0x19b4 <_ZN17DallasTemperature15readPowerSupplyEPKh>
    1ac6:	81 11       	cpse	r24, r1
    1ac8:	17 c0       	rjmp	.+46     	; 0x1af8 <_ZN17DallasTemperature5beginEv+0x96>
    1aca:	f8 01       	movw	r30, r16
    1acc:	e1 80       	ldd	r14, Z+1	; 0x01
    1ace:	be 01       	movw	r22, r28
    1ad0:	6f 5f       	subi	r22, 0xFF	; 255
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	c8 01       	movw	r24, r16
    1ad6:	94 df       	rcall	.-216    	; 0x1a00 <_ZN17DallasTemperature13getResolutionEPKh>
    1ad8:	8e 15       	cp	r24, r14
    1ada:	18 f4       	brcc	.+6      	; 0x1ae2 <_ZN17DallasTemperature5beginEv+0x80>
    1adc:	f8 01       	movw	r30, r16
    1ade:	81 81       	ldd	r24, Z+1	; 0x01
    1ae0:	05 c0       	rjmp	.+10     	; 0x1aec <_ZN17DallasTemperature5beginEv+0x8a>
    1ae2:	be 01       	movw	r22, r28
    1ae4:	6f 5f       	subi	r22, 0xFF	; 255
    1ae6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae8:	c8 01       	movw	r24, r16
    1aea:	8a df       	rcall	.-236    	; 0x1a00 <_ZN17DallasTemperature13getResolutionEPKh>
    1aec:	f8 01       	movw	r30, r16
    1aee:	81 83       	std	Z+1, r24	; 0x01
    1af0:	84 81       	ldd	r24, Z+4	; 0x04
    1af2:	8f 5f       	subi	r24, 0xFF	; 255
    1af4:	84 83       	std	Z+4, r24	; 0x04
    1af6:	cd cf       	rjmp	.-102    	; 0x1a92 <_ZN17DallasTemperature5beginEv+0x30>
    1af8:	f8 01       	movw	r30, r16
    1afa:	f0 82       	st	Z, r15
    1afc:	e6 cf       	rjmp	.-52     	; 0x1aca <_ZN17DallasTemperature5beginEv+0x68>
    1afe:	28 96       	adiw	r28, 0x08	; 8
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	ff 90       	pop	r15
    1b14:	ef 90       	pop	r14
    1b16:	08 95       	ret

00001b18 <_ZN17DallasTemperature20isConversionCompleteEv>:
    1b18:	fc 01       	movw	r30, r24
    1b1a:	85 81       	ldd	r24, Z+5	; 0x05
    1b1c:	96 81       	ldd	r25, Z+6	; 0x06
    1b1e:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN7OneWire8read_bitEv>
    1b22:	91 e0       	ldi	r25, 0x01	; 1
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <_ZN17DallasTemperature20isConversionCompleteEv+0x12>
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	89 2f       	mov	r24, r25
    1b2c:	08 95       	ret

00001b2e <_ZN17DallasTemperature27blockTillConversionCompleteEh>:
    1b2e:	8f 92       	push	r8
    1b30:	9f 92       	push	r9
    1b32:	af 92       	push	r10
    1b34:	bf 92       	push	r11
    1b36:	cf 92       	push	r12
    1b38:	df 92       	push	r13
    1b3a:	ef 92       	push	r14
    1b3c:	ff 92       	push	r15
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	ec 01       	movw	r28, r24
    1b48:	69 50       	subi	r22, 0x09	; 9
    1b4a:	63 30       	cpi	r22, 0x03	; 3
    1b4c:	48 f4       	brcc	.+18     	; 0x1b60 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x32>
    1b4e:	e6 2f       	mov	r30, r22
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	ee 0f       	add	r30, r30
    1b54:	ff 1f       	adc	r31, r31
    1b56:	e4 50       	subi	r30, 0x04	; 4
    1b58:	fb 4f       	sbci	r31, 0xFB	; 251
    1b5a:	00 81       	ld	r16, Z
    1b5c:	11 81       	ldd	r17, Z+1	; 0x01
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x36>
    1b60:	0e ee       	ldi	r16, 0xEE	; 238
    1b62:	12 e0       	ldi	r17, 0x02	; 2
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	88 23       	and	r24, r24
    1b68:	e9 f0       	breq	.+58     	; 0x1ba4 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x76>
    1b6a:	88 81       	ld	r24, Y
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	1a c0       	rjmp	.+52     	; 0x1ba4 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x76>
    1b70:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    1b74:	4b 01       	movw	r8, r22
    1b76:	5c 01       	movw	r10, r24
    1b78:	68 01       	movw	r12, r16
    1b7a:	11 0f       	add	r17, r17
    1b7c:	ee 08       	sbc	r14, r14
    1b7e:	ff 08       	sbc	r15, r15
    1b80:	ce 01       	movw	r24, r28
    1b82:	ca df       	rcall	.-108    	; 0x1b18 <_ZN17DallasTemperature20isConversionCompleteEv>
    1b84:	81 11       	cpse	r24, r1
    1b86:	20 c0       	rjmp	.+64     	; 0x1bc8 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x9a>
    1b88:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8c 19       	sub	r24, r12
    1b92:	9d 09       	sbc	r25, r13
    1b94:	ae 09       	sbc	r26, r14
    1b96:	bf 09       	sbc	r27, r15
    1b98:	88 15       	cp	r24, r8
    1b9a:	99 05       	cpc	r25, r9
    1b9c:	aa 05       	cpc	r26, r10
    1b9e:	bb 05       	cpc	r27, r11
    1ba0:	78 f3       	brcs	.-34     	; 0x1b80 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x52>
    1ba2:	12 c0       	rjmp	.+36     	; 0x1bc8 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x9a>
    1ba4:	b8 01       	movw	r22, r16
    1ba6:	11 0f       	add	r17, r17
    1ba8:	88 0b       	sbc	r24, r24
    1baa:	99 0b       	sbc	r25, r25
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	ff 90       	pop	r15
    1bb6:	ef 90       	pop	r14
    1bb8:	df 90       	pop	r13
    1bba:	cf 90       	pop	r12
    1bbc:	bf 90       	pop	r11
    1bbe:	af 90       	pop	r10
    1bc0:	9f 90       	pop	r9
    1bc2:	8f 90       	pop	r8
    1bc4:	0c 94 27 36 	jmp	0x6c4e	; 0x6c4e <delay>
    1bc8:	df 91       	pop	r29
    1bca:	cf 91       	pop	r28
    1bcc:	1f 91       	pop	r17
    1bce:	0f 91       	pop	r16
    1bd0:	ff 90       	pop	r15
    1bd2:	ef 90       	pop	r14
    1bd4:	df 90       	pop	r13
    1bd6:	cf 90       	pop	r12
    1bd8:	bf 90       	pop	r11
    1bda:	af 90       	pop	r10
    1bdc:	9f 90       	pop	r9
    1bde:	8f 90       	pop	r8
    1be0:	08 95       	ret

00001be2 <_ZN17DallasTemperature19requestTemperaturesEv>:
    1be2:	cf 93       	push	r28
    1be4:	df 93       	push	r29
    1be6:	ec 01       	movw	r28, r24
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	0e 94 9e 18 	call	0x313c	; 0x313c <_ZN7OneWire5resetEv>
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	0e 94 a6 19 	call	0x334c	; 0x334c <_ZN7OneWire4skipEv>
    1bf8:	48 81       	ld	r20, Y
    1bfa:	64 e4       	ldi	r22, 0x44	; 68
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	0e 94 3b 19 	call	0x3276	; 0x3276 <_ZN7OneWire5writeEhh>
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	88 23       	and	r24, r24
    1c08:	29 f0       	breq	.+10     	; 0x1c14 <_ZN17DallasTemperature19requestTemperaturesEv+0x32>
    1c0a:	69 81       	ldd	r22, Y+1	; 0x01
    1c0c:	ce 01       	movw	r24, r28
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	8d cf       	rjmp	.-230    	; 0x1b2e <_ZN17DallasTemperature27blockTillConversionCompleteEh>
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <_ZN17DallasTemperature20calculateTemperatureEPKhPh>:
    return getTempF((uint8_t*)deviceAddress);

}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad){
    1c1a:	fa 01       	movw	r30, r20

    int16_t fpTemperature =
    (((int16_t) scratchPad[TEMP_MSB]) << 11) |
    (((int16_t) scratchPad[TEMP_LSB]) << 3);
    1c1c:	21 81       	ldd	r18, Z+1	; 0x01
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	c9 01       	movw	r24, r18
    1c22:	98 2f       	mov	r25, r24
    1c24:	88 27       	eor	r24, r24
    1c26:	99 0f       	add	r25, r25
    1c28:	99 0f       	add	r25, r25
    1c2a:	99 0f       	add	r25, r25
    1c2c:	20 81       	ld	r18, Z
    1c2e:	48 e0       	ldi	r20, 0x08	; 8
    1c30:	24 9f       	mul	r18, r20
    1c32:	90 01       	movw	r18, r0
    1c34:	11 24       	eor	r1, r1
    1c36:	28 2b       	or	r18, r24
    1c38:	39 2b       	or	r19, r25
    value for a DS18S20, and James Cameron added legacy DS1820 support.

    See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
    */

    if (deviceAddress[0] == DS18S20MODEL){
    1c3a:	db 01       	movw	r26, r22
    1c3c:	8c 91       	ld	r24, X
    1c3e:	80 31       	cpi	r24, 0x10	; 16
    1c40:	c1 f4       	brne	.+48     	; 0x1c72 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x58>
        fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 +
            (
                ((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) /
    1c42:	67 81       	ldd	r22, Z+7	; 0x07
    1c44:	70 e0       	ldi	r23, 0x00	; 0

    See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
    */

    if (deviceAddress[0] == DS18S20MODEL){
        fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 +
    1c46:	86 81       	ldd	r24, Z+6	; 0x06
    1c48:	ab 01       	movw	r20, r22
    1c4a:	48 1b       	sub	r20, r24
    1c4c:	51 09       	sbc	r21, r1
    1c4e:	ca 01       	movw	r24, r20
    1c50:	96 95       	lsr	r25
    1c52:	98 2f       	mov	r25, r24
    1c54:	88 27       	eor	r24, r24
    1c56:	97 95       	ror	r25
    1c58:	87 95       	ror	r24
    1c5a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__divmodhi4>
    1c5e:	60 51       	subi	r22, 0x10	; 16
    1c60:	71 09       	sbc	r23, r1
    1c62:	20 7f       	andi	r18, 0xF0	; 240
    1c64:	53 e0       	ldi	r21, 0x03	; 3
    1c66:	22 0f       	add	r18, r18
    1c68:	33 1f       	adc	r19, r19
    1c6a:	5a 95       	dec	r21
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x4c>
    1c6e:	26 0f       	add	r18, r22
    1c70:	37 1f       	adc	r19, r23
                  scratchPad[COUNT_PER_C]
            );
    }

    return fpTemperature;
}
    1c72:	c9 01       	movw	r24, r18
    1c74:	08 95       	ret

00001c76 <_ZN17DallasTemperature7getTempEPKh>:
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress){
    1c76:	ef 92       	push	r14
    1c78:	ff 92       	push	r15
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	29 97       	sbiw	r28, 0x09	; 9
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	8c 01       	movw	r16, r24
    1c94:	7b 01       	movw	r14, r22

    ScratchPad scratchPad;
    if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    1c96:	ae 01       	movw	r20, r28
    1c98:	4f 5f       	subi	r20, 0xFF	; 255
    1c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9c:	79 de       	rcall	.-782    	; 0x1990 <_ZN17DallasTemperature11isConnectedEPKhPh>
    1c9e:	88 23       	and	r24, r24
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <_ZN17DallasTemperature7getTempEPKh+0x3a>
    1ca2:	ae 01       	movw	r20, r28
    1ca4:	4f 5f       	subi	r20, 0xFF	; 255
    1ca6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca8:	b7 01       	movw	r22, r14
    1caa:	c8 01       	movw	r24, r16
    1cac:	b6 df       	rcall	.-148    	; 0x1c1a <_ZN17DallasTemperature20calculateTemperatureEPKhPh>
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <_ZN17DallasTemperature7getTempEPKh+0x3e>
    return DEVICE_DISCONNECTED_RAW;
    1cb0:	80 e8       	ldi	r24, 0x80	; 128
    1cb2:	94 ee       	ldi	r25, 0xE4	; 228

}
    1cb4:	29 96       	adiw	r28, 0x09	; 9
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	df 91       	pop	r29
    1cc2:	cf 91       	pop	r28
    1cc4:	1f 91       	pop	r17
    1cc6:	0f 91       	pop	r16
    1cc8:	ff 90       	pop	r15
    1cca:	ef 90       	pop	r14
    1ccc:	08 95       	ret

00001cce <_ZN17DallasTemperature8getTempCEPKh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress){
    return rawToCelsius(getTemp(deviceAddress));
    1cce:	d3 df       	rcall	.-90     	; 0x1c76 <_ZN17DallasTemperature7getTempEPKh>
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw){

    if (raw <= DEVICE_DISCONNECTED_RAW)
    1cd0:	81 38       	cpi	r24, 0x81	; 129
    1cd2:	24 ee       	ldi	r18, 0xE4	; 228
    1cd4:	92 07       	cpc	r25, r18
    1cd6:	64 f0       	brlt	.+24     	; 0x1cf0 <_ZN17DallasTemperature8getTempCEPKh+0x22>
    return DEVICE_DISCONNECTED_C;
    // C = RAW/128
    return (float)raw * 0.0078125;
    1cd8:	bc 01       	movw	r22, r24
    1cda:	99 0f       	add	r25, r25
    1cdc:	88 0b       	sbc	r24, r24
    1cde:	99 0b       	sbc	r25, r25
    1ce0:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__floatsisf>
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	5c e3       	ldi	r21, 0x3C	; 60
    1cec:	0c 94 0e 31 	jmp	0x621c	; 0x621c <__mulsf3>

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw){

    if (raw <= DEVICE_DISCONNECTED_RAW)
    return DEVICE_DISCONNECTED_C;
    1cf0:	60 e0       	ldi	r22, 0x00	; 0
    1cf2:	70 e0       	ldi	r23, 0x00	; 0
    1cf4:	8e ef       	ldi	r24, 0xFE	; 254
    1cf6:	92 ec       	ldi	r25, 0xC2	; 194
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress){
    return rawToCelsius(getTemp(deviceAddress));
}
    1cf8:	08 95       	ret

00001cfa <_ZN17DallasTemperature15getTempCByIndexEh>:
    return requestTemperaturesByAddress(deviceAddress);

}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex){
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	28 97       	sbiw	r28, 0x08	; 8
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	8c 01       	movw	r16, r24
    1d14:	46 2f       	mov	r20, r22

    DeviceAddress deviceAddress;
    if (!getAddress(deviceAddress, deviceIndex)){
    1d16:	be 01       	movw	r22, r28
    1d18:	6f 5f       	subi	r22, 0xFF	; 255
    1d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1c:	d5 dd       	rcall	.-1110   	; 0x18c8 <_ZN17DallasTemperature10getAddressEPhh>
    1d1e:	88 23       	and	r24, r24
    1d20:	31 f0       	breq	.+12     	; 0x1d2e <_ZN17DallasTemperature15getTempCByIndexEh+0x34>
        return DEVICE_DISCONNECTED_C;
    }

    return getTempC((uint8_t*)deviceAddress);
    1d22:	be 01       	movw	r22, r28
    1d24:	6f 5f       	subi	r22, 0xFF	; 255
    1d26:	7f 4f       	sbci	r23, 0xFF	; 255
    1d28:	c8 01       	movw	r24, r16
    1d2a:	d1 df       	rcall	.-94     	; 0x1cce <_ZN17DallasTemperature8getTempCEPKh>
    1d2c:	04 c0       	rjmp	.+8      	; 0x1d36 <_ZN17DallasTemperature15getTempCByIndexEh+0x3c>
// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex){

    DeviceAddress deviceAddress;
    if (!getAddress(deviceAddress, deviceIndex)){
        return DEVICE_DISCONNECTED_C;
    1d2e:	60 e0       	ldi	r22, 0x00	; 0
    1d30:	70 e0       	ldi	r23, 0x00	; 0
    1d32:	8e ef       	ldi	r24, 0xFE	; 254
    1d34:	92 ec       	ldi	r25, 0xC2	; 194
    }

    return getTempC((uint8_t*)deviceAddress);

}
    1d36:	28 96       	adiw	r28, 0x08	; 8
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	08 95       	ret

00001d4c <_ZN7DisplayC1Ev>:
//
//  Clear the display
//
void Display::Clear()
{
	ClearMembers();
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	ec 01       	movw	r28, r24
    1d52:	0e 94 cc 22 	call	0x4598	; 0x4598 <_ZN19TeaMachineComponentC1Ev>
    1d56:	85 e8       	ldi	r24, 0x85	; 133
    1d58:	95 e0       	ldi	r25, 0x05	; 5
    1d5a:	99 83       	std	Y+1, r25	; 0x01
    1d5c:	88 83       	st	Y, r24
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <_ZN7Display12ClearMembersEv>:
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	ec 01       	movw	r28, r24
    1d6a:	8f ef       	ldi	r24, 0xFF	; 255
    1d6c:	9f ef       	ldi	r25, 0xFF	; 255
    1d6e:	9f 83       	std	Y+7, r25	; 0x07
    1d70:	8e 83       	std	Y+6, r24	; 0x06
    1d72:	99 87       	std	Y+9, r25	; 0x09
    1d74:	88 87       	std	Y+8, r24	; 0x08
    1d76:	9b 87       	std	Y+11, r25	; 0x0b
    1d78:	8a 87       	std	Y+10, r24	; 0x0a
    1d7a:	9d 87       	std	Y+13, r25	; 0x0d
    1d7c:	8c 87       	std	Y+12, r24	; 0x0c
    1d7e:	45 e0       	ldi	r20, 0x05	; 5
    1d80:	50 e0       	ldi	r21, 0x00	; 0
    1d82:	60 e2       	ldi	r22, 0x20	; 32
    1d84:	70 e0       	ldi	r23, 0x00	; 0
    1d86:	ce 01       	movw	r24, r28
    1d88:	0e 96       	adiw	r24, 0x0e	; 14
    1d8a:	0e 94 c8 3c 	call	0x7990	; 0x7990 <memset>
    1d8e:	1f a2       	std	Y+39, r1	; 0x27
    1d90:	18 a6       	std	Y+40, r1	; 0x28
    1d92:	1a a6       	std	Y+42, r1	; 0x2a
    1d94:	19 a6       	std	Y+41, r1	; 0x29
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	8b a7       	std	Y+43, r24	; 0x2b
    1d9a:	1e aa       	std	Y+54, r1	; 0x36
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	73 96       	adiw	r30, 0x13	; 19
    1da0:	de 01       	movw	r26, r28
    1da2:	9c 96       	adiw	r26, 0x2c	; 44
    1da4:	a7 96       	adiw	r28, 0x27	; 39
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	9f ef       	ldi	r25, 0xFF	; 255
    1daa:	81 93       	st	Z+, r24
    1dac:	91 93       	st	Z+, r25
    1dae:	1d 92       	st	X+, r1
    1db0:	ec 17       	cp	r30, r28
    1db2:	fd 07       	cpc	r31, r29
    1db4:	d1 f7       	brne	.-12     	; 0x1daa <_ZN7Display12ClearMembersEv+0x46>
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <_ZN7DisplayC1EP10TeaMachine>:
    1dbc:	cf 93       	push	r28
    1dbe:	df 93       	push	r29
    1dc0:	ec 01       	movw	r28, r24
    1dc2:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    1dc6:	85 e8       	ldi	r24, 0x85	; 133
    1dc8:	95 e0       	ldi	r25, 0x05	; 5
    1dca:	99 83       	std	Y+1, r25	; 0x01
    1dcc:	88 83       	st	Y, r24
    1dce:	ce 01       	movw	r24, r28
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	c7 cf       	rjmp	.-114    	; 0x1d64 <_ZN7Display12ClearMembersEv>

00001dd6 <_ZN7DisplayD1Ev>:
    1dd6:	cf 93       	push	r28
    1dd8:	df 93       	push	r29
    1dda:	ec 01       	movw	r28, r24
    1ddc:	85 e8       	ldi	r24, 0x85	; 133
    1dde:	95 e0       	ldi	r25, 0x05	; 5
    1de0:	99 83       	std	Y+1, r25	; 0x01
    1de2:	88 83       	st	Y, r24
    1de4:	ce 01       	movw	r24, r28
    1de6:	be df       	rcall	.-132    	; 0x1d64 <_ZN7Display12ClearMembersEv>
    1de8:	ce 01       	movw	r24, r28
    1dea:	df 91       	pop	r29
    1dec:	cf 91       	pop	r28
    1dee:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <_ZN19TeaMachineComponentD1Ev>

00001df2 <_ZN7Display3SetEiib>:
    1df2:	fb 01       	movw	r30, r22
    1df4:	ee 0f       	add	r30, r30
    1df6:	ff 1f       	adc	r31, r31
    1df8:	e8 0f       	add	r30, r24
    1dfa:	f9 1f       	adc	r31, r25
    1dfc:	54 8b       	std	Z+20, r21	; 0x14
    1dfe:	43 8b       	std	Z+19, r20	; 0x13
    1e00:	fc 01       	movw	r30, r24
    1e02:	e6 0f       	add	r30, r22
    1e04:	f7 1f       	adc	r31, r23
    1e06:	24 a7       	std	Z+44, r18	; 0x2c
    1e08:	21 e0       	ldi	r18, 0x01	; 1
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	23 a7       	std	Z+43, r18	; 0x2b
    1e0e:	08 95       	ret

00001e10 <_ZN7Display3SetE16IndicatorNumerici>:
    1e10:	fc 01       	movw	r30, r24
    1e12:	61 30       	cpi	r22, 0x01	; 1
    1e14:	71 f0       	breq	.+28     	; 0x1e32 <_ZN7Display3SetE16IndicatorNumerici+0x22>
    1e16:	38 f0       	brcs	.+14     	; 0x1e26 <_ZN7Display3SetE16IndicatorNumerici+0x16>
    1e18:	62 30       	cpi	r22, 0x02	; 2
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <_ZN7Display3SetE16IndicatorNumerici+0x1c>
    1e1c:	63 30       	cpi	r22, 0x03	; 3
    1e1e:	59 f4       	brne	.+22     	; 0x1e36 <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1e20:	55 87       	std	Z+13, r21	; 0x0d
    1e22:	44 87       	std	Z+12, r20	; 0x0c
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1e26:	57 83       	std	Z+7, r21	; 0x07
    1e28:	46 83       	std	Z+6, r20	; 0x06
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1e2c:	53 87       	std	Z+11, r21	; 0x0b
    1e2e:	42 87       	std	Z+10, r20	; 0x0a
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1e32:	51 87       	std	Z+9, r21	; 0x09
    1e34:	40 87       	std	Z+8, r20	; 0x08
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	83 a7       	std	Z+43, r24	; 0x2b
    1e3a:	08 95       	ret

00001e3c <_ZN7Display3SetE14IndicatorAlphac>:
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	61 30       	cpi	r22, 0x01	; 1
    1e40:	49 f0       	breq	.+18     	; 0x1e54 <_ZN7Display3SetE14IndicatorAlphac+0x18>
    1e42:	30 f0       	brcs	.+12     	; 0x1e50 <_ZN7Display3SetE14IndicatorAlphac+0x14>
    1e44:	62 30       	cpi	r22, 0x02	; 2
    1e46:	41 f0       	breq	.+16     	; 0x1e58 <_ZN7Display3SetE14IndicatorAlphac+0x1c>
    1e48:	63 30       	cpi	r22, 0x03	; 3
    1e4a:	39 f4       	brne	.+14     	; 0x1e5a <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    1e4c:	41 8b       	std	Z+17, r20	; 0x11
    1e4e:	05 c0       	rjmp	.+10     	; 0x1e5a <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    1e50:	46 87       	std	Z+14, r20	; 0x0e
    1e52:	03 c0       	rjmp	.+6      	; 0x1e5a <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    1e54:	47 87       	std	Z+15, r20	; 0x0f
    1e56:	01 c0       	rjmp	.+2      	; 0x1e5a <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    1e58:	40 8b       	std	Z+16, r20	; 0x10
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	83 a7       	std	Z+43, r24	; 0x2b
    1e5e:	08 95       	ret

00001e60 <_ZN7Display3SetE12IndicatorLEDb>:
    1e60:	fc 01       	movw	r30, r24
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	83 a7       	std	Z+43, r24	; 0x2b
    1e66:	61 30       	cpi	r22, 0x01	; 1
    1e68:	51 f0       	breq	.+20     	; 0x1e7e <_ZN7Display3SetE12IndicatorLEDb+0x1e>
    1e6a:	30 f0       	brcs	.+12     	; 0x1e78 <_ZN7Display3SetE12IndicatorLEDb+0x18>
    1e6c:	62 30       	cpi	r22, 0x02	; 2
    1e6e:	51 f0       	breq	.+20     	; 0x1e84 <_ZN7Display3SetE12IndicatorLEDb+0x24>
    1e70:	63 30       	cpi	r22, 0x03	; 3
    1e72:	51 f4       	brne	.+20     	; 0x1e88 <_ZN7Display3SetE12IndicatorLEDb+0x28>
    1e74:	40 a7       	std	Z+40, r20	; 0x28
    1e76:	08 95       	ret
    1e78:	42 a7       	std	Z+42, r20	; 0x2a
    1e7a:	11 a6       	std	Z+41, r1	; 0x29
    1e7c:	08 95       	ret
    1e7e:	41 a7       	std	Z+41, r20	; 0x29
    1e80:	12 a6       	std	Z+42, r1	; 0x2a
    1e82:	08 95       	ret
    1e84:	47 a3       	std	Z+39, r20	; 0x27
    1e86:	08 95       	ret
    1e88:	13 a6       	std	Z+43, r1	; 0x2b
    1e8a:	08 95       	ret

00001e8c <_ZN7Display14GetSegmentCodeEjb>:
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	69 30       	cpi	r22, 0x09	; 9
    1e90:	71 05       	cpc	r23, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <_ZN7Display14GetSegmentCodeEjb+0xa>
    1e94:	4a c0       	rjmp	.+148    	; 0x1f2a <_ZN7Display14GetSegmentCodeEjb+0x9e>
    1e96:	d0 f4       	brcc	.+52     	; 0x1ecc <_ZN7Display14GetSegmentCodeEjb+0x40>
    1e98:	64 30       	cpi	r22, 0x04	; 4
    1e9a:	71 05       	cpc	r23, r1
    1e9c:	f1 f1       	breq	.+124    	; 0x1f1a <_ZN7Display14GetSegmentCodeEjb+0x8e>
    1e9e:	50 f4       	brcc	.+20     	; 0x1eb4 <_ZN7Display14GetSegmentCodeEjb+0x28>
    1ea0:	62 30       	cpi	r22, 0x02	; 2
    1ea2:	71 05       	cpc	r23, r1
    1ea4:	b1 f1       	breq	.+108    	; 0x1f12 <_ZN7Display14GetSegmentCodeEjb+0x86>
    1ea6:	b8 f5       	brcc	.+110    	; 0x1f16 <_ZN7Display14GetSegmentCodeEjb+0x8a>
    1ea8:	61 30       	cpi	r22, 0x01	; 1
    1eaa:	71 05       	cpc	r23, r1
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <_ZN7Display14GetSegmentCodeEjb+0x24>
    1eae:	49 c0       	rjmp	.+146    	; 0x1f42 <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1eb0:	2d ee       	ldi	r18, 0xED	; 237
    1eb2:	48 c0       	rjmp	.+144    	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1eb4:	66 30       	cpi	r22, 0x06	; 6
    1eb6:	71 05       	cpc	r23, r1
    1eb8:	a1 f1       	breq	.+104    	; 0x1f22 <_ZN7Display14GetSegmentCodeEjb+0x96>
    1eba:	88 f1       	brcs	.+98     	; 0x1f1e <_ZN7Display14GetSegmentCodeEjb+0x92>
    1ebc:	67 30       	cpi	r22, 0x07	; 7
    1ebe:	71 05       	cpc	r23, r1
    1ec0:	91 f1       	breq	.+100    	; 0x1f26 <_ZN7Display14GetSegmentCodeEjb+0x9a>
    1ec2:	68 30       	cpi	r22, 0x08	; 8
    1ec4:	71 05       	cpc	r23, r1
    1ec6:	e9 f5       	brne	.+122    	; 0x1f42 <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1ec8:	21 e0       	ldi	r18, 0x01	; 1
    1eca:	3c c0       	rjmp	.+120    	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1ecc:	6e 30       	cpi	r22, 0x0E	; 14
    1ece:	71 05       	cpc	r23, r1
    1ed0:	a1 f1       	breq	.+104    	; 0x1f3a <_ZN7Display14GetSegmentCodeEjb+0xae>
    1ed2:	60 f4       	brcc	.+24     	; 0x1eec <_ZN7Display14GetSegmentCodeEjb+0x60>
    1ed4:	6b 30       	cpi	r22, 0x0B	; 11
    1ed6:	71 05       	cpc	r23, r1
    1ed8:	61 f1       	breq	.+88     	; 0x1f32 <_ZN7Display14GetSegmentCodeEjb+0xa6>
    1eda:	48 f1       	brcs	.+82     	; 0x1f2e <_ZN7Display14GetSegmentCodeEjb+0xa2>
    1edc:	6c 30       	cpi	r22, 0x0C	; 12
    1ede:	71 05       	cpc	r23, r1
    1ee0:	51 f1       	breq	.+84     	; 0x1f36 <_ZN7Display14GetSegmentCodeEjb+0xaa>
    1ee2:	6d 30       	cpi	r22, 0x0D	; 13
    1ee4:	71 05       	cpc	r23, r1
    1ee6:	69 f5       	brne	.+90     	; 0x1f42 <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1ee8:	21 e6       	ldi	r18, 0x61	; 97
    1eea:	2c c0       	rjmp	.+88     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1eec:	6d 3f       	cpi	r22, 0xFD	; 253
    1eee:	8f ef       	ldi	r24, 0xFF	; 255
    1ef0:	78 07       	cpc	r23, r24
    1ef2:	29 f1       	breq	.+74     	; 0x1f3e <_ZN7Display14GetSegmentCodeEjb+0xb2>
    1ef4:	28 f4       	brcc	.+10     	; 0x1f00 <_ZN7Display14GetSegmentCodeEjb+0x74>
    1ef6:	6f 30       	cpi	r22, 0x0F	; 15
    1ef8:	71 05       	cpc	r23, r1
    1efa:	19 f5       	brne	.+70     	; 0x1f42 <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1efc:	27 e1       	ldi	r18, 0x17	; 23
    1efe:	22 c0       	rjmp	.+68     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f00:	6e 3f       	cpi	r22, 0xFE	; 254
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	78 07       	cpc	r23, r24
    1f06:	c9 f0       	breq	.+50     	; 0x1f3a <_ZN7Display14GetSegmentCodeEjb+0xae>
    1f08:	6f 3f       	cpi	r22, 0xFF	; 255
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	d1 f4       	brne	.+52     	; 0x1f42 <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1f0e:	2f ef       	ldi	r18, 0xFF	; 255
    1f10:	19 c0       	rjmp	.+50     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f12:	23 e4       	ldi	r18, 0x43	; 67
    1f14:	17 c0       	rjmp	.+46     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f16:	29 e4       	ldi	r18, 0x49	; 73
    1f18:	15 c0       	rjmp	.+42     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f1a:	2d e2       	ldi	r18, 0x2D	; 45
    1f1c:	13 c0       	rjmp	.+38     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f1e:	29 e1       	ldi	r18, 0x19	; 25
    1f20:	11 c0       	rjmp	.+34     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f22:	21 e1       	ldi	r18, 0x11	; 17
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f26:	2d ec       	ldi	r18, 0xCD	; 205
    1f28:	0d c0       	rjmp	.+26     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f2a:	29 e0       	ldi	r18, 0x09	; 9
    1f2c:	0b c0       	rjmp	.+22     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f2e:	25 e0       	ldi	r18, 0x05	; 5
    1f30:	09 c0       	rjmp	.+18     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f32:	21 e3       	ldi	r18, 0x31	; 49
    1f34:	07 c0       	rjmp	.+14     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f36:	23 e9       	ldi	r18, 0x93	; 147
    1f38:	05 c0       	rjmp	.+10     	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f3a:	23 e1       	ldi	r18, 0x13	; 19
    1f3c:	03 c0       	rjmp	.+6      	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f3e:	2f e7       	ldi	r18, 0x7F	; 127
    1f40:	01 c0       	rjmp	.+2      	; 0x1f44 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1f42:	21 e8       	ldi	r18, 0x81	; 129
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	44 23       	and	r20, r20
    1f48:	19 f0       	breq	.+6      	; 0x1f50 <_ZN7Display14GetSegmentCodeEjb+0xc4>
    1f4a:	86 a9       	ldd	r24, Z+54	; 0x36
    1f4c:	88 23       	and	r24, r24
    1f4e:	11 f0       	breq	.+4      	; 0x1f54 <_ZN7Display14GetSegmentCodeEjb+0xc8>
    1f50:	82 2f       	mov	r24, r18
    1f52:	08 95       	ret
    1f54:	8f ef       	ldi	r24, 0xFF	; 255
    1f56:	9f ef       	ldi	r25, 0xFF	; 255
    1f58:	08 95       	ret

00001f5a <_ZN7Display14GetSegmentCodeEjbb>:
    1f5a:	cf 93       	push	r28
    1f5c:	c2 2f       	mov	r28, r18
    1f5e:	96 df       	rcall	.-212    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    1f60:	cc 23       	and	r28, r28
    1f62:	11 f0       	breq	.+4      	; 0x1f68 <_ZN7Display14GetSegmentCodeEjbb+0xe>
    1f64:	81 60       	ori	r24, 0x01	; 1
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <_ZN7Display14GetSegmentCodeEjbb+0x12>
    1f68:	8e 7f       	andi	r24, 0xFE	; 254
    1f6a:	99 27       	eor	r25, r25
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>:
    1f70:	86 2f       	mov	r24, r22
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	fc 01       	movw	r30, r24
    1f76:	e1 54       	subi	r30, 0x41	; 65
    1f78:	f1 09       	sbc	r31, r1
    1f7a:	e7 31       	cpi	r30, 0x17	; 23
    1f7c:	f1 05       	cpc	r31, r1
    1f7e:	08 f0       	brcs	.+2      	; 0x1f82 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x12>
    1f80:	48 c0       	rjmp	.+144    	; 0x2012 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xa2>
    1f82:	88 27       	eor	r24, r24
    1f84:	e0 58       	subi	r30, 0x80	; 128
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__tablejump2__>
    1f8e:	44 23       	and	r20, r20
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x24>
    1f92:	4e c0       	rjmp	.+156    	; 0x2030 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1f94:	82 ed       	ldi	r24, 0xD2	; 210
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	08 95       	ret
    1f9a:	41 11       	cpse	r20, r1
    1f9c:	3d c0       	rjmp	.+122    	; 0x2018 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xa8>
    1f9e:	22 c0       	rjmp	.+68     	; 0x1fe4 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x74>
    1fa0:	41 11       	cpse	r20, r1
    1fa2:	43 c0       	rjmp	.+134    	; 0x202a <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xba>
    1fa4:	4b c0       	rjmp	.+150    	; 0x203c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xcc>
    1fa6:	44 23       	and	r20, r20
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x3c>
    1faa:	42 c0       	rjmp	.+132    	; 0x2030 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1fac:	86 e3       	ldi	r24, 0x36	; 54
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	08 95       	ret
    1fb2:	44 23       	and	r20, r20
    1fb4:	e9 f1       	breq	.+122    	; 0x2030 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1fb6:	86 ef       	ldi	r24, 0xF6	; 246
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	08 95       	ret
    1fbc:	41 11       	cpse	r20, r1
    1fbe:	2c c0       	rjmp	.+88     	; 0x2018 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xa8>
    1fc0:	3d c0       	rjmp	.+122    	; 0x203c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xcc>
    1fc2:	44 23       	and	r20, r20
    1fc4:	61 f1       	breq	.+88     	; 0x201e <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xae>
    1fc6:	8d ee       	ldi	r24, 0xED	; 237
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	08 95       	ret
    1fcc:	44 23       	and	r20, r20
    1fce:	51 f1       	breq	.+84     	; 0x2024 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xb4>
    1fd0:	8f e3       	ldi	r24, 0x3F	; 63
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	08 95       	ret
    1fd6:	41 11       	cpse	r20, r1
    1fd8:	34 c0       	rjmp	.+104    	; 0x2042 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xd2>
    1fda:	83 e7       	ldi	r24, 0x73	; 115
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	08 95       	ret
    1fe0:	41 11       	cpse	r20, r1
    1fe2:	23 c0       	rjmp	.+70     	; 0x202a <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xba>
    1fe4:	86 e7       	ldi	r24, 0x76	; 118
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	08 95       	ret
    1fea:	44 23       	and	r20, r20
    1fec:	09 f1       	breq	.+66     	; 0x2030 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1fee:	82 ee       	ldi	r24, 0xE2	; 226
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	08 95       	ret
    1ff4:	44 23       	and	r20, r20
    1ff6:	f9 f0       	breq	.+62     	; 0x2036 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc6>
    1ff8:	86 e1       	ldi	r24, 0x16	; 22
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	08 95       	ret
    1ffe:	44 23       	and	r20, r20
    2000:	e9 f0       	breq	.+58     	; 0x203c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xcc>
    2002:	8e ef       	ldi	r24, 0xFE	; 254
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	08 95       	ret
    2008:	41 11       	cpse	r20, r1
    200a:	1b c0       	rjmp	.+54     	; 0x2042 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xd2>
    200c:	87 e3       	ldi	r24, 0x37	; 55
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	08 95       	ret
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	08 95       	ret
    2018:	8e e3       	ldi	r24, 0x3E	; 62
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	08 95       	ret
    201e:	87 e6       	ldi	r24, 0x67	; 103
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	08 95       	ret
    2024:	87 e7       	ldi	r24, 0x77	; 119
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	08 95       	ret
    202a:	8a e1       	ldi	r24, 0x1A	; 26
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	08 95       	ret
    2030:	86 e6       	ldi	r24, 0x66	; 102
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	08 95       	ret
    2036:	86 ee       	ldi	r24, 0xE6	; 230
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	08 95       	ret
    203c:	8c ed       	ldi	r24, 0xDC	; 220
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	08 95       	ret
    2042:	8b ec       	ldi	r24, 0xCB	; 203
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	08 95       	ret

00002048 <_ZN7Display16WriteDisplayDataEv>:
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	ec 01       	movw	r28, r24
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	8b e0       	ldi	r24, 0x0B	; 11
    2054:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
    2058:	6d 89       	ldd	r22, Y+21	; 0x15
    205a:	7e 89       	ldd	r23, Y+22	; 0x16
    205c:	4d a5       	ldd	r20, Y+45	; 0x2d
    205e:	ce 01       	movw	r24, r28
    2060:	15 df       	rcall	.-470    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    2062:	28 2f       	mov	r18, r24
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	6a e0       	ldi	r22, 0x0A	; 10
    2068:	8c e0       	ldi	r24, 0x0C	; 12
    206a:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    206e:	6f 89       	ldd	r22, Y+23	; 0x17
    2070:	78 8d       	ldd	r23, Y+24	; 0x18
    2072:	4e a5       	ldd	r20, Y+46	; 0x2e
    2074:	ce 01       	movw	r24, r28
    2076:	0a df       	rcall	.-492    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    2078:	28 2f       	mov	r18, r24
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	6a e0       	ldi	r22, 0x0A	; 10
    207e:	8c e0       	ldi	r24, 0x0C	; 12
    2080:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    2084:	69 8d       	ldd	r22, Y+25	; 0x19
    2086:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2088:	4f a5       	ldd	r20, Y+47	; 0x2f
    208a:	ce 01       	movw	r24, r28
    208c:	ff de       	rcall	.-514    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    208e:	28 2f       	mov	r18, r24
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	6a e0       	ldi	r22, 0x0A	; 10
    2094:	8c e0       	ldi	r24, 0x0C	; 12
    2096:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    209a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    209c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    209e:	48 a9       	ldd	r20, Y+48	; 0x30
    20a0:	ce 01       	movw	r24, r28
    20a2:	f4 de       	rcall	.-536    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    20a4:	28 2f       	mov	r18, r24
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	6a e0       	ldi	r22, 0x0A	; 10
    20aa:	8c e0       	ldi	r24, 0x0C	; 12
    20ac:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    20b0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20b2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20b4:	49 a9       	ldd	r20, Y+49	; 0x31
    20b6:	ce 01       	movw	r24, r28
    20b8:	e9 de       	rcall	.-558    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    20ba:	28 2f       	mov	r18, r24
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	6a e0       	ldi	r22, 0x0A	; 10
    20c0:	8c e0       	ldi	r24, 0x0C	; 12
    20c2:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    20c6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20c8:	78 a1       	ldd	r23, Y+32	; 0x20
    20ca:	4a a9       	ldd	r20, Y+50	; 0x32
    20cc:	ce 01       	movw	r24, r28
    20ce:	de de       	rcall	.-580    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    20d0:	28 2f       	mov	r18, r24
    20d2:	41 e0       	ldi	r20, 0x01	; 1
    20d4:	6a e0       	ldi	r22, 0x0A	; 10
    20d6:	8c e0       	ldi	r24, 0x0C	; 12
    20d8:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    20dc:	69 a1       	ldd	r22, Y+33	; 0x21
    20de:	7a a1       	ldd	r23, Y+34	; 0x22
    20e0:	4b a9       	ldd	r20, Y+51	; 0x33
    20e2:	ce 01       	movw	r24, r28
    20e4:	d3 de       	rcall	.-602    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    20e6:	28 2f       	mov	r18, r24
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	6a e0       	ldi	r22, 0x0A	; 10
    20ec:	8c e0       	ldi	r24, 0x0C	; 12
    20ee:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    20f2:	6b a1       	ldd	r22, Y+35	; 0x23
    20f4:	7c a1       	ldd	r23, Y+36	; 0x24
    20f6:	4c a9       	ldd	r20, Y+52	; 0x34
    20f8:	ce 01       	movw	r24, r28
    20fa:	c8 de       	rcall	.-624    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    20fc:	28 2f       	mov	r18, r24
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	6a e0       	ldi	r22, 0x0A	; 10
    2102:	8c e0       	ldi	r24, 0x0C	; 12
    2104:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    2108:	6d a1       	ldd	r22, Y+37	; 0x25
    210a:	7e a1       	ldd	r23, Y+38	; 0x26
    210c:	4d a9       	ldd	r20, Y+53	; 0x35
    210e:	ce 01       	movw	r24, r28
    2110:	bd de       	rcall	.-646    	; 0x1e8c <_ZN7Display14GetSegmentCodeEjb>
    2112:	28 2f       	mov	r18, r24
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	6a e0       	ldi	r22, 0x0A	; 10
    2118:	8c e0       	ldi	r24, 0x0C	; 12
    211a:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    211e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2120:	7d 85       	ldd	r23, Y+13	; 0x0d
    2122:	2a a5       	ldd	r18, Y+42	; 0x2a
    2124:	40 e0       	ldi	r20, 0x00	; 0
    2126:	ce 01       	movw	r24, r28
    2128:	18 df       	rcall	.-464    	; 0x1f5a <_ZN7Display14GetSegmentCodeEjbb>
    212a:	28 2f       	mov	r18, r24
    212c:	41 e0       	ldi	r20, 0x01	; 1
    212e:	6a e0       	ldi	r22, 0x0A	; 10
    2130:	8c e0       	ldi	r24, 0x0C	; 12
    2132:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    2136:	6a 85       	ldd	r22, Y+10	; 0x0a
    2138:	7b 85       	ldd	r23, Y+11	; 0x0b
    213a:	29 a5       	ldd	r18, Y+41	; 0x29
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	ce 01       	movw	r24, r28
    2140:	0c df       	rcall	.-488    	; 0x1f5a <_ZN7Display14GetSegmentCodeEjbb>
    2142:	28 2f       	mov	r18, r24
    2144:	41 e0       	ldi	r20, 0x01	; 1
    2146:	6a e0       	ldi	r22, 0x0A	; 10
    2148:	8c e0       	ldi	r24, 0x0C	; 12
    214a:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    214e:	2f a1       	ldd	r18, Y+39	; 0x27
    2150:	11 e0       	ldi	r17, 0x01	; 1
    2152:	21 27       	eor	r18, r17
    2154:	68 85       	ldd	r22, Y+8	; 0x08
    2156:	79 85       	ldd	r23, Y+9	; 0x09
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	ce 01       	movw	r24, r28
    215c:	fe de       	rcall	.-516    	; 0x1f5a <_ZN7Display14GetSegmentCodeEjbb>
    215e:	28 2f       	mov	r18, r24
    2160:	41 e0       	ldi	r20, 0x01	; 1
    2162:	6a e0       	ldi	r22, 0x0A	; 10
    2164:	8c e0       	ldi	r24, 0x0C	; 12
    2166:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    216a:	41 e0       	ldi	r20, 0x01	; 1
    216c:	69 89       	ldd	r22, Y+17	; 0x11
    216e:	ce 01       	movw	r24, r28
    2170:	ff de       	rcall	.-514    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    2172:	28 2f       	mov	r18, r24
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	6a e0       	ldi	r22, 0x0A	; 10
    2178:	8c e0       	ldi	r24, 0x0C	; 12
    217a:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	69 89       	ldd	r22, Y+17	; 0x11
    2182:	ce 01       	movw	r24, r28
    2184:	f5 de       	rcall	.-534    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    2186:	28 2f       	mov	r18, r24
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	6a e0       	ldi	r22, 0x0A	; 10
    218c:	8c e0       	ldi	r24, 0x0C	; 12
    218e:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    2192:	41 e0       	ldi	r20, 0x01	; 1
    2194:	68 89       	ldd	r22, Y+16	; 0x10
    2196:	ce 01       	movw	r24, r28
    2198:	eb de       	rcall	.-554    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    219a:	28 2f       	mov	r18, r24
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	6a e0       	ldi	r22, 0x0A	; 10
    21a0:	8c e0       	ldi	r24, 0x0C	; 12
    21a2:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	68 89       	ldd	r22, Y+16	; 0x10
    21aa:	ce 01       	movw	r24, r28
    21ac:	e1 de       	rcall	.-574    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    21ae:	28 2f       	mov	r18, r24
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	6a e0       	ldi	r22, 0x0A	; 10
    21b4:	8c e0       	ldi	r24, 0x0C	; 12
    21b6:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    21ba:	41 e0       	ldi	r20, 0x01	; 1
    21bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    21be:	ce 01       	movw	r24, r28
    21c0:	d7 de       	rcall	.-594    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    21c2:	28 2f       	mov	r18, r24
    21c4:	41 e0       	ldi	r20, 0x01	; 1
    21c6:	6a e0       	ldi	r22, 0x0A	; 10
    21c8:	8c e0       	ldi	r24, 0x0C	; 12
    21ca:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    21d2:	ce 01       	movw	r24, r28
    21d4:	cd de       	rcall	.-614    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    21d6:	28 2f       	mov	r18, r24
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	6a e0       	ldi	r22, 0x0A	; 10
    21dc:	8c e0       	ldi	r24, 0x0C	; 12
    21de:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    21e2:	41 e0       	ldi	r20, 0x01	; 1
    21e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    21e6:	ce 01       	movw	r24, r28
    21e8:	c3 de       	rcall	.-634    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    21ea:	28 2f       	mov	r18, r24
    21ec:	41 e0       	ldi	r20, 0x01	; 1
    21ee:	6a e0       	ldi	r22, 0x0A	; 10
    21f0:	8c e0       	ldi	r24, 0x0C	; 12
    21f2:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	6e 85       	ldd	r22, Y+14	; 0x0e
    21fa:	ce 01       	movw	r24, r28
    21fc:	b9 de       	rcall	.-654    	; 0x1f70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    21fe:	28 2f       	mov	r18, r24
    2200:	41 e0       	ldi	r20, 0x01	; 1
    2202:	6a e0       	ldi	r22, 0x0A	; 10
    2204:	8c e0       	ldi	r24, 0x0C	; 12
    2206:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    220a:	28 a5       	ldd	r18, Y+40	; 0x28
    220c:	21 27       	eor	r18, r17
    220e:	6e 81       	ldd	r22, Y+6	; 0x06
    2210:	7f 81       	ldd	r23, Y+7	; 0x07
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	ce 01       	movw	r24, r28
    2216:	a1 de       	rcall	.-702    	; 0x1f5a <_ZN7Display14GetSegmentCodeEjbb>
    2218:	28 2f       	mov	r18, r24
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	6a e0       	ldi	r22, 0x0A	; 10
    221e:	8c e0       	ldi	r24, 0x0C	; 12
    2220:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
    2224:	61 e0       	ldi	r22, 0x01	; 1
    2226:	8b e0       	ldi	r24, 0x0B	; 11
    2228:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
    222c:	1b a6       	std	Y+43, r1	; 0x2b
    222e:	df 91       	pop	r29
    2230:	cf 91       	pop	r28
    2232:	1f 91       	pop	r17
    2234:	08 95       	ret

00002236 <_ZN7Display4TestEv>:
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	61 97       	sbiw	r28, 0x11	; 17
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	8c 01       	movw	r16, r24
    224c:	8f e0       	ldi	r24, 0x0F	; 15
    224e:	e2 e7       	ldi	r30, 0x72	; 114
    2250:	f5 e0       	ldi	r31, 0x05	; 5
    2252:	9e 01       	movw	r18, r28
    2254:	2f 5f       	subi	r18, 0xFF	; 255
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	69 01       	movw	r12, r18
    225a:	d9 01       	movw	r26, r18
    225c:	01 90       	ld	r0, Z+
    225e:	0d 92       	st	X+, r0
    2260:	8a 95       	dec	r24
    2262:	e1 f7       	brne	.-8      	; 0x225c <_ZN7Display4TestEv+0x26>
    2264:	19 8a       	std	Y+17, r1	; 0x11
    2266:	18 8a       	std	Y+16, r1	; 0x10
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	d8 01       	movw	r26, r16
    226c:	97 96       	adiw	r26, 0x27	; 39
    226e:	8c 93       	st	X, r24
    2270:	97 97       	sbiw	r26, 0x27	; 39
    2272:	98 96       	adiw	r26, 0x28	; 40
    2274:	8c 93       	st	X, r24
    2276:	98 97       	sbiw	r26, 0x28	; 40
    2278:	9a 96       	adiw	r26, 0x2a	; 42
    227a:	8c 93       	st	X, r24
    227c:	9a 97       	sbiw	r26, 0x2a	; 42
    227e:	99 96       	adiw	r26, 0x29	; 41
    2280:	1c 92       	st	X, r1
    2282:	8a e0       	ldi	r24, 0x0A	; 10
    2284:	e8 2e       	mov	r14, r24
    2286:	f1 2c       	mov	r15, r1
    2288:	97 e0       	ldi	r25, 0x07	; 7
    228a:	29 2e       	mov	r2, r25
    228c:	31 2c       	mov	r3, r1
    228e:	26 e0       	ldi	r18, 0x06	; 6
    2290:	42 2e       	mov	r4, r18
    2292:	51 2c       	mov	r5, r1
    2294:	f8 01       	movw	r30, r16
    2296:	17 82       	std	Z+7, r1	; 0x07
    2298:	16 82       	std	Z+6, r1	; 0x06
    229a:	77 24       	eor	r7, r7
    229c:	73 94       	inc	r7
    229e:	d8 01       	movw	r26, r16
    22a0:	16 96       	adiw	r26, 0x06	; 6
    22a2:	2d 91       	ld	r18, X+
    22a4:	3c 91       	ld	r19, X
    22a6:	17 97       	sbiw	r26, 0x07	; 7
    22a8:	2a 30       	cpi	r18, 0x0A	; 10
    22aa:	31 05       	cpc	r19, r1
    22ac:	98 f7       	brcc	.-26     	; 0x2294 <_ZN7Display4TestEv+0x5e>
    22ae:	f6 01       	movw	r30, r12
    22b0:	e2 0f       	add	r30, r18
    22b2:	f3 1f       	adc	r31, r19
    22b4:	80 81       	ld	r24, Z
    22b6:	1e 96       	adiw	r26, 0x0e	; 14
    22b8:	8c 93       	st	X, r24
    22ba:	49 01       	movw	r8, r18
    22bc:	bf ef       	ldi	r27, 0xFF	; 255
    22be:	8b 1a       	sub	r8, r27
    22c0:	9b 0a       	sbc	r9, r27
    22c2:	f6 01       	movw	r30, r12
    22c4:	01 90       	ld	r0, Z+
    22c6:	00 20       	and	r0, r0
    22c8:	e9 f7       	brne	.-6      	; 0x22c4 <_ZN7Display4TestEv+0x8e>
    22ca:	31 97       	sbiw	r30, 0x01	; 1
    22cc:	bf 01       	movw	r22, r30
    22ce:	6c 19       	sub	r22, r12
    22d0:	7d 09       	sbc	r23, r13
    22d2:	c4 01       	movw	r24, r8
    22d4:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    22d8:	f6 01       	movw	r30, r12
    22da:	e8 0f       	add	r30, r24
    22dc:	f9 1f       	adc	r31, r25
    22de:	80 81       	ld	r24, Z
    22e0:	f8 01       	movw	r30, r16
    22e2:	87 87       	std	Z+15, r24	; 0x0f
    22e4:	59 01       	movw	r10, r18
    22e6:	f2 e0       	ldi	r31, 0x02	; 2
    22e8:	af 0e       	add	r10, r31
    22ea:	b1 1c       	adc	r11, r1
    22ec:	f6 01       	movw	r30, r12
    22ee:	01 90       	ld	r0, Z+
    22f0:	00 20       	and	r0, r0
    22f2:	e9 f7       	brne	.-6      	; 0x22ee <_ZN7Display4TestEv+0xb8>
    22f4:	31 97       	sbiw	r30, 0x01	; 1
    22f6:	bf 01       	movw	r22, r30
    22f8:	6c 19       	sub	r22, r12
    22fa:	7d 09       	sbc	r23, r13
    22fc:	c5 01       	movw	r24, r10
    22fe:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    2302:	f6 01       	movw	r30, r12
    2304:	e8 0f       	add	r30, r24
    2306:	f9 1f       	adc	r31, r25
    2308:	80 81       	ld	r24, Z
    230a:	d8 01       	movw	r26, r16
    230c:	50 96       	adiw	r26, 0x10	; 16
    230e:	8c 93       	st	X, r24
    2310:	f9 01       	movw	r30, r18
    2312:	33 96       	adiw	r30, 0x03	; 3
    2314:	d6 01       	movw	r26, r12
    2316:	0d 90       	ld	r0, X+
    2318:	00 20       	and	r0, r0
    231a:	e9 f7       	brne	.-6      	; 0x2316 <_ZN7Display4TestEv+0xe0>
    231c:	11 97       	sbiw	r26, 0x01	; 1
    231e:	bd 01       	movw	r22, r26
    2320:	6c 19       	sub	r22, r12
    2322:	7d 09       	sbc	r23, r13
    2324:	cf 01       	movw	r24, r30
    2326:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    232a:	d6 01       	movw	r26, r12
    232c:	a8 0f       	add	r26, r24
    232e:	b9 1f       	adc	r27, r25
    2330:	8c 91       	ld	r24, X
    2332:	d8 01       	movw	r26, r16
    2334:	51 96       	adiw	r26, 0x11	; 17
    2336:	8c 93       	st	X, r24
    2338:	c7 01       	movw	r24, r14
    233a:	82 1b       	sub	r24, r18
    233c:	93 0b       	sbc	r25, r19
    233e:	b7 01       	movw	r22, r14
    2340:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    2344:	d8 01       	movw	r26, r16
    2346:	19 96       	adiw	r26, 0x09	; 9
    2348:	9c 93       	st	X, r25
    234a:	8e 93       	st	-X, r24
    234c:	18 97       	sbiw	r26, 0x08	; 8
    234e:	c4 01       	movw	r24, r8
    2350:	b7 01       	movw	r22, r14
    2352:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    2356:	d8 01       	movw	r26, r16
    2358:	1b 96       	adiw	r26, 0x0b	; 11
    235a:	9c 93       	st	X, r25
    235c:	8e 93       	st	-X, r24
    235e:	1a 97       	sbiw	r26, 0x0a	; 10
    2360:	89 e0       	ldi	r24, 0x09	; 9
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	82 1b       	sub	r24, r18
    2366:	93 0b       	sbc	r25, r19
    2368:	1d 96       	adiw	r26, 0x0d	; 13
    236a:	9c 93       	st	X, r25
    236c:	8e 93       	st	-X, r24
    236e:	1c 97       	sbiw	r26, 0x0c	; 12
    2370:	88 e0       	ldi	r24, 0x08	; 8
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	82 1b       	sub	r24, r18
    2376:	93 0b       	sbc	r25, r19
    2378:	b7 01       	movw	r22, r14
    237a:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    237e:	d8 01       	movw	r26, r16
    2380:	96 96       	adiw	r26, 0x26	; 38
    2382:	9c 93       	st	X, r25
    2384:	8e 93       	st	-X, r24
    2386:	95 97       	sbiw	r26, 0x25	; 37
    2388:	c5 01       	movw	r24, r10
    238a:	b7 01       	movw	r22, r14
    238c:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    2390:	d8 01       	movw	r26, r16
    2392:	94 96       	adiw	r26, 0x24	; 36
    2394:	9c 93       	st	X, r25
    2396:	8e 93       	st	-X, r24
    2398:	93 97       	sbiw	r26, 0x23	; 35
    239a:	c1 01       	movw	r24, r2
    239c:	82 1b       	sub	r24, r18
    239e:	93 0b       	sbc	r25, r19
    23a0:	b7 01       	movw	r22, r14
    23a2:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    23a6:	d8 01       	movw	r26, r16
    23a8:	92 96       	adiw	r26, 0x22	; 34
    23aa:	9c 93       	st	X, r25
    23ac:	8e 93       	st	-X, r24
    23ae:	91 97       	sbiw	r26, 0x21	; 33
    23b0:	cf 01       	movw	r24, r30
    23b2:	b7 01       	movw	r22, r14
    23b4:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    23b8:	f8 01       	movw	r30, r16
    23ba:	90 a3       	std	Z+32, r25	; 0x20
    23bc:	87 8f       	std	Z+31, r24	; 0x1f
    23be:	c2 01       	movw	r24, r4
    23c0:	82 1b       	sub	r24, r18
    23c2:	93 0b       	sbc	r25, r19
    23c4:	b7 01       	movw	r22, r14
    23c6:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    23ca:	96 8f       	std	Z+30, r25	; 0x1e
    23cc:	85 8f       	std	Z+29, r24	; 0x1d
    23ce:	c9 01       	movw	r24, r18
    23d0:	04 96       	adiw	r24, 0x04	; 4
    23d2:	b7 01       	movw	r22, r14
    23d4:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    23d8:	94 8f       	std	Z+28, r25	; 0x1c
    23da:	83 8f       	std	Z+27, r24	; 0x1b
    23dc:	85 e0       	ldi	r24, 0x05	; 5
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	82 1b       	sub	r24, r18
    23e2:	93 0b       	sbc	r25, r19
    23e4:	b7 01       	movw	r22, r14
    23e6:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    23ea:	92 8f       	std	Z+26, r25	; 0x1a
    23ec:	81 8f       	std	Z+25, r24	; 0x19
    23ee:	c9 01       	movw	r24, r18
    23f0:	05 96       	adiw	r24, 0x05	; 5
    23f2:	b7 01       	movw	r22, r14
    23f4:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    23f8:	90 8f       	std	Z+24, r25	; 0x18
    23fa:	87 8b       	std	Z+23, r24	; 0x17
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	82 1b       	sub	r24, r18
    2402:	93 0b       	sbc	r25, r19
    2404:	b7 01       	movw	r22, r14
    2406:	0e 94 4a 3a 	call	0x7494	; 0x7494 <__udivmodhi4>
    240a:	96 8b       	std	Z+22, r25	; 0x16
    240c:	85 8b       	std	Z+21, r24	; 0x15
    240e:	87 a1       	ldd	r24, Z+39	; 0x27
    2410:	87 25       	eor	r24, r7
    2412:	87 a3       	std	Z+39, r24	; 0x27
    2414:	80 a5       	ldd	r24, Z+40	; 0x28
    2416:	87 25       	eor	r24, r7
    2418:	80 a7       	std	Z+40, r24	; 0x28
    241a:	82 a5       	ldd	r24, Z+42	; 0x2a
    241c:	87 25       	eor	r24, r7
    241e:	82 a7       	std	Z+42, r24	; 0x2a
    2420:	81 a5       	ldd	r24, Z+41	; 0x29
    2422:	87 25       	eor	r24, r7
    2424:	81 a7       	std	Z+41, r24	; 0x29
    2426:	c8 01       	movw	r24, r16
    2428:	0f de       	rcall	.-994    	; 0x2048 <_ZN7Display16WriteDisplayDataEv>
    242a:	68 ee       	ldi	r22, 0xE8	; 232
    242c:	73 e0       	ldi	r23, 0x03	; 3
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
    2436:	ae 01       	movw	r20, r28
    2438:	40 5f       	subi	r20, 0xF0	; 240
    243a:	5f 4f       	sbci	r21, 0xFF	; 255
    243c:	be 01       	movw	r22, r28
    243e:	6f 5e       	subi	r22, 0xEF	; 239
    2440:	7f 4f       	sbci	r23, 0xFF	; 255
    2442:	d8 01       	movw	r26, r16
    2444:	14 96       	adiw	r26, 0x04	; 4
    2446:	8d 91       	ld	r24, X+
    2448:	9c 91       	ld	r25, X
    244a:	15 97       	sbiw	r26, 0x05	; 5
    244c:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN6System21ReadInputRegisterDataEPhS0_>
    2450:	40 e1       	ldi	r20, 0x10	; 16
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	68 89       	ldd	r22, Y+16	; 0x10
    2456:	85 e5       	ldi	r24, 0x55	; 85
    2458:	9a e0       	ldi	r25, 0x0A	; 10
    245a:	0e 94 7d 34 	call	0x68fa	; 0x68fa <_ZN5Print5printEhi>
    245e:	62 e0       	ldi	r22, 0x02	; 2
    2460:	75 e0       	ldi	r23, 0x05	; 5
    2462:	85 e5       	ldi	r24, 0x55	; 85
    2464:	9a e0       	ldi	r25, 0x0A	; 10
    2466:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
    246a:	40 e1       	ldi	r20, 0x10	; 16
    246c:	50 e0       	ldi	r21, 0x00	; 0
    246e:	69 89       	ldd	r22, Y+17	; 0x11
    2470:	85 e5       	ldi	r24, 0x55	; 85
    2472:	9a e0       	ldi	r25, 0x0A	; 10
    2474:	0e 94 7d 34 	call	0x68fa	; 0x68fa <_ZN5Print5printEhi>
    2478:	6a e3       	ldi	r22, 0x3A	; 58
    247a:	7a e0       	ldi	r23, 0x0A	; 10
    247c:	85 e5       	ldi	r24, 0x55	; 85
    247e:	9a e0       	ldi	r25, 0x0A	; 10
    2480:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
    2484:	89 89       	ldd	r24, Y+17	; 0x11
    2486:	80 fd       	sbrc	r24, 0
    2488:	06 c0       	rjmp	.+12     	; 0x2496 <_ZN7Display4TestEv+0x260>
    248a:	64 e0       	ldi	r22, 0x04	; 4
    248c:	75 e0       	ldi	r23, 0x05	; 5
    248e:	85 e5       	ldi	r24, 0x55	; 85
    2490:	9a e0       	ldi	r25, 0x0A	; 10
    2492:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    2496:	89 89       	ldd	r24, Y+17	; 0x11
    2498:	81 fd       	sbrc	r24, 1
    249a:	06 c0       	rjmp	.+12     	; 0x24a8 <_ZN7Display4TestEv+0x272>
    249c:	6b e0       	ldi	r22, 0x0B	; 11
    249e:	75 e0       	ldi	r23, 0x05	; 5
    24a0:	85 e5       	ldi	r24, 0x55	; 85
    24a2:	9a e0       	ldi	r25, 0x0A	; 10
    24a4:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    24a8:	89 89       	ldd	r24, Y+17	; 0x11
    24aa:	82 fd       	sbrc	r24, 2
    24ac:	06 c0       	rjmp	.+12     	; 0x24ba <_ZN7Display4TestEv+0x284>
    24ae:	64 e1       	ldi	r22, 0x14	; 20
    24b0:	75 e0       	ldi	r23, 0x05	; 5
    24b2:	85 e5       	ldi	r24, 0x55	; 85
    24b4:	9a e0       	ldi	r25, 0x0A	; 10
    24b6:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    24ba:	89 89       	ldd	r24, Y+17	; 0x11
    24bc:	83 fd       	sbrc	r24, 3
    24be:	06 c0       	rjmp	.+12     	; 0x24cc <_ZN7Display4TestEv+0x296>
    24c0:	6c e1       	ldi	r22, 0x1C	; 28
    24c2:	75 e0       	ldi	r23, 0x05	; 5
    24c4:	85 e5       	ldi	r24, 0x55	; 85
    24c6:	9a e0       	ldi	r25, 0x0A	; 10
    24c8:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    24cc:	89 89       	ldd	r24, Y+17	; 0x11
    24ce:	84 fd       	sbrc	r24, 4
    24d0:	06 c0       	rjmp	.+12     	; 0x24de <_ZN7Display4TestEv+0x2a8>
    24d2:	66 e2       	ldi	r22, 0x26	; 38
    24d4:	75 e0       	ldi	r23, 0x05	; 5
    24d6:	85 e5       	ldi	r24, 0x55	; 85
    24d8:	9a e0       	ldi	r25, 0x0A	; 10
    24da:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    24de:	89 89       	ldd	r24, Y+17	; 0x11
    24e0:	85 fd       	sbrc	r24, 5
    24e2:	06 c0       	rjmp	.+12     	; 0x24f0 <_ZN7Display4TestEv+0x2ba>
    24e4:	6f e2       	ldi	r22, 0x2F	; 47
    24e6:	75 e0       	ldi	r23, 0x05	; 5
    24e8:	85 e5       	ldi	r24, 0x55	; 85
    24ea:	9a e0       	ldi	r25, 0x0A	; 10
    24ec:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    24f0:	89 89       	ldd	r24, Y+17	; 0x11
    24f2:	86 fd       	sbrc	r24, 6
    24f4:	06 c0       	rjmp	.+12     	; 0x2502 <_ZN7Display4TestEv+0x2cc>
    24f6:	6a e3       	ldi	r22, 0x3A	; 58
    24f8:	75 e0       	ldi	r23, 0x05	; 5
    24fa:	85 e5       	ldi	r24, 0x55	; 85
    24fc:	9a e0       	ldi	r25, 0x0A	; 10
    24fe:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    2502:	89 89       	ldd	r24, Y+17	; 0x11
    2504:	87 fd       	sbrc	r24, 7
    2506:	06 c0       	rjmp	.+12     	; 0x2514 <_ZN7Display4TestEv+0x2de>
    2508:	66 e4       	ldi	r22, 0x46	; 70
    250a:	75 e0       	ldi	r23, 0x05	; 5
    250c:	85 e5       	ldi	r24, 0x55	; 85
    250e:	9a e0       	ldi	r25, 0x0A	; 10
    2510:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    2514:	88 89       	ldd	r24, Y+16	; 0x10
    2516:	80 fd       	sbrc	r24, 0
    2518:	06 c0       	rjmp	.+12     	; 0x2526 <_ZN7Display4TestEv+0x2f0>
    251a:	64 e5       	ldi	r22, 0x54	; 84
    251c:	75 e0       	ldi	r23, 0x05	; 5
    251e:	85 e5       	ldi	r24, 0x55	; 85
    2520:	9a e0       	ldi	r25, 0x0A	; 10
    2522:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    2526:	88 89       	ldd	r24, Y+16	; 0x10
    2528:	81 fd       	sbrc	r24, 1
    252a:	06 c0       	rjmp	.+12     	; 0x2538 <_ZN7Display4TestEv+0x302>
    252c:	6d e5       	ldi	r22, 0x5D	; 93
    252e:	75 e0       	ldi	r23, 0x05	; 5
    2530:	85 e5       	ldi	r24, 0x55	; 85
    2532:	9a e0       	ldi	r25, 0x0A	; 10
    2534:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    2538:	88 89       	ldd	r24, Y+16	; 0x10
    253a:	82 fd       	sbrc	r24, 2
    253c:	06 c0       	rjmp	.+12     	; 0x254a <_ZN7Display4TestEv+0x314>
    253e:	68 e6       	ldi	r22, 0x68	; 104
    2540:	75 e0       	ldi	r23, 0x05	; 5
    2542:	85 e5       	ldi	r24, 0x55	; 85
    2544:	9a e0       	ldi	r25, 0x0A	; 10
    2546:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    254a:	88 89       	ldd	r24, Y+16	; 0x10
    254c:	83 fd       	sbrc	r24, 3
    254e:	06 c0       	rjmp	.+12     	; 0x255c <_ZN7Display4TestEv+0x326>
    2550:	6b e6       	ldi	r22, 0x6B	; 107
    2552:	75 e0       	ldi	r23, 0x05	; 5
    2554:	85 e5       	ldi	r24, 0x55	; 85
    2556:	9a e0       	ldi	r25, 0x0A	; 10
    2558:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    255c:	f8 01       	movw	r30, r16
    255e:	86 81       	ldd	r24, Z+6	; 0x06
    2560:	97 81       	ldd	r25, Z+7	; 0x07
    2562:	01 96       	adiw	r24, 0x01	; 1
    2564:	97 83       	std	Z+7, r25	; 0x07
    2566:	86 83       	std	Z+6, r24	; 0x06
    2568:	9a ce       	rjmp	.-716    	; 0x229e <_ZN7Display4TestEv+0x68>

0000256a <_ZN7Display6UpdateEv>:
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	fc 01       	movw	r30, r24
    2570:	23 a5       	ldd	r18, Z+43	; 0x2b
    2572:	22 23       	and	r18, r18
    2574:	19 f0       	breq	.+6      	; 0x257c <_ZN7Display6UpdateEv+0x12>
    2576:	ec 01       	movw	r28, r24
    2578:	67 dd       	rcall	.-1330   	; 0x2048 <_ZN7Display16WriteDisplayDataEv>
    257a:	1b a6       	std	Y+43, r1	; 0x2b
    257c:	df 91       	pop	r29
    257e:	cf 91       	pop	r28
    2580:	08 95       	ret

00002582 <_ZN7Display10InitialiseEv>:
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	ec 01       	movw	r28, r24
    2588:	61 e0       	ldi	r22, 0x01	; 1
    258a:	8a e0       	ldi	r24, 0x0A	; 10
    258c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
    2590:	61 e0       	ldi	r22, 0x01	; 1
    2592:	8b e0       	ldi	r24, 0x0B	; 11
    2594:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
    2598:	61 e0       	ldi	r22, 0x01	; 1
    259a:	8c e0       	ldi	r24, 0x0C	; 12
    259c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
    25a0:	ce 01       	movw	r24, r28
    25a2:	e0 db       	rcall	.-2112   	; 0x1d64 <_ZN7Display12ClearMembersEv>
    25a4:	ce 01       	movw	r24, r28
    25a6:	e1 df       	rcall	.-62     	; 0x256a <_ZN7Display6UpdateEv>
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	df 91       	pop	r29
    25ac:	cf 91       	pop	r28
    25ae:	08 95       	ret

000025b0 <_ZN7Display7DoFlashEv>:
//
//  Flash indicators on or off as appropriate
//  Return time that next flash action is required
//
unsigned long Display::DoFlash()
{
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	ec 01       	movw	r28, r24
	// Determine whether flashing digits should be on or off
	m_bFlashingIndicatorsAreOn = !m_bFlashingIndicatorsAreOn;
    25ba:	8e a9       	ldd	r24, Y+54	; 0x36
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	89 27       	eor	r24, r25
    25c0:	8e ab       	std	Y+54, r24	; 0x36
	
	// Show or blank the digit as appropriate
	m_bNeedsUpdating = true;
    25c2:	9b a7       	std	Y+43, r25	; 0x2b
	Update();
    25c4:	ce 01       	movw	r24, r28
    25c6:	d1 df       	rcall	.-94     	; 0x256a <_ZN7Display6UpdateEv>
	
	// Return time that next flash action is required
	return millis() + (m_bFlashingIndicatorsAreOn ? FLASH_INTERVAL_ON : FLASH_INTERVAL_OFF);
    25c8:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    25cc:	2e a9       	ldd	r18, Y+54	; 0x36
    25ce:	21 11       	cpse	r18, r1
    25d0:	05 c0       	rjmp	.+10     	; 0x25dc <_ZN7Display7DoFlashEv+0x2c>
    25d2:	0e e5       	ldi	r16, 0x5E	; 94
    25d4:	11 e0       	ldi	r17, 0x01	; 1
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	04 c0       	rjmp	.+8      	; 0x25e4 <_ZN7Display7DoFlashEv+0x34>
    25dc:	0c eb       	ldi	r16, 0xBC	; 188
    25de:	12 e0       	ldi	r17, 0x02	; 2
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	60 0f       	add	r22, r16
    25e6:	71 1f       	adc	r23, r17
    25e8:	82 1f       	adc	r24, r18
    25ea:	93 1f       	adc	r25, r19
}
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	08 95       	ret

000025f6 <_ZN5DrinkD1Ev>:
} //Drink

//
//  Class destructor
//
Drink::~Drink()
    25f6:	08 95       	ret

000025f8 <_ZN5Drink15InitialiseDrinkEv>:
//  InitialiseDrink
//
//  Initialise members from the static initialisation array
//
void Drink::InitialiseDrink()
{
    25f8:	1f 93       	push	r17
    25fa:	cf 93       	push	r28
    25fc:	df 93       	push	r29
    25fe:	ec 01       	movw	r28, r24
    m_Type = defaultDrinkDefinitions[m_nTypeIndex].type;
    2600:	89 89       	ldd	r24, Y+17	; 0x11
    2602:	9a 89       	ldd	r25, Y+18	; 0x12
    2604:	1c e0       	ldi	r17, 0x0C	; 12
    2606:	18 9f       	mul	r17, r24
    2608:	b0 01       	movw	r22, r0
    260a:	19 9f       	mul	r17, r25
    260c:	70 0d       	add	r23, r0
    260e:	11 24       	eor	r1, r1
    2610:	fb 01       	movw	r30, r22
    2612:	ea 5f       	subi	r30, 0xFA	; 250
    2614:	fd 4f       	sbci	r31, 0xFD	; 253
    2616:	80 81       	ld	r24, Z
    2618:	88 83       	st	Y, r24
    strcpy(m_szName, defaultDrinkDefinitions[m_nTypeIndex].name);
    261a:	69 5f       	subi	r22, 0xF9	; 249
    261c:	7d 4f       	sbci	r23, 0xFD	; 253
    261e:	ce 01       	movw	r24, r28
    2620:	02 96       	adiw	r24, 0x02	; 2
    2622:	0e 94 cf 3c 	call	0x799e	; 0x799e <strcpy>
    m_nSugar = defaultDrinkDefinitions[m_nTypeIndex].sugar;
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	18 9f       	mul	r17, r24
    262c:	f0 01       	movw	r30, r0
    262e:	19 9f       	mul	r17, r25
    2630:	f0 0d       	add	r31, r0
    2632:	11 24       	eor	r1, r1
    2634:	ea 5f       	subi	r30, 0xFA	; 250
    2636:	fd 4f       	sbci	r31, 0xFD	; 253
    2638:	80 85       	ldd	r24, Z+8	; 0x08
    263a:	91 85       	ldd	r25, Z+9	; 0x09
    263c:	9a 87       	std	Y+10, r25	; 0x0a
    263e:	89 87       	std	Y+9, r24	; 0x09
    m_nMilk = defaultDrinkDefinitions[m_nTypeIndex].milk;
    2640:	86 81       	ldd	r24, Z+6	; 0x06
    2642:	97 81       	ldd	r25, Z+7	; 0x07
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	8f 83       	std	Y+7, r24	; 0x07
    m_nStrength = defaultDrinkDefinitions[m_nTypeIndex].strength;
    2648:	82 85       	ldd	r24, Z+10	; 0x0a
    264a:	93 85       	ldd	r25, Z+11	; 0x0b
    264c:	9c 87       	std	Y+12, r25	; 0x0c
    264e:	8b 87       	std	Y+11, r24	; 0x0b
    m_bCupIsPresent = true;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	88 8b       	std	Y+16, r24	; 0x10
    m_bSelectionIsConfirmed = false;
    2654:	1f 86       	std	Y+15, r1	; 0x0f
    m_State = Empty;
    2656:	19 82       	std	Y+1, r1	; 0x01
}
    2658:	df 91       	pop	r29
    265a:	cf 91       	pop	r28
    265c:	1f 91       	pop	r17
    265e:	08 95       	ret

00002660 <_ZN5DrinkC1Ev>:
//
//  Class constructor
//
Drink::Drink()
{
    m_nTypeIndex = 0;
    2660:	fc 01       	movw	r30, r24
    2662:	12 8a       	std	Z+18, r1	; 0x12
    2664:	11 8a       	std	Z+17, r1	; 0x11
    m_nDrinkID = 0;
    2666:	16 86       	std	Z+14, r1	; 0x0e
    2668:	15 86       	std	Z+13, r1	; 0x0d
    InitialiseDrink();
    266a:	c6 cf       	rjmp	.-116    	; 0x25f8 <_ZN5Drink15InitialiseDrinkEv>

0000266c <_ZN5DrinkC1Ej>:
//
//  Class constructor
//
Drink::Drink( unsigned int nID )
{
    m_nTypeIndex = 0;
    266c:	fc 01       	movw	r30, r24
    266e:	12 8a       	std	Z+18, r1	; 0x12
    2670:	11 8a       	std	Z+17, r1	; 0x11
    m_nDrinkID = nID;
    2672:	76 87       	std	Z+14, r23	; 0x0e
    2674:	65 87       	std	Z+13, r22	; 0x0d
    InitialiseDrink();
    2676:	c0 cf       	rjmp	.-128    	; 0x25f8 <_ZN5Drink15InitialiseDrinkEv>

00002678 <_ZN5Drink11SetNextTypeEv>:
//
//  Set the next type in the list of available drink types
//
void Drink::SetNextType()
{
    m_nTypeIndex = (m_nTypeIndex < DRINK_TYPES-1) ? m_nTypeIndex + 1 : m_nTypeIndex;
    2678:	fc 01       	movw	r30, r24
    267a:	21 89       	ldd	r18, Z+17	; 0x11
    267c:	32 89       	ldd	r19, Z+18	; 0x12
    267e:	12 16       	cp	r1, r18
    2680:	13 06       	cpc	r1, r19
    2682:	14 f0       	brlt	.+4      	; 0x2688 <_ZN5Drink11SetNextTypeEv+0x10>
    2684:	2f 5f       	subi	r18, 0xFF	; 255
    2686:	3f 4f       	sbci	r19, 0xFF	; 255
    2688:	fc 01       	movw	r30, r24
    268a:	32 8b       	std	Z+18, r19	; 0x12
    268c:	21 8b       	std	Z+17, r18	; 0x11
    InitialiseDrink();
    268e:	b4 cf       	rjmp	.-152    	; 0x25f8 <_ZN5Drink15InitialiseDrinkEv>

00002690 <_ZN5Drink15SetPreviousTypeEv>:
//
//  Set the previous type in the list of available drink types
//
void Drink::SetPreviousType()
{
    m_nTypeIndex = (m_nTypeIndex > 0) ? m_nTypeIndex - 1 : 0;
    2690:	fc 01       	movw	r30, r24
    2692:	21 89       	ldd	r18, Z+17	; 0x11
    2694:	32 89       	ldd	r19, Z+18	; 0x12
    2696:	12 16       	cp	r1, r18
    2698:	13 06       	cpc	r1, r19
    269a:	1c f4       	brge	.+6      	; 0x26a2 <_ZN5Drink15SetPreviousTypeEv+0x12>
    269c:	21 50       	subi	r18, 0x01	; 1
    269e:	31 09       	sbc	r19, r1
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <_ZN5Drink15SetPreviousTypeEv+0x16>
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	fc 01       	movw	r30, r24
    26a8:	32 8b       	std	Z+18, r19	; 0x12
    26aa:	21 8b       	std	Z+17, r18	; 0x11
    InitialiseDrink();
    26ac:	a5 cf       	rjmp	.-182    	; 0x25f8 <_ZN5Drink15InitialiseDrinkEv>

000026ae <_ZN9ExtractorC1EP10TeaMachine>:
} //Extractor

//
//	Default destructor
//
Extractor::~Extractor()
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	ec 01       	movw	r28, r24
    26b4:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    26b8:	8d e8       	ldi	r24, 0x8D	; 141
    26ba:	95 e0       	ldi	r25, 0x05	; 5
    26bc:	99 83       	std	Y+1, r25	; 0x01
    26be:	88 83       	st	Y, r24
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	08 95       	ret

000026c6 <_ZN9Extractor5RaiseEv>:
//	Raise()
//
//	Raise the extractor
//
bool Extractor::Raise()
{
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_EXTRACTOR_UPDOWN);
    26cc:	66 e0       	ldi	r22, 0x06	; 6
    26ce:	70 e0       	ldi	r23, 0x00	; 0
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	9d 81       	ldd	r25, Y+5	; 0x05
    26d4:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_EXTRACTOR_EN);
    26d8:	67 e0       	ldi	r22, 0x07	; 7
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	8c 81       	ldd	r24, Y+4	; 0x04
    26de:	9d 81       	ldd	r25, Y+5	; 0x05
    26e0:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	df 91       	pop	r29
    26e8:	cf 91       	pop	r28
    26ea:	08 95       	ret

000026ec <_ZN9Extractor5LowerEv>:
//	Lower()
//
//	Lower the extractor
//
bool Extractor::Lower()
{
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	ec 01       	movw	r28, r24
    m_pSystem->ClearOutputRegisterBit(OUTREG_EXTRACTOR_UPDOWN);
    26f2:	66 e0       	ldi	r22, 0x06	; 6
    26f4:	70 e0       	ldi	r23, 0x00	; 0
    26f6:	8c 81       	ldd	r24, Y+4	; 0x04
    26f8:	9d 81       	ldd	r25, Y+5	; 0x05
    26fa:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
    m_pSystem->SetOutputRegisterBit(OUTREG_EXTRACTOR_EN);
    26fe:	67 e0       	ldi	r22, 0x07	; 7
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	9d 81       	ldd	r25, Y+5	; 0x05
    2706:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
    
    return true;
}
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <_ZN9Extractor4StopEv>:
//
//	Switch off the extractor motor
//
void Extractor::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_EXTRACTOR_EN);
    2712:	67 e0       	ldi	r22, 0x07	; 7
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	fc 01       	movw	r30, r24
    2718:	84 81       	ldd	r24, Z+4	; 0x04
    271a:	95 81       	ldd	r25, Z+5	; 0x05
    271c:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>

00002720 <_ZN9Extractor8IsRaisedEv>:
//
//	Returns true if the extractor is currently in the raised position
//
bool Extractor::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2720:	fc 01       	movw	r30, r24
    2722:	84 81       	ldd	r24, Z+4	; 0x04
    2724:	95 81       	ldd	r25, Z+5	; 0x05
    2726:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_EXTRACTOR_HILIMITSW) != 0;
    272a:	24 e0       	ldi	r18, 0x04	; 4
    272c:	96 95       	lsr	r25
    272e:	87 95       	ror	r24
    2730:	2a 95       	dec	r18
    2732:	e1 f7       	brne	.-8      	; 0x272c <_ZN9Extractor8IsRaisedEv+0xc>
}
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	08 95       	ret

00002738 <_ZN9Extractor9IsLoweredEv>:
//
//	Returns true if the extractor is currently in the lowered position
//
bool Extractor::IsLowered()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2738:	fc 01       	movw	r30, r24
    273a:	84 81       	ldd	r24, Z+4	; 0x04
    273c:	95 81       	ldd	r25, Z+5	; 0x05
    273e:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_EXTRACTOR_LOLIMITSW) != 0;
    2742:	25 e0       	ldi	r18, 0x05	; 5
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	2a 95       	dec	r18
    274a:	e1 f7       	brne	.-8      	; 0x2744 <_ZN9Extractor9IsLoweredEv+0xc>
}
    274c:	81 70       	andi	r24, 0x01	; 1
    274e:	08 95       	ret

00002750 <_ZN9Extractor4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool Extractor::Test()
{
    2750:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch action switch setting
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    2752:	8c 81       	ldd	r24, Y+4	; 0x04
    2754:	9d 81       	ldd	r25, Y+5	; 0x05
    2756:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    275a:	93 ff       	sbrs	r25, 3
    275c:	07 c0       	rjmp	.+14     	; 0x276c <_ZN9Extractor4TestEv+0x1c>
{
	Serial.println("Extractor is NOT LOWERED");
}
delay(1000);
*/
			if(!IsRaised())
    275e:	ce 01       	movw	r24, r28
    2760:	df df       	rcall	.-66     	; 0x2720 <_ZN9Extractor8IsRaisedEv>
    2762:	81 11       	cpse	r24, r1
    2764:	f6 cf       	rjmp	.-20     	; 0x2752 <_ZN9Extractor4TestEv+0x2>
			{
				// Raise the extractor
				Raise();
    2766:	ce 01       	movw	r24, r28
    2768:	ae df       	rcall	.-164    	; 0x26c6 <_ZN9Extractor5RaiseEv>
    276a:	f3 cf       	rjmp	.-26     	; 0x2752 <_ZN9Extractor4TestEv+0x2>
	Serial.println("Extractor is NOT LOWERED");
}
delay(1000);
*/
			
			if(!IsLowered())
    276c:	ce 01       	movw	r24, r28
    276e:	e4 df       	rcall	.-56     	; 0x2738 <_ZN9Extractor9IsLoweredEv>
    2770:	81 11       	cpse	r24, r1
    2772:	ef cf       	rjmp	.-34     	; 0x2752 <_ZN9Extractor4TestEv+0x2>
			{
				// Lower the extractor
				Lower();
    2774:	ce 01       	movw	r24, r28
    2776:	ba df       	rcall	.-140    	; 0x26ec <_ZN9Extractor5LowerEv>
    2778:	ec cf       	rjmp	.-40     	; 0x2752 <_ZN9Extractor4TestEv+0x2>

0000277a <_GLOBAL__sub_I_gApplication>:
//	Main.cpp
//
#include <Arduino.h>
#include "TeaMachineApp.h"

TeaMachine gApplication;
    277a:	8b e4       	ldi	r24, 0x4B	; 75
    277c:	9a e0       	ldi	r25, 0x0A	; 10
    277e:	0c 94 ed 20 	jmp	0x41da	; 0x41da <_ZN10TeaMachineC1Ev>

00002782 <_GLOBAL__sub_D_gApplication>:
    2782:	8b e4       	ldi	r24, 0x4B	; 75
    2784:	9a e0       	ldi	r25, 0x0A	; 10
    2786:	0c 94 fb 20 	jmp	0x41f6	; 0x41f6 <_ZN10TeaMachineD1Ev>

0000278a <setup>:
bool g_bInitialised;	

void setup() 
{
	g_bInitialised = gApplication.Initialise();
    278a:	8b e4       	ldi	r24, 0x4B	; 75
    278c:	9a e0       	ldi	r25, 0x0A	; 10
    278e:	0e 94 ae 20 	call	0x415c	; 0x415c <_ZN10TeaMachine10InitialiseEv>
    2792:	80 93 4a 0a 	sts	0x0A4A, r24	; 0x800a4a <__data_end>
    2796:	08 95       	ret

00002798 <loop>:
}

void loop() 
{
	while(g_bInitialised)
    2798:	80 91 4a 0a 	lds	r24, 0x0A4A	; 0x800a4a <__data_end>
    279c:	88 23       	and	r24, r24
    279e:	29 f0       	breq	.+10     	; 0x27aa <loop+0x12>
	{
		gApplication.Process();
    27a0:	8b e4       	ldi	r24, 0x4B	; 75
    27a2:	9a e0       	ldi	r25, 0x0A	; 10
    27a4:	0e 94 67 22 	call	0x44ce	; 0x44ce <_ZN10TeaMachine7ProcessEv>
	g_bInitialised = gApplication.Initialise();
}

void loop() 
{
	while(g_bInitialised)
    27a8:	f7 cf       	rjmp	.-18     	; 0x2798 <loop>
    27aa:	08 95       	ret

000027ac <_ZN6MasherC1EP10TeaMachine>:
} //Masher

//
//	Default destructor
//
Masher::~Masher()
    27ac:	cf 93       	push	r28
    27ae:	df 93       	push	r29
    27b0:	ec 01       	movw	r28, r24
    27b2:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    27b6:	85 e9       	ldi	r24, 0x95	; 149
    27b8:	95 e0       	ldi	r25, 0x05	; 5
    27ba:	99 83       	std	Y+1, r25	; 0x01
    27bc:	88 83       	st	Y, r24
    27be:	1e 82       	std	Y+6, r1	; 0x06
    27c0:	df 91       	pop	r29
    27c2:	cf 91       	pop	r28
    27c4:	08 95       	ret

000027c6 <_ZN6Masher5RaiseEv>:
//	Raise()
//
//	Raise the masher
//
bool Masher::Raise()
{
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_MASHER_UPDOWN);
    27cc:	68 e0       	ldi	r22, 0x08	; 8
    27ce:	70 e0       	ldi	r23, 0x00	; 0
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	9d 81       	ldd	r25, Y+5	; 0x05
    27d4:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_MASHER_EN);
    27d8:	69 e0       	ldi	r22, 0x09	; 9
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	8c 81       	ldd	r24, Y+4	; 0x04
    27de:	9d 81       	ldd	r25, Y+5	; 0x05
    27e0:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	m_lastAction = masherActionRaising;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
    27e6:	8e 83       	std	Y+6, r24	; 0x06
    
	return true;
}
    27e8:	df 91       	pop	r29
    27ea:	cf 91       	pop	r28
    27ec:	08 95       	ret

000027ee <_ZN6Masher5LowerEv>:
//	Lower()
//
//	Lower the masher
//
bool Masher::Lower()
{
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
	m_pSystem->ClearOutputRegisterBit(OUTREG_MASHER_UPDOWN);
    27f4:	68 e0       	ldi	r22, 0x08	; 8
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	8c 81       	ldd	r24, Y+4	; 0x04
    27fa:	9d 81       	ldd	r25, Y+5	; 0x05
    27fc:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_MASHER_EN);
    2800:	69 e0       	ldi	r22, 0x09	; 9
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	8c 81       	ldd	r24, Y+4	; 0x04
    2806:	9d 81       	ldd	r25, Y+5	; 0x05
    2808:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	m_lastAction = masherActionLowering;
    280c:	82 e0       	ldi	r24, 0x02	; 2
    280e:	8e 83       	std	Y+6, r24	; 0x06
    
	return true;
}
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	08 95       	ret

00002818 <_ZN6Masher4StopEv>:
//
//	Switch off the masher motor
//
void Masher::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_MASHER_EN);
    2818:	69 e0       	ldi	r22, 0x09	; 9
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	fc 01       	movw	r30, r24
    281e:	84 81       	ldd	r24, Z+4	; 0x04
    2820:	95 81       	ldd	r25, Z+5	; 0x05
    2822:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>

00002826 <_ZN6Masher8IsRaisedEv>:
//	IsRaised()
//
//	Returns true if the masher is currently in the raised position
//
bool Masher::IsRaised()
{
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	ec 01       	movw	r28, r24
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    282c:	8c 81       	ldd	r24, Y+4	; 0x04
    282e:	9d 81       	ldd	r25, Y+5	; 0x05
    2830:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return ((wInputRegister & INREGMASK_MASHER_HILIMITSW) != 0) && (m_lastAction != masherActionLowering);
    2834:	87 ff       	sbrs	r24, 7
    2836:	04 c0       	rjmp	.+8      	; 0x2840 <_ZN6Masher8IsRaisedEv+0x1a>
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	9e 81       	ldd	r25, Y+6	; 0x06
    283c:	92 30       	cpi	r25, 0x02	; 2
    283e:	09 f4       	brne	.+2      	; 0x2842 <_ZN6Masher8IsRaisedEv+0x1c>
    2840:	80 e0       	ldi	r24, 0x00	; 0
}
    2842:	df 91       	pop	r29
    2844:	cf 91       	pop	r28
    2846:	08 95       	ret

00002848 <_ZN6Masher9IsLoweredEv>:
//	IsLowered()
//
//	Returns true if the masher is currently in the lowered position
//
bool Masher::IsLowered()
{
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	ec 01       	movw	r28, r24
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    284e:	8c 81       	ldd	r24, Y+4	; 0x04
    2850:	9d 81       	ldd	r25, Y+5	; 0x05
    2852:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return ((wInputRegister & INREGMASK_MASHER_LOLIMITSW) != 0) && (m_lastAction != masherActionRaising);
    2856:	90 ff       	sbrs	r25, 0
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <_ZN6Masher9IsLoweredEv+0x1a>
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	9e 81       	ldd	r25, Y+6	; 0x06
    285e:	91 30       	cpi	r25, 0x01	; 1
    2860:	09 f4       	brne	.+2      	; 0x2864 <_ZN6Masher9IsLoweredEv+0x1c>
    2862:	80 e0       	ldi	r24, 0x00	; 0
}
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	08 95       	ret

0000286a <_ZN6Masher4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool Masher::Test()
{
    286a:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch mode
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    2874:	93 ff       	sbrs	r25, 3
    2876:	0d c0       	rjmp	.+26     	; 0x2892 <_ZN6Masher4TestEv+0x28>
		{
			if(!IsRaised())
    2878:	ce 01       	movw	r24, r28
    287a:	d5 df       	rcall	.-86     	; 0x2826 <_ZN6Masher8IsRaisedEv>
    287c:	81 11       	cpse	r24, r1
    287e:	02 c0       	rjmp	.+4      	; 0x2884 <_ZN6Masher4TestEv+0x1a>
			{
				// Raise the masher
				Raise();
    2880:	ce 01       	movw	r24, r28
    2882:	a1 df       	rcall	.-190    	; 0x27c6 <_ZN6Masher5RaiseEv>
			}
		
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
    2884:	8c 81       	ldd	r24, Y+4	; 0x04
    2886:	9d 81       	ldd	r25, Y+5	; 0x05
    2888:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    288c:	93 fd       	sbrc	r25, 3
    288e:	fa cf       	rjmp	.-12     	; 0x2884 <_ZN6Masher4TestEv+0x1a>
		}
		else
		{
			if(!IsLowered())
    2890:	ed cf       	rjmp	.-38     	; 0x286c <_ZN6Masher4TestEv+0x2>
    2892:	ce 01       	movw	r24, r28
    2894:	d9 df       	rcall	.-78     	; 0x2848 <_ZN6Masher9IsLoweredEv>
    2896:	81 11       	cpse	r24, r1
			{
				// Lower the masher
				Lower();
    2898:	02 c0       	rjmp	.+4      	; 0x289e <_ZN6Masher4TestEv+0x34>
    289a:	ce 01       	movw	r24, r28
    289c:	a8 df       	rcall	.-176    	; 0x27ee <_ZN6Masher5LowerEv>
			}
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    28a6:	93 ff       	sbrs	r25, 3
    28a8:	fa cf       	rjmp	.-12     	; 0x289e <_ZN6Masher4TestEv+0x34>
    28aa:	e0 cf       	rjmp	.-64     	; 0x286c <_ZN6Masher4TestEv+0x2>

000028ac <_ZN13MilkDispenser10InitialiseEv>:
} //MilkDispenser

//
//	Default destructor
//
MilkDispenser::~MilkDispenser()
    28ac:	08 95       	ret

000028ae <_ZN13MilkDispenserC1EP10TeaMachine>:
    28ae:	cf 93       	push	r28
    28b0:	df 93       	push	r29
    28b2:	ec 01       	movw	r28, r24
    28b4:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    28b8:	8d e9       	ldi	r24, 0x9D	; 157
    28ba:	95 e0       	ldi	r25, 0x05	; 5
    28bc:	99 83       	std	Y+1, r25	; 0x01
    28be:	88 83       	st	Y, r24
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <_ZN13MilkDispenser5RaiseEv>:
//	Raise()
//
//	Raise the milk dispenser
//
bool MilkDispenser::Raise()
{
    28c6:	cf 93       	push	r28
    28c8:	df 93       	push	r29
    28ca:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_RAISE);
    28cc:	63 e1       	ldi	r22, 0x13	; 19
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	9d 81       	ldd	r25, Y+5	; 0x05
    28d4:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->ClearOutputRegisterBit(OUTREG_MILKDISP_RAISE);
    28d8:	63 e1       	ldi	r22, 0x13	; 19
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	8c 81       	ldd	r24, Y+4	; 0x04
    28de:	9d 81       	ldd	r25, Y+5	; 0x05
    28e0:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_EN);
    28e4:	62 e1       	ldi	r22, 0x12	; 18
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	9d 81       	ldd	r25, Y+5	; 0x05
    28ec:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	df 91       	pop	r29
    28f4:	cf 91       	pop	r28
    28f6:	08 95       	ret

000028f8 <_ZN13MilkDispenser8DispenseEv>:
//	Dispense()
//
//	Perform a dispense cycle
//
bool MilkDispenser::Dispense()
{
    28f8:	cf 93       	push	r28
    28fa:	df 93       	push	r29
    28fc:	ec 01       	movw	r28, r24
    m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_LOWER);
    28fe:	64 e1       	ldi	r22, 0x14	; 20
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	8c 81       	ldd	r24, Y+4	; 0x04
    2904:	9d 81       	ldd	r25, Y+5	; 0x05
    2906:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
    m_pSystem->ClearOutputRegisterBit(OUTREG_MILKDISP_LOWER);
    290a:	64 e1       	ldi	r22, 0x14	; 20
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	8c 81       	ldd	r24, Y+4	; 0x04
    2910:	9d 81       	ldd	r25, Y+5	; 0x05
    2912:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
    m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_EN);
    2916:	62 e1       	ldi	r22, 0x12	; 18
    2918:	70 e0       	ldi	r23, 0x00	; 0
    291a:	8c 81       	ldd	r24, Y+4	; 0x04
    291c:	9d 81       	ldd	r25, Y+5	; 0x05
    291e:	0e 94 1c 20 	call	0x4038	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
    
    return true;
}
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	08 95       	ret

0000292a <_ZN13MilkDispenser4TestEv>:
//
//	Perform hardware tests
//
bool MilkDispenser::Test()
{
	Dispense();
    292a:	e6 df       	rcall	.-52     	; 0x28f8 <_ZN13MilkDispenser8DispenseEv>
    292c:	ff cf       	rjmp	.-2      	; 0x292c <_ZN13MilkDispenser4TestEv+0x2>

0000292e <_ZN13MilkDispenser4StopEv>:
//
//	Switch off the MilkDispenser motor
//
void MilkDispenser::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_MILKDISP_EN);
    292e:	62 e1       	ldi	r22, 0x12	; 18
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	fc 01       	movw	r30, r24
    2934:	84 81       	ldd	r24, Z+4	; 0x04
    2936:	95 81       	ldd	r25, Z+5	; 0x05
    2938:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>

0000293c <_ZN13MilkDispenser8IsRaisedEv>:
//
//	Returns true if the milk dispenser is currently in the raised position
//
bool MilkDispenser::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    293c:	fc 01       	movw	r30, r24
    293e:	84 81       	ldd	r24, Z+4	; 0x04
    2940:	95 81       	ldd	r25, Z+5	; 0x05
    2942:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_MILKDISP_HILIMITSW) != 0;
    2946:	89 2f       	mov	r24, r25
    2948:	99 27       	eor	r25, r25
    294a:	82 95       	swap	r24
    294c:	86 95       	lsr	r24
    294e:	87 70       	andi	r24, 0x07	; 7
}
    2950:	81 70       	andi	r24, 0x01	; 1
    2952:	08 95       	ret

00002954 <_ZN13MilkDispenser9IsRaisingEv>:
//
//	Returns true if the milk dispenser is in the process of returning to the raised position
//
bool MilkDispenser::IsRaising()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2954:	fc 01       	movw	r30, r24
    2956:	84 81       	ldd	r24, Z+4	; 0x04
    2958:	95 81       	ldd	r25, Z+5	; 0x05
    295a:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_MILKDISP_RAISING) != 0;
}
    295e:	94 fb       	bst	r25, 4
    2960:	88 27       	eor	r24, r24
    2962:	80 f9       	bld	r24, 0
    2964:	08 95       	ret

00002966 <_ZN13MilkDispenser15SetLoadPositionEv>:
//	SetLoadPosition()
//
//	Move the milk dispenser into the position required to load/unload the bottle
//
bool MilkDispenser::SetLoadPosition()
{
    2966:	cf 92       	push	r12
    2968:	df 92       	push	r13
    296a:	ef 92       	push	r14
    296c:	ff 92       	push	r15
    296e:	cf 93       	push	r28
    2970:	df 93       	push	r29
    2972:	ec 01       	movw	r28, r24
	bool bResult = false;
	
	if( !IsRaised() )
    2974:	e3 df       	rcall	.-58     	; 0x293c <_ZN13MilkDispenser8IsRaisedEv>
    2976:	81 11       	cpse	r24, r1
    2978:	16 c0       	rjmp	.+44     	; 0x29a6 <_ZN13MilkDispenser15SetLoadPositionEv+0x40>
	{
		// Dispenser is not in the raised position, so raise it
		unsigned int lTimeout = millis() + MILK_TIMEOUT_RAISE;
    297a:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    297e:	6b 01       	movw	r12, r22
    2980:	28 e7       	ldi	r18, 0x78	; 120
    2982:	c2 1a       	sub	r12, r18
    2984:	2c ee       	ldi	r18, 0xEC	; 236
    2986:	d2 0a       	sbc	r13, r18
		Raise();
    2988:	ce 01       	movw	r24, r28
    298a:	9d df       	rcall	.-198    	; 0x28c6 <_ZN13MilkDispenser5RaiseEv>
		while( !IsRaised() && (millis() < lTimeout) );
    298c:	e1 2c       	mov	r14, r1
    298e:	f1 2c       	mov	r15, r1
    2990:	ce 01       	movw	r24, r28
    2992:	d4 df       	rcall	.-88     	; 0x293c <_ZN13MilkDispenser8IsRaisedEv>
    2994:	81 11       	cpse	r24, r1
    2996:	07 c0       	rjmp	.+14     	; 0x29a6 <_ZN13MilkDispenser15SetLoadPositionEv+0x40>
    2998:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    299c:	6c 15       	cp	r22, r12
    299e:	7d 05       	cpc	r23, r13
    29a0:	8e 05       	cpc	r24, r14
    29a2:	9f 05       	cpc	r25, r15
	}
	
	if( IsRaised() )
    29a4:	a8 f3       	brcs	.-22     	; 0x2990 <_ZN13MilkDispenser15SetLoadPositionEv+0x2a>
    29a6:	ce 01       	movw	r24, r28
    29a8:	c9 df       	rcall	.-110    	; 0x293c <_ZN13MilkDispenser8IsRaisedEv>
    29aa:	88 23       	and	r24, r24
	{
		// Start moving to the load position
		Dispense();
    29ac:	99 f0       	breq	.+38     	; 0x29d4 <_ZN13MilkDispenser15SetLoadPositionEv+0x6e>
    29ae:	ce 01       	movw	r24, r28
    29b0:	a3 df       	rcall	.-186    	; 0x28f8 <_ZN13MilkDispenser8DispenseEv>
			
		unsigned int lTimeToStop = millis() + MILK_LOAD_DELAY;
    29b2:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    29b6:	60 55       	subi	r22, 0x50	; 80
    29b8:	7b 4f       	sbci	r23, 0xFB	; 251
	
		while( millis() < lTimeToStop );
    29ba:	6b 01       	movw	r12, r22
    29bc:	e1 2c       	mov	r14, r1
    29be:	f1 2c       	mov	r15, r1
    29c0:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    29c4:	6c 15       	cp	r22, r12
    29c6:	7d 05       	cpc	r23, r13
    29c8:	8e 05       	cpc	r24, r14
    29ca:	9f 05       	cpc	r25, r15
		
		// Stop the movement
		Stop();
    29cc:	c8 f3       	brcs	.-14     	; 0x29c0 <_ZN13MilkDispenser15SetLoadPositionEv+0x5a>
    29ce:	ce 01       	movw	r24, r28
    29d0:	ae df       	rcall	.-164    	; 0x292e <_ZN13MilkDispenser4StopEv>
		
		bResult = true;
    29d2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return bResult;
}
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	cf 90       	pop	r12
    29e0:	08 95       	ret

000029e2 <_ZN11MilkManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    29e2:	fc 01       	movw	r30, r24
    29e4:	11 8e       	std	Z+25, r1	; 0x19
    29e6:	10 8e       	std	Z+24, r1	; 0x18
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	08 95       	ret

000029ec <_ZN11MilkManager12BeginProcessEv>:
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	2c 97       	sbiw	r28, 0x0c	; 12
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	8c 01       	movw	r16, r24
    2a06:	dc 01       	movw	r26, r24
    2a08:	16 96       	adiw	r26, 0x06	; 6
    2a0a:	ed 91       	ld	r30, X+
    2a0c:	fc 91       	ld	r31, X
    2a0e:	17 97       	sbiw	r26, 0x07	; 7
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	41 f0       	breq	.+16     	; 0x2a24 <_ZN11MilkManager12BeginProcessEv+0x38>
    2a14:	87 81       	ldd	r24, Z+7	; 0x07
    2a16:	90 85       	ldd	r25, Z+8	; 0x08
    2a18:	88 0f       	add	r24, r24
    2a1a:	99 1f       	adc	r25, r25
    2a1c:	5d 96       	adiw	r26, 0x1d	; 29
    2a1e:	9c 93       	st	X, r25
    2a20:	8e 93       	st	-X, r24
    2a22:	5c 97       	sbiw	r26, 0x1c	; 28
    2a24:	61 ea       	ldi	r22, 0xA1	; 161
    2a26:	75 e0       	ldi	r23, 0x05	; 5
    2a28:	ce 01       	movw	r24, r28
    2a2a:	07 96       	adiw	r24, 0x07	; 7
    2a2c:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2a30:	f8 01       	movw	r30, r16
    2a32:	64 8d       	ldd	r22, Z+28	; 0x1c
    2a34:	75 8d       	ldd	r23, Z+29	; 0x1d
    2a36:	ce 01       	movw	r24, r28
    2a38:	07 96       	adiw	r24, 0x07	; 7
    2a3a:	0e 94 bc 38 	call	0x7178	; 0x7178 <_ZN6String6concatEi>
    2a3e:	6b eb       	ldi	r22, 0xBB	; 187
    2a40:	75 e0       	ldi	r23, 0x05	; 5
    2a42:	ce 01       	movw	r24, r28
    2a44:	07 96       	adiw	r24, 0x07	; 7
    2a46:	0e 94 ae 38 	call	0x715c	; 0x715c <_ZN6String6concatEPKc>
    2a4a:	be 01       	movw	r22, r28
    2a4c:	69 5f       	subi	r22, 0xF9	; 249
    2a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a50:	ce 01       	movw	r24, r28
    2a52:	01 96       	adiw	r24, 0x01	; 1
    2a54:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
    2a58:	be 01       	movw	r22, r28
    2a5a:	6f 5f       	subi	r22, 0xFF	; 255
    2a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5e:	c8 01       	movw	r24, r16
    2a60:	dd d5       	rcall	.+3002   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2a62:	ce 01       	movw	r24, r28
    2a64:	01 96       	adiw	r24, 0x01	; 1
    2a66:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    2a6a:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    2a6e:	d8 01       	movw	r26, r16
    2a70:	5e 96       	adiw	r26, 0x1e	; 30
    2a72:	6d 93       	st	X+, r22
    2a74:	7d 93       	st	X+, r23
    2a76:	8d 93       	st	X+, r24
    2a78:	9c 93       	st	X, r25
    2a7a:	91 97       	sbiw	r26, 0x21	; 33
    2a7c:	82 e0       	ldi	r24, 0x02	; 2
    2a7e:	59 96       	adiw	r26, 0x19	; 25
    2a80:	8c 93       	st	X, r24
    2a82:	59 97       	sbiw	r26, 0x19	; 25
    2a84:	58 96       	adiw	r26, 0x18	; 24
    2a86:	1c 92       	st	X, r1
    2a88:	ce 01       	movw	r24, r28
    2a8a:	07 96       	adiw	r24, 0x07	; 7
    2a8c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    2a90:	80 e0       	ldi	r24, 0x00	; 0
    2a92:	2c 96       	adiw	r28, 0x0c	; 12
    2a94:	0f b6       	in	r0, 0x3f	; 63
    2a96:	f8 94       	cli
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	0f be       	out	0x3f, r0	; 63
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	df 91       	pop	r29
    2aa0:	cf 91       	pop	r28
    2aa2:	1f 91       	pop	r17
    2aa4:	0f 91       	pop	r16
    2aa6:	08 95       	ret

00002aa8 <_ZN11MilkManager4StopEv>:
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aac:	93 8d       	ldd	r25, Z+27	; 0x1b
    2aae:	3f cf       	rjmp	.-386    	; 0x292e <_ZN13MilkDispenser4StopEv>

00002ab0 <_ZN11MilkManager4TestEv>:
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	ec 01       	movw	r28, r24
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    2ac2:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    2ac6:	93 ff       	sbrs	r25, 3
    2ac8:	f8 cf       	rjmp	.-16     	; 0x2aba <_ZN11MilkManager4TestEv+0xa>
    2aca:	e8 81       	ld	r30, Y
    2acc:	f9 81       	ldd	r31, Y+1	; 0x01
    2ace:	01 90       	ld	r0, Z+
    2ad0:	f0 81       	ld	r31, Z
    2ad2:	e0 2d       	mov	r30, r0
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	19 95       	eicall
    2ad8:	81 11       	cpse	r24, r1
    2ada:	06 c0       	rjmp	.+12     	; 0x2ae8 <_ZN11MilkManager4TestEv+0x38>
    2adc:	e8 81       	ld	r30, Y
    2ade:	f9 81       	ldd	r31, Y+1	; 0x01
    2ae0:	04 80       	ldd	r0, Z+4	; 0x04
    2ae2:	f5 81       	ldd	r31, Z+5	; 0x05
    2ae4:	e0 2d       	mov	r30, r0
    2ae6:	f6 cf       	rjmp	.-20     	; 0x2ad4 <_ZN11MilkManager4TestEv+0x24>
    2ae8:	83 e1       	ldi	r24, 0x13	; 19
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    2af0:	8c 01       	movw	r16, r24
    2af2:	b6 dd       	rcall	.-1172   	; 0x2660 <_ZN5DrinkC1Ev>
    2af4:	1f 83       	std	Y+7, r17	; 0x07
    2af6:	0e 83       	std	Y+6, r16	; 0x06
    2af8:	e8 81       	ld	r30, Y
    2afa:	f9 81       	ldd	r31, Y+1	; 0x01
    2afc:	02 80       	ldd	r0, Z+2	; 0x02
    2afe:	f3 81       	ldd	r31, Z+3	; 0x03
    2b00:	e0 2d       	mov	r30, r0
    2b02:	ce 01       	movw	r24, r28
    2b04:	19 95       	eicall
    2b06:	81 11       	cpse	r24, r1
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <_ZN11MilkManager4TestEv+0x66>
    2b0a:	e8 81       	ld	r30, Y
    2b0c:	f9 81       	ldd	r31, Y+1	; 0x01
    2b0e:	04 80       	ldd	r0, Z+4	; 0x04
    2b10:	f5 81       	ldd	r31, Z+5	; 0x05
    2b12:	e0 2d       	mov	r30, r0
    2b14:	f6 cf       	rjmp	.-20     	; 0x2b02 <_ZN11MilkManager4TestEv+0x52>
    2b16:	91 e0       	ldi	r25, 0x01	; 1
    2b18:	82 30       	cpi	r24, 0x02	; 2
    2b1a:	09 f0       	breq	.+2      	; 0x2b1e <_ZN11MilkManager4TestEv+0x6e>
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	89 2f       	mov	r24, r25
    2b20:	df 91       	pop	r29
    2b22:	cf 91       	pop	r28
    2b24:	1f 91       	pop	r17
    2b26:	0f 91       	pop	r16
    2b28:	08 95       	ret

00002b2a <_ZN11MilkManager12ClearMembersEv>:
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	11 8e       	std	Z+25, r1	; 0x19
    2b2e:	13 8e       	std	Z+27, r1	; 0x1b
    2b30:	12 8e       	std	Z+26, r1	; 0x1a
    2b32:	15 8e       	std	Z+29, r1	; 0x1d
    2b34:	14 8e       	std	Z+28, r1	; 0x1c
    2b36:	16 8e       	std	Z+30, r1	; 0x1e
    2b38:	17 8e       	std	Z+31, r1	; 0x1f
    2b3a:	10 a2       	std	Z+32, r1	; 0x20
    2b3c:	11 a2       	std	Z+33, r1	; 0x21
    2b3e:	08 95       	ret

00002b40 <_ZN11MilkManagerC1EP20TeaMachineController>:
    2b40:	cf 93       	push	r28
    2b42:	df 93       	push	r29
    2b44:	ec 01       	movw	r28, r24
    2b46:	d5 d4       	rcall	.+2474   	; 0x34f2 <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    2b48:	82 e8       	ldi	r24, 0x82	; 130
    2b4a:	96 e0       	ldi	r25, 0x06	; 6
    2b4c:	99 83       	std	Y+1, r25	; 0x01
    2b4e:	88 83       	st	Y, r24
    2b50:	ce 01       	movw	r24, r28
    2b52:	df 91       	pop	r29
    2b54:	cf 91       	pop	r28
    2b56:	e9 cf       	rjmp	.-46     	; 0x2b2a <_ZN11MilkManager12ClearMembersEv>

00002b58 <_ZN11MilkManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse MilkManager::AdvanceStateMachine()
{
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	cf 93       	push	r28
    2b62:	df 93       	push	r29
    2b64:	00 d0       	rcall	.+0      	; 0x2b66 <_ZN11MilkManager19AdvanceStateMachineEv+0xe>
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <_ZN11MilkManager19AdvanceStateMachineEv+0x10>
    2b68:	cd b7       	in	r28, 0x3d	; 61
    2b6a:	de b7       	in	r29, 0x3e	; 62
    2b6c:	7c 01       	movw	r14, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    2b6e:	dc 01       	movw	r26, r24
    2b70:	59 96       	adiw	r26, 0x19	; 25
    2b72:	8c 91       	ld	r24, X
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <_ZN11MilkManager19AdvanceStateMachineEv+0x22>
    2b78:	51 c0       	rjmp	.+162    	; 0x2c1c <_ZN11MilkManager19AdvanceStateMachineEv+0xc4>
    2b7a:	28 f4       	brcc	.+10     	; 0x2b86 <_ZN11MilkManager19AdvanceStateMachineEv+0x2e>
    2b7c:	88 23       	and	r24, r24
    2b7e:	61 f0       	breq	.+24     	; 0x2b98 <_ZN11MilkManager19AdvanceStateMachineEv+0x40>
    2b80:	81 30       	cpi	r24, 0x01	; 1
    2b82:	89 f1       	breq	.+98     	; 0x2be6 <_ZN11MilkManager19AdvanceStateMachineEv+0x8e>
    2b84:	10 c1       	rjmp	.+544    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
    2b86:	84 30       	cpi	r24, 0x04	; 4
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <_ZN11MilkManager19AdvanceStateMachineEv+0x34>
    2b8a:	9e c0       	rjmp	.+316    	; 0x2cc8 <_ZN11MilkManager19AdvanceStateMachineEv+0x170>
    2b8c:	08 f4       	brcc	.+2      	; 0x2b90 <_ZN11MilkManager19AdvanceStateMachineEv+0x38>
    2b8e:	77 c0       	rjmp	.+238    	; 0x2c7e <_ZN11MilkManager19AdvanceStateMachineEv+0x126>
    2b90:	85 30       	cpi	r24, 0x05	; 5
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <_ZN11MilkManager19AdvanceStateMachineEv+0x3e>
    2b94:	d1 c0       	rjmp	.+418    	; 0x2d38 <_ZN11MilkManager19AdvanceStateMachineEv+0x1e0>
    2b96:	07 c1       	rjmp	.+526    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
    {
        // Reset step: Raise milk dispenser
        case MilkResetDispenser:
			if( !m_pMilkDispenser->IsRaised() )
    2b98:	f7 01       	movw	r30, r14
    2b9a:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b9c:	93 8d       	ldd	r25, Z+27	; 0x1b
    2b9e:	ce de       	rcall	.-612    	; 0x293c <_ZN13MilkDispenser8IsRaisedEv>
    2ba0:	81 11       	cpse	r24, r1
    2ba2:	15 c0       	rjmp	.+42     	; 0x2bce <_ZN11MilkManager19AdvanceStateMachineEv+0x76>
			{
				LogProcessEvent("State: MilkResetDispenser\n");
    2ba4:	6e eb       	ldi	r22, 0xBE	; 190
    2ba6:	75 e0       	ldi	r23, 0x05	; 5
    2ba8:	ce 01       	movw	r24, r28
    2baa:	01 96       	adiw	r24, 0x01	; 1
    2bac:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2bb0:	be 01       	movw	r22, r28
    2bb2:	6f 5f       	subi	r22, 0xFF	; 255
    2bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb6:	c7 01       	movw	r24, r14
    2bb8:	31 d5       	rcall	.+2658   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2bba:	ce 01       	movw	r24, r28
    2bbc:	01 96       	adiw	r24, 0x01	; 1
    2bbe:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				m_pMilkDispenser->Raise();
    2bc2:	d7 01       	movw	r26, r14
    2bc4:	5a 96       	adiw	r26, 0x1a	; 26
    2bc6:	8d 91       	ld	r24, X+
    2bc8:	9c 91       	ld	r25, X
    2bca:	5b 97       	sbiw	r26, 0x1b	; 27
    2bcc:	7c de       	rcall	.-776    	; 0x28c6 <_ZN13MilkDispenser5RaiseEv>
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    2bce:	81 e0       	ldi	r24, 0x01	; 1
    2bd0:	f7 01       	movw	r30, r14
    2bd2:	81 8f       	std	Z+25, r24	; 0x19
				m_pMilkDispenser->Raise();
			}
			
			// Set next state and timeout
			SetNextState(MilkResetCheckComplete);
			SetTimeout(MILK_TIMEOUT_RAISE, MILK_ERR_TIMEOUT_RAISE);
    2bd4:	00 e3       	ldi	r16, 0x30	; 48
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	48 e8       	ldi	r20, 0x88	; 136
    2bde:	53 e1       	ldi	r21, 0x13	; 19
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	a6 c0       	rjmp	.+332    	; 0x2d32 <_ZN11MilkManager19AdvanceStateMachineEv+0x1da>
			break;
        
       // Reset step: Check reset complete
       case MilkResetCheckComplete:
		   if( m_pMilkDispenser->IsRaised() )
    2be6:	d7 01       	movw	r26, r14
    2be8:	5a 96       	adiw	r26, 0x1a	; 26
    2bea:	8d 91       	ld	r24, X+
    2bec:	9c 91       	ld	r25, X
    2bee:	5b 97       	sbiw	r26, 0x1b	; 27
    2bf0:	a5 de       	rcall	.-694    	; 0x293c <_ZN13MilkDispenser8IsRaisedEv>
    2bf2:	88 23       	and	r24, r24
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <_ZN11MilkManager19AdvanceStateMachineEv+0xa0>
    2bf6:	d7 c0       	rjmp	.+430    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
		   {
			   LogProcessEvent("State: MilkResetCheckComplete\n");
    2bf8:	69 ed       	ldi	r22, 0xD9	; 217
    2bfa:	75 e0       	ldi	r23, 0x05	; 5
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2c04:	be 01       	movw	r22, r28
    2c06:	6f 5f       	subi	r22, 0xFF	; 255
    2c08:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0a:	c7 01       	movw	r24, r14
    2c0c:	07 d5       	rcall	.+2574   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2c0e:	ce 01       	movw	r24, r28
    2c10:	01 96       	adiw	r24, 0x01	; 1
    2c12:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
			   // Process step complete - reset has finished
			   ClearTimeout();
    2c16:	c7 01       	movw	r24, r14
    2c18:	b2 d4       	rcall	.+2404   	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    2c1a:	c3 c0       	rjmp	.+390    	; 0x2da2 <_ZN11MilkManager19AdvanceStateMachineEv+0x24a>
		   }
		   break;
       
        // Process step: Initiate dispense cycle
        case MilkBeginDispense:
			if( m_nMilkDispensesRequired > 0 )
    2c1c:	f7 01       	movw	r30, r14
    2c1e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c20:	95 8d       	ldd	r25, Z+29	; 0x1d
    2c22:	18 16       	cp	r1, r24
    2c24:	19 06       	cpc	r1, r25
    2c26:	44 f5       	brge	.+80     	; 0x2c78 <_ZN11MilkManager19AdvanceStateMachineEv+0x120>
			{
				// Request/check access to collision zone
				SetTimeout(MILK_TIMEOUT_ZONEACCESS, MILK_ERR_TIMEOUT_ZONEACCESS);
    2c28:	02 e3       	ldi	r16, 0x32	; 50
    2c2a:	10 e0       	ldi	r17, 0x00	; 0
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e6       	ldi	r20, 0x60	; 96
    2c32:	5a ee       	ldi	r21, 0xEA	; 234
    2c34:	60 e0       	ldi	r22, 0x00	; 0
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	c7 01       	movw	r24, r14
    2c3a:	7f d4       	rcall	.+2302   	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
				if( m_pController->LockCollisionZone(this) )
    2c3c:	b7 01       	movw	r22, r14
    2c3e:	d7 01       	movw	r26, r14
    2c40:	14 96       	adiw	r26, 0x04	; 4
    2c42:	8d 91       	ld	r24, X+
    2c44:	9c 91       	ld	r25, X
    2c46:	15 97       	sbiw	r26, 0x05	; 5
    2c48:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <_ZN20TeaMachineController17LockCollisionZoneEP18ProcessManagerBase>
    2c4c:	88 23       	and	r24, r24
    2c4e:	09 f4       	brne	.+2      	; 0x2c52 <_ZN11MilkManager19AdvanceStateMachineEv+0xfa>
    2c50:	aa c0       	rjmp	.+340    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
				{
					LogProcessEvent("State: MilkBeginDispense\n");
    2c52:	68 ef       	ldi	r22, 0xF8	; 248
    2c54:	75 e0       	ldi	r23, 0x05	; 5
    2c56:	ce 01       	movw	r24, r28
    2c58:	01 96       	adiw	r24, 0x01	; 1
    2c5a:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2c5e:	be 01       	movw	r22, r28
    2c60:	6f 5f       	subi	r22, 0xFF	; 255
    2c62:	7f 4f       	sbci	r23, 0xFF	; 255
    2c64:	c7 01       	movw	r24, r14
    2c66:	da d4       	rcall	.+2484   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2c68:	ce 01       	movw	r24, r28
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    2c70:	83 e0       	ldi	r24, 0x03	; 3
    2c72:	f7 01       	movw	r30, r14
    2c74:	81 8f       	std	Z+25, r24	; 0x19
    2c76:	97 c0       	rjmp	.+302    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
    2c78:	85 e0       	ldi	r24, 0x05	; 5
    2c7a:	81 8f       	std	Z+25, r24	; 0x19
    2c7c:	52 c0       	rjmp	.+164    	; 0x2d22 <_ZN11MilkManager19AdvanceStateMachineEv+0x1ca>
			}
			break;
			
		case MilkInitiateCycle:
			// Milk is required so, check to see if the dispenser can be lowered yet
			if( millis() > m_lNextDispenseTime )
    2c7e:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    2c82:	f7 01       	movw	r30, r14
    2c84:	06 8d       	ldd	r16, Z+30	; 0x1e
    2c86:	17 8d       	ldd	r17, Z+31	; 0x1f
    2c88:	20 a1       	ldd	r18, Z+32	; 0x20
    2c8a:	31 a1       	ldd	r19, Z+33	; 0x21
    2c8c:	06 17       	cp	r16, r22
    2c8e:	17 07       	cpc	r17, r23
    2c90:	28 07       	cpc	r18, r24
    2c92:	39 07       	cpc	r19, r25
    2c94:	08 f0       	brcs	.+2      	; 0x2c98 <_ZN11MilkManager19AdvanceStateMachineEv+0x140>
    2c96:	87 c0       	rjmp	.+270    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
			{
		        LogProcessEvent("State: MilkInitiateCycle\n");
    2c98:	62 e1       	ldi	r22, 0x12	; 18
    2c9a:	76 e0       	ldi	r23, 0x06	; 6
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2ca4:	be 01       	movw	r22, r28
    2ca6:	6f 5f       	subi	r22, 0xFF	; 255
    2ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    2caa:	c7 01       	movw	r24, r14
    2cac:	b7 d4       	rcall	.+2414   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2cae:	ce 01       	movw	r24, r28
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				// Initiate dispense cycle
				m_pMilkDispenser->Dispense();
    2cb6:	d7 01       	movw	r26, r14
    2cb8:	5a 96       	adiw	r26, 0x1a	; 26
    2cba:	8d 91       	ld	r24, X+
    2cbc:	9c 91       	ld	r25, X
    2cbe:	5b 97       	sbiw	r26, 0x1b	; 27
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    2cc0:	1b de       	rcall	.-970    	; 0x28f8 <_ZN13MilkDispenser8DispenseEv>
    2cc2:	84 e0       	ldi	r24, 0x04	; 4
    2cc4:	f7 01       	movw	r30, r14
			}
            break;

        // Process step: Check for completion of dispense cycle
        case MilkCheckCycleComplete:
       		if( m_pMilkDispenser->IsRaising() )
    2cc6:	2c c0       	rjmp	.+88     	; 0x2d20 <_ZN11MilkManager19AdvanceStateMachineEv+0x1c8>
    2cc8:	d7 01       	movw	r26, r14
    2cca:	5a 96       	adiw	r26, 0x1a	; 26
    2ccc:	8d 91       	ld	r24, X+
    2cce:	9c 91       	ld	r25, X
    2cd0:	5b 97       	sbiw	r26, 0x1b	; 27
    2cd2:	40 de       	rcall	.-896    	; 0x2954 <_ZN13MilkDispenser9IsRaisingEv>
    2cd4:	88 23       	and	r24, r24
    2cd6:	09 f4       	brne	.+2      	; 0x2cda <_ZN11MilkManager19AdvanceStateMachineEv+0x182>
			{
				LogProcessEvent("State: MilkCheckCycleComplete\n");
    2cd8:	66 c0       	rjmp	.+204    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
    2cda:	6c e2       	ldi	r22, 0x2C	; 44
    2cdc:	76 e0       	ldi	r23, 0x06	; 6
    2cde:	ce 01       	movw	r24, r28
    2ce0:	01 96       	adiw	r24, 0x01	; 1
    2ce2:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2ce6:	be 01       	movw	r22, r28
    2ce8:	6f 5f       	subi	r22, 0xFF	; 255
    2cea:	7f 4f       	sbci	r23, 0xFF	; 255
    2cec:	c7 01       	movw	r24, r14
    2cee:	96 d4       	rcall	.+2348   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2cf0:	ce 01       	movw	r24, r28
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				m_nMilkDispensesRequired--;
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cfc:	95 8d       	ldd	r25, Z+29	; 0x1d
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	95 8f       	std	Z+29, r25	; 0x1d
    2d02:	84 8f       	std	Z+28, r24	; 0x1c
				
				// Calculate time at which next dispense may begin
				m_lNextDispenseTime = millis() + MILK_DISPENSE_INTERVAL;
    2d04:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	80 5e       	subi	r24, 0xE0	; 224
    2d0e:	9c 4f       	sbci	r25, 0xFC	; 252
    2d10:	af 4f       	sbci	r26, 0xFF	; 255
    2d12:	bf 4f       	sbci	r27, 0xFF	; 255
    2d14:	f7 01       	movw	r30, r14
    2d16:	86 8f       	std	Z+30, r24	; 0x1e
    2d18:	97 8f       	std	Z+31, r25	; 0x1f
    2d1a:	a0 a3       	std	Z+32, r26	; 0x20
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    2d1c:	b1 a3       	std	Z+33, r27	; 0x21
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
				// Calculate time at which next dispense may begin
				m_lNextDispenseTime = millis() + MILK_DISPENSE_INTERVAL;
				
				// Set next state and timeout
				SetNextState(MilkBeginDispense);
				SetTimeout(MILK_TIMEOUT_FULLCYCLE, MILK_ERR_TIMEOUT_FULLCYCLE);
    2d20:	81 8f       	std	Z+25, r24	; 0x19
    2d22:	01 e3       	ldi	r16, 0x31	; 49
    2d24:	10 e0       	ldi	r17, 0x00	; 0
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e7       	ldi	r20, 0x70	; 112
    2d2c:	57 e1       	ldi	r21, 0x17	; 23
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	c7 01       	movw	r24, r14
    2d34:	02 d4       	rcall	.+2052   	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
			}
			break;
			
		// Process step: Check that dispenser is clear of collision zone and release lock
		case MilkCheckZoneClear:
			if( m_pMilkDispenser->IsRaised())
    2d36:	37 c0       	rjmp	.+110    	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
    2d38:	d7 01       	movw	r26, r14
    2d3a:	5a 96       	adiw	r26, 0x1a	; 26
    2d3c:	8d 91       	ld	r24, X+
    2d3e:	9c 91       	ld	r25, X
    2d40:	5b 97       	sbiw	r26, 0x1b	; 27
    2d42:	fc dd       	rcall	.-1032   	; 0x293c <_ZN13MilkDispenser8IsRaisedEv>
    2d44:	88 23       	and	r24, r24
			{
				LogProcessEvent("State: MilkCheckZoneClear\n");
    2d46:	79 f1       	breq	.+94     	; 0x2da6 <_ZN11MilkManager19AdvanceStateMachineEv+0x24e>
    2d48:	6b e4       	ldi	r22, 0x4B	; 75
    2d4a:	76 e0       	ldi	r23, 0x06	; 6
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	01 96       	adiw	r24, 0x01	; 1
    2d50:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2d54:	be 01       	movw	r22, r28
    2d56:	6f 5f       	subi	r22, 0xFF	; 255
    2d58:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5a:	c7 01       	movw	r24, r14
    2d5c:	5f d4       	rcall	.+2238   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2d5e:	ce 01       	movw	r24, r28
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				
			    // Process complete
				m_pController->ReleaseCollisionZone(this);
    2d66:	b7 01       	movw	r22, r14
    2d68:	f7 01       	movw	r30, r14
    2d6a:	84 81       	ldd	r24, Z+4	; 0x04
    2d6c:	95 81       	ldd	r25, Z+5	; 0x05
    2d6e:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_ZN20TeaMachineController20ReleaseCollisionZoneEP18ProcessManagerBase>
			    ClearTimeout();
    2d72:	c7 01       	movw	r24, r14
    2d74:	04 d4       	rcall	.+2056   	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    2d76:	d7 01       	movw	r26, r14
    2d78:	16 96       	adiw	r26, 0x06	; 6
    2d7a:	ed 91       	ld	r30, X+
    2d7c:	fc 91       	ld	r31, X
    2d7e:	17 97       	sbiw	r26, 0x07	; 7
    2d80:	82 e0       	ldi	r24, 0x02	; 2
			    m_pDrink->SetState( MilkStageComplete );
			    LogProcessEvent("Milk dispense complete\n");
    2d82:	81 83       	std	Z+1, r24	; 0x01
    2d84:	66 e6       	ldi	r22, 0x66	; 102
    2d86:	76 e0       	ldi	r23, 0x06	; 6
    2d88:	ce 01       	movw	r24, r28
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    2d90:	be 01       	movw	r22, r28
    2d92:	6f 5f       	subi	r22, 0xFF	; 255
    2d94:	7f 4f       	sbci	r23, 0xFF	; 255
    2d96:	c7 01       	movw	r24, r14
    2d98:	41 d4       	rcall	.+2178   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
			    response = ProcessComplete;				
    2da2:	82 e0       	ldi	r24, 0x02	; 2
    2da4:	01 c0       	rjmp	.+2      	; 0x2da8 <_ZN11MilkManager19AdvanceStateMachineEv+0x250>
//
//  Initiate the next step of the process
//
ProcessManagerResponse MilkManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    2da6:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
    } // switch            
            
	return response;
}
    2da8:	26 96       	adiw	r28, 0x06	; 6
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	f8 94       	cli
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	0f be       	out	0x3f, r0	; 63
    2db2:	cd bf       	out	0x3d, r28	; 61
    2db4:	df 91       	pop	r29
    2db6:	cf 91       	pop	r28
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	08 95       	ret

00002dc2 <_ZN11MilkManager8ContinueEv>:
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse MilkManager::Continue()
{
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	2c 97       	sbiw	r28, 0x0c	; 12
    2dd0:	0f b6       	in	r0, 0x3f	; 63
    2dd2:	f8 94       	cli
    2dd4:	de bf       	out	0x3e, r29	; 62
    2dd6:	0f be       	out	0x3f, r0	; 63
    2dd8:	cd bf       	out	0x3d, r28	; 61
    2dda:	fc 01       	movw	r30, r24
    2ddc:	80 8d       	ldd	r24, Z+24	; 0x18
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    2dde:	81 30       	cpi	r24, 0x01	; 1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <_ZN11MilkManager8ContinueEv+0x22>
    2de2:	48 c0       	rjmp	.+144    	; 0x2e74 <_ZN11MilkManager8ContinueEv+0xb2>
    2de4:	82 30       	cpi	r24, 0x02	; 2
    2de6:	09 f4       	brne	.+2      	; 0x2dea <_ZN11MilkManager8ContinueEv+0x28>
    2de8:	45 c0       	rjmp	.+138    	; 0x2e74 <_ZN11MilkManager8ContinueEv+0xb2>
    2dea:	8f 01       	movw	r16, r30
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    2dec:	cf 01       	movw	r24, r30
    2dee:	df d3       	rcall	.+1982   	; 0x35ae <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    2df0:	81 11       	cpse	r24, r1
    2df2:	05 c0       	rjmp	.+10     	; 0x2dfe <_ZN11MilkManager8ContinueEv+0x3c>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    2df4:	c8 01       	movw	r24, r16
    2df6:	b0 de       	rcall	.-672    	; 0x2b58 <_ZN11MilkManager19AdvanceStateMachineEv>
			strTimeoutText += GetLastError();
			strTimeoutText + "\n";
            LogProcessEvent(strTimeoutText);
        }
        
        if( response == ProcessFailed)
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	d1 f5       	brne	.+116    	; 0x2e70 <_ZN11MilkManager8ContinueEv+0xae>
    2dfc:	34 c0       	rjmp	.+104    	; 0x2e66 <_ZN11MilkManager8ContinueEv+0xa4>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
			String strTimeoutText = "TIMEOUT code: ";
    2dfe:	60 e0       	ldi	r22, 0x00	; 0
    2e00:	74 e0       	ldi	r23, 0x04	; 4
    2e02:	ce 01       	movw	r24, r28
    2e04:	07 96       	adiw	r24, 0x07	; 7
    2e06:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
    2e0a:	f8 01       	movw	r30, r16
    2e0c:	40 89       	ldd	r20, Z+16	; 0x10
    2e0e:	51 89       	ldd	r21, Z+17	; 0x11
    2e10:	62 89       	ldd	r22, Z+18	; 0x12
    2e12:	73 89       	ldd	r23, Z+19	; 0x13
    2e14:	ce 01       	movw	r24, r28
    2e16:	07 96       	adiw	r24, 0x07	; 7
    2e18:	0e 94 19 39 	call	0x7232	; 0x7232 <_ZN6String6concatEm>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    2e1c:	be 01       	movw	r22, r28
    2e1e:	69 5f       	subi	r22, 0xF9	; 249
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255
    2e22:	ce 01       	movw	r24, r28
    2e24:	01 96       	adiw	r24, 0x01	; 1
    2e26:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
			strTimeoutText += GetLastError();
			strTimeoutText + "\n";
    2e2a:	6a e3       	ldi	r22, 0x3A	; 58
    2e2c:	7a e0       	ldi	r23, 0x0A	; 10
    2e2e:	ce 01       	movw	r24, r28
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	0e 94 88 39 	call	0x7310	; 0x7310 <_ZplRK15StringSumHelperPKc>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    2e36:	ce 01       	movw	r24, r28
    2e38:	01 96       	adiw	r24, 0x01	; 1
    2e3a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            LogProcessEvent(strTimeoutText);
    2e3e:	be 01       	movw	r22, r28
    2e40:	69 5f       	subi	r22, 0xF9	; 249
    2e42:	7f 4f       	sbci	r23, 0xFF	; 255
    2e44:	ce 01       	movw	r24, r28
    2e46:	01 96       	adiw	r24, 0x01	; 1
    2e48:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
    2e4c:	be 01       	movw	r22, r28
    2e4e:	6f 5f       	subi	r22, 0xFF	; 255
    2e50:	7f 4f       	sbci	r23, 0xFF	; 255
    2e52:	c8 01       	movw	r24, r16
    2e54:	e3 d3       	rcall	.+1990   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    2e56:	ce 01       	movw	r24, r28
    2e58:	01 96       	adiw	r24, 0x01	; 1
    2e5a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
			String strTimeoutText = "TIMEOUT code: ";
    2e5e:	ce 01       	movw	r24, r28
    2e60:	07 96       	adiw	r24, 0x07	; 7
    2e62:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
        }
        
        if( response == ProcessFailed)
        {
            // Process has failed, so make sure milk dispenser is in the raised position
            m_pMilkDispenser->Raise();
    2e66:	f8 01       	movw	r30, r16
    2e68:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e6a:	93 8d       	ldd	r25, Z+27	; 0x1b
    2e6c:	2c dd       	rcall	.-1448   	; 0x28c6 <_ZN13MilkDispenser5RaiseEv>
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	f8 01       	movw	r30, r16
    2e72:	80 8f       	std	Z+24, r24	; 0x18
        
        SetResponse(response);
    }
    
    return response;
}    
    2e74:	2c 96       	adiw	r28, 0x0c	; 12
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	df 91       	pop	r29
    2e82:	cf 91       	pop	r28
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	08 95       	ret

00002e8a <_ZN11MilkManager15SetLoadPositionEv>:
//	SetLoadPosition()
//
//  Set milk dispenser to load position
//
bool MilkManager::SetLoadPosition()
{
    2e8a:	1f 93       	push	r17
    2e8c:	cf 93       	push	r28
    2e8e:	df 93       	push	r29
    2e90:	ec 01       	movw	r28, r24
	// Wait for action switch high
//	while((m_pTeaMachine->GetSystem()->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
	
	// Initialise hardware
	ProcessManagerResponse response = BeginReset();
    2e92:	e8 81       	ld	r30, Y
    2e94:	f9 81       	ldd	r31, Y+1	; 0x01
    2e96:	01 90       	ld	r0, Z+
    2e98:	f0 81       	ld	r31, Z
    2e9a:	e0 2d       	mov	r30, r0
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	19 95       	eicall
    2ea0:	18 2f       	mov	r17, r24
	
	while( response == ProcessIncomplete )
    2ea2:	81 11       	cpse	r24, r1
    2ea4:	06 c0       	rjmp	.+12     	; 0x2eb2 <_ZN11MilkManager15SetLoadPositionEv+0x28>
	{
		response = Continue();
    2ea6:	e8 81       	ld	r30, Y
    2ea8:	f9 81       	ldd	r31, Y+1	; 0x01
    2eaa:	04 80       	ldd	r0, Z+4	; 0x04
    2eac:	f5 81       	ldd	r31, Z+5	; 0x05
    2eae:	e0 2d       	mov	r30, r0
    2eb0:	f5 cf       	rjmp	.-22     	; 0x2e9c <_ZN11MilkManager15SetLoadPositionEv+0x12>
	} // while
	
	// Set milk dispenser to load position
	m_pMilkDispenser->SetLoadPosition();
    2eb2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2eb4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2eb6:	57 dd       	rcall	.-1362   	; 0x2966 <_ZN13MilkDispenser15SetLoadPositionEv>
			
	return (response == ProcessComplete);
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	12 30       	cpi	r17, 0x02	; 2
    2ebc:	09 f0       	breq	.+2      	; 0x2ec0 <_ZN11MilkManager15SetLoadPositionEv+0x36>
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
}
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	08 95       	ret

00002ec8 <_ZN11MilkManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the UI manager
//
bool MilkManager::Initialise()
{
    2ec8:	0f 93       	push	r16
    2eca:	1f 93       	push	r17
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	8c 01       	movw	r16, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    2ed2:	29 d3       	rcall	.+1618   	; 0x3526 <_ZN18ProcessManagerBase10InitialiseEv>
    
	// Create the Milk Dispenser object
	m_pMilkDispenser = new MilkDispenser( m_pTeaMachine );
    2ed4:	86 e0       	ldi	r24, 0x06	; 6
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    2edc:	ec 01       	movw	r28, r24
    2ede:	f8 01       	movw	r30, r16
    2ee0:	62 81       	ldd	r22, Z+2	; 0x02
    2ee2:	73 81       	ldd	r23, Z+3	; 0x03
    2ee4:	e4 dc       	rcall	.-1592   	; 0x28ae <_ZN13MilkDispenserC1EP10TeaMachine>
    2ee6:	f8 01       	movw	r30, r16
    2ee8:	d3 8f       	std	Z+27, r29	; 0x1b
    2eea:	c2 8f       	std	Z+26, r28	; 0x1a
	m_pMilkDispenser->Initialise();
    2eec:	ce 01       	movw	r24, r28
    2eee:	de dc       	rcall	.-1604   	; 0x28ac <_ZN13MilkDispenser10InitialiseEv>
    2ef0:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	1f 91       	pop	r17
    2ef8:	0f 91       	pop	r16
    2efa:	08 95       	ret

00002efc <_ZN7NewPingC1Ehhi>:
    2efc:	dc 01       	movw	r26, r24
	TIMSK4 = (1<<TOIE4); // Enable Timer4 interrupt.
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
#endif
}
    2efe:	70 e0       	ldi	r23, 0x00	; 0
    2f00:	fb 01       	movw	r30, r22
    2f02:	ec 51       	subi	r30, 0x1C	; 28
    2f04:	fc 4f       	sbci	r31, 0xFC	; 252
    2f06:	e4 91       	lpm	r30, Z
    2f08:	14 96       	adiw	r26, 0x04	; 4
    2f0a:	ec 93       	st	X, r30
    2f0c:	14 97       	sbiw	r26, 0x04	; 4
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	fa 01       	movw	r30, r20
    2f12:	ec 51       	subi	r30, 0x1C	; 28
    2f14:	fc 4f       	sbci	r31, 0xFC	; 252
    2f16:	e4 91       	lpm	r30, Z
    2f18:	15 96       	adiw	r26, 0x05	; 5
    2f1a:	ec 93       	st	X, r30
    2f1c:	15 97       	sbiw	r26, 0x05	; 5
    2f1e:	66 5d       	subi	r22, 0xD6	; 214
    2f20:	7b 4f       	sbci	r23, 0xFB	; 251
    2f22:	fb 01       	movw	r30, r22
    2f24:	84 91       	lpm	r24, Z
    2f26:	e8 2f       	mov	r30, r24
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	ee 0f       	add	r30, r30
    2f2c:	ff 1f       	adc	r31, r31
    2f2e:	e6 57       	subi	r30, 0x76	; 118
    2f30:	fb 4f       	sbci	r31, 0xFB	; 251
    2f32:	85 91       	lpm	r24, Z+
    2f34:	94 91       	lpm	r25, Z
    2f36:	17 96       	adiw	r26, 0x07	; 7
    2f38:	9c 93       	st	X, r25
    2f3a:	8e 93       	st	-X, r24
    2f3c:	16 97       	sbiw	r26, 0x06	; 6
    2f3e:	fa 01       	movw	r30, r20
    2f40:	e6 5d       	subi	r30, 0xD6	; 214
    2f42:	fb 4f       	sbci	r31, 0xFB	; 251
    2f44:	e4 91       	lpm	r30, Z
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	ee 0f       	add	r30, r30
    2f4a:	ff 1f       	adc	r31, r31
    2f4c:	e0 59       	subi	r30, 0x90	; 144
    2f4e:	fb 4f       	sbci	r31, 0xFB	; 251
    2f50:	85 91       	lpm	r24, Z+
    2f52:	94 91       	lpm	r25, Z
    2f54:	1b 96       	adiw	r26, 0x0b	; 11
    2f56:	9c 93       	st	X, r25
    2f58:	8e 93       	st	-X, r24
    2f5a:	1a 97       	sbiw	r26, 0x0a	; 10
    2f5c:	fb 01       	movw	r30, r22
    2f5e:	64 91       	lpm	r22, Z
    2f60:	e6 2f       	mov	r30, r22
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	ee 0f       	add	r30, r30
    2f66:	ff 1f       	adc	r31, r31
    2f68:	ec 55       	subi	r30, 0x5C	; 92
    2f6a:	fb 4f       	sbci	r31, 0xFB	; 251
    2f6c:	85 91       	lpm	r24, Z+
    2f6e:	94 91       	lpm	r25, Z
    2f70:	19 96       	adiw	r26, 0x09	; 9
    2f72:	9c 93       	st	X, r25
    2f74:	8e 93       	st	-X, r24
    2f76:	18 97       	sbiw	r26, 0x08	; 8
    2f78:	c9 01       	movw	r24, r18
    2f7a:	25 3f       	cpi	r18, 0xF5	; 245
    2f7c:	31 40       	sbci	r19, 0x01	; 1
    2f7e:	14 f0       	brlt	.+4      	; 0x2f84 <_ZN7NewPingC1Ehhi+0x88>
    2f80:	84 ef       	ldi	r24, 0xF4	; 244
    2f82:	91 e0       	ldi	r25, 0x01	; 1
    2f84:	49 e3       	ldi	r20, 0x39	; 57
    2f86:	48 9f       	mul	r20, r24
    2f88:	90 01       	movw	r18, r0
    2f8a:	49 9f       	mul	r20, r25
    2f8c:	30 0d       	add	r19, r0
    2f8e:	11 24       	eor	r1, r1
    2f90:	c9 01       	movw	r24, r18
    2f92:	4c 96       	adiw	r24, 0x1c	; 28
    2f94:	1d 96       	adiw	r26, 0x0d	; 13
    2f96:	9c 93       	st	X, r25
    2f98:	8e 93       	st	-X, r24
    2f9a:	1c 97       	sbiw	r26, 0x0c	; 12
    2f9c:	08 95       	ret

00002f9e <_ZN7NewPing12ping_triggerEv>:
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
    2fa6:	ec 01       	movw	r28, r24
    2fa8:	e8 85       	ldd	r30, Y+8	; 0x08
    2faa:	f9 85       	ldd	r31, Y+9	; 0x09
    2fac:	90 81       	ld	r25, Z
    2fae:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb0:	89 2b       	or	r24, r25
    2fb2:	80 83       	st	Z, r24
    2fb4:	ee 81       	ldd	r30, Y+6	; 0x06
    2fb6:	ff 81       	ldd	r31, Y+7	; 0x07
    2fb8:	90 81       	ld	r25, Z
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	80 95       	com	r24
    2fbe:	89 23       	and	r24, r25
    2fc0:	80 83       	st	Z, r24
    2fc2:	84 e0       	ldi	r24, 0x04	; 4
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    2fca:	ee 81       	ldd	r30, Y+6	; 0x06
    2fcc:	ff 81       	ldd	r31, Y+7	; 0x07
    2fce:	90 81       	ld	r25, Z
    2fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd2:	89 2b       	or	r24, r25
    2fd4:	80 83       	st	Z, r24
    2fd6:	8a e0       	ldi	r24, 0x0A	; 10
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    2fde:	ee 81       	ldd	r30, Y+6	; 0x06
    2fe0:	ff 81       	ldd	r31, Y+7	; 0x07
    2fe2:	90 81       	ld	r25, Z
    2fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe6:	80 95       	com	r24
    2fe8:	89 23       	and	r24, r25
    2fea:	80 83       	st	Z, r24
    2fec:	e8 85       	ldd	r30, Y+8	; 0x08
    2fee:	f9 85       	ldd	r31, Y+9	; 0x09
    2ff0:	90 81       	ld	r25, Z
    2ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff4:	80 95       	com	r24
    2ff6:	89 23       	and	r24, r25
    2ff8:	80 83       	st	Z, r24
    2ffa:	0e 94 02 36 	call	0x6c04	; 0x6c04 <micros>
    2ffe:	dc 01       	movw	r26, r24
    3000:	cb 01       	movw	r24, r22
    3002:	80 5b       	subi	r24, 0xB0	; 176
    3004:	99 4b       	sbci	r25, 0xB9	; 185
    3006:	af 4f       	sbci	r26, 0xFF	; 255
    3008:	bf 4f       	sbci	r27, 0xFF	; 255
    300a:	8e 87       	std	Y+14, r24	; 0x0e
    300c:	9f 87       	std	Y+15, r25	; 0x0f
    300e:	a8 8b       	std	Y+16, r26	; 0x10
    3010:	b9 8b       	std	Y+17, r27	; 0x11
    3012:	ea 85       	ldd	r30, Y+10	; 0x0a
    3014:	fb 85       	ldd	r31, Y+11	; 0x0b
    3016:	90 81       	ld	r25, Z
    3018:	8d 81       	ldd	r24, Y+5	; 0x05
    301a:	89 23       	and	r24, r25
    301c:	59 f0       	breq	.+22     	; 0x3034 <_ZN7NewPing12ping_triggerEv+0x96>
    301e:	0e 94 02 36 	call	0x6c04	; 0x6c04 <micros>
    3022:	0e 85       	ldd	r16, Y+14	; 0x0e
    3024:	1f 85       	ldd	r17, Y+15	; 0x0f
    3026:	28 89       	ldd	r18, Y+16	; 0x10
    3028:	39 89       	ldd	r19, Y+17	; 0x11
    302a:	06 17       	cp	r16, r22
    302c:	17 07       	cpc	r17, r23
    302e:	28 07       	cpc	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	78 f7       	brcc	.-34     	; 0x3012 <_ZN7NewPing12ping_triggerEv+0x74>
    3034:	ea 85       	ldd	r30, Y+10	; 0x0a
    3036:	fb 85       	ldd	r31, Y+11	; 0x0b
    3038:	90 81       	ld	r25, Z
    303a:	8d 81       	ldd	r24, Y+5	; 0x05
    303c:	89 23       	and	r24, r25
    303e:	69 f4       	brne	.+26     	; 0x305a <_ZN7NewPing12ping_triggerEv+0xbc>
    3040:	0e 94 02 36 	call	0x6c04	; 0x6c04 <micros>
    3044:	0e 85       	ldd	r16, Y+14	; 0x0e
    3046:	1f 85       	ldd	r17, Y+15	; 0x0f
    3048:	28 89       	ldd	r18, Y+16	; 0x10
    304a:	39 89       	ldd	r19, Y+17	; 0x11
    304c:	06 17       	cp	r16, r22
    304e:	17 07       	cpc	r17, r23
    3050:	28 07       	cpc	r18, r24
    3052:	39 07       	cpc	r19, r25
    3054:	78 f7       	brcc	.-34     	; 0x3034 <_ZN7NewPing12ping_triggerEv+0x96>
    3056:	80 e0       	ldi	r24, 0x00	; 0
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <_ZN7NewPing12ping_triggerEv+0xda>
    305a:	0e 94 02 36 	call	0x6c04	; 0x6c04 <micros>
    305e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3060:	3d 85       	ldd	r19, Y+13	; 0x0d
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	82 0f       	add	r24, r18
    3068:	93 1f       	adc	r25, r19
    306a:	a1 1d       	adc	r26, r1
    306c:	b1 1d       	adc	r27, r1
    306e:	8e 87       	std	Y+14, r24	; 0x0e
    3070:	9f 87       	std	Y+15, r25	; 0x0f
    3072:	a8 8b       	std	Y+16, r26	; 0x10
    3074:	b9 8b       	std	Y+17, r27	; 0x11
    3076:	81 e0       	ldi	r24, 0x01	; 1
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	08 95       	ret

00003082 <_ZN7NewPing4pingEv>:
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	ec 01       	movw	r28, r24
    308c:	88 df       	rcall	.-240    	; 0x2f9e <_ZN7NewPing12ping_triggerEv>
    308e:	81 11       	cpse	r24, r1
    3090:	0e c0       	rjmp	.+28     	; 0x30ae <_ZN7NewPing4pingEv+0x2c>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	20 c0       	rjmp	.+64     	; 0x30d8 <_ZN7NewPing4pingEv+0x56>
    3098:	0e 94 02 36 	call	0x6c04	; 0x6c04 <micros>
    309c:	0e 85       	ldd	r16, Y+14	; 0x0e
    309e:	1f 85       	ldd	r17, Y+15	; 0x0f
    30a0:	28 89       	ldd	r18, Y+16	; 0x10
    30a2:	39 89       	ldd	r19, Y+17	; 0x11
    30a4:	06 17       	cp	r16, r22
    30a6:	17 07       	cpc	r17, r23
    30a8:	28 07       	cpc	r18, r24
    30aa:	39 07       	cpc	r19, r25
    30ac:	90 f3       	brcs	.-28     	; 0x3092 <_ZN7NewPing4pingEv+0x10>
    30ae:	ea 85       	ldd	r30, Y+10	; 0x0a
    30b0:	fb 85       	ldd	r31, Y+11	; 0x0b
    30b2:	90 81       	ld	r25, Z
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	89 23       	and	r24, r25
    30b8:	79 f7       	brne	.-34     	; 0x3098 <_ZN7NewPing4pingEv+0x16>
    30ba:	0e 94 02 36 	call	0x6c04	; 0x6c04 <micros>
    30be:	2c 85       	ldd	r18, Y+12	; 0x0c
    30c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    30c2:	a9 01       	movw	r20, r18
    30c4:	45 50       	subi	r20, 0x05	; 5
    30c6:	51 09       	sbc	r21, r1
    30c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    30ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    30cc:	fa 01       	movw	r30, r20
    30ce:	e2 1b       	sub	r30, r18
    30d0:	f3 0b       	sbc	r31, r19
    30d2:	cf 01       	movw	r24, r30
    30d4:	86 0f       	add	r24, r22
    30d6:	97 1f       	adc	r25, r23
    30d8:	df 91       	pop	r29
    30da:	cf 91       	pop	r28
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	08 95       	ret

000030e2 <__vector_13>:


#if defined (__AVR_ATmega32U4__) // Use Timer4 for ATmega32U4 (Teensy/Leonardo).
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_COMPA_vect) {
    30e2:	1f 92       	push	r1
    30e4:	0f 92       	push	r0
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	0f 92       	push	r0
    30ea:	11 24       	eor	r1, r1
    30ec:	0b b6       	in	r0, 0x3b	; 59
    30ee:	0f 92       	push	r0
    30f0:	2f 93       	push	r18
    30f2:	3f 93       	push	r19
    30f4:	4f 93       	push	r20
    30f6:	5f 93       	push	r21
    30f8:	6f 93       	push	r22
    30fa:	7f 93       	push	r23
    30fc:	8f 93       	push	r24
    30fe:	9f 93       	push	r25
    3100:	af 93       	push	r26
    3102:	bf 93       	push	r27
    3104:	ef 93       	push	r30
    3106:	ff 93       	push	r31
#endif
	if(intFunc) intFunc(); // If wrapped function is set, call it.
    3108:	e0 91 53 0a 	lds	r30, 0x0A53	; 0x800a53 <intFunc>
    310c:	f0 91 54 0a 	lds	r31, 0x0A54	; 0x800a54 <intFunc+0x1>
    3110:	30 97       	sbiw	r30, 0x00	; 0
    3112:	09 f0       	breq	.+2      	; 0x3116 <__vector_13+0x34>
    3114:	19 95       	eicall
}
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	bf 91       	pop	r27
    311c:	af 91       	pop	r26
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	7f 91       	pop	r23
    3124:	6f 91       	pop	r22
    3126:	5f 91       	pop	r21
    3128:	4f 91       	pop	r20
    312a:	3f 91       	pop	r19
    312c:	2f 91       	pop	r18
    312e:	0f 90       	pop	r0
    3130:	0b be       	out	0x3b, r0	; 59
    3132:	0f 90       	pop	r0
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	0f 90       	pop	r0
    3138:	1f 90       	pop	r1
    313a:	18 95       	reti

0000313c <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
    313c:	ff 92       	push	r15
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	cf 93       	push	r28
    3144:	df 93       	push	r29
    3146:	fc 01       	movw	r30, r24
    3148:	f0 80       	ld	r15, Z
    314a:	c1 81       	ldd	r28, Z+1	; 0x01
    314c:	d2 81       	ldd	r29, Z+2	; 0x02
    314e:	f8 94       	cli
    3150:	89 81       	ldd	r24, Y+1	; 0x01
    3152:	0f 2d       	mov	r16, r15
    3154:	00 95       	com	r16
    3156:	80 23       	and	r24, r16
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	78 94       	sei
    315c:	1d e7       	ldi	r17, 0x7D	; 125
    315e:	11 50       	subi	r17, 0x01	; 1
    3160:	29 f1       	breq	.+74     	; 0x31ac <_ZN7OneWire5resetEv+0x70>
    3162:	82 e0       	ldi	r24, 0x02	; 2
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    316a:	88 81       	ld	r24, Y
    316c:	8f 21       	and	r24, r15
    316e:	b9 f3       	breq	.-18     	; 0x315e <_ZN7OneWire5resetEv+0x22>
    3170:	f8 94       	cli
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	80 23       	and	r24, r16
    3176:	8a 83       	std	Y+2, r24	; 0x02
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	8f 29       	or	r24, r15
    317c:	89 83       	std	Y+1, r24	; 0x01
    317e:	78 94       	sei
    3180:	80 ee       	ldi	r24, 0xE0	; 224
    3182:	91 e0       	ldi	r25, 0x01	; 1
    3184:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    3188:	f8 94       	cli
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	08 23       	and	r16, r24
    318e:	09 83       	std	Y+1, r16	; 0x01
    3190:	86 e4       	ldi	r24, 0x46	; 70
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    3198:	88 81       	ld	r24, Y
    319a:	f8 22       	and	r15, r24
    319c:	11 e0       	ldi	r17, 0x01	; 1
    319e:	09 f0       	breq	.+2      	; 0x31a2 <_ZN7OneWire5resetEv+0x66>
    31a0:	10 e0       	ldi	r17, 0x00	; 0
    31a2:	78 94       	sei
    31a4:	8a e9       	ldi	r24, 0x9A	; 154
    31a6:	91 e0       	ldi	r25, 0x01	; 1
    31a8:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    31ac:	81 2f       	mov	r24, r17
    31ae:	df 91       	pop	r29
    31b0:	cf 91       	pop	r28
    31b2:	1f 91       	pop	r17
    31b4:	0f 91       	pop	r16
    31b6:	ff 90       	pop	r15
    31b8:	08 95       	ret

000031ba <_ZN7OneWire9write_bitEh>:
    31ba:	1f 93       	push	r17
    31bc:	cf 93       	push	r28
    31be:	df 93       	push	r29
    31c0:	fc 01       	movw	r30, r24
    31c2:	10 81       	ld	r17, Z
    31c4:	c1 81       	ldd	r28, Z+1	; 0x01
    31c6:	d2 81       	ldd	r29, Z+2	; 0x02
    31c8:	81 2f       	mov	r24, r17
    31ca:	80 95       	com	r24
    31cc:	60 ff       	sbrs	r22, 0
    31ce:	12 c0       	rjmp	.+36     	; 0x31f4 <_ZN7OneWire9write_bitEh+0x3a>
    31d0:	f8 94       	cli
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	89 23       	and	r24, r25
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	81 2b       	or	r24, r17
    31dc:	89 83       	std	Y+1, r24	; 0x01
    31de:	8a e0       	ldi	r24, 0x0A	; 10
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	18 2b       	or	r17, r24
    31ea:	1a 83       	std	Y+2, r17	; 0x02
    31ec:	78 94       	sei
    31ee:	87 e3       	ldi	r24, 0x37	; 55
    31f0:	90 e0       	ldi	r25, 0x00	; 0
    31f2:	11 c0       	rjmp	.+34     	; 0x3216 <_ZN7OneWire9write_bitEh+0x5c>
    31f4:	f8 94       	cli
    31f6:	9a 81       	ldd	r25, Y+2	; 0x02
    31f8:	89 23       	and	r24, r25
    31fa:	8a 83       	std	Y+2, r24	; 0x02
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	81 2b       	or	r24, r17
    3200:	89 83       	std	Y+1, r24	; 0x01
    3202:	81 e4       	ldi	r24, 0x41	; 65
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    320a:	8a 81       	ldd	r24, Y+2	; 0x02
    320c:	18 2b       	or	r17, r24
    320e:	1a 83       	std	Y+2, r17	; 0x02
    3210:	78 94       	sei
    3212:	85 e0       	ldi	r24, 0x05	; 5
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	1f 91       	pop	r17
    321c:	0c 94 60 36 	jmp	0x6cc0	; 0x6cc0 <delayMicroseconds>

00003220 <_ZN7OneWire8read_bitEv>:
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	cf 93       	push	r28
    3226:	df 93       	push	r29
    3228:	fc 01       	movw	r30, r24
    322a:	00 81       	ld	r16, Z
    322c:	c1 81       	ldd	r28, Z+1	; 0x01
    322e:	d2 81       	ldd	r29, Z+2	; 0x02
    3230:	f8 94       	cli
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	80 2b       	or	r24, r16
    3236:	89 83       	std	Y+1, r24	; 0x01
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	10 2f       	mov	r17, r16
    323c:	10 95       	com	r17
    323e:	81 23       	and	r24, r17
    3240:	8a 83       	std	Y+2, r24	; 0x02
    3242:	83 e0       	ldi	r24, 0x03	; 3
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    324a:	89 81       	ldd	r24, Y+1	; 0x01
    324c:	18 23       	and	r17, r24
    324e:	19 83       	std	Y+1, r17	; 0x01
    3250:	8a e0       	ldi	r24, 0x0A	; 10
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    3258:	c8 81       	ld	r28, Y
    325a:	78 94       	sei
    325c:	85 e3       	ldi	r24, 0x35	; 53
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
    3264:	c0 23       	and	r28, r16
    3266:	81 e0       	ldi	r24, 0x01	; 1
    3268:	09 f4       	brne	.+2      	; 0x326c <_ZN7OneWire8read_bitEv+0x4c>
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	1f 91       	pop	r17
    3272:	0f 91       	pop	r16
    3274:	08 95       	ret

00003276 <_ZN7OneWire5writeEhh>:
    3276:	df 92       	push	r13
    3278:	ef 92       	push	r14
    327a:	ff 92       	push	r15
    327c:	0f 93       	push	r16
    327e:	1f 93       	push	r17
    3280:	cf 93       	push	r28
    3282:	df 93       	push	r29
    3284:	ec 01       	movw	r28, r24
    3286:	d6 2e       	mov	r13, r22
    3288:	e4 2e       	mov	r14, r20
    328a:	08 e0       	ldi	r16, 0x08	; 8
    328c:	10 e0       	ldi	r17, 0x00	; 0
    328e:	ff 24       	eor	r15, r15
    3290:	f3 94       	inc	r15
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	8d 2d       	mov	r24, r13
    3296:	8f 21       	and	r24, r15
    3298:	09 f4       	brne	.+2      	; 0x329c <_ZN7OneWire5writeEhh+0x26>
    329a:	60 e0       	ldi	r22, 0x00	; 0
    329c:	ce 01       	movw	r24, r28
    329e:	8d df       	rcall	.-230    	; 0x31ba <_ZN7OneWire9write_bitEh>
    32a0:	ff 0c       	add	r15, r15
    32a2:	01 50       	subi	r16, 0x01	; 1
    32a4:	11 09       	sbc	r17, r1
    32a6:	a9 f7       	brne	.-22     	; 0x3292 <_ZN7OneWire5writeEhh+0x1c>
    32a8:	e1 10       	cpse	r14, r1
    32aa:	10 c0       	rjmp	.+32     	; 0x32cc <_ZN7OneWire5writeEhh+0x56>
    32ac:	f8 94       	cli
    32ae:	e9 81       	ldd	r30, Y+1	; 0x01
    32b0:	fa 81       	ldd	r31, Y+2	; 0x02
    32b2:	91 81       	ldd	r25, Z+1	; 0x01
    32b4:	88 81       	ld	r24, Y
    32b6:	80 95       	com	r24
    32b8:	89 23       	and	r24, r25
    32ba:	81 83       	std	Z+1, r24	; 0x01
    32bc:	e9 81       	ldd	r30, Y+1	; 0x01
    32be:	fa 81       	ldd	r31, Y+2	; 0x02
    32c0:	92 81       	ldd	r25, Z+2	; 0x02
    32c2:	88 81       	ld	r24, Y
    32c4:	80 95       	com	r24
    32c6:	89 23       	and	r24, r25
    32c8:	82 83       	std	Z+2, r24	; 0x02
    32ca:	78 94       	sei
    32cc:	df 91       	pop	r29
    32ce:	cf 91       	pop	r28
    32d0:	1f 91       	pop	r17
    32d2:	0f 91       	pop	r16
    32d4:	ff 90       	pop	r15
    32d6:	ef 90       	pop	r14
    32d8:	df 90       	pop	r13
    32da:	08 95       	ret

000032dc <_ZN7OneWire4readEv>:
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	7c 01       	movw	r14, r24
    32ea:	08 e0       	ldi	r16, 0x08	; 8
    32ec:	10 e0       	ldi	r17, 0x00	; 0
    32ee:	c0 e0       	ldi	r28, 0x00	; 0
    32f0:	d1 e0       	ldi	r29, 0x01	; 1
    32f2:	c7 01       	movw	r24, r14
    32f4:	95 df       	rcall	.-214    	; 0x3220 <_ZN7OneWire8read_bitEv>
    32f6:	81 11       	cpse	r24, r1
    32f8:	cd 2b       	or	r28, r29
    32fa:	dd 0f       	add	r29, r29
    32fc:	01 50       	subi	r16, 0x01	; 1
    32fe:	11 09       	sbc	r17, r1
    3300:	c1 f7       	brne	.-16     	; 0x32f2 <_ZN7OneWire4readEv+0x16>
    3302:	8c 2f       	mov	r24, r28
    3304:	df 91       	pop	r29
    3306:	cf 91       	pop	r28
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	08 95       	ret

00003312 <_ZN7OneWire6selectEPKh>:
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	8c 01       	movw	r16, r24
    3320:	7b 01       	movw	r14, r22
    3322:	40 e0       	ldi	r20, 0x00	; 0
    3324:	65 e5       	ldi	r22, 0x55	; 85
    3326:	a7 df       	rcall	.-178    	; 0x3276 <_ZN7OneWire5writeEhh>
    3328:	e7 01       	movw	r28, r14
    332a:	88 e0       	ldi	r24, 0x08	; 8
    332c:	e8 0e       	add	r14, r24
    332e:	f1 1c       	adc	r15, r1
    3330:	69 91       	ld	r22, Y+
    3332:	40 e0       	ldi	r20, 0x00	; 0
    3334:	c8 01       	movw	r24, r16
    3336:	9f df       	rcall	.-194    	; 0x3276 <_ZN7OneWire5writeEhh>
    3338:	ce 15       	cp	r28, r14
    333a:	df 05       	cpc	r29, r15
    333c:	c9 f7       	brne	.-14     	; 0x3330 <_ZN7OneWire6selectEPKh+0x1e>
    333e:	df 91       	pop	r29
    3340:	cf 91       	pop	r28
    3342:	1f 91       	pop	r17
    3344:	0f 91       	pop	r16
    3346:	ff 90       	pop	r15
    3348:	ef 90       	pop	r14
    334a:	08 95       	ret

0000334c <_ZN7OneWire4skipEv>:
    334c:	40 e0       	ldi	r20, 0x00	; 0
    334e:	6c ec       	ldi	r22, 0xCC	; 204
    3350:	92 cf       	rjmp	.-220    	; 0x3276 <_ZN7OneWire5writeEhh>

00003352 <_ZN7OneWire12reset_searchEv>:
    3352:	fc 01       	movw	r30, r24
    3354:	13 86       	std	Z+11, r1	; 0x0b
    3356:	15 86       	std	Z+13, r1	; 0x0d
    3358:	14 86       	std	Z+12, r1	; 0x0c
    335a:	dc 01       	movw	r26, r24
    335c:	1b 96       	adiw	r26, 0x0b	; 11
    335e:	33 96       	adiw	r30, 0x03	; 3
    3360:	1e 92       	st	-X, r1
    3362:	ae 17       	cp	r26, r30
    3364:	bf 07       	cpc	r27, r31
    3366:	e1 f7       	brne	.-8      	; 0x3360 <_ZN7OneWire12reset_searchEv+0xe>
    3368:	08 95       	ret

0000336a <_ZN7OneWireC1Eh>:
    336a:	1f 93       	push	r17
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	ec 01       	movw	r28, r24
    3372:	16 2f       	mov	r17, r22
    3374:	60 e0       	ldi	r22, 0x00	; 0
    3376:	81 2f       	mov	r24, r17
    3378:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
    337c:	61 2f       	mov	r22, r17
    337e:	70 e0       	ldi	r23, 0x00	; 0
    3380:	fb 01       	movw	r30, r22
    3382:	ec 51       	subi	r30, 0x1C	; 28
    3384:	fc 4f       	sbci	r31, 0xFC	; 252
    3386:	e4 91       	lpm	r30, Z
    3388:	e8 83       	st	Y, r30
    338a:	fb 01       	movw	r30, r22
    338c:	e6 5d       	subi	r30, 0xD6	; 214
    338e:	fb 4f       	sbci	r31, 0xFB	; 251
    3390:	e4 91       	lpm	r30, Z
    3392:	f0 e0       	ldi	r31, 0x00	; 0
    3394:	ee 0f       	add	r30, r30
    3396:	ff 1f       	adc	r31, r31
    3398:	e0 59       	subi	r30, 0x90	; 144
    339a:	fb 4f       	sbci	r31, 0xFB	; 251
    339c:	85 91       	lpm	r24, Z+
    339e:	94 91       	lpm	r25, Z
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01
    33a4:	ce 01       	movw	r24, r28
    33a6:	df 91       	pop	r29
    33a8:	cf 91       	pop	r28
    33aa:	1f 91       	pop	r17
    33ac:	d2 cf       	rjmp	.-92     	; 0x3352 <_ZN7OneWire12reset_searchEv>

000033ae <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
    33ae:	bf 92       	push	r11
    33b0:	cf 92       	push	r12
    33b2:	df 92       	push	r13
    33b4:	ef 92       	push	r14
    33b6:	ff 92       	push	r15
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	ec 01       	movw	r28, r24
    33c2:	d6 2e       	mov	r13, r22
    33c4:	c7 2e       	mov	r12, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    33c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33c8:	81 11       	cpse	r24, r1
    33ca:	56 c0       	rjmp	.+172    	; 0x3478 <_ZN7OneWire6searchEPh+0xca>
   {
      // 1-Wire reset
      if (!reset())
    33cc:	ce 01       	movw	r24, r28
    33ce:	b6 de       	rcall	.-660    	; 0x313c <_ZN7OneWire5resetEv>
    33d0:	81 11       	cpse	r24, r1
    33d2:	04 c0       	rjmp	.+8      	; 0x33dc <_ZN7OneWire6searchEPh+0x2e>
      {
         // reset the search
         LastDiscrepancy = 0;
    33d4:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    33d6:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    33d8:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    33da:	62 c0       	rjmp	.+196    	; 0x34a0 <_ZN7OneWire6searchEPh+0xf2>
      }

      // issue the search command
      write(0xF0);
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	60 ef       	ldi	r22, 0xF0	; 240
    33e0:	ce 01       	movw	r24, r28
    33e2:	49 df       	rcall	.-366    	; 0x3276 <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    33e4:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    33e6:	e1 2c       	mov	r14, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    33e8:	b1 2c       	mov	r11, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    33ea:	11 e0       	ldi	r17, 0x01	; 1
    33ec:	ce 01       	movw	r24, r28
    33ee:	18 df       	rcall	.-464    	; 0x3220 <_ZN7OneWire8read_bitEv>
         cmp_id_bit = read_bit();
    33f0:	f8 2e       	mov	r15, r24
    33f2:	ce 01       	movw	r24, r28
    33f4:	15 df       	rcall	.-470    	; 0x3220 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    33f6:	91 e0       	ldi	r25, 0x01	; 1
    33f8:	f9 12       	cpse	r15, r25
    33fa:	03 c0       	rjmp	.+6      	; 0x3402 <_ZN7OneWire6searchEPh+0x54>
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	b1 f4       	brne	.+44     	; 0x342c <_ZN7OneWire6searchEPh+0x7e>
    3400:	33 c0       	rjmp	.+102    	; 0x3468 <_ZN7OneWire6searchEPh+0xba>
    3402:	2e 2d       	mov	r18, r14
    3404:	30 e0       	ldi	r19, 0x00	; 0
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    3406:	f8 12       	cpse	r15, r24
    3408:	1b c0       	rjmp	.+54     	; 0x3440 <_ZN7OneWire6searchEPh+0x92>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    340a:	8b 85       	ldd	r24, Y+11	; 0x0b
    340c:	18 17       	cp	r17, r24
    340e:	38 f4       	brcc	.+14     	; 0x341e <_ZN7OneWire6searchEPh+0x70>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    3410:	fe 01       	movw	r30, r28
    3412:	e2 0f       	add	r30, r18
    3414:	f3 1f       	adc	r31, r19
    3416:	83 81       	ldd	r24, Z+3	; 0x03
    3418:	80 23       	and	r24, r16
    341a:	41 f4       	brne	.+16     	; 0x342c <_ZN7OneWire6searchEPh+0x7e>
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <_ZN7OneWire6searchEPh+0x74>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    341e:	18 17       	cp	r17, r24
    3420:	29 f0       	breq	.+10     	; 0x342c <_ZN7OneWire6searchEPh+0x7e>
    3422:	f1 2c       	mov	r15, r1
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    3424:	19 30       	cpi	r17, 0x09	; 9
    3426:	58 f4       	brcc	.+22     	; 0x343e <_ZN7OneWire6searchEPh+0x90>
                     LastFamilyDiscrepancy = last_zero;
    3428:	1c 87       	std	Y+12, r17	; 0x0c
    342a:	09 c0       	rjmp	.+18     	; 0x343e <_ZN7OneWire6searchEPh+0x90>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    342c:	fe 01       	movw	r30, r28
    342e:	ee 0d       	add	r30, r14
    3430:	f1 1d       	adc	r31, r1
    3432:	83 81       	ldd	r24, Z+3	; 0x03
    3434:	80 2b       	or	r24, r16
    3436:	83 83       	std	Z+3, r24	; 0x03
    3438:	ff 24       	eor	r15, r15
    343a:	f3 94       	inc	r15
    343c:	09 c0       	rjmp	.+18     	; 0x3450 <_ZN7OneWire6searchEPh+0xa2>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    343e:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    3440:	fe 01       	movw	r30, r28
    3442:	e2 0f       	add	r30, r18
    3444:	f3 1f       	adc	r31, r19
    3446:	93 81       	ldd	r25, Z+3	; 0x03
    3448:	80 2f       	mov	r24, r16
    344a:	80 95       	com	r24
    344c:	89 23       	and	r24, r25

            // serial number search direction write bit
            write_bit(search_direction);
    344e:	83 83       	std	Z+3, r24	; 0x03
    3450:	6f 2d       	mov	r22, r15
    3452:	ce 01       	movw	r24, r28
    3454:	b2 de       	rcall	.-668    	; 0x31ba <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    3456:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    3458:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    345a:	11 f4       	brne	.+4      	; 0x3460 <_ZN7OneWire6searchEPh+0xb2>
            {
                rom_byte_number++;
    345c:	e3 94       	inc	r14
                rom_byte_mask = 1;
    345e:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    3460:	87 e0       	ldi	r24, 0x07	; 7
    3462:	8e 15       	cp	r24, r14
    3464:	08 f0       	brcs	.+2      	; 0x3468 <_ZN7OneWire6searchEPh+0xba>
    3466:	c2 cf       	rjmp	.-124    	; 0x33ec <_ZN7OneWire6searchEPh+0x3e>

      // if the search was successful then
      if (!(id_bit_number < 65))
    3468:	11 34       	cpi	r17, 0x41	; 65
    346a:	30 f0       	brcs	.+12     	; 0x3478 <_ZN7OneWire6searchEPh+0xca>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    346c:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    346e:	b1 10       	cpse	r11, r1
    3470:	12 c0       	rjmp	.+36     	; 0x3496 <_ZN7OneWire6searchEPh+0xe8>
            LastDeviceFlag = TRUE;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	8d 87       	std	Y+13, r24	; 0x0d
    3476:	0f c0       	rjmp	.+30     	; 0x3496 <_ZN7OneWire6searchEPh+0xe8>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    3478:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    347a:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    347c:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	de 01       	movw	r26, r28
    3482:	13 96       	adiw	r26, 0x03	; 3
    3484:	ed 2d       	mov	r30, r13
    3486:	fc 2d       	mov	r31, r12
    3488:	2b 96       	adiw	r28, 0x0b	; 11
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    348a:	9d 91       	ld	r25, X+
    348c:	91 93       	st	Z+, r25
    348e:	ac 17       	cp	r26, r28
    3490:	bd 07       	cpc	r27, r29
    3492:	d9 f7       	brne	.-10     	; 0x348a <_ZN7OneWire6searchEPh+0xdc>
    3494:	05 c0       	rjmp	.+10     	; 0x34a0 <_ZN7OneWire6searchEPh+0xf2>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    3496:	8b 81       	ldd	r24, Y+3	; 0x03
    3498:	88 23       	and	r24, r24
    349a:	71 f3       	breq	.-36     	; 0x3478 <_ZN7OneWire6searchEPh+0xca>
    349c:	81 e0       	ldi	r24, 0x01	; 1
    349e:	f0 cf       	rjmp	.-32     	; 0x3480 <_ZN7OneWire6searchEPh+0xd2>
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   return search_result;
  }
    34a0:	df 91       	pop	r29
    34a2:	cf 91       	pop	r28
    34a4:	1f 91       	pop	r17
    34a6:	0f 91       	pop	r16
    34a8:	ff 90       	pop	r15
    34aa:	ef 90       	pop	r14
    34ac:	df 90       	pop	r13
    34ae:	cf 90       	pop	r12
    34b0:	bf 90       	pop	r11
    34b2:	08 95       	ret

000034b4 <_ZN7OneWire4crc8EPKhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    34b4:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    34b6:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    34b8:	61 50       	subi	r22, 0x01	; 1
    34ba:	40 f0       	brcs	.+16     	; 0x34cc <_ZN7OneWire4crc8EPKhh+0x18>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    34bc:	9d 91       	ld	r25, X+
    34be:	e8 2f       	mov	r30, r24
    34c0:	e9 27       	eor	r30, r25
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	e2 56       	subi	r30, 0x62	; 98
    34c6:	fd 4f       	sbci	r31, 0xFD	; 253
    34c8:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    34ca:	f6 cf       	rjmp	.-20     	; 0x34b8 <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    34cc:	08 95       	ret

000034ce <_ZN18ProcessManagerBase4TestEv>:
//
//  Set process error code
//
void ProcessManagerBase::SetErrorCode(long lErrorCode)
{
	m_lErrorCode = lErrorCode;
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	08 95       	ret

000034d2 <_ZN18ProcessManagerBase12ClearMembersEv>:
    34d2:	fc 01       	movw	r30, r24
    34d4:	10 86       	std	Z+8, r1	; 0x08
    34d6:	11 86       	std	Z+9, r1	; 0x09
    34d8:	12 86       	std	Z+10, r1	; 0x0a
    34da:	13 86       	std	Z+11, r1	; 0x0b
    34dc:	14 86       	std	Z+12, r1	; 0x0c
    34de:	15 86       	std	Z+13, r1	; 0x0d
    34e0:	16 86       	std	Z+14, r1	; 0x0e
    34e2:	17 86       	std	Z+15, r1	; 0x0f
    34e4:	10 8a       	std	Z+16, r1	; 0x10
    34e6:	11 8a       	std	Z+17, r1	; 0x11
    34e8:	12 8a       	std	Z+18, r1	; 0x12
    34ea:	13 8a       	std	Z+19, r1	; 0x13
    34ec:	82 e0       	ldi	r24, 0x02	; 2
    34ee:	80 8f       	std	Z+24, r24	; 0x18
    34f0:	08 95       	ret

000034f2 <_ZN18ProcessManagerBaseC1EP20TeaMachineController>:
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	ec 01       	movw	r28, r24
    34fc:	8b 01       	movw	r16, r22
    34fe:	8a e9       	ldi	r24, 0x9A	; 154
    3500:	96 e0       	ldi	r25, 0x06	; 6
    3502:	99 83       	std	Y+1, r25	; 0x01
    3504:	88 83       	st	Y, r24
    3506:	ce 01       	movw	r24, r28
    3508:	e4 df       	rcall	.-56     	; 0x34d2 <_ZN18ProcessManagerBase12ClearMembersEv>
    350a:	1d 83       	std	Y+5, r17	; 0x05
    350c:	0c 83       	std	Y+4, r16	; 0x04
    350e:	c8 01       	movw	r24, r16
    3510:	0e 94 13 23 	call	0x4626	; 0x4626 <_ZN20TeaMachineController13GetTeaMachineEv>
    3514:	9b 83       	std	Y+3, r25	; 0x03
    3516:	8a 83       	std	Y+2, r24	; 0x02
    3518:	1f 82       	std	Y+7, r1	; 0x07
    351a:	1e 82       	std	Y+6, r1	; 0x06
    351c:	df 91       	pop	r29
    351e:	cf 91       	pop	r28
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
    3524:	08 95       	ret

00003526 <_ZN18ProcessManagerBase10InitialiseEv>:
    3526:	cf 93       	push	r28
    3528:	df 93       	push	r29
    352a:	ec 01       	movw	r28, r24
    352c:	d2 df       	rcall	.-92     	; 0x34d2 <_ZN18ProcessManagerBase12ClearMembersEv>
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	88 8f       	std	Y+24, r24	; 0x18
    3532:	81 e0       	ldi	r24, 0x01	; 1
    3534:	df 91       	pop	r29
    3536:	cf 91       	pop	r28
    3538:	08 95       	ret

0000353a <_ZN18ProcessManagerBase10SetTimeoutEml>:
    353a:	cf 92       	push	r12
    353c:	df 92       	push	r13
    353e:	ef 92       	push	r14
    3540:	ff 92       	push	r15
    3542:	0f 93       	push	r16
    3544:	1f 93       	push	r17
    3546:	cf 93       	push	r28
    3548:	df 93       	push	r29
    354a:	ec 01       	movw	r28, r24
    354c:	68 01       	movw	r12, r16
    354e:	79 01       	movw	r14, r18
    3550:	48 87       	std	Y+8, r20	; 0x08
    3552:	59 87       	std	Y+9, r21	; 0x09
    3554:	6a 87       	std	Y+10, r22	; 0x0a
    3556:	7b 87       	std	Y+11, r23	; 0x0b
    3558:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    355c:	6c 87       	std	Y+12, r22	; 0x0c
    355e:	7d 87       	std	Y+13, r23	; 0x0d
    3560:	8e 87       	std	Y+14, r24	; 0x0e
    3562:	9f 87       	std	Y+15, r25	; 0x0f
    3564:	cc 8a       	std	Y+20, r12	; 0x14
    3566:	dd 8a       	std	Y+21, r13	; 0x15
    3568:	ee 8a       	std	Y+22, r14	; 0x16
    356a:	ff 8a       	std	Y+23, r15	; 0x17
    356c:	df 91       	pop	r29
    356e:	cf 91       	pop	r28
    3570:	1f 91       	pop	r17
    3572:	0f 91       	pop	r16
    3574:	ff 90       	pop	r15
    3576:	ef 90       	pop	r14
    3578:	df 90       	pop	r13
    357a:	cf 90       	pop	r12
    357c:	08 95       	ret

0000357e <_ZN18ProcessManagerBase12ClearTimeoutEv>:
    357e:	cf 93       	push	r28
    3580:	df 93       	push	r29
    3582:	ec 01       	movw	r28, r24
    3584:	18 86       	std	Y+8, r1	; 0x08
    3586:	19 86       	std	Y+9, r1	; 0x09
    3588:	1a 86       	std	Y+10, r1	; 0x0a
    358a:	1b 86       	std	Y+11, r1	; 0x0b
    358c:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    3590:	6c 87       	std	Y+12, r22	; 0x0c
    3592:	7d 87       	std	Y+13, r23	; 0x0d
    3594:	8e 87       	std	Y+14, r24	; 0x0e
    3596:	9f 87       	std	Y+15, r25	; 0x0f
    3598:	82 e0       	ldi	r24, 0x02	; 2
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	a0 e0       	ldi	r26, 0x00	; 0
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	8c 8b       	std	Y+20, r24	; 0x14
    35a2:	9d 8b       	std	Y+21, r25	; 0x15
    35a4:	ae 8b       	std	Y+22, r26	; 0x16
    35a6:	bf 8b       	std	Y+23, r27	; 0x17
    35a8:	df 91       	pop	r29
    35aa:	cf 91       	pop	r28
    35ac:	08 95       	ret

000035ae <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>:
    35ae:	cf 92       	push	r12
    35b0:	df 92       	push	r13
    35b2:	ef 92       	push	r14
    35b4:	ff 92       	push	r15
    35b6:	cf 93       	push	r28
    35b8:	df 93       	push	r29
    35ba:	ec 01       	movw	r28, r24
    35bc:	cc 84       	ldd	r12, Y+12	; 0x0c
    35be:	dd 84       	ldd	r13, Y+13	; 0x0d
    35c0:	ee 84       	ldd	r14, Y+14	; 0x0e
    35c2:	ff 84       	ldd	r15, Y+15	; 0x0f
    35c4:	88 85       	ldd	r24, Y+8	; 0x08
    35c6:	99 85       	ldd	r25, Y+9	; 0x09
    35c8:	aa 85       	ldd	r26, Y+10	; 0x0a
    35ca:	bb 85       	ldd	r27, Y+11	; 0x0b
    35cc:	c8 0e       	add	r12, r24
    35ce:	d9 1e       	adc	r13, r25
    35d0:	ea 1e       	adc	r14, r26
    35d2:	fb 1e       	adc	r15, r27
    35d4:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    35d8:	c6 16       	cp	r12, r22
    35da:	d7 06       	cpc	r13, r23
    35dc:	e8 06       	cpc	r14, r24
    35de:	f9 06       	cpc	r15, r25
    35e0:	40 f4       	brcc	.+16     	; 0x35f2 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv+0x44>
    35e2:	88 85       	ldd	r24, Y+8	; 0x08
    35e4:	99 85       	ldd	r25, Y+9	; 0x09
    35e6:	aa 85       	ldd	r26, Y+10	; 0x0a
    35e8:	bb 85       	ldd	r27, Y+11	; 0x0b
    35ea:	89 2b       	or	r24, r25
    35ec:	8a 2b       	or	r24, r26
    35ee:	8b 2b       	or	r24, r27
    35f0:	79 f4       	brne	.+30     	; 0x3610 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv+0x62>
    35f2:	80 e0       	ldi	r24, 0x00	; 0
    35f4:	40 e0       	ldi	r20, 0x00	; 0
    35f6:	50 e0       	ldi	r21, 0x00	; 0
    35f8:	ba 01       	movw	r22, r20
    35fa:	48 8b       	std	Y+16, r20	; 0x10
    35fc:	59 8b       	std	Y+17, r21	; 0x11
    35fe:	6a 8b       	std	Y+18, r22	; 0x12
    3600:	7b 8b       	std	Y+19, r23	; 0x13
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	ff 90       	pop	r15
    3608:	ef 90       	pop	r14
    360a:	df 90       	pop	r13
    360c:	cf 90       	pop	r12
    360e:	08 95       	ret
    3610:	4c 89       	ldd	r20, Y+20	; 0x14
    3612:	5d 89       	ldd	r21, Y+21	; 0x15
    3614:	6e 89       	ldd	r22, Y+22	; 0x16
    3616:	7f 89       	ldd	r23, Y+23	; 0x17
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	ef cf       	rjmp	.-34     	; 0x35fa <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv+0x4c>

0000361c <_ZN18ProcessManagerBase15LogProcessEventE6String>:
//	LogProcessEvent()
//
//  Log an event connected with a process step
//
void ProcessManagerBase::LogProcessEvent(String strText)
{
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	ec 01       	movw	r28, r24
    3626:	8b 01       	movw	r16, r22
	if( m_pDrink != NULL )
    3628:	8e 81       	ldd	r24, Y+6	; 0x06
    362a:	9f 81       	ldd	r25, Y+7	; 0x07
    362c:	89 2b       	or	r24, r25
    362e:	b1 f0       	breq	.+44     	; 0x365c <_ZN18ProcessManagerBase15LogProcessEventE6String+0x40>
	{
		Serial.print("Drink #");
    3630:	6e e8       	ldi	r22, 0x8E	; 142
    3632:	76 e0       	ldi	r23, 0x06	; 6
    3634:	85 e5       	ldi	r24, 0x55	; 85
    3636:	9a e0       	ldi	r25, 0x0A	; 10
    3638:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
    363c:	ee 81       	ldd	r30, Y+6	; 0x06
    363e:	ff 81       	ldd	r31, Y+7	; 0x07
		Serial.print(m_pDrink->GetID());
    3640:	65 85       	ldd	r22, Z+13	; 0x0d
    3642:	76 85       	ldd	r23, Z+14	; 0x0e
    3644:	4a e0       	ldi	r20, 0x0A	; 10
    3646:	50 e0       	ldi	r21, 0x00	; 0
    3648:	85 e5       	ldi	r24, 0x55	; 85
    364a:	9a e0       	ldi	r25, 0x0A	; 10
    364c:	0e 94 dd 34 	call	0x69ba	; 0x69ba <_ZN5Print5printEii>
		Serial.print(": ");
    3650:	6d e5       	ldi	r22, 0x5D	; 93
    3652:	72 e0       	ldi	r23, 0x02	; 2
    3654:	85 e5       	ldi	r24, 0x55	; 85
    3656:	9a e0       	ldi	r25, 0x0A	; 10
    3658:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
	}

	Serial.print(strText);
    365c:	b8 01       	movw	r22, r16
    365e:	85 e5       	ldi	r24, 0x55	; 85
    3660:	9a e0       	ldi	r25, 0x0A	; 10
}
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
		Serial.print("Drink #");
		Serial.print(m_pDrink->GetID());
		Serial.print(": ");
	}

	Serial.print(strText);
    366a:	0c 94 f1 33 	jmp	0x67e2	; 0x67e2 <_ZN5Print5printERK6String>

0000366e <_ZN11StirManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    366e:	fc 01       	movw	r30, r24
    3670:	11 8e       	std	Z+25, r1	; 0x19
    3672:	10 8e       	std	Z+24, r1	; 0x18
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	08 95       	ret

00003678 <_ZN11StirManager12BeginProcessEv>:
    3678:	fc 01       	movw	r30, r24
    367a:	82 8d       	ldd	r24, Z+26	; 0x1a
    367c:	93 8d       	ldd	r25, Z+27	; 0x1b
    367e:	89 2b       	or	r24, r25
    3680:	29 f0       	breq	.+10     	; 0x368c <_ZN11StirManager12BeginProcessEv+0x14>
    3682:	15 a2       	std	Z+37, r1	; 0x25
    3684:	14 a2       	std	Z+36, r1	; 0x24
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	81 8f       	std	Z+25, r24	; 0x19
    368a:	10 8e       	std	Z+24, r1	; 0x18
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	08 95       	ret

00003690 <_ZN11StirManager4StopEv>:
    3690:	08 95       	ret

00003692 <_ZN11StirManager4TestEv>:
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	cf 93       	push	r28
    3698:	df 93       	push	r29
    369a:	ec 01       	movw	r28, r24
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	9b 81       	ldd	r25, Y+3	; 0x03
    36a0:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    36a4:	31 d4       	rcall	.+2146   	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    36a6:	93 ff       	sbrs	r25, 3
    36a8:	f9 cf       	rjmp	.-14     	; 0x369c <_ZN11StirManager4TestEv+0xa>
    36aa:	e8 81       	ld	r30, Y
    36ac:	f9 81       	ldd	r31, Y+1	; 0x01
    36ae:	01 90       	ld	r0, Z+
    36b0:	f0 81       	ld	r31, Z
    36b2:	e0 2d       	mov	r30, r0
    36b4:	ce 01       	movw	r24, r28
    36b6:	19 95       	eicall
    36b8:	81 11       	cpse	r24, r1
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <_ZN11StirManager4TestEv+0x36>
    36bc:	e8 81       	ld	r30, Y
    36be:	f9 81       	ldd	r31, Y+1	; 0x01
    36c0:	04 80       	ldd	r0, Z+4	; 0x04
    36c2:	f5 81       	ldd	r31, Z+5	; 0x05
    36c4:	e0 2d       	mov	r30, r0
    36c6:	f6 cf       	rjmp	.-20     	; 0x36b4 <_ZN11StirManager4TestEv+0x22>
    36c8:	83 e1       	ldi	r24, 0x13	; 19
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    36d0:	8c 01       	movw	r16, r24
    36d2:	0e 94 30 13 	call	0x2660	; 0x2660 <_ZN5DrinkC1Ev>
    36d6:	1b 8f       	std	Y+27, r17	; 0x1b
    36d8:	0a 8f       	std	Y+26, r16	; 0x1a
    36da:	f8 01       	movw	r30, r16
    36dc:	21 85       	ldd	r18, Z+9	; 0x09
    36de:	32 85       	ldd	r19, Z+10	; 0x0a
    36e0:	23 30       	cpi	r18, 0x03	; 3
    36e2:	31 05       	cpc	r19, r1
    36e4:	39 f0       	breq	.+14     	; 0x36f4 <_ZN11StirManager4TestEv+0x62>
    36e6:	c9 01       	movw	r24, r18
    36e8:	01 96       	adiw	r24, 0x01	; 1
    36ea:	83 30       	cpi	r24, 0x03	; 3
    36ec:	91 05       	cpc	r25, r1
    36ee:	21 f0       	breq	.+8      	; 0x36f8 <_ZN11StirManager4TestEv+0x66>
    36f0:	01 96       	adiw	r24, 0x01	; 1
    36f2:	02 c0       	rjmp	.+4      	; 0x36f8 <_ZN11StirManager4TestEv+0x66>
    36f4:	83 e0       	ldi	r24, 0x03	; 3
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	f8 01       	movw	r30, r16
    36fa:	92 87       	std	Z+10, r25	; 0x0a
    36fc:	81 87       	std	Z+9, r24	; 0x09
    36fe:	e8 81       	ld	r30, Y
    3700:	f9 81       	ldd	r31, Y+1	; 0x01
    3702:	02 80       	ldd	r0, Z+2	; 0x02
    3704:	f3 81       	ldd	r31, Z+3	; 0x03
    3706:	e0 2d       	mov	r30, r0
    3708:	ce 01       	movw	r24, r28
    370a:	19 95       	eicall
    370c:	81 11       	cpse	r24, r1
    370e:	06 c0       	rjmp	.+12     	; 0x371c <_ZN11StirManager4TestEv+0x8a>
    3710:	e8 81       	ld	r30, Y
    3712:	f9 81       	ldd	r31, Y+1	; 0x01
    3714:	04 80       	ldd	r0, Z+4	; 0x04
    3716:	f5 81       	ldd	r31, Z+5	; 0x05
    3718:	e0 2d       	mov	r30, r0
    371a:	f6 cf       	rjmp	.-20     	; 0x3708 <_ZN11StirManager4TestEv+0x76>
    371c:	91 e0       	ldi	r25, 0x01	; 1
    371e:	82 30       	cpi	r24, 0x02	; 2
    3720:	09 f0       	breq	.+2      	; 0x3724 <_ZN11StirManager4TestEv+0x92>
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	89 2f       	mov	r24, r25
    3726:	df 91       	pop	r29
    3728:	cf 91       	pop	r28
    372a:	1f 91       	pop	r17
    372c:	0f 91       	pop	r16
    372e:	08 95       	ret

00003730 <_ZN11StirManager12ClearMembersEv>:
    3730:	fc 01       	movw	r30, r24
    3732:	11 8e       	std	Z+25, r1	; 0x19
    3734:	10 a2       	std	Z+32, r1	; 0x20
    3736:	11 a2       	std	Z+33, r1	; 0x21
    3738:	12 a2       	std	Z+34, r1	; 0x22
    373a:	13 a2       	std	Z+35, r1	; 0x23
    373c:	15 8e       	std	Z+29, r1	; 0x1d
    373e:	14 8e       	std	Z+28, r1	; 0x1c
    3740:	17 8e       	std	Z+31, r1	; 0x1f
    3742:	16 8e       	std	Z+30, r1	; 0x1e
    3744:	15 a2       	std	Z+37, r1	; 0x25
    3746:	14 a2       	std	Z+36, r1	; 0x24
    3748:	08 95       	ret

0000374a <_ZN11StirManagerC1EP20TeaMachineController>:
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	ec 01       	movw	r28, r24
    3750:	d0 de       	rcall	.-608    	; 0x34f2 <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    3752:	89 ed       	ldi	r24, 0xD9	; 217
    3754:	97 e0       	ldi	r25, 0x07	; 7
    3756:	99 83       	std	Y+1, r25	; 0x01
    3758:	88 83       	st	Y, r24
    375a:	ce 01       	movw	r24, r28
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	e7 cf       	rjmp	.-50     	; 0x3730 <_ZN11StirManager12ClearMembersEv>

00003762 <_ZN11StirManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::AdvanceStateMachine()
{
    3762:	df 92       	push	r13
    3764:	ef 92       	push	r14
    3766:	ff 92       	push	r15
    3768:	0f 93       	push	r16
    376a:	1f 93       	push	r17
    376c:	cf 93       	push	r28
    376e:	df 93       	push	r29
    3770:	cd b7       	in	r28, 0x3d	; 61
    3772:	de b7       	in	r29, 0x3e	; 62
    3774:	2c 97       	sbiw	r28, 0x0c	; 12
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    3780:	dc 01       	movw	r26, r24
    3782:	59 96       	adiw	r26, 0x19	; 25
    3784:	4c 91       	ld	r20, X
    3786:	59 97       	sbiw	r26, 0x19	; 25
    3788:	50 e0       	ldi	r21, 0x00	; 0
    378a:	49 30       	cpi	r20, 0x09	; 9
    378c:	51 05       	cpc	r21, r1
    378e:	08 f0       	brcs	.+2      	; 0x3792 <_ZN11StirManager19AdvanceStateMachineEv+0x30>
    3790:	ca c1       	rjmp	.+916    	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
    3792:	7c 01       	movw	r14, r24
    3794:	fa 01       	movw	r30, r20
    3796:	88 27       	eor	r24, r24
    3798:	e9 56       	subi	r30, 0x69	; 105
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	8f 4f       	sbci	r24, 0xFF	; 255
    379e:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__tablejump2__>
    {
        // Reset step: Raise stirrer
        case StirBeginReset:
			if( !m_pStirrer->IsRaised() )
    37a2:	fd 01       	movw	r30, r26
    37a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    37a6:	95 8d       	ldd	r25, Z+29	; 0x1d
    37a8:	d2 d2       	rcall	.+1444   	; 0x3d4e <_ZN7Stirrer8IsRaisedEv>
    37aa:	81 11       	cpse	r24, r1
    37ac:	15 c0       	rjmp	.+42     	; 0x37d8 <_ZN11StirManager19AdvanceStateMachineEv+0x76>
			{
				LogProcessEvent("State: StirBeginReset\n");
    37ae:	66 ea       	ldi	r22, 0xA6	; 166
    37b0:	76 e0       	ldi	r23, 0x06	; 6
    37b2:	ce 01       	movw	r24, r28
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    37ba:	be 01       	movw	r22, r28
    37bc:	6f 5f       	subi	r22, 0xFF	; 255
    37be:	7f 4f       	sbci	r23, 0xFF	; 255
    37c0:	c7 01       	movw	r24, r14
    37c2:	2c df       	rcall	.-424    	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    37c4:	ce 01       	movw	r24, r28
    37c6:	01 96       	adiw	r24, 0x01	; 1
    37c8:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				m_pStirrer->Raise();
    37cc:	d7 01       	movw	r26, r14
    37ce:	5c 96       	adiw	r26, 0x1c	; 28
    37d0:	8d 91       	ld	r24, X+
    37d2:	9c 91       	ld	r25, X
    37d4:	5d 97       	sbiw	r26, 0x1d	; 29
    37d6:	99 d2       	rcall	.+1330   	; 0x3d0a <_ZN7Stirrer5RaiseEv>
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	f7 01       	movw	r30, r14
    37dc:	81 8f       	std	Z+25, r24	; 0x19
    37de:	6f c1       	rjmp	.+734    	; 0x3abe <_ZN11StirManager19AdvanceStateMachineEv+0x35c>
			SetNextState(StirResetCheckComplete);
			SetTimeout(STIR_TIMEOUT_RAISE, STIR_ERR_TIMEOUT_RAISE);
            break;
			
		case StirResetCheckComplete:
			if( m_pStirrer->IsRaised() && m_pSugarDispenser->IsComplete() )
    37e0:	5c 96       	adiw	r26, 0x1c	; 28
    37e2:	8d 91       	ld	r24, X+
    37e4:	9c 91       	ld	r25, X
    37e6:	5d 97       	sbiw	r26, 0x1d	; 29
    37e8:	b2 d2       	rcall	.+1380   	; 0x3d4e <_ZN7Stirrer8IsRaisedEv>
    37ea:	88 23       	and	r24, r24
    37ec:	09 f4       	brne	.+2      	; 0x37f0 <_ZN11StirManager19AdvanceStateMachineEv+0x8e>
    37ee:	9b c1       	rjmp	.+822    	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
    37f0:	f7 01       	movw	r30, r14
    37f2:	86 8d       	ldd	r24, Z+30	; 0x1e
    37f4:	97 8d       	ldd	r25, Z+31	; 0x1f
    37f6:	10 d3       	rcall	.+1568   	; 0x3e18 <_ZN14SugarDispenser10IsCompleteEv>
    37f8:	88 23       	and	r24, r24
    37fa:	09 f4       	brne	.+2      	; 0x37fe <_ZN11StirManager19AdvanceStateMachineEv+0x9c>
    37fc:	94 c1       	rjmp	.+808    	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
    37fe:	68 e8       	ldi	r22, 0x88	; 136
			{
				LogProcessEvent("State: StirResetCheckComplete\n");
    3800:	77 e0       	ldi	r23, 0x07	; 7
    3802:	ce 01       	movw	r24, r28
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    380a:	be 01       	movw	r22, r28
    380c:	6f 5f       	subi	r22, 0xFF	; 255
    380e:	7f 4f       	sbci	r23, 0xFF	; 255
    3810:	c7 01       	movw	r24, r14
    3812:	04 df       	rcall	.-504    	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3814:	ce 01       	movw	r24, r28
    3816:	01 96       	adiw	r24, 0x01	; 1
    3818:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				// Process step complete - reset has finished
				ClearTimeout();
    381c:	c7 01       	movw	r24, r14
    381e:	af de       	rcall	.-674    	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    3820:	7f c1       	rjmp	.+766    	; 0x3b20 <_ZN11StirManager19AdvanceStateMachineEv+0x3be>
			}
			break;
                            
        // Process step:
        case StirBeginProcess:
			if( m_pStirrer->IsRaised() && m_pSugarDispenser->IsComplete() )
    3822:	5c 96       	adiw	r26, 0x1c	; 28
    3824:	8d 91       	ld	r24, X+
    3826:	9c 91       	ld	r25, X
    3828:	5d 97       	sbiw	r26, 0x1d	; 29
    382a:	91 d2       	rcall	.+1314   	; 0x3d4e <_ZN7Stirrer8IsRaisedEv>
    382c:	88 23       	and	r24, r24
    382e:	f9 f0       	breq	.+62     	; 0x386e <_ZN11StirManager19AdvanceStateMachineEv+0x10c>
    3830:	f7 01       	movw	r30, r14
    3832:	86 8d       	ldd	r24, Z+30	; 0x1e
    3834:	97 8d       	ldd	r25, Z+31	; 0x1f
    3836:	f0 d2       	rcall	.+1504   	; 0x3e18 <_ZN14SugarDispenser10IsCompleteEv>
    3838:	81 11       	cpse	r24, r1
    383a:	77 c1       	rjmp	.+750    	; 0x3b2a <_ZN11StirManager19AdvanceStateMachineEv+0x3c8>
    383c:	18 c0       	rjmp	.+48     	; 0x386e <_ZN11StirManager19AdvanceStateMachineEv+0x10c>
    383e:	87 81       	ldd	r24, Z+7	; 0x07
					SetNextState(StirDispenseSugar);
				}
				else
				{
					// No sugar required
					if( m_pDrink->GetMilk() )
    3840:	90 85       	ldd	r25, Z+8	; 0x08
    3842:	89 2b       	or	r24, r25
    3844:	09 f4       	brne	.+2      	; 0x3848 <_ZN11StirManager19AdvanceStateMachineEv+0xe6>
    3846:	b4 c1       	rjmp	.+872    	; 0x3bb0 <_ZN11StirManager19AdvanceStateMachineEv+0x44e>
    3848:	02 e4       	ldi	r16, 0x42	; 66
					{
						// Milk was added, so just stir
						SetTimeout(STIR_TIMEOUT_ZONEACCESS, STIR_ERR_TIMEOUT_ZONEACCESS);
    384a:	10 e0       	ldi	r17, 0x00	; 0
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e6       	ldi	r20, 0x60	; 96
    3852:	5a ee       	ldi	r21, 0xEA	; 234
    3854:	60 e0       	ldi	r22, 0x00	; 0
    3856:	70 e0       	ldi	r23, 0x00	; 0
    3858:	c7 01       	movw	r24, r14
    385a:	6f de       	rcall	.-802    	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    385c:	85 e0       	ldi	r24, 0x05	; 5
    385e:	f7 01       	movw	r30, r14
    3860:	81 8f       	std	Z+25, r24	; 0x19
					{
						// No sugar or milk, so drink is ready
						SetNextState(StirRaiseCheckComplete);
					}
				}
				ClearTimeout();
    3862:	c7 01       	movw	r24, r14
    3864:	8c de       	rcall	.-744    	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    3866:	ce 01       	movw	r24, r28
        case StirBeginProcess:
			if( m_pStirrer->IsRaised() && m_pSugarDispenser->IsComplete() )
			{
				LogProcessEvent("State: StirBeginProcess\n");
				
				String strSugarText = "Dispensing ";
    3868:	07 96       	adiw	r24, 0x07	; 7
    386a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    386e:	d7 01       	movw	r26, r14
    3870:	5a 96       	adiw	r26, 0x1a	; 26
    3872:	ed 91       	ld	r30, X+
    3874:	fc 91       	ld	r31, X
    3876:	5b 97       	sbiw	r26, 0x1b	; 27
    3878:	94 96       	adiw	r26, 0x24	; 36
				}
				ClearTimeout();
			}
			
		case StirDispenseSugar:
			if( (m_nSugarDispensed < m_pDrink->GetSugar()) && m_pSugarDispenser->IsComplete() )
    387a:	2d 91       	ld	r18, X+
    387c:	3c 91       	ld	r19, X
    387e:	95 97       	sbiw	r26, 0x25	; 37
    3880:	81 85       	ldd	r24, Z+9	; 0x09
    3882:	92 85       	ldd	r25, Z+10	; 0x0a
    3884:	28 17       	cp	r18, r24
    3886:	39 07       	cpc	r19, r25
    3888:	c4 f5       	brge	.+112    	; 0x38fa <_ZN11StirManager19AdvanceStateMachineEv+0x198>
    388a:	5e 96       	adiw	r26, 0x1e	; 30
    388c:	8d 91       	ld	r24, X+
    388e:	9c 91       	ld	r25, X
    3890:	5f 97       	sbiw	r26, 0x1f	; 31
    3892:	c2 d2       	rcall	.+1412   	; 0x3e18 <_ZN14SugarDispenser10IsCompleteEv>
    3894:	88 23       	and	r24, r24
    3896:	89 f1       	breq	.+98     	; 0x38fa <_ZN11StirManager19AdvanceStateMachineEv+0x198>
    3898:	d7 01       	movw	r26, r14
    389a:	5a 96       	adiw	r26, 0x1a	; 26
    389c:	ed 91       	ld	r30, X+
    389e:	fc 91       	ld	r31, X
    38a0:	5b 97       	sbiw	r26, 0x1b	; 27
    38a2:	65 85       	ldd	r22, Z+13	; 0x0d
			{
				// Sugar is required and the dispenser is ready, first check that a cup is still present
				if( m_pController->GetDrinkLocation(m_pDrink->GetID()) == ST_STIR )
    38a4:	76 85       	ldd	r23, Z+14	; 0x0e
    38a6:	14 96       	adiw	r26, 0x04	; 4
    38a8:	8d 91       	ld	r24, X+
    38aa:	9c 91       	ld	r25, X
    38ac:	15 97       	sbiw	r26, 0x05	; 5
    38ae:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
    38b2:	06 97       	sbiw	r24, 0x06	; 6
    38b4:	09 f0       	breq	.+2      	; 0x38b8 <_ZN11StirManager19AdvanceStateMachineEv+0x156>
    38b6:	81 c1       	rjmp	.+770    	; 0x3bba <_ZN11StirManager19AdvanceStateMachineEv+0x458>
				{
					// Dispense sugar
					LogProcessEvent("State: StirBeginDispenseSugar\n");
    38b8:	6d eb       	ldi	r22, 0xBD	; 189
    38ba:	76 e0       	ldi	r23, 0x06	; 6
    38bc:	ce 01       	movw	r24, r28
    38be:	01 96       	adiw	r24, 0x01	; 1
    38c0:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    38c4:	be 01       	movw	r22, r28
    38c6:	6f 5f       	subi	r22, 0xFF	; 255
    38c8:	7f 4f       	sbci	r23, 0xFF	; 255
    38ca:	c7 01       	movw	r24, r14
    38cc:	a7 de       	rcall	.-690    	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    38ce:	ce 01       	movw	r24, r28
    38d0:	01 96       	adiw	r24, 0x01	; 1
    38d2:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
					m_pSugarDispenser->Dispense();
    38d6:	f7 01       	movw	r30, r14
    38d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    38da:	97 8d       	ldd	r25, Z+31	; 0x1f
    38dc:	7f d2       	rcall	.+1278   	; 0x3ddc <_ZN14SugarDispenser8DispenseEv>
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    38de:	84 e0       	ldi	r24, 0x04	; 4
    38e0:	d7 01       	movw	r26, r14
    38e2:	59 96       	adiw	r26, 0x19	; 25
    38e4:	8c 93       	st	X, r24
					LogProcessEvent("State: StirBeginDispenseSugar\n");
					m_pSugarDispenser->Dispense();
				
					// Set next state and timeout
					SetNextState(StirWaitSugarDispensed);
					SetTimeout(SUGAR_TIMEOUT_FULLCYCLE, SUGAR_ERR_TIMEOUT_FULLCYCLE);
    38e6:	00 e5       	ldi	r16, 0x50	; 80
    38e8:	10 e0       	ldi	r17, 0x00	; 0
    38ea:	20 e0       	ldi	r18, 0x00	; 0
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	48 e8       	ldi	r20, 0x88	; 136
    38f0:	53 e1       	ldi	r21, 0x13	; 19
    38f2:	60 e0       	ldi	r22, 0x00	; 0
    38f4:	70 e0       	ldi	r23, 0x00	; 0
    38f6:	c7 01       	movw	r24, r14
    38f8:	20 de       	rcall	.-960    	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    38fa:	d1 2c       	mov	r13, r1
 					response = ProcessComplete;
				}
			}
			
		case StirWaitSugarDispensed:
			if( m_pSugarDispenser->IsComplete() )
    38fc:	f7 01       	movw	r30, r14
    38fe:	86 8d       	ldd	r24, Z+30	; 0x1e
    3900:	97 8d       	ldd	r25, Z+31	; 0x1f
    3902:	8a d2       	rcall	.+1300   	; 0x3e18 <_ZN14SugarDispenser10IsCompleteEv>
    3904:	88 23       	and	r24, r24
    3906:	09 f4       	brne	.+2      	; 0x390a <_ZN11StirManager19AdvanceStateMachineEv+0x1a8>
    3908:	64 c1       	rjmp	.+712    	; 0x3bd2 <_ZN11StirManager19AdvanceStateMachineEv+0x470>
			{
				LogProcessEvent("State: StirWaitSugarDispensed\n");
    390a:	6c ed       	ldi	r22, 0xDC	; 220
    390c:	76 e0       	ldi	r23, 0x06	; 6
    390e:	ce 01       	movw	r24, r28
    3910:	01 96       	adiw	r24, 0x01	; 1
    3912:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3916:	be 01       	movw	r22, r28
    3918:	6f 5f       	subi	r22, 0xFF	; 255
    391a:	7f 4f       	sbci	r23, 0xFF	; 255
    391c:	c7 01       	movw	r24, r14
    391e:	7e de       	rcall	.-772    	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3920:	ce 01       	movw	r24, r28
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    3928:	d7 01       	movw	r26, r14
				
				m_nSugarDispensed++;
    392a:	94 96       	adiw	r26, 0x24	; 36
    392c:	8d 91       	ld	r24, X+
    392e:	9c 91       	ld	r25, X
    3930:	95 97       	sbiw	r26, 0x25	; 37
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	95 96       	adiw	r26, 0x25	; 37
    3936:	9c 93       	st	X, r25
    3938:	8e 93       	st	-X, r24
    393a:	94 97       	sbiw	r26, 0x24	; 36
    393c:	6b ef       	ldi	r22, 0xFB	; 251
				
				String strDispText = "Dispensed sugar #";
    393e:	76 e0       	ldi	r23, 0x06	; 6
    3940:	ce 01       	movw	r24, r28
    3942:	07 96       	adiw	r24, 0x07	; 7
    3944:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3948:	f7 01       	movw	r30, r14
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    394a:	64 a1       	ldd	r22, Z+36	; 0x24
    394c:	75 a1       	ldd	r23, Z+37	; 0x25
    394e:	ce 01       	movw	r24, r28
    3950:	07 96       	adiw	r24, 0x07	; 7
    3952:	0e 94 bc 38 	call	0x7178	; 0x7178 <_ZN6String6concatEi>
    3956:	6a e3       	ldi	r22, 0x3A	; 58
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    3958:	7a e0       	ldi	r23, 0x0A	; 10
    395a:	ce 01       	movw	r24, r28
    395c:	07 96       	adiw	r24, 0x07	; 7
    395e:	0e 94 ae 38 	call	0x715c	; 0x715c <_ZN6String6concatEPKc>
				strDispText += m_nSugarDispensed;
				strDispText += "\n";
				LogProcessEvent(strDispText);
    3962:	be 01       	movw	r22, r28
    3964:	69 5f       	subi	r22, 0xF9	; 249
    3966:	7f 4f       	sbci	r23, 0xFF	; 255
    3968:	ce 01       	movw	r24, r28
    396a:	01 96       	adiw	r24, 0x01	; 1
    396c:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
    3970:	be 01       	movw	r22, r28
    3972:	6f 5f       	subi	r22, 0xFF	; 255
    3974:	7f 4f       	sbci	r23, 0xFF	; 255
    3976:	c7 01       	movw	r24, r14
    3978:	51 de       	rcall	.-862    	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    397a:	ce 01       	movw	r24, r28
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    3982:	d7 01       	movw	r26, r14
    3984:	5a 96       	adiw	r26, 0x1a	; 26
    3986:	ed 91       	ld	r30, X+
    3988:	fc 91       	ld	r31, X
    398a:	5b 97       	sbiw	r26, 0x1b	; 27
				
				if( m_nSugarDispensed < m_pDrink->GetSugar() )
    398c:	94 96       	adiw	r26, 0x24	; 36
    398e:	2d 91       	ld	r18, X+
    3990:	3c 91       	ld	r19, X
    3992:	95 97       	sbiw	r26, 0x25	; 37
    3994:	81 85       	ldd	r24, Z+9	; 0x09
    3996:	92 85       	ldd	r25, Z+10	; 0x0a
    3998:	28 17       	cp	r18, r24
    399a:	39 07       	cpc	r19, r25
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    399c:	34 f4       	brge	.+12     	; 0x39aa <_ZN11StirManager19AdvanceStateMachineEv+0x248>
    399e:	83 e0       	ldi	r24, 0x03	; 3
    39a0:	59 96       	adiw	r26, 0x19	; 25
				
				if( m_nSugarDispensed < m_pDrink->GetSugar() )
				{
					// Still sugar to dispense
					SetNextState(StirDispenseSugar);
					ClearTimeout();
    39a2:	8c 93       	st	X, r24
    39a4:	c7 01       	movw	r24, r14
    39a6:	eb dd       	rcall	.-1066   	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    39a8:	0d c0       	rjmp	.+26     	; 0x39c4 <_ZN11StirManager19AdvanceStateMachineEv+0x262>
				}
				else
				{
					// No more sugar need, so just do the stir - must wait for access to collision zone
					SetTimeout(STIR_TIMEOUT_ZONEACCESS, STIR_ERR_TIMEOUT_ZONEACCESS);
    39aa:	02 e4       	ldi	r16, 0x42	; 66
    39ac:	10 e0       	ldi	r17, 0x00	; 0
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	40 e6       	ldi	r20, 0x60	; 96
    39b4:	5a ee       	ldi	r21, 0xEA	; 234
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	c7 01       	movw	r24, r14
    39bc:	be dd       	rcall	.-1156   	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
    39be:	85 e0       	ldi	r24, 0x05	; 5
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    39c0:	f7 01       	movw	r30, r14
    39c2:	81 8f       	std	Z+25, r24	; 0x19
    39c4:	ce 01       	movw	r24, r28
			{
				LogProcessEvent("State: StirWaitSugarDispensed\n");
				
				m_nSugarDispensed++;
				
				String strDispText = "Dispensed sugar #";
    39c6:	07 96       	adiw	r24, 0x07	; 7
    39c8:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    39cc:	02 c1       	rjmp	.+516    	; 0x3bd2 <_ZN11StirManager19AdvanceStateMachineEv+0x470>
			}
			break;
        
		// Process step		
		case StirWaitForAccess:
			if( m_pController->LockCollisionZone( this ))
    39ce:	bd 01       	movw	r22, r26
    39d0:	14 96       	adiw	r26, 0x04	; 4
    39d2:	8d 91       	ld	r24, X+
    39d4:	9c 91       	ld	r25, X
    39d6:	15 97       	sbiw	r26, 0x05	; 5
    39d8:	0e 94 c6 27 	call	0x4f8c	; 0x4f8c <_ZN20TeaMachineController17LockCollisionZoneEP18ProcessManagerBase>
    39dc:	88 23       	and	r24, r24
			{
				LogProcessEvent("State: StirWaitForAccess\n");
    39de:	09 f1       	breq	.+66     	; 0x3a22 <_ZN11StirManager19AdvanceStateMachineEv+0x2c0>
    39e0:	6d e0       	ldi	r22, 0x0D	; 13
    39e2:	77 e0       	ldi	r23, 0x07	; 7
    39e4:	ce 01       	movw	r24, r28
    39e6:	01 96       	adiw	r24, 0x01	; 1
    39e8:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    39ec:	be 01       	movw	r22, r28
    39ee:	6f 5f       	subi	r22, 0xFF	; 255
    39f0:	7f 4f       	sbci	r23, 0xFF	; 255
    39f2:	c7 01       	movw	r24, r14
    39f4:	13 de       	rcall	.-986    	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    39f6:	ce 01       	movw	r24, r28
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				
				// Stirrer has access to collision zone, so lower it
				m_pStirrer->Lower();
    39fe:	f7 01       	movw	r30, r14
    3a00:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a02:	95 8d       	ldd	r25, Z+29	; 0x1d
				SetTimeout(STIR_TIMEOUT_LOWER, STIR_ERR_TIMEOUT_LOWER);
    3a04:	93 d1       	rcall	.+806    	; 0x3d2c <_ZN7Stirrer5LowerEv>
    3a06:	01 e4       	ldi	r16, 0x41	; 65
    3a08:	10 e0       	ldi	r17, 0x00	; 0
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	48 e5       	ldi	r20, 0x58	; 88
    3a10:	5b e1       	ldi	r21, 0x1B	; 27
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	c7 01       	movw	r24, r14
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    3a18:	90 dd       	rcall	.-1248   	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
    3a1a:	86 e0       	ldi	r24, 0x06	; 6
    3a1c:	d7 01       	movw	r26, r14
    3a1e:	59 96       	adiw	r26, 0x19	; 25
				SetNextState(StirDeployedCheckComplete);				
			}
			
        // Process step:
        case StirDeployedCheckComplete:	
			if( m_pStirrer->IsLowered() )
    3a20:	8c 93       	st	X, r24
    3a22:	f7 01       	movw	r30, r14
    3a24:	84 8d       	ldd	r24, Z+28	; 0x1c
    3a26:	95 8d       	ldd	r25, Z+29	; 0x1d
    3a28:	9b d1       	rcall	.+822    	; 0x3d60 <_ZN7Stirrer9IsLoweredEv>
    3a2a:	88 23       	and	r24, r24
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <_ZN11StirManager19AdvanceStateMachineEv+0x2ce>
    3a2e:	7b c0       	rjmp	.+246    	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
			{
				LogProcessEvent("State: StirDeployedCheckComplete\n");
    3a30:	67 e2       	ldi	r22, 0x27	; 39
    3a32:	77 e0       	ldi	r23, 0x07	; 7
    3a34:	ce 01       	movw	r24, r28
    3a36:	01 96       	adiw	r24, 0x01	; 1
    3a38:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3a3c:	be 01       	movw	r22, r28
    3a3e:	6f 5f       	subi	r22, 0xFF	; 255
    3a40:	7f 4f       	sbci	r23, 0xFF	; 255
    3a42:	c7 01       	movw	r24, r14
    3a44:	eb dd       	rcall	.-1066   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3a46:	ce 01       	movw	r24, r28
    3a48:	01 96       	adiw	r24, 0x01	; 1
    3a4a:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				m_lStirCompletionTime = millis() + STIR_PERIOD;
    3a4e:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    3a52:	dc 01       	movw	r26, r24
    3a54:	cb 01       	movw	r24, r22
    3a56:	88 5a       	subi	r24, 0xA8	; 168
    3a58:	94 4e       	sbci	r25, 0xE4	; 228
    3a5a:	af 4f       	sbci	r26, 0xFF	; 255
    3a5c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a5e:	f7 01       	movw	r30, r14
    3a60:	80 a3       	std	Z+32, r24	; 0x20
    3a62:	91 a3       	std	Z+33, r25	; 0x21
    3a64:	a2 a3       	std	Z+34, r26	; 0x22
    3a66:	b3 a3       	std	Z+35, r27	; 0x23
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    3a68:	87 e0       	ldi	r24, 0x07	; 7
    3a6a:	81 8f       	std	Z+25, r24	; 0x19
				LogProcessEvent("State: StirDeployedCheckComplete\n");
				m_lStirCompletionTime = millis() + STIR_PERIOD;
				
				// Set next state and timeout
				SetNextState(StirActionCheckComplete);
				ClearTimeout();
    3a6c:	c7 01       	movw	r24, r14
    3a6e:	87 dd       	rcall	.-1266   	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    3a70:	5a c0       	rjmp	.+180    	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
			}					
			break;	
		
		case StirActionCheckComplete:
			if( millis() > m_lStirCompletionTime )
    3a72:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    3a76:	d7 01       	movw	r26, r14
    3a78:	90 96       	adiw	r26, 0x20	; 32
    3a7a:	0d 91       	ld	r16, X+
    3a7c:	1d 91       	ld	r17, X+
    3a7e:	2d 91       	ld	r18, X+
    3a80:	3c 91       	ld	r19, X
    3a82:	93 97       	sbiw	r26, 0x23	; 35
    3a84:	06 17       	cp	r16, r22
    3a86:	17 07       	cpc	r17, r23
    3a88:	28 07       	cpc	r18, r24
    3a8a:	39 07       	cpc	r19, r25
    3a8c:	08 f0       	brcs	.+2      	; 0x3a90 <_ZN11StirManager19AdvanceStateMachineEv+0x32e>
			{
				LogProcessEvent("State: StirActionCheckComplete\n");
    3a8e:	4b c0       	rjmp	.+150    	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
    3a90:	69 e4       	ldi	r22, 0x49	; 73
    3a92:	77 e0       	ldi	r23, 0x07	; 7
    3a94:	ce 01       	movw	r24, r28
    3a96:	01 96       	adiw	r24, 0x01	; 1
    3a98:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3a9c:	be 01       	movw	r22, r28
    3a9e:	6f 5f       	subi	r22, 0xFF	; 255
    3aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    3aa2:	c7 01       	movw	r24, r14
    3aa4:	bb dd       	rcall	.-1162   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	01 96       	adiw	r24, 0x01	; 1
				m_pStirrer->Raise();
    3aaa:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    3aae:	f7 01       	movw	r30, r14
    3ab0:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ab2:	95 8d       	ldd	r25, Z+29	; 0x1d
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    3ab4:	2a d1       	rcall	.+596    	; 0x3d0a <_ZN7Stirrer5RaiseEv>
    3ab6:	88 e0       	ldi	r24, 0x08	; 8
    3ab8:	d7 01       	movw	r26, r14
				LogProcessEvent("State: StirActionCheckComplete\n");
				m_pStirrer->Raise();
				
				// Set next state and timeout
				SetNextState(StirRaiseCheckComplete);
				SetTimeout(STIR_TIMEOUT_RAISE, STIR_ERR_TIMEOUT_RAISE);
    3aba:	59 96       	adiw	r26, 0x19	; 25
    3abc:	8c 93       	st	X, r24
    3abe:	00 e4       	ldi	r16, 0x40	; 64
    3ac0:	10 e0       	ldi	r17, 0x00	; 0
    3ac2:	20 e0       	ldi	r18, 0x00	; 0
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	48 e5       	ldi	r20, 0x58	; 88
    3ac8:	5b e1       	ldi	r21, 0x1B	; 27
    3aca:	60 e0       	ldi	r22, 0x00	; 0
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	c7 01       	movw	r24, r14
    3ad0:	34 dd       	rcall	.-1432   	; 0x353a <_ZN18ProcessManagerBase10SetTimeoutEml>
			}
			break;
			
		case StirRaiseCheckComplete:
			if( m_pStirrer->IsRaised() )
    3ad2:	29 c0       	rjmp	.+82     	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
    3ad4:	fd 01       	movw	r30, r26
    3ad6:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ad8:	95 8d       	ldd	r25, Z+29	; 0x1d
    3ada:	39 d1       	rcall	.+626    	; 0x3d4e <_ZN7Stirrer8IsRaisedEv>
    3adc:	88 23       	and	r24, r24
			{
				// Stirrer raised so process is complete
				LogProcessEvent("State: StirRaiseCheckComplete\n");
    3ade:	19 f1       	breq	.+70     	; 0x3b26 <_ZN11StirManager19AdvanceStateMachineEv+0x3c4>
    3ae0:	69 e6       	ldi	r22, 0x69	; 105
    3ae2:	77 e0       	ldi	r23, 0x07	; 7
    3ae4:	ce 01       	movw	r24, r28
    3ae6:	01 96       	adiw	r24, 0x01	; 1
    3ae8:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3aec:	be 01       	movw	r22, r28
    3aee:	6f 5f       	subi	r22, 0xFF	; 255
    3af0:	7f 4f       	sbci	r23, 0xFF	; 255
    3af2:	c7 01       	movw	r24, r14
    3af4:	93 dd       	rcall	.-1242   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3af6:	ce 01       	movw	r24, r28
    3af8:	01 96       	adiw	r24, 0x01	; 1
    3afa:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
				
				// Relinquish the lock on the collision zone
				m_pController->ReleaseCollisionZone(this);
    3afe:	b7 01       	movw	r22, r14
    3b00:	d7 01       	movw	r26, r14
    3b02:	14 96       	adiw	r26, 0x04	; 4
    3b04:	8d 91       	ld	r24, X+
    3b06:	9c 91       	ld	r25, X
    3b08:	15 97       	sbiw	r26, 0x05	; 5
    3b0a:	0e 94 d5 27 	call	0x4faa	; 0x4faa <_ZN20TeaMachineController20ReleaseCollisionZoneEP18ProcessManagerBase>
				
				ClearTimeout();
    3b0e:	c7 01       	movw	r24, r14
    3b10:	36 dd       	rcall	.-1428   	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    3b12:	d7 01       	movw	r26, r14
    3b14:	5a 96       	adiw	r26, 0x1a	; 26
    3b16:	ed 91       	ld	r30, X+
    3b18:	fc 91       	ld	r31, X
    3b1a:	5b 97       	sbiw	r26, 0x1b	; 27
    3b1c:	83 e0       	ldi	r24, 0x03	; 3
    3b1e:	81 83       	std	Z+1, r24	; 0x01
			if( m_pStirrer->IsRaised() && m_pSugarDispenser->IsComplete() )
			{
				LogProcessEvent("State: StirResetCheckComplete\n");
				// Process step complete - reset has finished
				ClearTimeout();
				response = ProcessComplete;
    3b20:	82 e0       	ldi	r24, 0x02	; 2
    3b22:	d8 2e       	mov	r13, r24
    3b24:	56 c0       	rjmp	.+172    	; 0x3bd2 <_ZN11StirManager19AdvanceStateMachineEv+0x470>
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    3b26:	d1 2c       	mov	r13, r1
  				response = ProcessComplete;
			}
			break;
    } // switch            
            
	return response;
    3b28:	54 c0       	rjmp	.+168    	; 0x3bd2 <_ZN11StirManager19AdvanceStateMachineEv+0x470>
                            
        // Process step:
        case StirBeginProcess:
			if( m_pStirrer->IsRaised() && m_pSugarDispenser->IsComplete() )
			{
				LogProcessEvent("State: StirBeginProcess\n");
    3b2a:	67 ea       	ldi	r22, 0xA7	; 167
    3b2c:	77 e0       	ldi	r23, 0x07	; 7
    3b2e:	ce 01       	movw	r24, r28
    3b30:	01 96       	adiw	r24, 0x01	; 1
    3b32:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3b36:	be 01       	movw	r22, r28
    3b38:	6f 5f       	subi	r22, 0xFF	; 255
    3b3a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b3c:	c7 01       	movw	r24, r14
    3b3e:	6e dd       	rcall	.-1316   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3b40:	ce 01       	movw	r24, r28
    3b42:	01 96       	adiw	r24, 0x01	; 1
    3b44:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
    3b48:	60 ec       	ldi	r22, 0xC0	; 192
				
				String strSugarText = "Dispensing ";
    3b4a:	77 e0       	ldi	r23, 0x07	; 7
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	07 96       	adiw	r24, 0x07	; 7
    3b50:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
    3b54:	d7 01       	movw	r26, r14
    3b56:	5a 96       	adiw	r26, 0x1a	; 26
    3b58:	ed 91       	ld	r30, X+
    3b5a:	fc 91       	ld	r31, X
    3b5c:	5b 97       	sbiw	r26, 0x1b	; 27
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
    3b5e:	61 85       	ldd	r22, Z+9	; 0x09
    3b60:	72 85       	ldd	r23, Z+10	; 0x0a
    3b62:	ce 01       	movw	r24, r28
    3b64:	07 96       	adiw	r24, 0x07	; 7
    3b66:	0e 94 bc 38 	call	0x7178	; 0x7178 <_ZN6String6concatEi>
	unsigned char concat(const __FlashStringHelper * str);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    3b6a:	6c ec       	ldi	r22, 0xCC	; 204
    3b6c:	77 e0       	ldi	r23, 0x07	; 7
    3b6e:	ce 01       	movw	r24, r28
    3b70:	07 96       	adiw	r24, 0x07	; 7
    3b72:	0e 94 ae 38 	call	0x715c	; 0x715c <_ZN6String6concatEPKc>
				strSugarText += m_pDrink->GetSugar();
				strSugarText += " sugars\n";
				LogProcessEvent(strSugarText);
    3b76:	be 01       	movw	r22, r28
    3b78:	69 5f       	subi	r22, 0xF9	; 249
    3b7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	01 96       	adiw	r24, 0x01	; 1
    3b80:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
    3b84:	be 01       	movw	r22, r28
    3b86:	6f 5f       	subi	r22, 0xFF	; 255
    3b88:	7f 4f       	sbci	r23, 0xFF	; 255
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	47 dd       	rcall	.-1394   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3b8e:	ce 01       	movw	r24, r28
    3b90:	01 96       	adiw	r24, 0x01	; 1
    3b92:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>

				if( m_pDrink->GetSugar() > 0 )
    3b96:	d7 01       	movw	r26, r14
    3b98:	5a 96       	adiw	r26, 0x1a	; 26
    3b9a:	ed 91       	ld	r30, X+
    3b9c:	fc 91       	ld	r31, X
    3b9e:	5b 97       	sbiw	r26, 0x1b	; 27
    3ba0:	81 85       	ldd	r24, Z+9	; 0x09
    3ba2:	92 85       	ldd	r25, Z+10	; 0x0a
    3ba4:	18 16       	cp	r1, r24
    3ba6:	19 06       	cpc	r1, r25
    3ba8:	0c f0       	brlt	.+2      	; 0x3bac <_ZN11StirManager19AdvanceStateMachineEv+0x44a>
    3baa:	49 ce       	rjmp	.-878    	; 0x383e <_ZN11StirManager19AdvanceStateMachineEv+0xdc>
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
	m_State = nextState;
    3bac:	83 e0       	ldi	r24, 0x03	; 3
    3bae:	01 c0       	rjmp	.+2      	; 0x3bb2 <_ZN11StirManager19AdvanceStateMachineEv+0x450>
    3bb0:	88 e0       	ldi	r24, 0x08	; 8
    3bb2:	d7 01       	movw	r26, r14
    3bb4:	59 96       	adiw	r26, 0x19	; 25
    3bb6:	8c 93       	st	X, r24
    3bb8:	54 ce       	rjmp	.-856    	; 0x3862 <_ZN11StirManager19AdvanceStateMachineEv+0x100>
					SetTimeout(SUGAR_TIMEOUT_FULLCYCLE, SUGAR_ERR_TIMEOUT_FULLCYCLE);
				}
				else
				{
					// Cup has been removed, so abandon this drink
					ClearTimeout();
    3bba:	c7 01       	movw	r24, r14
    3bbc:	e0 dc       	rcall	.-1600   	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
    3bbe:	d7 01       	movw	r26, r14
    3bc0:	5a 96       	adiw	r26, 0x1a	; 26
    3bc2:	ed 91       	ld	r30, X+
    3bc4:	fc 91       	ld	r31, X
    3bc6:	5b 97       	sbiw	r26, 0x1b	; 27
    3bc8:	84 e0       	ldi	r24, 0x04	; 4
    3bca:	81 83       	std	Z+1, r24	; 0x01
    3bcc:	92 e0       	ldi	r25, 0x02	; 2
 					m_pDrink->SetState( Invalid );
 					response = ProcessComplete;
    3bce:	d9 2e       	mov	r13, r25
    3bd0:	95 ce       	rjmp	.-726    	; 0x38fc <_ZN11StirManager19AdvanceStateMachineEv+0x19a>
    3bd2:	8d 2d       	mov	r24, r13
			}
			break;
    } // switch            
            
	return response;
}
    3bd4:	2c 96       	adiw	r28, 0x0c	; 12
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	df 91       	pop	r29
    3be2:	cf 91       	pop	r28
    3be4:	1f 91       	pop	r17
    3be6:	0f 91       	pop	r16
    3be8:	ff 90       	pop	r15
    3bea:	ef 90       	pop	r14
    3bec:	df 90       	pop	r13
    3bee:	08 95       	ret

00003bf0 <_ZN11StirManager8ContinueEv>:
    3bf0:	0f 93       	push	r16
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::Continue()
{
    3bf2:	1f 93       	push	r17
    3bf4:	cf 93       	push	r28
    3bf6:	df 93       	push	r29
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	2c 97       	sbiw	r28, 0x0c	; 12
    3bfe:	0f b6       	in	r0, 0x3f	; 63
    3c00:	f8 94       	cli
    3c02:	de bf       	out	0x3e, r29	; 62
    3c04:	0f be       	out	0x3f, r0	; 63
    3c06:	cd bf       	out	0x3d, r28	; 61
    3c08:	fc 01       	movw	r30, r24
    3c0a:	80 8d       	ldd	r24, Z+24	; 0x18
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    3c0c:	81 30       	cpi	r24, 0x01	; 1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <_ZN11StirManager8ContinueEv+0x22>
    3c10:	42 c0       	rjmp	.+132    	; 0x3c96 <_ZN11StirManager8ContinueEv+0xa6>
    3c12:	82 30       	cpi	r24, 0x02	; 2
    3c14:	09 f4       	brne	.+2      	; 0x3c18 <_ZN11StirManager8ContinueEv+0x28>
    3c16:	3f c0       	rjmp	.+126    	; 0x3c96 <_ZN11StirManager8ContinueEv+0xa6>
    3c18:	8f 01       	movw	r16, r30
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    3c1a:	cf 01       	movw	r24, r30
    3c1c:	c8 dc       	rcall	.-1648   	; 0x35ae <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    3c1e:	81 11       	cpse	r24, r1
    3c20:	03 c0       	rjmp	.+6      	; 0x3c28 <_ZN11StirManager8ContinueEv+0x38>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    3c22:	c8 01       	movw	r24, r16
    3c24:	9e dd       	rcall	.-1220   	; 0x3762 <_ZN11StirManager19AdvanceStateMachineEv>
    3c26:	35 c0       	rjmp	.+106    	; 0x3c92 <_ZN11StirManager8ContinueEv+0xa2>
        }
        else
        {
            // Timeout has expired
            String strTimeoutText = "TIMEOUT code: ";
    3c28:	60 e0       	ldi	r22, 0x00	; 0
    3c2a:	74 e0       	ldi	r23, 0x04	; 4
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	07 96       	adiw	r24, 0x07	; 7
    3c30:	0e 94 51 38 	call	0x70a2	; 0x70a2 <_ZN6StringC1EPKc>
	String & operator += (char c)			{concat(c); return (*this);}
	String & operator += (unsigned char num)		{concat(num); return (*this);}
	String & operator += (int num)			{concat(num); return (*this);}
	String & operator += (unsigned int num)		{concat(num); return (*this);}
	String & operator += (long num)			{concat(num); return (*this);}
	String & operator += (unsigned long num)	{concat(num); return (*this);}
    3c34:	f8 01       	movw	r30, r16
    3c36:	40 89       	ldd	r20, Z+16	; 0x10
    3c38:	51 89       	ldd	r21, Z+17	; 0x11
    3c3a:	62 89       	ldd	r22, Z+18	; 0x12
    3c3c:	73 89       	ldd	r23, Z+19	; 0x13
    3c3e:	ce 01       	movw	r24, r28
    3c40:	07 96       	adiw	r24, 0x07	; 7
    3c42:	0e 94 19 39 	call	0x7232	; 0x7232 <_ZN6String6concatEm>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3c46:	be 01       	movw	r22, r28
    3c48:	69 5f       	subi	r22, 0xF9	; 249
    3c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	01 96       	adiw	r24, 0x01	; 1
    3c50:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
            strTimeoutText += GetLastError();
            strTimeoutText + "\n";
    3c54:	6a e3       	ldi	r22, 0x3A	; 58
    3c56:	7a e0       	ldi	r23, 0x0A	; 10
    3c58:	ce 01       	movw	r24, r28
    3c5a:	01 96       	adiw	r24, 0x01	; 1
    3c5c:	0e 94 88 39 	call	0x7310	; 0x7310 <_ZplRK15StringSumHelperPKc>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3c60:	ce 01       	movw	r24, r28
    3c62:	01 96       	adiw	r24, 0x01	; 1
    3c64:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            LogProcessEvent(strTimeoutText);
    3c68:	be 01       	movw	r22, r28
    3c6a:	69 5f       	subi	r22, 0xF9	; 249
    3c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c6e:	ce 01       	movw	r24, r28
    3c70:	01 96       	adiw	r24, 0x01	; 1
    3c72:	0e 94 7a 38 	call	0x70f4	; 0x70f4 <_ZN6StringC1ERKS_>
    3c76:	be 01       	movw	r22, r28
    3c78:	6f 5f       	subi	r22, 0xFF	; 255
    3c7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7c:	c8 01       	movw	r24, r16
    3c7e:	ce dc       	rcall	.-1636   	; 0x361c <_ZN18ProcessManagerBase15LogProcessEventE6String>
    3c80:	ce 01       	movw	r24, r28
    3c82:	01 96       	adiw	r24, 0x01	; 1
    3c84:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
            String strTimeoutText = "TIMEOUT code: ";
    3c88:	ce 01       	movw	r24, r28
    3c8a:	07 96       	adiw	r24, 0x07	; 7
    3c8c:	0e 94 ea 37 	call	0x6fd4	; 0x6fd4 <_ZN6StringD1Ev>
{
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
    3c90:	81 e0       	ldi	r24, 0x01	; 1
    3c92:	f8 01       	movw	r30, r16
    3c94:	80 8f       	std	Z+24, r24	; 0x18
        
        SetResponse(response);
    }
    
    return response;
}    
    3c96:	2c 96       	adiw	r28, 0x0c	; 12
    3c98:	0f b6       	in	r0, 0x3f	; 63
    3c9a:	f8 94       	cli
    3c9c:	de bf       	out	0x3e, r29	; 62
    3c9e:	0f be       	out	0x3f, r0	; 63
    3ca0:	cd bf       	out	0x3d, r28	; 61
    3ca2:	df 91       	pop	r29
    3ca4:	cf 91       	pop	r28
    3ca6:	1f 91       	pop	r17
    3ca8:	0f 91       	pop	r16
    3caa:	08 95       	ret

00003cac <_ZN11StirManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the Stir manager
//
bool StirManager::Initialise()
{
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	ec 01       	movw	r28, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    3cb6:	37 dc       	rcall	.-1938   	; 0x3526 <_ZN18ProcessManagerBase10InitialiseEv>
     
    // Create the stirrer object
    m_pStirrer = new Stirrer( m_pTeaMachine );
    3cb8:	86 e0       	ldi	r24, 0x06	; 6
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    3cc0:	8c 01       	movw	r16, r24
    3cc2:	6a 81       	ldd	r22, Y+2	; 0x02
    3cc4:	7b 81       	ldd	r23, Y+3	; 0x03
    3cc6:	16 d0       	rcall	.+44     	; 0x3cf4 <_ZN7StirrerC1EP10TeaMachine>
    3cc8:	1d 8f       	std	Y+29, r17	; 0x1d
    3cca:	0c 8f       	std	Y+28, r16	; 0x1c
    m_pStirrer->Initialise();
    3ccc:	c8 01       	movw	r24, r16
    3cce:	62 d4       	rcall	.+2244   	; 0x4594 <_ZN19TeaMachineComponent10InitialiseEv>
    3cd0:	86 e0       	ldi	r24, 0x06	; 6
     
    // Create the sugar dispenser object
    m_pSugarDispenser = new SugarDispenser( m_pTeaMachine );
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    3cd8:	8c 01       	movw	r16, r24
    3cda:	6a 81       	ldd	r22, Y+2	; 0x02
    3cdc:	7b 81       	ldd	r23, Y+3	; 0x03
    3cde:	73 d0       	rcall	.+230    	; 0x3dc6 <_ZN14SugarDispenserC1EP10TeaMachine>
    3ce0:	1f 8f       	std	Y+31, r17	; 0x1f
    3ce2:	0e 8f       	std	Y+30, r16	; 0x1e
    m_pSugarDispenser->Initialise();
    3ce4:	c8 01       	movw	r24, r16
    3ce6:	56 d4       	rcall	.+2220   	; 0x4594 <_ZN19TeaMachineComponent10InitialiseEv>
    3ce8:	81 e0       	ldi	r24, 0x01	; 1
 
    return true;
}
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	08 95       	ret

00003cf4 <_ZN7StirrerC1EP10TeaMachine>:
    3cf4:	cf 93       	push	r28
//
//	Switch off the Stirrer motor
//
void Stirrer::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_STIRRER_EN);
    3cf6:	df 93       	push	r29
    3cf8:	ec 01       	movw	r28, r24
    3cfa:	58 d4       	rcall	.+2224   	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    3cfc:	87 e0       	ldi	r24, 0x07	; 7
    3cfe:	98 e0       	ldi	r25, 0x08	; 8
    3d00:	99 83       	std	Y+1, r25	; 0x01
    3d02:	88 83       	st	Y, r24
    3d04:	df 91       	pop	r29
    3d06:	cf 91       	pop	r28
    3d08:	08 95       	ret

00003d0a <_ZN7Stirrer5RaiseEv>:
    3d0a:	cf 93       	push	r28
    3d0c:	df 93       	push	r29
    3d0e:	ec 01       	movw	r28, r24
    3d10:	65 e1       	ldi	r22, 0x15	; 21
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	8c 81       	ldd	r24, Y+4	; 0x04
    3d16:	9d 81       	ldd	r25, Y+5	; 0x05
    3d18:	64 d1       	rcall	.+712    	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
    3d1a:	66 e1       	ldi	r22, 0x16	; 22
    3d1c:	70 e0       	ldi	r23, 0x00	; 0
    3d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d20:	9d 81       	ldd	r25, Y+5	; 0x05
    3d22:	8a d1       	rcall	.+788    	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	08 95       	ret

00003d2c <_ZN7Stirrer5LowerEv>:
    3d2c:	cf 93       	push	r28
    3d2e:	df 93       	push	r29
    3d30:	ec 01       	movw	r28, r24
    3d32:	65 e1       	ldi	r22, 0x15	; 21
    3d34:	70 e0       	ldi	r23, 0x00	; 0
    3d36:	8c 81       	ldd	r24, Y+4	; 0x04
    3d38:	9d 81       	ldd	r25, Y+5	; 0x05
    3d3a:	7e d1       	rcall	.+764    	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
    3d3c:	66 e1       	ldi	r22, 0x16	; 22
    3d3e:	70 e0       	ldi	r23, 0x00	; 0
    3d40:	8c 81       	ldd	r24, Y+4	; 0x04
    3d42:	9d 81       	ldd	r25, Y+5	; 0x05
    3d44:	79 d1       	rcall	.+754    	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
    3d46:	81 e0       	ldi	r24, 0x01	; 1
    3d48:	df 91       	pop	r29
    3d4a:	cf 91       	pop	r28
    3d4c:	08 95       	ret

00003d4e <_ZN7Stirrer8IsRaisedEv>:
//
//	Returns true if the Stirrer is currently in the raised position
//
bool Stirrer::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    3d4e:	fc 01       	movw	r30, r24
    3d50:	84 81       	ldd	r24, Z+4	; 0x04
    3d52:	95 81       	ldd	r25, Z+5	; 0x05
    3d54:	d9 d0       	rcall	.+434    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_STIRRER_HILIMITSW) != 0;
}
    3d56:	89 2f       	mov	r24, r25
    3d58:	88 1f       	adc	r24, r24
    3d5a:	88 27       	eor	r24, r24
    3d5c:	88 1f       	adc	r24, r24
    3d5e:	08 95       	ret

00003d60 <_ZN7Stirrer9IsLoweredEv>:
//
//	Returns true if the Stirrer is currently in the lowered position
//
bool Stirrer::IsLowered()
{
	return digitalRead(STIRRER_LOWERED);
    3d60:	84 e2       	ldi	r24, 0x24	; 36
    3d62:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
    3d66:	21 e0       	ldi	r18, 0x01	; 1
    3d68:	89 2b       	or	r24, r25
    3d6a:	09 f4       	brne	.+2      	; 0x3d6e <_ZN7Stirrer9IsLoweredEv+0xe>
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
}
    3d6e:	82 2f       	mov	r24, r18
    3d70:	08 95       	ret

00003d72 <_ZN7Stirrer4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool Stirrer::Test()
{
    3d72:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch mode
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    3d74:	8c 81       	ldd	r24, Y+4	; 0x04
    3d76:	9d 81       	ldd	r25, Y+5	; 0x05
    3d78:	c7 d0       	rcall	.+398    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    3d7a:	93 ff       	sbrs	r25, 3
    3d7c:	12 c0       	rjmp	.+36     	; 0x3da2 <_ZN7Stirrer4TestEv+0x30>
		{
			if(IsLowered())
    3d7e:	ce 01       	movw	r24, r28
    3d80:	ef df       	rcall	.-34     	; 0x3d60 <_ZN7Stirrer9IsLoweredEv>
    3d82:	88 23       	and	r24, r24
    3d84:	41 f0       	breq	.+16     	; 0x3d96 <_ZN7Stirrer4TestEv+0x24>
			{
				Serial.print("RAISE command\n");
    3d86:	65 ee       	ldi	r22, 0xE5	; 229
    3d88:	77 e0       	ldi	r23, 0x07	; 7
    3d8a:	85 e5       	ldi	r24, 0x55	; 85
    3d8c:	9a e0       	ldi	r25, 0x0A	; 10
    3d8e:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
				
				// Raise the Stirrer
				Raise();
    3d92:	ce 01       	movw	r24, r28
			}
		
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
    3d94:	ba df       	rcall	.-140    	; 0x3d0a <_ZN7Stirrer5RaiseEv>
    3d96:	8c 81       	ldd	r24, Y+4	; 0x04
    3d98:	9d 81       	ldd	r25, Y+5	; 0x05
    3d9a:	b6 d0       	rcall	.+364    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    3d9c:	93 fd       	sbrc	r25, 3
    3d9e:	fb cf       	rjmp	.-10     	; 0x3d96 <_ZN7Stirrer4TestEv+0x24>
		}
		else
		{
			if(IsRaised())
    3da0:	e9 cf       	rjmp	.-46     	; 0x3d74 <_ZN7Stirrer4TestEv+0x2>
    3da2:	ce 01       	movw	r24, r28
    3da4:	d4 df       	rcall	.-88     	; 0x3d4e <_ZN7Stirrer8IsRaisedEv>
    3da6:	88 23       	and	r24, r24
    3da8:	41 f0       	breq	.+16     	; 0x3dba <_ZN7Stirrer4TestEv+0x48>
			{
				Serial.print("LOWER command\n");
    3daa:	64 ef       	ldi	r22, 0xF4	; 244
    3dac:	77 e0       	ldi	r23, 0x07	; 7
    3dae:	85 e5       	ldi	r24, 0x55	; 85
    3db0:	9a e0       	ldi	r25, 0x0A	; 10
    3db2:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
				
				// Lower the Stirrer
				Lower();
    3db6:	ce 01       	movw	r24, r28
    3db8:	b9 df       	rcall	.-142    	; 0x3d2c <_ZN7Stirrer5LowerEv>
			}
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
    3dba:	8c 81       	ldd	r24, Y+4	; 0x04
    3dbc:	9d 81       	ldd	r25, Y+5	; 0x05
    3dbe:	a4 d0       	rcall	.+328    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    3dc0:	93 ff       	sbrs	r25, 3
    3dc2:	fb cf       	rjmp	.-10     	; 0x3dba <_ZN7Stirrer4TestEv+0x48>
    3dc4:	d7 cf       	rjmp	.-82     	; 0x3d74 <_ZN7Stirrer4TestEv+0x2>

00003dc6 <_ZN14SugarDispenserC1EP10TeaMachine>:
    3dc6:	cf 93       	push	r28
} //SugarDispenser

//
//	Default destructor
//
SugarDispenser::~SugarDispenser()
    3dc8:	df 93       	push	r29
    3dca:	ec 01       	movw	r28, r24
    3dcc:	ef d3       	rcall	.+2014   	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    3dce:	8f e0       	ldi	r24, 0x0F	; 15
    3dd0:	98 e0       	ldi	r25, 0x08	; 8
    3dd2:	99 83       	std	Y+1, r25	; 0x01
    3dd4:	88 83       	st	Y, r24
    3dd6:	df 91       	pop	r29
    3dd8:	cf 91       	pop	r28
    3dda:	08 95       	ret

00003ddc <_ZN14SugarDispenser8DispenseEv>:
//	Dispense
//
//	Perform a dispense cycle
//
bool SugarDispenser::Dispense()
{
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_SUGAR_DISPENSE);
    3de2:	67 e1       	ldi	r22, 0x17	; 23
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	8c 81       	ldd	r24, Y+4	; 0x04
    3de8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dea:	26 d1       	rcall	.+588    	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	delay(500);
    3dec:	64 ef       	ldi	r22, 0xF4	; 244
    3dee:	71 e0       	ldi	r23, 0x01	; 1
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
	m_pSystem->ClearOutputRegisterBit(OUTREG_SUGAR_DISPENSE);
    3df8:	67 e1       	ldi	r22, 0x17	; 23
    3dfa:	70 e0       	ldi	r23, 0x00	; 0
    3dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    3e00:	f0 d0       	rcall	.+480    	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	
	return true;
}
    3e02:	81 e0       	ldi	r24, 0x01	; 1
    3e04:	df 91       	pop	r29
    3e06:	cf 91       	pop	r28
    3e08:	08 95       	ret

00003e0a <_ZN14SugarDispenser4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool SugarDispenser::Test()
{
    3e0a:	ec 01       	movw	r28, r24
	while(true)
	{
		// Wait for action switch to change state
		m_pSystem->WaitForActionSwitchChange();
    3e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3e10:	90 d1       	rcall	.+800    	; 0x4132 <_ZN6System25WaitForActionSwitchChangeEv>
	
		// Dispense the sugar
		Dispense();
    3e12:	ce 01       	movw	r24, r28
    3e14:	e3 df       	rcall	.-58     	; 0x3ddc <_ZN14SugarDispenser8DispenseEv>
    3e16:	fa cf       	rjmp	.-12     	; 0x3e0c <_ZN14SugarDispenser4TestEv+0x2>

00003e18 <_ZN14SugarDispenser10IsCompleteEv>:
//
//	Returns true if the dispense cycle has terminated
//
bool SugarDispenser::IsComplete()
{
	return (digitalRead(SUGAR_DONE) != 0);
    3e18:	89 e2       	ldi	r24, 0x29	; 41
    3e1a:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
    3e1e:	21 e0       	ldi	r18, 0x01	; 1
    3e20:	89 2b       	or	r24, r25
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <_ZN14SugarDispenser10IsCompleteEv+0xe>
    3e24:	20 e0       	ldi	r18, 0x00	; 0
}
    3e26:	82 2f       	mov	r24, r18
    3e28:	08 95       	ret

00003e2a <_ZN6SystemC1Ev>:
#include "System.h"

//
//	Default constructor
//
System::System()
    3e2a:	fc 01       	movw	r30, r24
{
	wOutputRegisterCurrentValueLow = 0;
    3e2c:	11 82       	std	Z+1, r1	; 0x01
    3e2e:	10 82       	st	Z, r1
	wOutputRegisterCurrentValueHigh = 0;
    3e30:	13 82       	std	Z+3, r1	; 0x03
    3e32:	12 82       	std	Z+2, r1	; 0x02
	m_nSystemMode = -1;
    3e34:	8f ef       	ldi	r24, 0xFF	; 255
    3e36:	9f ef       	ldi	r25, 0xFF	; 255
    3e38:	95 83       	std	Z+5, r25	; 0x05
    3e3a:	84 83       	std	Z+4, r24	; 0x04
    3e3c:	08 95       	ret

00003e3e <_ZN6SystemD1Ev>:
}

//
//	Default destructor
//
System::~System()
    3e3e:	08 95       	ret

00003e40 <_ZN6System10InitialiseEv>:
//	Initialise
//
void System::Initialise()
{
	// Initialise I/O ports
	pinMode(LED_BUILTIN, OUTPUT);
    3e40:	61 e0       	ldi	r22, 0x01	; 1
    3e42:	8d e0       	ldi	r24, 0x0D	; 13
    3e44:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(INPUTREG_CLOCK, OUTPUT);
    3e48:	61 e0       	ldi	r22, 0x01	; 1
    3e4a:	83 e0       	ldi	r24, 0x03	; 3
    3e4c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(INPUTREG_LATCH, OUTPUT);
    3e50:	61 e0       	ldi	r22, 0x01	; 1
    3e52:	84 e0       	ldi	r24, 0x04	; 4
    3e54:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(INPUTREG_DATA, INPUT);
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	85 e0       	ldi	r24, 0x05	; 5
    3e5c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(OUTPUTREG_CLOCK, OUTPUT);
    3e60:	61 e0       	ldi	r22, 0x01	; 1
    3e62:	87 e0       	ldi	r24, 0x07	; 7
    3e64:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(OUTPUTREG_LATCH, OUTPUT);
    3e68:	61 e0       	ldi	r22, 0x01	; 1
    3e6a:	86 e0       	ldi	r24, 0x06	; 6
    3e6c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(OUTPUTREG_DATA, OUTPUT);
    3e70:	61 e0       	ldi	r22, 0x01	; 1
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(SYSMODE_BIT0, INPUT);
    3e78:	60 e0       	ldi	r22, 0x00	; 0
    3e7a:	80 e2       	ldi	r24, 0x20	; 32
    3e7c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(SYSMODE_BIT1, INPUT);
    3e80:	60 e0       	ldi	r22, 0x00	; 0
    3e82:	82 e2       	ldi	r24, 0x22	; 34
    3e84:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(STIRRER_LOWERED, INPUT);
    3e88:	60 e0       	ldi	r22, 0x00	; 0
    3e8a:	84 e2       	ldi	r24, 0x24	; 36
    3e8c:	0e 94 22 37 	call	0x6e44	; 0x6e44 <pinMode>
	pinMode(SUGAR_DONE, INPUT);
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	89 e2       	ldi	r24, 0x29	; 41
    3e94:	0c 94 22 37 	jmp	0x6e44	; 0x6e44 <pinMode>

00003e98 <_ZN6System22LatchInputRegisterDataEv>:
//	Load current state of inputs into shift register ready for shifting
//
void System::LatchInputRegisterData()
{	
	// Set the latch pin high to read current state of inputs
	digitalWrite(INPUTREG_LATCH, HIGH);
    3e98:	61 e0       	ldi	r22, 0x01	; 1
    3e9a:	84 e0       	ldi	r24, 0x04	; 4
    3e9c:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
	
	// Wait a bit
	delayMicroseconds(1);
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
	
	// Set it low to allow data to be shifted out
	digitalWrite(INPUTREG_LATCH, LOW);
    3ea8:	60 e0       	ldi	r22, 0x00	; 0
    3eaa:	84 e0       	ldi	r24, 0x04	; 4
    3eac:	0c 94 5e 37 	jmp	0x6ebc	; 0x6ebc <digitalWrite>

00003eb0 <_ZN6System21ReadInputRegisterByteEv>:
//  ReadInputRegisterByte
//
//	Extract byte from shift register
//
byte System::ReadInputRegisterByte()
{
    3eb0:	ef 92       	push	r14
    3eb2:	ff 92       	push	r15
    3eb4:	1f 93       	push	r17
    3eb6:	cf 93       	push	r28
    3eb8:	df 93       	push	r29
	int nState = 0;;
	byte myDataIn = 0;

	for ( int nBit=7; nBit >= 0 ; nBit-- )
    3eba:	c7 e0       	ldi	r28, 0x07	; 7
    3ebc:	d0 e0       	ldi	r29, 0x00	; 0
//	Extract byte from shift register
//
byte System::ReadInputRegisterByte()
{
	int nState = 0;;
	byte myDataIn = 0;
    3ebe:	10 e0       	ldi	r17, 0x00	; 0
		digitalWrite(INPUTREG_CLOCK, 0);
		delayMicroseconds(2);
		if(digitalRead(INPUTREG_DATA)) 
		{
			nState = 1;
			myDataIn = myDataIn | (1 << nBit);
    3ec0:	ee 24       	eor	r14, r14
    3ec2:	e3 94       	inc	r14
    3ec4:	f1 2c       	mov	r15, r1
	int nState = 0;;
	byte myDataIn = 0;

	for ( int nBit=7; nBit >= 0 ; nBit-- )
	{
		digitalWrite(INPUTREG_CLOCK, 0);
    3ec6:	60 e0       	ldi	r22, 0x00	; 0
    3ec8:	83 e0       	ldi	r24, 0x03	; 3
    3eca:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
		delayMicroseconds(2);
    3ece:	82 e0       	ldi	r24, 0x02	; 2
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	0e 94 60 36 	call	0x6cc0	; 0x6cc0 <delayMicroseconds>
		if(digitalRead(INPUTREG_DATA)) 
    3ed6:	85 e0       	ldi	r24, 0x05	; 5
    3ed8:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
    3edc:	89 2b       	or	r24, r25
    3ede:	39 f0       	breq	.+14     	; 0x3eee <_ZN6System21ReadInputRegisterByteEv+0x3e>
		{
			nState = 1;
			myDataIn = myDataIn | (1 << nBit);
    3ee0:	c7 01       	movw	r24, r14
    3ee2:	0c 2e       	mov	r0, r28
    3ee4:	01 c0       	rjmp	.+2      	; 0x3ee8 <_ZN6System21ReadInputRegisterByteEv+0x38>
    3ee6:	88 0f       	add	r24, r24
    3ee8:	0a 94       	dec	r0
    3eea:	ea f7       	brpl	.-6      	; 0x3ee6 <_ZN6System21ReadInputRegisterByteEv+0x36>
    3eec:	18 2b       	or	r17, r24
		else 
		{
			nState = 0;
		}

		digitalWrite(INPUTREG_CLOCK, 1);
    3eee:	61 e0       	ldi	r22, 0x01	; 1
    3ef0:	83 e0       	ldi	r24, 0x03	; 3
    3ef2:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
byte System::ReadInputRegisterByte()
{
	int nState = 0;;
	byte myDataIn = 0;

	for ( int nBit=7; nBit >= 0 ; nBit-- )
    3ef6:	21 97       	sbiw	r28, 0x01	; 1
    3ef8:	30 f7       	brcc	.-52     	; 0x3ec6 <_ZN6System21ReadInputRegisterByteEv+0x16>

		digitalWrite(INPUTREG_CLOCK, 1);
	}

	return myDataIn;
}
    3efa:	81 2f       	mov	r24, r17
    3efc:	df 91       	pop	r29
    3efe:	cf 91       	pop	r28
    3f00:	1f 91       	pop	r17
    3f02:	ff 90       	pop	r15
    3f04:	ef 90       	pop	r14
    3f06:	08 95       	ret

00003f08 <_ZN6System21ReadInputRegisterDataEv>:
//  ReadInputRegisterData
//
//	Extract data from shift register
//
word System::ReadInputRegisterData()
{
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	8c 01       	movw	r16, r24
    LatchInputRegisterData();
    3f10:	c3 df       	rcall	.-122    	; 0x3e98 <_ZN6System22LatchInputRegisterDataEv>
    
    byte lowByteMain = ReadInputRegisterByte();
    3f12:	c8 01       	movw	r24, r16
    3f14:	cd df       	rcall	.-102    	; 0x3eb0 <_ZN6System21ReadInputRegisterByteEv>
    3f16:	c8 2f       	mov	r28, r24
    byte hiByteMain = ReadInputRegisterByte();
    3f18:	c8 01       	movw	r24, r16
    3f1a:	ca df       	rcall	.-108    	; 0x3eb0 <_ZN6System21ReadInputRegisterByteEv>
    3f1c:	2c 2f       	mov	r18, r28
    
    return lowByteMain | (hiByteMain << 8);
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	a9 01       	movw	r20, r18
}
    3f22:	58 2b       	or	r21, r24
    3f24:	ca 01       	movw	r24, r20
    3f26:	cf 91       	pop	r28
    3f28:	1f 91       	pop	r17
    3f2a:	0f 91       	pop	r16
    3f2c:	08 95       	ret

00003f2e <_ZN6System21ReadInputRegisterDataEPhS0_>:
    3f2e:	cf 92       	push	r12
//  ReadInputRegisterData
//
//	Extract data from shift register including user control settings
//
word System::ReadInputRegisterData( byte *pControlsLow, byte *pControlsHigh )
{
    3f30:	df 92       	push	r13
    3f32:	ef 92       	push	r14
    3f34:	ff 92       	push	r15
    3f36:	0f 93       	push	r16
    3f38:	1f 93       	push	r17
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	ec 01       	movw	r28, r24
    3f40:	6b 01       	movw	r12, r22
    3f42:	7a 01       	movw	r14, r20
    LatchInputRegisterData();
    3f44:	a9 df       	rcall	.-174    	; 0x3e98 <_ZN6System22LatchInputRegisterDataEv>
    
    byte lowByteMain = ReadInputRegisterByte();
    3f46:	ce 01       	movw	r24, r28
    3f48:	b3 df       	rcall	.-154    	; 0x3eb0 <_ZN6System21ReadInputRegisterByteEv>
    3f4a:	18 2f       	mov	r17, r24
    byte hiByteMain = ReadInputRegisterByte();
    3f4c:	ce 01       	movw	r24, r28
    3f4e:	b0 df       	rcall	.-160    	; 0x3eb0 <_ZN6System21ReadInputRegisterByteEv>
    3f50:	08 2f       	mov	r16, r24
    *pControlsLow = ReadInputRegisterByte();
    3f52:	ce 01       	movw	r24, r28
    3f54:	ad df       	rcall	.-166    	; 0x3eb0 <_ZN6System21ReadInputRegisterByteEv>
    3f56:	f6 01       	movw	r30, r12
    3f58:	80 83       	st	Z, r24
    *pControlsHigh = ReadInputRegisterByte();
    3f5a:	ce 01       	movw	r24, r28
    3f5c:	a9 df       	rcall	.-174    	; 0x3eb0 <_ZN6System21ReadInputRegisterByteEv>
    3f5e:	f7 01       	movw	r30, r14
    3f60:	80 83       	st	Z, r24
    3f62:	81 2f       	mov	r24, r17
    
    return lowByteMain | (hiByteMain << 8);
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	90 2b       	or	r25, r16
}
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	ff 90       	pop	r15
    3f72:	ef 90       	pop	r14
    3f74:	df 90       	pop	r13
    3f76:	cf 90       	pop	r12
    3f78:	08 95       	ret

00003f7a <_ZN6System23WriteOutputRegisterDataEjj>:
    3f7a:	ef 92       	push	r14

//
//	WriteOutputRegisterData
//	
void System::WriteOutputRegisterData(word wHighData, word wLowData)
{
    3f7c:	ff 92       	push	r15
    3f7e:	0f 93       	push	r16
    3f80:	1f 93       	push	r17
    3f82:	cf 93       	push	r28
    3f84:	df 93       	push	r29
    3f86:	ec 01       	movw	r28, r24
    3f88:	7b 01       	movw	r14, r22
    3f8a:	8a 01       	movw	r16, r20
   digitalWrite(OUTPUTREG_LATCH, LOW);
    3f8c:	60 e0       	ldi	r22, 0x00	; 0
    3f8e:	86 e0       	ldi	r24, 0x06	; 6
    3f90:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wHighData>>8);
    3f94:	2f 2d       	mov	r18, r15
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	67 e0       	ldi	r22, 0x07	; 7
    3f9a:	82 e0       	ldi	r24, 0x02	; 2
    3f9c:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wHighData);
    3fa0:	2e 2d       	mov	r18, r14
    3fa2:	40 e0       	ldi	r20, 0x00	; 0
    3fa4:	67 e0       	ldi	r22, 0x07	; 7
    3fa6:	82 e0       	ldi	r24, 0x02	; 2
    3fa8:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wLowData>>8);
    3fac:	21 2f       	mov	r18, r17
    3fae:	40 e0       	ldi	r20, 0x00	; 0
    3fb0:	67 e0       	ldi	r22, 0x07	; 7
    3fb2:	82 e0       	ldi	r24, 0x02	; 2
    3fb4:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wLowData);
    3fb8:	20 2f       	mov	r18, r16
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	67 e0       	ldi	r22, 0x07	; 7
    3fbe:	82 e0       	ldi	r24, 0x02	; 2
    3fc0:	0e 94 b4 37 	call	0x6f68	; 0x6f68 <shiftOut>
   digitalWrite(OUTPUTREG_LATCH, HIGH);
    3fc4:	61 e0       	ldi	r22, 0x01	; 1
    3fc6:	86 e0       	ldi	r24, 0x06	; 6
    3fc8:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <digitalWrite>
   wOutputRegisterCurrentValueHigh = wHighData;
    3fcc:	ea 82       	std	Y+2, r14	; 0x02
    3fce:	fb 82       	std	Y+3, r15	; 0x03
   wOutputRegisterCurrentValueLow = wLowData;
    3fd0:	08 83       	st	Y, r16
    3fd2:	19 83       	std	Y+1, r17	; 0x01
}
    3fd4:	df 91       	pop	r29
    3fd6:	cf 91       	pop	r28
    3fd8:	1f 91       	pop	r17
    3fda:	0f 91       	pop	r16
    3fdc:	ff 90       	pop	r15
    3fde:	ef 90       	pop	r14
    3fe0:	08 95       	ret

00003fe2 <_ZN6System22ClearOutputRegisterBitEj>:
//  ClearOutputRegisterBit
//
//	Clear a specified bit in the output register
//
void System::ClearOutputRegisterBit(unsigned int nBitNumber)
{
    3fe2:	fc 01       	movw	r30, r24
    if( nBitNumber > 15 )
    3fe4:	60 31       	cpi	r22, 0x10	; 16
    3fe6:	71 05       	cpc	r23, r1
    3fe8:	90 f0       	brcs	.+36     	; 0x400e <_ZN6System22ClearOutputRegisterBitEj+0x2c>
    {
        // Clear bit in high word
        wOutputRegisterCurrentValueHigh &= ((1 << (nBitNumber-16)) ^ 0xFFFF);
    3fea:	60 51       	subi	r22, 0x10	; 16
    3fec:	71 09       	sbc	r23, r1
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	02 c0       	rjmp	.+4      	; 0x3ff8 <_ZN6System22ClearOutputRegisterBitEj+0x16>
    3ff4:	88 0f       	add	r24, r24
    3ff6:	99 1f       	adc	r25, r25
    3ff8:	6a 95       	dec	r22
    3ffa:	e2 f7       	brpl	.-8      	; 0x3ff4 <_ZN6System22ClearOutputRegisterBitEj+0x12>
    3ffc:	80 95       	com	r24
    3ffe:	90 95       	com	r25
    4000:	22 81       	ldd	r18, Z+2	; 0x02
    4002:	33 81       	ldd	r19, Z+3	; 0x03
    4004:	82 23       	and	r24, r18
    4006:	93 23       	and	r25, r19
    4008:	93 83       	std	Z+3, r25	; 0x03
    400a:	82 83       	std	Z+2, r24	; 0x02
    400c:	0f c0       	rjmp	.+30     	; 0x402c <_ZN6System22ClearOutputRegisterBitEj+0x4a>
    }
    else
    {
        // Clear bit in low word
        wOutputRegisterCurrentValueLow &= ((1 << nBitNumber) ^ 0xFFFF);
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	02 c0       	rjmp	.+4      	; 0x4018 <_ZN6System22ClearOutputRegisterBitEj+0x36>
    4014:	88 0f       	add	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	6a 95       	dec	r22
    401a:	e2 f7       	brpl	.-8      	; 0x4014 <_ZN6System22ClearOutputRegisterBitEj+0x32>
    401c:	80 95       	com	r24
    401e:	90 95       	com	r25
    4020:	20 81       	ld	r18, Z
    4022:	31 81       	ldd	r19, Z+1	; 0x01
    4024:	82 23       	and	r24, r18
    4026:	93 23       	and	r25, r19
    4028:	91 83       	std	Z+1, r25	; 0x01
    402a:	80 83       	st	Z, r24
    }

    WriteOutputRegisterData(wOutputRegisterCurrentValueHigh, wOutputRegisterCurrentValueLow);
    402c:	40 81       	ld	r20, Z
    402e:	51 81       	ldd	r21, Z+1	; 0x01
    4030:	62 81       	ldd	r22, Z+2	; 0x02
    4032:	73 81       	ldd	r23, Z+3	; 0x03
    4034:	cf 01       	movw	r24, r30
    4036:	a1 cf       	rjmp	.-190    	; 0x3f7a <_ZN6System23WriteOutputRegisterDataEjj>

00004038 <_ZN6System20SetOutputRegisterBitEj>:
//  SetOutputRegisterBit
//
//  Set a specified bit in the output register
//
void System::SetOutputRegisterBit(unsigned int nBitNumber)
{
    4038:	fc 01       	movw	r30, r24
    if( nBitNumber > 15 )
    403a:	60 31       	cpi	r22, 0x10	; 16
    403c:	71 05       	cpc	r23, r1
    403e:	80 f0       	brcs	.+32     	; 0x4060 <_ZN6System20SetOutputRegisterBitEj+0x28>
    {
        // Set bit in high word
        wOutputRegisterCurrentValueHigh |= 1 << (nBitNumber-16);
    4040:	60 51       	subi	r22, 0x10	; 16
    4042:	71 09       	sbc	r23, r1
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	02 c0       	rjmp	.+4      	; 0x404e <_ZN6System20SetOutputRegisterBitEj+0x16>
    404a:	88 0f       	add	r24, r24
    404c:	99 1f       	adc	r25, r25
    404e:	6a 95       	dec	r22
    4050:	e2 f7       	brpl	.-8      	; 0x404a <_ZN6System20SetOutputRegisterBitEj+0x12>
    4052:	22 81       	ldd	r18, Z+2	; 0x02
    4054:	33 81       	ldd	r19, Z+3	; 0x03
    4056:	82 2b       	or	r24, r18
    4058:	93 2b       	or	r25, r19
    405a:	93 83       	std	Z+3, r25	; 0x03
    405c:	82 83       	std	Z+2, r24	; 0x02
    405e:	0d c0       	rjmp	.+26     	; 0x407a <_ZN6System20SetOutputRegisterBitEj+0x42>
    }
    else
    {
        // Set bit in low word
        wOutputRegisterCurrentValueLow |= 1 << nBitNumber;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	02 c0       	rjmp	.+4      	; 0x406a <_ZN6System20SetOutputRegisterBitEj+0x32>
    4066:	88 0f       	add	r24, r24
    4068:	99 1f       	adc	r25, r25
    406a:	6a 95       	dec	r22
    406c:	e2 f7       	brpl	.-8      	; 0x4066 <_ZN6System20SetOutputRegisterBitEj+0x2e>
    406e:	20 81       	ld	r18, Z
    4070:	31 81       	ldd	r19, Z+1	; 0x01
    4072:	82 2b       	or	r24, r18
    4074:	93 2b       	or	r25, r19
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	80 83       	st	Z, r24
    }

    WriteOutputRegisterData(wOutputRegisterCurrentValueHigh, wOutputRegisterCurrentValueLow);
    407a:	40 81       	ld	r20, Z
    407c:	51 81       	ldd	r21, Z+1	; 0x01
    407e:	62 81       	ldd	r22, Z+2	; 0x02
    4080:	73 81       	ldd	r23, Z+3	; 0x03
    4082:	cf 01       	movw	r24, r30
    4084:	7a cf       	rjmp	.-268    	; 0x3f7a <_ZN6System23WriteOutputRegisterDataEjj>

00004086 <_ZN6System22SetOutRegisterBitGroupEji>:
    // Create mask for bit group and clear current setting
    word bitGroupMask = (0xF << nBitGroupLSB) ^ 0xFFFF;
    wOutputRegisterCurrentValueLow &= bitGroupMask;
    
    // Place the new setting in the bit group
    wOutputRegisterCurrentValueLow |= newValue << (nBitGroupLSB & 0xF);
    4086:	2f e0       	ldi	r18, 0x0F	; 15
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	06 2e       	mov	r0, r22
    408c:	02 c0       	rjmp	.+4      	; 0x4092 <_ZN6System22SetOutRegisterBitGroupEji+0xc>
    408e:	22 0f       	add	r18, r18
    4090:	33 1f       	adc	r19, r19
    4092:	0a 94       	dec	r0
    4094:	e2 f7       	brpl	.-8      	; 0x408e <_ZN6System22SetOutRegisterBitGroupEji+0x8>
    4096:	20 95       	com	r18
    4098:	30 95       	com	r19
    409a:	dc 01       	movw	r26, r24
    409c:	ed 91       	ld	r30, X+
    409e:	fc 91       	ld	r31, X
    40a0:	11 97       	sbiw	r26, 0x01	; 1
    40a2:	2e 23       	and	r18, r30
    40a4:	3f 23       	and	r19, r31
    40a6:	6f 70       	andi	r22, 0x0F	; 15
    40a8:	77 27       	eor	r23, r23
    40aa:	02 c0       	rjmp	.+4      	; 0x40b0 <_ZN6System22SetOutRegisterBitGroupEji+0x2a>
    40ac:	44 0f       	add	r20, r20
    40ae:	55 1f       	adc	r21, r21
    40b0:	6a 95       	dec	r22
    40b2:	e2 f7       	brpl	.-8      	; 0x40ac <_ZN6System22SetOutRegisterBitGroupEji+0x26>
    40b4:	42 2b       	or	r20, r18
    40b6:	53 2b       	or	r21, r19
    40b8:	11 96       	adiw	r26, 0x01	; 1
    40ba:	5c 93       	st	X, r21
    40bc:	4e 93       	st	-X, r20
    
    // Update the output register
    WriteOutputRegisterData(wOutputRegisterCurrentValueHigh, wOutputRegisterCurrentValueLow);
    40be:	12 96       	adiw	r26, 0x02	; 2
    40c0:	6d 91       	ld	r22, X+
    40c2:	7c 91       	ld	r23, X
    40c4:	13 97       	sbiw	r26, 0x03	; 3
    40c6:	59 cf       	rjmp	.-334    	; 0x3f7a <_ZN6System23WriteOutputRegisterDataEjj>

000040c8 <_ZN6System14ReadSystemModeEv>:
//  ReadSystemMode
//
//	Read the two-bit system mode
//
int System::ReadSystemMode()
{
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	8c 01       	movw	r16, r24
	int nSysMode0 = digitalRead(SYSMODE_BIT0);
    40d2:	80 e2       	ldi	r24, 0x20	; 32
    40d4:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
    40d8:	ec 01       	movw	r28, r24
	int nSysMode1 = digitalRead(SYSMODE_BIT1);
    40da:	82 e2       	ldi	r24, 0x22	; 34
    40dc:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
	
	m_nSystemMode = nSysMode0 + (nSysMode1 * 2);
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	8c 0f       	add	r24, r28
    40e6:	9d 1f       	adc	r25, r29
    40e8:	f8 01       	movw	r30, r16
    40ea:	95 83       	std	Z+5, r25	; 0x05
    40ec:	84 83       	std	Z+4, r24	; 0x04
	
	return m_nSystemMode;
}
    40ee:	df 91       	pop	r29
    40f0:	cf 91       	pop	r28
    40f2:	1f 91       	pop	r17
    40f4:	0f 91       	pop	r16
    40f6:	08 95       	ret

000040f8 <_ZN6System20SystemModeHasChangedEv>:
//  SystemModeHasChanged
//
//	Read the two-bit system mode to see if it has changed
//
bool System::SystemModeHasChanged()
{
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	8c 01       	movw	r16, r24
	int nSysMode0 = digitalRead(SYSMODE_BIT0);
    4102:	80 e2       	ldi	r24, 0x20	; 32
    4104:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
    4108:	ec 01       	movw	r28, r24
	int nSysMode1 = digitalRead(SYSMODE_BIT1);
    410a:	82 e2       	ldi	r24, 0x22	; 34
    410c:	0e 94 8c 37 	call	0x6f18	; 0x6f18 <digitalRead>
	
	return ((nSysMode0 + (nSysMode1 * 2)) != m_nSystemMode);
    4110:	88 0f       	add	r24, r24
    4112:	99 1f       	adc	r25, r25
    4114:	c8 0f       	add	r28, r24
    4116:	d9 1f       	adc	r29, r25
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	f8 01       	movw	r30, r16
    411c:	24 81       	ldd	r18, Z+4	; 0x04
    411e:	35 81       	ldd	r19, Z+5	; 0x05
    4120:	c2 17       	cp	r28, r18
    4122:	d3 07       	cpc	r29, r19
    4124:	09 f4       	brne	.+2      	; 0x4128 <_ZN6System20SystemModeHasChangedEv+0x30>
    4126:	80 e0       	ldi	r24, 0x00	; 0
}
    4128:	df 91       	pop	r29
    412a:	cf 91       	pop	r28
    412c:	1f 91       	pop	r17
    412e:	0f 91       	pop	r16
    4130:	08 95       	ret

00004132 <_ZN6System25WaitForActionSwitchChangeEv>:
//  WaitForActionSwitchChange
//
//	Wait for the state of the Action switch to change
//
void System::WaitForActionSwitchChange()
{
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	ec 01       	movw	r28, r24
	// Read the current state
	word wCurrentState = ReadInputRegisterData() & INREGMASK_ACTIONSWITCH;
    413c:	e5 de       	rcall	.-566    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    413e:	8c 01       	movw	r16, r24
    4140:	00 27       	eor	r16, r16
    4142:	18 70       	andi	r17, 0x08	; 8
	
	// Wait for it to change
	while((ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == wCurrentState);
    4144:	ce 01       	movw	r24, r28
    4146:	e0 de       	rcall	.-576    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    4148:	88 27       	eor	r24, r24
    414a:	98 70       	andi	r25, 0x08	; 8
    414c:	08 17       	cp	r16, r24
    414e:	19 07       	cpc	r17, r25
    4150:	c9 f3       	breq	.-14     	; 0x4144 <_ZN6System25WaitForActionSwitchChangeEv+0x12>
}
    4152:	df 91       	pop	r29
    4154:	cf 91       	pop	r28
    4156:	1f 91       	pop	r17
    4158:	0f 91       	pop	r16
    415a:	08 95       	ret

0000415c <_ZN10TeaMachine10InitialiseEv>:

//
//	Initialise system
//
bool TeaMachine::Initialise()
{
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	ec 01       	movw	r28, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    4162:	26 e0       	ldi	r18, 0x06	; 6
    4164:	40 e8       	ldi	r20, 0x80	; 128
    4166:	55 e2       	ldi	r21, 0x25	; 37
    4168:	60 e0       	ldi	r22, 0x00	; 0
    416a:	70 e0       	ldi	r23, 0x00	; 0
    416c:	85 e5       	ldi	r24, 0x55	; 85
    416e:	9a e0       	ldi	r25, 0x0A	; 10
    4170:	0e 94 89 32 	call	0x6512	; 0x6512 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(SERIAL_BAUDRATE);
	
	// Initialise system object
	GetSystem()->Initialise();
    4174:	ce 01       	movw	r24, r28
    4176:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    417a:	62 de       	rcall	.-828    	; 0x3e40 <_ZN6System10InitialiseEv>

	// Fetch system mode
	m_nSystemMode = GetSystem()->ReadSystemMode();
    417c:	ce 01       	movw	r24, r28
    417e:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    4182:	a2 df       	rcall	.-188    	; 0x40c8 <_ZN6System14ReadSystemModeEv>
    4184:	9d 83       	std	Y+5, r25	; 0x05
    4186:	8c 83       	std	Y+4, r24	; 0x04
	Serial.print("System mode: ");
    4188:	63 e1       	ldi	r22, 0x13	; 19
    418a:	78 e0       	ldi	r23, 0x08	; 8
    418c:	85 e5       	ldi	r24, 0x55	; 85
    418e:	9a e0       	ldi	r25, 0x0A	; 10
    4190:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
	Serial.println(m_nSystemMode);
    4194:	6c 81       	ldd	r22, Y+4	; 0x04
    4196:	7d 81       	ldd	r23, Y+5	; 0x05
    4198:	4a e0       	ldi	r20, 0x0A	; 10
    419a:	50 e0       	ldi	r21, 0x00	; 0
    419c:	85 e5       	ldi	r24, 0x55	; 85
    419e:	9a e0       	ldi	r25, 0x0A	; 10
    41a0:	0e 94 88 34 	call	0x6910	; 0x6910 <_ZN5Print7printlnEji>
	
	if(m_nSystemMode == SYSMODE_NORMAL)
    41a4:	8c 81       	ldd	r24, Y+4	; 0x04
    41a6:	9d 81       	ldd	r25, Y+5	; 0x05
    41a8:	89 2b       	or	r24, r25
    41aa:	39 f4       	brne	.+14     	; 0x41ba <_ZN10TeaMachine10InitialiseEv+0x5e>
	{
		// Normal mode: Switch 'Normal' LED on and 'Test' LED off
		GetSystem()->ClearOutputRegisterBit(OUTREG_LED_TESTMODE);
    41ac:	ce 01       	movw	r24, r28
    41ae:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    41b2:	65 e0       	ldi	r22, 0x05	; 5
    41b4:	70 e0       	ldi	r23, 0x00	; 0
    41b6:	15 df       	rcall	.-470    	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
    41b8:	06 c0       	rjmp	.+12     	; 0x41c6 <_ZN10TeaMachine10InitialiseEv+0x6a>
	}
	else
	{
		// Switch 'Test' LED on and 'Normal' LED off
		GetSystem()->SetOutputRegisterBit(OUTREG_LED_TESTMODE);
    41ba:	ce 01       	movw	r24, r28
    41bc:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    41c0:	65 e0       	ldi	r22, 0x05	; 5
    41c2:	70 e0       	ldi	r23, 0x00	; 0
    41c4:	39 df       	rcall	.-398    	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	}
		
	// Switch off 'Fault' LED
	GetSystem()->SetOutputRegisterBit(OUTREG_LED_FAULT);
    41c6:	ce 01       	movw	r24, r28
    41c8:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    41cc:	64 e0       	ldi	r22, 0x04	; 4
    41ce:	70 e0       	ldi	r23, 0x00	; 0
    41d0:	33 df       	rcall	.-410    	; 0x4038 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	df 91       	pop	r29
    41d6:	cf 91       	pop	r28
    41d8:	08 95       	ret

000041da <_ZN10TeaMachineC1Ev>:
#include "SugarDispenser.h"

//
//	Default constructor
//
TeaMachine::TeaMachine()
    41da:	cf 93       	push	r28
    41dc:	df 93       	push	r29
    41de:	ec 01       	movw	r28, r24
    41e0:	0e 94 96 02 	call	0x52c	; 0x52c <_ZN21ATMegaApplicationBaseC1Ev>
    41e4:	81 e3       	ldi	r24, 0x31	; 49
    41e6:	98 e0       	ldi	r25, 0x08	; 8
    41e8:	99 83       	std	Y+1, r25	; 0x01
    41ea:	88 83       	st	Y, r24
{
	m_nTestCode = SYSMODE_NORMAL;
    41ec:	1f 82       	std	Y+7, r1	; 0x07
    41ee:	1e 82       	std	Y+6, r1	; 0x06
}
    41f0:	df 91       	pop	r29
    41f2:	cf 91       	pop	r28
    41f4:	08 95       	ret

000041f6 <_ZN10TeaMachineD1Ev>:

//
//	Default destructor
//
TeaMachine::~TeaMachine()
    41f6:	21 e3       	ldi	r18, 0x31	; 49
    41f8:	38 e0       	ldi	r19, 0x08	; 8
    41fa:	fc 01       	movw	r30, r24
    41fc:	31 83       	std	Z+1, r19	; 0x01
    41fe:	20 83       	st	Z, r18
    4200:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_ZN21ATMegaApplicationBaseD1Ev>

00004204 <_ZN10TeaMachine18ExecuteGroup2TestsEv>:
//	ExecuteGroup2Tests
//
//	Run process tests (Group 2)
//
void TeaMachine::ExecuteGroup2Tests()
{
    4204:	0f 93       	push	r16
    4206:	1f 93       	push	r17
    4208:	cf 93       	push	r28
    420a:	df 93       	push	r29
    420c:	cd b7       	in	r28, 0x3d	; 61
    420e:	de b7       	in	r29, 0x3e	; 62
    4210:	ac 97       	sbiw	r28, 0x2c	; 44
    4212:	0f b6       	in	r0, 0x3f	; 63
    4214:	f8 94       	cli
    4216:	de bf       	out	0x3e, r29	; 62
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	cd bf       	out	0x3d, r28	; 61
    421c:	8c 01       	movw	r16, r24
	TeaMachineController controller(this);
    421e:	bc 01       	movw	r22, r24
    4220:	ce 01       	movw	r24, r28
    4222:	01 96       	adiw	r24, 0x01	; 1
    4224:	f2 d1       	rcall	.+996    	; 0x460a <_ZN20TeaMachineControllerC1EP10TeaMachine>
	
	// Fetch test code
	m_nTestCode = GetSystem()->ReadInputRegisterData() & INREGMASK_MODE;
    4226:	c8 01       	movw	r24, r16
    4228:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    422c:	6d de       	rcall	.-806    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    422e:	8f 70       	andi	r24, 0x0F	; 15
    4230:	99 27       	eor	r25, r25
    4232:	f8 01       	movw	r30, r16
    4234:	97 83       	std	Z+7, r25	; 0x07
    4236:	86 83       	std	Z+6, r24	; 0x06
	
	Serial.print("Test code: ");
    4238:	61 e2       	ldi	r22, 0x21	; 33
    423a:	78 e0       	ldi	r23, 0x08	; 8
    423c:	85 e5       	ldi	r24, 0x55	; 85
    423e:	9a e0       	ldi	r25, 0x0A	; 10
    4240:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
	Serial.println(m_nTestCode);
    4244:	f8 01       	movw	r30, r16
    4246:	66 81       	ldd	r22, Z+6	; 0x06
    4248:	77 81       	ldd	r23, Z+7	; 0x07
    424a:	4a e0       	ldi	r20, 0x0A	; 10
    424c:	50 e0       	ldi	r21, 0x00	; 0
    424e:	85 e5       	ldi	r24, 0x55	; 85
    4250:	9a e0       	ldi	r25, 0x0A	; 10
    4252:	0e 94 88 34 	call	0x6910	; 0x6910 <_ZN5Print7printlnEji>
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
    4256:	f8 01       	movw	r30, r16
    4258:	86 81       	ldd	r24, Z+6	; 0x06
    425a:	97 81       	ldd	r25, Z+7	; 0x07
    425c:	82 30       	cpi	r24, 0x02	; 2
    425e:	91 05       	cpc	r25, r1
    4260:	81 f0       	breq	.+32     	; 0x4282 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x7e>
    4262:	30 f4       	brcc	.+12     	; 0x4270 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x6c>
    4264:	00 97       	sbiw	r24, 0x00	; 0
    4266:	59 f0       	breq	.+22     	; 0x427e <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x7a>
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	89 f4       	brne	.+34     	; 0x428e <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x8a>
		case TESTCODE_INSERVICE_WITHLOGGING:
		controller.Start(ControllerMode_InServiceWithLogging);
		break;
		
		case TESTCODE_USERINTERFACE:
		controller.Start(ControllerMode_TestUserInterface);
    426c:	61 e0       	ldi	r22, 0x01	; 1
    426e:	0c c0       	rjmp	.+24     	; 0x4288 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x84>
	
	Serial.print("Test code: ");
	Serial.println(m_nTestCode);
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
    4270:	83 30       	cpi	r24, 0x03	; 3
    4272:	91 05       	cpc	r25, r1
    4274:	41 f0       	breq	.+16     	; 0x4286 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x82>
    4276:	04 97       	sbiw	r24, 0x04	; 4
    4278:	51 f4       	brne	.+20     	; 0x428e <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x8a>
		case TESTCODE_MILKPROCESS:
		controller.Start(ControllerMode_TestMilkManager);
		break;
		
		case TESTCODE_STIRPROCESS:
		controller.Start(ControllerMode_TestStirManager);
    427a:	64 e0       	ldi	r22, 0x04	; 4
    427c:	05 c0       	rjmp	.+10     	; 0x4288 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x84>
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
	{		
		case TESTCODE_INSERVICE_WITHLOGGING:
		controller.Start(ControllerMode_InServiceWithLogging);
    427e:	60 e0       	ldi	r22, 0x00	; 0
    4280:	03 c0       	rjmp	.+6      	; 0x4288 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x84>
		case TESTCODE_USERINTERFACE:
		controller.Start(ControllerMode_TestUserInterface);
		break;
		
		case TESTCODE_BREWPROCESS:
		controller.Start(ControllerMode_TestBrewManager);
    4282:	62 e0       	ldi	r22, 0x02	; 2
    4284:	01 c0       	rjmp	.+2      	; 0x4288 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0x84>
		break;
		
		case TESTCODE_MILKPROCESS:
		controller.Start(ControllerMode_TestMilkManager);
    4286:	63 e0       	ldi	r22, 0x03	; 3
		break;
		
		case TESTCODE_STIRPROCESS:
		controller.Start(ControllerMode_TestStirManager);
    4288:	ce 01       	movw	r24, r28
    428a:	01 96       	adiw	r24, 0x01	; 1
    428c:	e1 d6       	rcall	.+3522   	; 0x5050 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode>
//
//	Run process tests (Group 2)
//
void TeaMachine::ExecuteGroup2Tests()
{
	TeaMachineController controller(this);
    428e:	ce 01       	movw	r24, r28
    4290:	01 96       	adiw	r24, 0x01	; 1
    4292:	9e d1       	rcall	.+828    	; 0x45d0 <_ZN20TeaMachineControllerD1Ev>
    4294:	ac 96       	adiw	r28, 0x2c	; 44
		
		case TESTCODE_STIRPROCESS:
		controller.Start(ControllerMode_TestStirManager);
		break;
	} // switch
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	08 95       	ret

000042aa <_ZN10TeaMachine18ExecuteGroup1TestsEv>:
    42aa:	0f 93       	push	r16
//	ExecuteGroup1Tests
//
//	Run device tests (Group 1)
//
bool TeaMachine::ExecuteGroup1Tests()
{
    42ac:	1f 93       	push	r17
    42ae:	cf 93       	push	r28
    42b0:	df 93       	push	r29
    42b2:	8c 01       	movw	r16, r24
	bool bResult = false;
	Boiler *pBoilerUnderTest = NULL;
	TeaMachineComponent *pComponentUnderTest = NULL;
	
	// Fetch test code
	m_nTestCode = GetSystem()->ReadInputRegisterData() & INREGMASK_MODE;
    42b4:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    42b8:	27 de       	rcall	.-946    	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    42ba:	8f 70       	andi	r24, 0x0F	; 15
    42bc:	99 27       	eor	r25, r25
    42be:	d8 01       	movw	r26, r16
    42c0:	17 96       	adiw	r26, 0x07	; 7
    42c2:	9c 93       	st	X, r25
    42c4:	8e 93       	st	-X, r24
    42c6:	16 97       	sbiw	r26, 0x06	; 6
	
	Serial.print("Test code: ");
    42c8:	61 e2       	ldi	r22, 0x21	; 33
    42ca:	78 e0       	ldi	r23, 0x08	; 8
    42cc:	85 e5       	ldi	r24, 0x55	; 85
    42ce:	9a e0       	ldi	r25, 0x0A	; 10
    42d0:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
	Serial.println(m_nTestCode);
    42d4:	f8 01       	movw	r30, r16
    42d6:	66 81       	ldd	r22, Z+6	; 0x06
    42d8:	77 81       	ldd	r23, Z+7	; 0x07
    42da:	4a e0       	ldi	r20, 0x0A	; 10
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	85 e5       	ldi	r24, 0x55	; 85
    42e0:	9a e0       	ldi	r25, 0x0A	; 10
    42e2:	0e 94 88 34 	call	0x6910	; 0x6910 <_ZN5Print7printlnEji>
	
	// Display test information
	Display *pDisplay = new Display(this);
    42e6:	87 e3       	ldi	r24, 0x37	; 55
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    42ee:	ec 01       	movw	r28, r24
    42f0:	b8 01       	movw	r22, r16
    42f2:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN7DisplayC1EP10TeaMachine>
	pDisplay->Initialise();
    42f6:	ce 01       	movw	r24, r28
    42f8:	0e 94 c1 12 	call	0x2582	; 0x2582 <_ZN7Display10InitialiseEv>
	pDisplay->Set( IndicatorDrinkName1, 'T');
    42fc:	44 e5       	ldi	r20, 0x54	; 84
    42fe:	60 e0       	ldi	r22, 0x00	; 0
    4300:	ce 01       	movw	r24, r28
    4302:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName2, 'E');
    4306:	45 e4       	ldi	r20, 0x45	; 69
    4308:	61 e0       	ldi	r22, 0x01	; 1
    430a:	ce 01       	movw	r24, r28
    430c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName3, 'S');
    4310:	43 e5       	ldi	r20, 0x53	; 83
    4312:	62 e0       	ldi	r22, 0x02	; 2
    4314:	ce 01       	movw	r24, r28
    4316:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName4, 'T');
    431a:	44 e5       	ldi	r20, 0x54	; 84
    431c:	63 e0       	ldi	r22, 0x03	; 3
    431e:	ce 01       	movw	r24, r28
    4320:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorMilkLevel, 1 );
    4324:	41 e0       	ldi	r20, 0x01	; 1
    4326:	50 e0       	ldi	r21, 0x00	; 0
    4328:	61 e0       	ldi	r22, 0x01	; 1
    432a:	ce 01       	movw	r24, r28
    432c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	pDisplay->Set( IndicatorSugarLevel, m_nTestCode );
    4330:	d8 01       	movw	r26, r16
    4332:	16 96       	adiw	r26, 0x06	; 6
    4334:	4d 91       	ld	r20, X+
    4336:	5c 91       	ld	r21, X
    4338:	17 97       	sbiw	r26, 0x07	; 7
    433a:	62 e0       	ldi	r22, 0x02	; 2
    433c:	ce 01       	movw	r24, r28
    433e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	pDisplay->Update();
    4342:	ce 01       	movw	r24, r28
    4344:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN7Display6UpdateEv>
	delete pDisplay;
    4348:	20 97       	sbiw	r28, 0x00	; 0
    434a:	31 f0       	breq	.+12     	; 0x4358 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xae>
    434c:	ce 01       	movw	r24, r28
    434e:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7DisplayD1Ev>
    4352:	ce 01       	movw	r24, r28
    4354:	0e 94 b1 33 	call	0x6762	; 0x6762 <_ZdlPv>
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
    4358:	d8 01       	movw	r26, r16
    435a:	16 96       	adiw	r26, 0x06	; 6
    435c:	ed 91       	ld	r30, X+
    435e:	fc 91       	ld	r31, X
    4360:	17 97       	sbiw	r26, 0x07	; 7
    4362:	31 97       	sbiw	r30, 0x01	; 1
    4364:	ed 30       	cpi	r30, 0x0D	; 13
    4366:	f1 05       	cpc	r31, r1
    4368:	08 f0       	brcs	.+2      	; 0x436c <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xc2>
    436a:	aa c0       	rjmp	.+340    	; 0x44c0 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x216>
    436c:	88 27       	eor	r24, r24
    436e:	e0 56       	subi	r30, 0x60	; 96
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	8f 4f       	sbci	r24, 0xFF	; 255
    4374:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__tablejump2__>
	{
		case TESTCODE_EXTRACTOR:
		pComponentUnderTest = new Extractor(this);
    4378:	86 e0       	ldi	r24, 0x06	; 6
    437a:	90 e0       	ldi	r25, 0x00	; 0
    437c:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4380:	ec 01       	movw	r28, r24
    4382:	b8 01       	movw	r22, r16
    4384:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN9ExtractorC1EP10TeaMachine>
    4388:	8c c0       	rjmp	.+280    	; 0x44a2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1f8>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_BAGCONVEYOR:
		pComponentUnderTest = new BagConveyor(this);
    438a:	86 e0       	ldi	r24, 0x06	; 6
    438c:	90 e0       	ldi	r25, 0x00	; 0
    438e:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4392:	ec 01       	movw	r28, r24
    4394:	b8 01       	movw	r22, r16
    4396:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN11BagConveyorC1EP10TeaMachine>
    439a:	83 c0       	rjmp	.+262    	; 0x44a2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1f8>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_MASHER:
		pComponentUnderTest = new Masher(this);
    439c:	87 e0       	ldi	r24, 0x07	; 7
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    43a4:	ec 01       	movw	r28, r24
    43a6:	b8 01       	movw	r22, r16
    43a8:	0e 94 d6 13 	call	0x27ac	; 0x27ac <_ZN6MasherC1EP10TeaMachine>
    43ac:	7a c0       	rjmp	.+244    	; 0x44a2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1f8>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_BOILERCNTRL:
		pComponentUnderTest = new Boiler(this);
    43ae:	8a e0       	ldi	r24, 0x0A	; 10
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    43b6:	ec 01       	movw	r28, r24
    43b8:	b8 01       	movw	r22, r16
    43ba:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN6BoilerC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    43be:	ce 01       	movw	r24, r28
    43c0:	0e 94 01 03 	call	0x602	; 0x602 <_ZN6Boiler10InitialiseEv>
    43c4:	42 c0       	rjmp	.+132    	; 0x444a <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1a0>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_WATERVALVE:
		pBoilerUnderTest = new Boiler(this);
    43c6:	8a e0       	ldi	r24, 0x0A	; 10
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    43ce:	ec 01       	movw	r28, r24
    43d0:	b8 01       	movw	r22, r16
    43d2:	0e 94 27 03 	call	0x64e	; 0x64e <_ZN6BoilerC1EP10TeaMachine>
		pBoilerUnderTest->Initialise();
    43d6:	ce 01       	movw	r24, r28
    43d8:	0e 94 01 03 	call	0x602	; 0x602 <_ZN6Boiler10InitialiseEv>
		bResult = pBoilerUnderTest->TestExitValve();
    43dc:	ce 01       	movw	r24, r28
    43de:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN6Boiler13TestExitValveEv>
    43e2:	18 2f       	mov	r17, r24
		delete pBoilerUnderTest;
    43e4:	20 97       	sbiw	r28, 0x00	; 0
    43e6:	09 f4       	brne	.+2      	; 0x43ea <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x140>
    43e8:	6c c0       	rjmp	.+216    	; 0x44c2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x218>
    43ea:	ce 01       	movw	r24, r28
    43ec:	0e 94 37 03 	call	0x66e	; 0x66e <_ZN6BoilerD1Ev>
    43f0:	63 c0       	rjmp	.+198    	; 0x44b8 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x20e>
		break;
		
		case TESTCODE_CUPCONVEYOR:
		pComponentUnderTest = new CupConveyor(this);
    43f2:	86 e0       	ldi	r24, 0x06	; 6
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    43fa:	ec 01       	movw	r28, r24
    43fc:	b8 01       	movw	r22, r16
    43fe:	0e 94 57 0a 	call	0x14ae	; 0x14ae <_ZN11CupConveyorC1EP10TeaMachine>
    4402:	4f c0       	rjmp	.+158    	; 0x44a2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1f8>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;

		case TESTCODE_CUPLEVELARM:
		pComponentUnderTest = new CupLevelProbe(this);
    4404:	86 e0       	ldi	r24, 0x06	; 6
    4406:	90 e0       	ldi	r25, 0x00	; 0
    4408:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    440c:	ec 01       	movw	r28, r24
    440e:	b8 01       	movw	r22, r16
    4410:	0e 94 ae 0b 	call	0x175c	; 0x175c <_ZN13CupLevelProbeC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    4414:	ce 01       	movw	r24, r28
    4416:	0e 94 ad 0b 	call	0x175a	; 0x175a <_ZN13CupLevelProbe10InitialiseEv>
    441a:	17 c0       	rjmp	.+46     	; 0x444a <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1a0>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_DISPLAY:
		pComponentUnderTest = new Display(this);
    441c:	87 e3       	ldi	r24, 0x37	; 55
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4424:	ec 01       	movw	r28, r24
    4426:	b8 01       	movw	r22, r16
    4428:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN7DisplayC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    442c:	ce 01       	movw	r24, r28
    442e:	0e 94 c1 12 	call	0x2582	; 0x2582 <_ZN7Display10InitialiseEv>
    4432:	0b c0       	rjmp	.+22     	; 0x444a <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1a0>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_CUPDETECTOR:
		pComponentUnderTest = new CupDetector(this);
    4434:	8a e1       	ldi	r24, 0x1A	; 26
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    443c:	ec 01       	movw	r28, r24
    443e:	b8 01       	movw	r22, r16
    4440:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN11CupDetectorC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    4444:	ce 01       	movw	r24, r28
    4446:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN11CupDetector10InitialiseEv>
		bResult = pComponentUnderTest->Test();
    444a:	e8 81       	ld	r30, Y
    444c:	f9 81       	ldd	r31, Y+1	; 0x01
    444e:	02 80       	ldd	r0, Z+2	; 0x02
    4450:	f3 81       	ldd	r31, Z+3	; 0x03
    4452:	e0 2d       	mov	r30, r0
    4454:	ce 01       	movw	r24, r28
    4456:	19 95       	eicall
    4458:	18 2f       	mov	r17, r24
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
	} // switch
	
	if( pComponentUnderTest != NULL )
    445a:	20 97       	sbiw	r28, 0x00	; 0
    445c:	91 f1       	breq	.+100    	; 0x44c2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x218>
	{
		delete pComponentUnderTest;
    445e:	ce 01       	movw	r24, r28
    4460:	b6 d0       	rcall	.+364    	; 0x45ce <_ZN19TeaMachineComponentD1Ev>
    4462:	2a c0       	rjmp	.+84     	; 0x44b8 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x20e>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_USERCONTROLS:
		pComponentUnderTest = new UserControls(this);
    4464:	8d e2       	ldi	r24, 0x2D	; 45
    4466:	90 e0       	ldi	r25, 0x00	; 0
    4468:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    446c:	ec 01       	movw	r28, r24
    446e:	b8 01       	movw	r22, r16
    4470:	0e 94 36 2e 	call	0x5c6c	; 0x5c6c <_ZN12UserControlsC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    4474:	ce 01       	movw	r24, r28
    4476:	0e 94 43 2e 	call	0x5c86	; 0x5c86 <_ZN12UserControls10InitialiseEv>
    447a:	e7 cf       	rjmp	.-50     	; 0x444a <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1a0>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_MILKDISPENSER:
		pComponentUnderTest = new MilkDispenser(this);
    447c:	86 e0       	ldi	r24, 0x06	; 6
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4484:	ec 01       	movw	r28, r24
    4486:	b8 01       	movw	r22, r16
    4488:	0e 94 57 14 	call	0x28ae	; 0x28ae <_ZN13MilkDispenserC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    448c:	ce 01       	movw	r24, r28
    448e:	0e 94 56 14 	call	0x28ac	; 0x28ac <_ZN13MilkDispenser10InitialiseEv>
    4492:	db cf       	rjmp	.-74     	; 0x444a <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1a0>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_STIRRER:
		pComponentUnderTest = new Stirrer(this);
    4494:	86 e0       	ldi	r24, 0x06	; 6
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    449c:	ec 01       	movw	r28, r24
    449e:	b8 01       	movw	r22, r16
		pComponentUnderTest->Initialise();
    44a0:	29 dc       	rcall	.-1966   	; 0x3cf4 <_ZN7StirrerC1EP10TeaMachine>
    44a2:	ce 01       	movw	r24, r28
    44a4:	77 d0       	rcall	.+238    	; 0x4594 <_ZN19TeaMachineComponent10InitialiseEv>
    44a6:	d1 cf       	rjmp	.-94     	; 0x444a <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1a0>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_SUGARDISPENSER:
		pComponentUnderTest = new SugarDispenser(this);
    44a8:	86 e0       	ldi	r24, 0x06	; 6
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    44b0:	ec 01       	movw	r28, r24
    44b2:	b8 01       	movw	r22, r16
    44b4:	88 dc       	rcall	.-1776   	; 0x3dc6 <_ZN14SugarDispenserC1EP10TeaMachine>
    44b6:	f5 cf       	rjmp	.-22     	; 0x44a2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1f8>
		break;
	} // switch
	
	if( pComponentUnderTest != NULL )
	{
		delete pComponentUnderTest;
    44b8:	ce 01       	movw	r24, r28
    44ba:	0e 94 b1 33 	call	0x6762	; 0x6762 <_ZdlPv>
    44be:	01 c0       	rjmp	.+2      	; 0x44c2 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x218>
//
//	Run device tests (Group 1)
//
bool TeaMachine::ExecuteGroup1Tests()
{
	bool bResult = false;
    44c0:	10 e0       	ldi	r17, 0x00	; 0
	{
		delete pComponentUnderTest;
	}

	return bResult;
}
    44c2:	81 2f       	mov	r24, r17
    44c4:	df 91       	pop	r29
    44c6:	cf 91       	pop	r28
    44c8:	1f 91       	pop	r17
    44ca:	0f 91       	pop	r16
    44cc:	08 95       	ret

000044ce <_ZN10TeaMachine7ProcessEv>:

//
//	Main process loop
//
void TeaMachine::Process()
{
    44ce:	ef 92       	push	r14
    44d0:	ff 92       	push	r15
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	cd b7       	in	r28, 0x3d	; 61
    44dc:	de b7       	in	r29, 0x3e	; 62
    44de:	ac 97       	sbiw	r28, 0x2c	; 44
    44e0:	0f b6       	in	r0, 0x3f	; 63
    44e2:	f8 94       	cli
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	8c 01       	movw	r16, r24
 	TeaMachineController controller(this);
    44ec:	bc 01       	movw	r22, r24
    44ee:	ce 01       	movw	r24, r28
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	8b d0       	rcall	.+278    	; 0x460a <_ZN20TeaMachineControllerC1EP10TeaMachine>
    
    // Clear LED displays
    Display *pDisplay = new Display(this);
    44f4:	87 e3       	ldi	r24, 0x37	; 55
    44f6:	90 e0       	ldi	r25, 0x00	; 0
    44f8:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    44fc:	7c 01       	movw	r14, r24
    44fe:	b8 01       	movw	r22, r16
    4500:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN7DisplayC1EP10TeaMachine>
	pDisplay->Initialise();
    4504:	c7 01       	movw	r24, r14
    4506:	0e 94 c1 12 	call	0x2582	; 0x2582 <_ZN7Display10InitialiseEv>
    delete pDisplay;
    450a:	e1 14       	cp	r14, r1
    450c:	f1 04       	cpc	r15, r1
    450e:	31 f0       	breq	.+12     	; 0x451c <_ZN10TeaMachine7ProcessEv+0x4e>
    4510:	c7 01       	movw	r24, r14
    4512:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <_ZN7DisplayD1Ev>
    4516:	c7 01       	movw	r24, r14
    4518:	0e 94 b1 33 	call	0x6762	; 0x6762 <_ZdlPv>
    
	switch( m_nSystemMode )
    451c:	f8 01       	movw	r30, r16
    451e:	84 81       	ldd	r24, Z+4	; 0x04
    4520:	95 81       	ldd	r25, Z+5	; 0x05
    4522:	81 30       	cpi	r24, 0x01	; 1
    4524:	91 05       	cpc	r25, r1
    4526:	51 f0       	breq	.+20     	; 0x453c <_ZN10TeaMachine7ProcessEv+0x6e>
    4528:	38 f0       	brcs	.+14     	; 0x4538 <_ZN10TeaMachine7ProcessEv+0x6a>
    452a:	82 30       	cpi	r24, 0x02	; 2
    452c:	91 05       	cpc	r25, r1
    452e:	49 f0       	breq	.+18     	; 0x4542 <_ZN10TeaMachine7ProcessEv+0x74>
    4530:	03 97       	sbiw	r24, 0x03	; 3
    4532:	69 f4       	brne	.+26     	; 0x454e <_ZN10TeaMachine7ProcessEv+0x80>
		case SYSMODE_TESTGROUP2:
			ExecuteGroup2Tests();
			break;
		
		case SYSMODE_LOAD:
			controller.Start(ControllerMode_Load);
    4534:	6e ef       	ldi	r22, 0xFE	; 254
    4536:	08 c0       	rjmp	.+16     	; 0x4548 <_ZN10TeaMachine7ProcessEv+0x7a>
    delete pDisplay;
    
	switch( m_nSystemMode )
	{
		case SYSMODE_NORMAL:
			controller.Start(ControllerMode_InService);
    4538:	6f ef       	ldi	r22, 0xFF	; 255
    453a:	06 c0       	rjmp	.+12     	; 0x4548 <_ZN10TeaMachine7ProcessEv+0x7a>
			break;
		
		case SYSMODE_TESTGROUP1:
			ExecuteGroup1Tests();
    453c:	c8 01       	movw	r24, r16
    453e:	b5 de       	rcall	.-662    	; 0x42aa <_ZN10TeaMachine18ExecuteGroup1TestsEv>
			break;
		
		case SYSMODE_TESTGROUP2:
			ExecuteGroup2Tests();
    4540:	06 c0       	rjmp	.+12     	; 0x454e <_ZN10TeaMachine7ProcessEv+0x80>
    4542:	c8 01       	movw	r24, r16
    4544:	5f de       	rcall	.-834    	; 0x4204 <_ZN10TeaMachine18ExecuteGroup2TestsEv>
			break;
		
		case SYSMODE_LOAD:
			controller.Start(ControllerMode_Load);
    4546:	03 c0       	rjmp	.+6      	; 0x454e <_ZN10TeaMachine7ProcessEv+0x80>
    4548:	ce 01       	movw	r24, r28
    454a:	01 96       	adiw	r24, 0x01	; 1
			break;
	} // switch
	
	// Wait until system mode changes
	while( !GetSystem()->SystemModeHasChanged() );
    454c:	81 d5       	rcall	.+2818   	; 0x5050 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode>
    454e:	c8 01       	movw	r24, r16
    4550:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    4554:	d1 dd       	rcall	.-1118   	; 0x40f8 <_ZN6System20SystemModeHasChangedEv>
    4556:	88 23       	and	r24, r24
    4558:	d1 f3       	breq	.-12     	; 0x454e <_ZN10TeaMachine7ProcessEv+0x80>
	
	// Wait a while for the new code to settle
	delay( 500 );
    455a:	64 ef       	ldi	r22, 0xF4	; 244
    455c:	71 e0       	ldi	r23, 0x01	; 1
    455e:	80 e0       	ldi	r24, 0x00	; 0
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	0e 94 27 36 	call	0x6c4e	; 0x6c4e <delay>
	
	m_nSystemMode = GetSystem()->ReadSystemMode();
    4566:	c8 01       	movw	r24, r16
    4568:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    456c:	ad dd       	rcall	.-1190   	; 0x40c8 <_ZN6System14ReadSystemModeEv>
    456e:	f8 01       	movw	r30, r16
    4570:	95 83       	std	Z+5, r25	; 0x05
//
//	Main process loop
//
void TeaMachine::Process()
{
 	TeaMachineController controller(this);
    4572:	84 83       	std	Z+4, r24	; 0x04
    4574:	ce 01       	movw	r24, r28
    4576:	01 96       	adiw	r24, 0x01	; 1
    4578:	2b d0       	rcall	.+86     	; 0x45d0 <_ZN20TeaMachineControllerD1Ev>
	
	// Wait a while for the new code to settle
	delay( 500 );
	
	m_nSystemMode = GetSystem()->ReadSystemMode();
}
    457a:	ac 96       	adiw	r28, 0x2c	; 44
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	f8 94       	cli
    4580:	de bf       	out	0x3e, r29	; 62
    4582:	0f be       	out	0x3f, r0	; 63
    4584:	cd bf       	out	0x3d, r28	; 61
    4586:	df 91       	pop	r29
    4588:	cf 91       	pop	r28
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	08 95       	ret

00004594 <_ZN19TeaMachineComponent10InitialiseEv>:
//	Test an element of the tea machine
//
bool TeaMachineComponent::Test()
{
	return true;
}
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	08 95       	ret

00004598 <_ZN19TeaMachineComponentC1Ev>:
#include "TeaMachineComponent.h"

//
//	Class constructor
//
TeaMachineComponent::TeaMachineComponent()
    4598:	fc 01       	movw	r30, r24
    459a:	89 e3       	ldi	r24, 0x39	; 57
    459c:	98 e0       	ldi	r25, 0x08	; 8
    459e:	91 83       	std	Z+1, r25	; 0x01
    45a0:	80 83       	st	Z, r24
{
	m_pTeaMachine = NULL;
    45a2:	13 82       	std	Z+3, r1	; 0x03
    45a4:	12 82       	std	Z+2, r1	; 0x02
	m_pSystem = NULL;
    45a6:	15 82       	std	Z+5, r1	; 0x05
    45a8:	14 82       	std	Z+4, r1	; 0x04
    45aa:	08 95       	ret

000045ac <_ZN19TeaMachineComponentC1EP10TeaMachine>:
} //TeaMachineComponent

//
//	Class constructor
//
TeaMachineComponent::TeaMachineComponent(TeaMachine *pTeaMachine)
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	ec 01       	movw	r28, r24
    45b2:	cb 01       	movw	r24, r22
    45b4:	29 e3       	ldi	r18, 0x39	; 57
    45b6:	38 e0       	ldi	r19, 0x08	; 8
    45b8:	39 83       	std	Y+1, r19	; 0x01
    45ba:	28 83       	st	Y, r18
{
	m_pTeaMachine = pTeaMachine;
    45bc:	7b 83       	std	Y+3, r23	; 0x03
    45be:	6a 83       	std	Y+2, r22	; 0x02
	m_pSystem = pTeaMachine->GetSystem();
    45c0:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    45c4:	9d 83       	std	Y+5, r25	; 0x05
    45c6:	8c 83       	std	Y+4, r24	; 0x04
} //TeaMachineComponent
    45c8:	df 91       	pop	r29
    45ca:	cf 91       	pop	r28
    45cc:	08 95       	ret

000045ce <_ZN19TeaMachineComponentD1Ev>:

//
//	Class destructor
//
TeaMachineComponent::~TeaMachineComponent()
    45ce:	08 95       	ret

000045d0 <_ZN20TeaMachineControllerD1Ev>:
            bActiveDrinkIsPresent = true;
        }
    }
    
    return bActiveDrinkIsPresent;
}
    45d0:	08 95       	ret

000045d2 <_ZN20TeaMachineController12ClearMembersEv>:
    45d2:	cf 93       	push	r28
    45d4:	df 93       	push	r29
    45d6:	fc 01       	movw	r30, r24
    45d8:	11 82       	std	Z+1, r1	; 0x01
    45da:	10 82       	st	Z, r1
    45dc:	13 82       	std	Z+3, r1	; 0x03
    45de:	12 82       	std	Z+2, r1	; 0x02
    45e0:	15 82       	std	Z+5, r1	; 0x05
    45e2:	14 82       	std	Z+4, r1	; 0x04
    45e4:	17 82       	std	Z+7, r1	; 0x07
    45e6:	16 82       	std	Z+6, r1	; 0x06
    45e8:	11 86       	std	Z+9, r1	; 0x09
    45ea:	10 86       	std	Z+8, r1	; 0x08
    45ec:	13 a6       	std	Z+43, r1	; 0x2b
    45ee:	12 a6       	std	Z+42, r1	; 0x2a
    45f0:	dc 01       	movw	r26, r24
    45f2:	1c 96       	adiw	r26, 0x0c	; 12
    45f4:	b0 96       	adiw	r30, 0x20	; 32
    45f6:	ef 01       	movw	r28, r30
    45f8:	1d 92       	st	X+, r1
    45fa:	1d 92       	st	X+, r1
    45fc:	19 92       	st	Y+, r1
    45fe:	ae 17       	cp	r26, r30
    4600:	bf 07       	cpc	r27, r31
    4602:	d1 f7       	brne	.-12     	; 0x45f8 <_ZN20TeaMachineController12ClearMembersEv+0x26>
    4604:	df 91       	pop	r29
    4606:	cf 91       	pop	r28
    4608:	08 95       	ret

0000460a <_ZN20TeaMachineControllerC1EP10TeaMachine>:
    460a:	0f 93       	push	r16
    460c:	1f 93       	push	r17
    460e:	cf 93       	push	r28
    4610:	df 93       	push	r29
    4612:	ec 01       	movw	r28, r24
    4614:	8b 01       	movw	r16, r22
    4616:	dd df       	rcall	.-70     	; 0x45d2 <_ZN20TeaMachineController12ClearMembersEv>
    4618:	1b 87       	std	Y+11, r17	; 0x0b
    461a:	0a 87       	std	Y+10, r16	; 0x0a
    461c:	df 91       	pop	r29
    461e:	cf 91       	pop	r28
    4620:	1f 91       	pop	r17
    4622:	0f 91       	pop	r16
    4624:	08 95       	ret

00004626 <_ZN20TeaMachineController13GetTeaMachineEv>:
    4626:	fc 01       	movw	r30, r24
    4628:	82 85       	ldd	r24, Z+10	; 0x0a
    462a:	93 85       	ldd	r25, Z+11	; 0x0b
    462c:	08 95       	ret

0000462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>:
    462e:	6a 5f       	subi	r22, 0xFA	; 250
    4630:	7f 4f       	sbci	r23, 0xFF	; 255
    4632:	66 0f       	add	r22, r22
    4634:	77 1f       	adc	r23, r23
    4636:	86 0f       	add	r24, r22
    4638:	97 1f       	adc	r25, r23
    463a:	dc 01       	movw	r26, r24
    463c:	ed 91       	ld	r30, X+
    463e:	fc 91       	ld	r31, X
    4640:	30 97       	sbiw	r30, 0x00	; 0
    4642:	29 f0       	breq	.+10     	; 0x464e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState+0x20>
    4644:	81 81       	ldd	r24, Z+1	; 0x01
    4646:	48 13       	cpse	r20, r24
    4648:	02 c0       	rjmp	.+4      	; 0x464e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState+0x20>
    464a:	87 85       	ldd	r24, Z+15	; 0x0f
    464c:	08 95       	ret
    464e:	80 e0       	ldi	r24, 0x00	; 0
    4650:	08 95       	ret

00004652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>:
    4652:	6a 5f       	subi	r22, 0xFA	; 250
    4654:	7f 4f       	sbci	r23, 0xFF	; 255
    4656:	66 0f       	add	r22, r22
    4658:	77 1f       	adc	r23, r23
    465a:	86 0f       	add	r24, r22
    465c:	97 1f       	adc	r25, r23
    465e:	dc 01       	movw	r26, r24
    4660:	ed 91       	ld	r30, X+
    4662:	fc 91       	ld	r31, X
    4664:	30 97       	sbiw	r30, 0x00	; 0
    4666:	21 f0       	breq	.+8      	; 0x4670 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi+0x1e>
    4668:	97 85       	ldd	r25, Z+15	; 0x0f
    466a:	81 e0       	ldi	r24, 0x01	; 1
    466c:	89 27       	eor	r24, r25
    466e:	08 95       	ret
    4670:	80 e0       	ldi	r24, 0x00	; 0
    4672:	08 95       	ret

00004674 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv>:
    4674:	0f 93       	push	r16
    4676:	1f 93       	push	r17
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	ec 01       	movw	r28, r24
    467e:	40 e0       	ldi	r20, 0x00	; 0
    4680:	63 e0       	ldi	r22, 0x03	; 3
    4682:	70 e0       	ldi	r23, 0x00	; 0
    4684:	d4 df       	rcall	.-88     	; 0x462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    4686:	18 2f       	mov	r17, r24
    4688:	88 23       	and	r24, r24
    468a:	31 f0       	breq	.+12     	; 0x4698 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x24>
    468c:	64 e0       	ldi	r22, 0x04	; 4
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	ce 01       	movw	r24, r28
    4692:	df df       	rcall	.-66     	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    4694:	11 e0       	ldi	r17, 0x01	; 1
    4696:	18 27       	eor	r17, r24
    4698:	40 e0       	ldi	r20, 0x00	; 0
    469a:	62 e0       	ldi	r22, 0x02	; 2
    469c:	70 e0       	ldi	r23, 0x00	; 0
    469e:	ce 01       	movw	r24, r28
    46a0:	c6 df       	rcall	.-116    	; 0x462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    46a2:	88 23       	and	r24, r24
    46a4:	71 f0       	breq	.+28     	; 0x46c2 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x4e>
    46a6:	64 e0       	ldi	r22, 0x04	; 4
    46a8:	70 e0       	ldi	r23, 0x00	; 0
    46aa:	ce 01       	movw	r24, r28
    46ac:	d2 df       	rcall	.-92     	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    46ae:	81 11       	cpse	r24, r1
    46b0:	07 c0       	rjmp	.+14     	; 0x46c0 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x4c>
    46b2:	63 e0       	ldi	r22, 0x03	; 3
    46b4:	70 e0       	ldi	r23, 0x00	; 0
    46b6:	ce 01       	movw	r24, r28
    46b8:	cc df       	rcall	.-104    	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    46ba:	91 e0       	ldi	r25, 0x01	; 1
    46bc:	89 27       	eor	r24, r25
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x4e>
    46c0:	80 e0       	ldi	r24, 0x00	; 0
    46c2:	18 2b       	or	r17, r24
    46c4:	40 e0       	ldi	r20, 0x00	; 0
    46c6:	61 e0       	ldi	r22, 0x01	; 1
    46c8:	70 e0       	ldi	r23, 0x00	; 0
    46ca:	ce 01       	movw	r24, r28
    46cc:	b0 df       	rcall	.-160    	; 0x462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    46ce:	08 2f       	mov	r16, r24
    46d0:	88 23       	and	r24, r24
    46d2:	a9 f0       	breq	.+42     	; 0x46fe <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x8a>
    46d4:	64 e0       	ldi	r22, 0x04	; 4
    46d6:	70 e0       	ldi	r23, 0x00	; 0
    46d8:	ce 01       	movw	r24, r28
    46da:	bb df       	rcall	.-138    	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    46dc:	08 2f       	mov	r16, r24
    46de:	81 11       	cpse	r24, r1
    46e0:	0d c0       	rjmp	.+26     	; 0x46fc <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x88>
    46e2:	63 e0       	ldi	r22, 0x03	; 3
    46e4:	70 e0       	ldi	r23, 0x00	; 0
    46e6:	ce 01       	movw	r24, r28
    46e8:	b4 df       	rcall	.-152    	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    46ea:	81 11       	cpse	r24, r1
    46ec:	08 c0       	rjmp	.+16     	; 0x46fe <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x8a>
    46ee:	62 e0       	ldi	r22, 0x02	; 2
    46f0:	70 e0       	ldi	r23, 0x00	; 0
    46f2:	ce 01       	movw	r24, r28
    46f4:	ae df       	rcall	.-164    	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    46f6:	01 e0       	ldi	r16, 0x01	; 1
    46f8:	08 27       	eor	r16, r24
    46fa:	01 c0       	rjmp	.+2      	; 0x46fe <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x8a>
    46fc:	00 e0       	ldi	r16, 0x00	; 0
    46fe:	80 2f       	mov	r24, r16
    4700:	81 2b       	or	r24, r17
    4702:	df 91       	pop	r29
    4704:	cf 91       	pop	r28
    4706:	1f 91       	pop	r17
    4708:	0f 91       	pop	r16
    470a:	08 95       	ret

0000470c <_ZN20TeaMachineController30PreparationStationsAreInactiveEv>:
    470c:	fc 01       	movw	r30, r24
    470e:	a2 81       	ldd	r26, Z+2	; 0x02
    4710:	b3 81       	ldd	r27, Z+3	; 0x03
    4712:	58 96       	adiw	r26, 0x18	; 24
    4714:	8c 91       	ld	r24, X
    4716:	88 23       	and	r24, r24
    4718:	69 f0       	breq	.+26     	; 0x4734 <_ZN20TeaMachineController30PreparationStationsAreInactiveEv+0x28>
    471a:	a4 81       	ldd	r26, Z+4	; 0x04
    471c:	b5 81       	ldd	r27, Z+5	; 0x05
    471e:	58 96       	adiw	r26, 0x18	; 24
    4720:	8c 91       	ld	r24, X
    4722:	88 23       	and	r24, r24
    4724:	39 f0       	breq	.+14     	; 0x4734 <_ZN20TeaMachineController30PreparationStationsAreInactiveEv+0x28>
    4726:	06 80       	ldd	r0, Z+6	; 0x06
    4728:	f7 81       	ldd	r31, Z+7	; 0x07
    472a:	e0 2d       	mov	r30, r0
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	90 8d       	ldd	r25, Z+24	; 0x18
    4730:	91 11       	cpse	r25, r1
    4732:	01 c0       	rjmp	.+2      	; 0x4736 <_ZN20TeaMachineController30PreparationStationsAreInactiveEv+0x2a>
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	08 95       	ret

00004738 <_ZN20TeaMachineController16NotifyCupRemovalEj>:
    4738:	cf 92       	push	r12
    473a:	df 92       	push	r13
    473c:	ef 92       	push	r14
    473e:	ff 92       	push	r15
    4740:	0f 93       	push	r16
    4742:	1f 93       	push	r17
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	7b 01       	movw	r14, r22
    474a:	ee 0c       	add	r14, r14
    474c:	ff 1c       	adc	r15, r15
    474e:	e8 0e       	add	r14, r24
    4750:	f9 1e       	adc	r15, r25
    4752:	d7 01       	movw	r26, r14
    4754:	1c 96       	adiw	r26, 0x0c	; 12
    4756:	cd 90       	ld	r12, X+
    4758:	dc 90       	ld	r13, X
    475a:	1d 97       	sbiw	r26, 0x0d	; 13
    475c:	c1 14       	cp	r12, r1
    475e:	d1 04       	cpc	r13, r1
    4760:	99 f1       	breq	.+102    	; 0x47c8 <_ZN20TeaMachineController16NotifyCupRemovalEj+0x90>
    4762:	8b 01       	movw	r16, r22
    4764:	ec 01       	movw	r28, r24
    4766:	d6 01       	movw	r26, r12
    4768:	1d 96       	adiw	r26, 0x0d	; 13
    476a:	ed 91       	ld	r30, X+
    476c:	fc 91       	ld	r31, X
    476e:	1e 97       	sbiw	r26, 0x0e	; 14
    4770:	e8 0f       	add	r30, r24
    4772:	f9 1f       	adc	r31, r25
    4774:	10 a2       	std	Z+32, r1	; 0x20
    4776:	c6 01       	movw	r24, r12
    4778:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5DrinkD1Ev>
    477c:	c6 01       	movw	r24, r12
    477e:	0e 94 b1 33 	call	0x6762	; 0x6762 <_ZdlPv>
    4782:	f7 01       	movw	r30, r14
    4784:	15 86       	std	Z+13, r1	; 0x0d
    4786:	14 86       	std	Z+12, r1	; 0x0c
    4788:	05 30       	cpi	r16, 0x05	; 5
    478a:	11 05       	cpc	r17, r1
    478c:	49 f0       	breq	.+18     	; 0x47a0 <_ZN20TeaMachineController16NotifyCupRemovalEj+0x68>
    478e:	06 30       	cpi	r16, 0x06	; 6
    4790:	11 05       	cpc	r17, r1
    4792:	49 f0       	breq	.+18     	; 0x47a6 <_ZN20TeaMachineController16NotifyCupRemovalEj+0x6e>
    4794:	04 30       	cpi	r16, 0x04	; 4
    4796:	11 05       	cpc	r17, r1
    4798:	b9 f4       	brne	.+46     	; 0x47c8 <_ZN20TeaMachineController16NotifyCupRemovalEj+0x90>
    479a:	8a 81       	ldd	r24, Y+2	; 0x02
    479c:	9b 81       	ldd	r25, Y+3	; 0x03
    479e:	05 c0       	rjmp	.+10     	; 0x47aa <_ZN20TeaMachineController16NotifyCupRemovalEj+0x72>
    47a0:	8c 81       	ldd	r24, Y+4	; 0x04
    47a2:	9d 81       	ldd	r25, Y+5	; 0x05
    47a4:	02 c0       	rjmp	.+4      	; 0x47aa <_ZN20TeaMachineController16NotifyCupRemovalEj+0x72>
    47a6:	8e 81       	ldd	r24, Y+6	; 0x06
    47a8:	9f 81       	ldd	r25, Y+7	; 0x07
    47aa:	dc 01       	movw	r26, r24
    47ac:	ed 91       	ld	r30, X+
    47ae:	fc 91       	ld	r31, X
    47b0:	01 90       	ld	r0, Z+
    47b2:	f0 81       	ld	r31, Z
    47b4:	e0 2d       	mov	r30, r0
    47b6:	df 91       	pop	r29
    47b8:	cf 91       	pop	r28
    47ba:	1f 91       	pop	r17
    47bc:	0f 91       	pop	r16
    47be:	ff 90       	pop	r15
    47c0:	ef 90       	pop	r14
    47c2:	df 90       	pop	r13
    47c4:	cf 90       	pop	r12
    47c6:	19 94       	eijmp
    47c8:	df 91       	pop	r29
    47ca:	cf 91       	pop	r28
    47cc:	1f 91       	pop	r17
    47ce:	0f 91       	pop	r16
    47d0:	ff 90       	pop	r15
    47d2:	ef 90       	pop	r14
    47d4:	df 90       	pop	r13
    47d6:	cf 90       	pop	r12
    47d8:	08 95       	ret

000047da <_ZN20TeaMachineController15AllocateDrinkIDEv>:
    47da:	fc 01       	movw	r30, r24
    47dc:	b1 96       	adiw	r30, 0x21	; 33
    47de:	20 e0       	ldi	r18, 0x00	; 0
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	2f 5f       	subi	r18, 0xFF	; 255
    47e4:	3f 4f       	sbci	r19, 0xFF	; 255
    47e6:	2a 30       	cpi	r18, 0x0A	; 10
    47e8:	31 05       	cpc	r19, r1
    47ea:	19 f0       	breq	.+6      	; 0x47f2 <_ZN20TeaMachineController15AllocateDrinkIDEv+0x18>
    47ec:	41 91       	ld	r20, Z+
    47ee:	41 11       	cpse	r20, r1
    47f0:	f8 cf       	rjmp	.-16     	; 0x47e2 <_ZN20TeaMachineController15AllocateDrinkIDEv+0x8>
    47f2:	fc 01       	movw	r30, r24
    47f4:	e2 0f       	add	r30, r18
    47f6:	f3 1f       	adc	r31, r19
    47f8:	41 e0       	ldi	r20, 0x01	; 1
    47fa:	40 a3       	std	Z+32, r20	; 0x20
    47fc:	c9 01       	movw	r24, r18
    47fe:	08 95       	ret

00004800 <_ZN20TeaMachineController21NotifyNewDrinkRequestEj>:
    4800:	ef 92       	push	r14
    4802:	ff 92       	push	r15
    4804:	0f 93       	push	r16
    4806:	1f 93       	push	r17
    4808:	cf 93       	push	r28
    480a:	df 93       	push	r29
    480c:	7c 01       	movw	r14, r24
    480e:	eb 01       	movw	r28, r22
    4810:	cc 0f       	add	r28, r28
    4812:	dd 1f       	adc	r29, r29
    4814:	ce 0d       	add	r28, r14
    4816:	df 1d       	adc	r29, r15
    4818:	0c 85       	ldd	r16, Y+12	; 0x0c
    481a:	1d 85       	ldd	r17, Y+13	; 0x0d
    481c:	01 15       	cp	r16, r1
    481e:	11 05       	cpc	r17, r1
    4820:	31 f0       	breq	.+12     	; 0x482e <_ZN20TeaMachineController21NotifyNewDrinkRequestEj+0x2e>
    4822:	c8 01       	movw	r24, r16
    4824:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5DrinkD1Ev>
    4828:	c8 01       	movw	r24, r16
    482a:	0e 94 b1 33 	call	0x6762	; 0x6762 <_ZdlPv>
    482e:	c7 01       	movw	r24, r14
    4830:	d4 df       	rcall	.-88     	; 0x47da <_ZN20TeaMachineController15AllocateDrinkIDEv>
    4832:	7c 01       	movw	r14, r24
    4834:	83 e1       	ldi	r24, 0x13	; 19
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    483c:	8c 01       	movw	r16, r24
    483e:	b7 01       	movw	r22, r14
    4840:	0e 94 36 13 	call	0x266c	; 0x266c <_ZN5DrinkC1Ej>
    4844:	1d 87       	std	Y+13, r17	; 0x0d
    4846:	0c 87       	std	Y+12, r16	; 0x0c
    4848:	c8 01       	movw	r24, r16
    484a:	df 91       	pop	r29
    484c:	cf 91       	pop	r28
    484e:	1f 91       	pop	r17
    4850:	0f 91       	pop	r16
    4852:	ff 90       	pop	r15
    4854:	ef 90       	pop	r14
    4856:	08 95       	ret

00004858 <_ZN20TeaMachineController17GetDrinkByStationEi>:
    4858:	6a 5f       	subi	r22, 0xFA	; 250
    485a:	7f 4f       	sbci	r23, 0xFF	; 255
    485c:	66 0f       	add	r22, r22
    485e:	77 1f       	adc	r23, r23
    4860:	86 0f       	add	r24, r22
    4862:	97 1f       	adc	r25, r23
    4864:	fc 01       	movw	r30, r24
    4866:	80 81       	ld	r24, Z
    4868:	91 81       	ldd	r25, Z+1	; 0x01
    486a:	08 95       	ret

0000486c <_ZN20TeaMachineController12GetNextDrinkEv>:
    486c:	dc 01       	movw	r26, r24
    486e:	1e 96       	adiw	r26, 0x0e	; 14
    4870:	ac 01       	movw	r20, r24
    4872:	40 5e       	subi	r20, 0xE0	; 224
    4874:	5f 4f       	sbci	r21, 0xFF	; 255
    4876:	80 e0       	ldi	r24, 0x00	; 0
    4878:	90 e0       	ldi	r25, 0x00	; 0
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	ed 91       	ld	r30, X+
    4880:	fd 91       	ld	r31, X+
    4882:	30 97       	sbiw	r30, 0x00	; 0
    4884:	49 f0       	breq	.+18     	; 0x4898 <_ZN20TeaMachineController12GetNextDrinkEv+0x2c>
    4886:	61 81       	ldd	r22, Z+1	; 0x01
    4888:	64 30       	cpi	r22, 0x04	; 4
    488a:	31 f0       	breq	.+12     	; 0x4898 <_ZN20TeaMachineController12GetNextDrinkEv+0x2c>
    488c:	67 85       	ldd	r22, Z+15	; 0x0f
    488e:	61 11       	cpse	r22, r1
    4890:	02 c0       	rjmp	.+4      	; 0x4896 <_ZN20TeaMachineController12GetNextDrinkEv+0x2a>
    4892:	9f 01       	movw	r18, r30
    4894:	01 c0       	rjmp	.+2      	; 0x4898 <_ZN20TeaMachineController12GetNextDrinkEv+0x2c>
    4896:	cf 01       	movw	r24, r30
    4898:	a4 17       	cp	r26, r20
    489a:	b5 07       	cpc	r27, r21
    489c:	81 f7       	brne	.-32     	; 0x487e <_ZN20TeaMachineController12GetNextDrinkEv+0x12>
    489e:	21 15       	cp	r18, r1
    48a0:	31 05       	cpc	r19, r1
    48a2:	09 f0       	breq	.+2      	; 0x48a6 <_ZN20TeaMachineController12GetNextDrinkEv+0x3a>
    48a4:	c9 01       	movw	r24, r18
    48a6:	08 95       	ret

000048a8 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink>:
    48a8:	ef 92       	push	r14
    48aa:	ff 92       	push	r15
    48ac:	0f 93       	push	r16
    48ae:	1f 93       	push	r17
    48b0:	cf 93       	push	r28
    48b2:	df 93       	push	r29
    48b4:	eb 01       	movw	r28, r22
    48b6:	29 81       	ldd	r18, Y+1	; 0x01
    48b8:	24 30       	cpi	r18, 0x04	; 4
    48ba:	11 f1       	breq	.+68     	; 0x4900 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x58>
    48bc:	dc 01       	movw	r26, r24
    48be:	1e 96       	adiw	r26, 0x0e	; 14
    48c0:	9c 01       	movw	r18, r24
    48c2:	22 5e       	subi	r18, 0xE2	; 226
    48c4:	3f 4f       	sbci	r19, 0xFF	; 255
    48c6:	56 2f       	mov	r21, r22
    48c8:	47 2f       	mov	r20, r23
    48ca:	cb 01       	movw	r24, r22
    48cc:	ed 91       	ld	r30, X+
    48ce:	fd 91       	ld	r31, X+
    48d0:	30 97       	sbiw	r30, 0x00	; 0
    48d2:	71 f0       	breq	.+28     	; 0x48f0 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x48>
    48d4:	05 85       	ldd	r16, Z+13	; 0x0d
    48d6:	16 85       	ldd	r17, Z+14	; 0x0e
    48d8:	eb 01       	movw	r28, r22
    48da:	ed 84       	ldd	r14, Y+13	; 0x0d
    48dc:	fe 84       	ldd	r15, Y+14	; 0x0e
    48de:	0e 15       	cp	r16, r14
    48e0:	1f 05       	cpc	r17, r15
    48e2:	41 f4       	brne	.+16     	; 0x48f4 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x4c>
    48e4:	c1 81       	ldd	r28, Z+1	; 0x01
    48e6:	c4 30       	cpi	r28, 0x04	; 4
    48e8:	29 f0       	breq	.+10     	; 0x48f4 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x4c>
    48ea:	85 2f       	mov	r24, r21
    48ec:	94 2f       	mov	r25, r20
    48ee:	02 c0       	rjmp	.+4      	; 0x48f4 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x4c>
    48f0:	e5 2f       	mov	r30, r21
    48f2:	f4 2f       	mov	r31, r20
    48f4:	a2 17       	cp	r26, r18
    48f6:	b3 07       	cpc	r27, r19
    48f8:	51 f0       	breq	.+20     	; 0x490e <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x66>
    48fa:	5e 2f       	mov	r21, r30
    48fc:	4f 2f       	mov	r20, r31
    48fe:	e6 cf       	rjmp	.-52     	; 0x48cc <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x24>
    4900:	df 91       	pop	r29
    4902:	cf 91       	pop	r28
    4904:	1f 91       	pop	r17
    4906:	0f 91       	pop	r16
    4908:	ff 90       	pop	r15
    490a:	ef 90       	pop	r14
    490c:	af cf       	rjmp	.-162    	; 0x486c <_ZN20TeaMachineController12GetNextDrinkEv>
    490e:	df 91       	pop	r29
    4910:	cf 91       	pop	r28
    4912:	1f 91       	pop	r17
    4914:	0f 91       	pop	r16
    4916:	ff 90       	pop	r15
    4918:	ef 90       	pop	r14
    491a:	08 95       	ret

0000491c <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink>:
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	0f 93       	push	r16
    4922:	1f 93       	push	r17
    4924:	cf 93       	push	r28
    4926:	df 93       	push	r29
    4928:	eb 01       	movw	r28, r22
    492a:	29 81       	ldd	r18, Y+1	; 0x01
    492c:	24 30       	cpi	r18, 0x04	; 4
    492e:	11 f1       	breq	.+68     	; 0x4974 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x58>
    4930:	dc 01       	movw	r26, r24
    4932:	90 96       	adiw	r26, 0x20	; 32
    4934:	9c 01       	movw	r18, r24
    4936:	22 5f       	subi	r18, 0xF2	; 242
    4938:	3f 4f       	sbci	r19, 0xFF	; 255
    493a:	56 2f       	mov	r21, r22
    493c:	47 2f       	mov	r20, r23
    493e:	cb 01       	movw	r24, r22
    4940:	fe 91       	ld	r31, -X
    4942:	ee 91       	ld	r30, -X
    4944:	30 97       	sbiw	r30, 0x00	; 0
    4946:	71 f0       	breq	.+28     	; 0x4964 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x48>
    4948:	05 85       	ldd	r16, Z+13	; 0x0d
    494a:	16 85       	ldd	r17, Z+14	; 0x0e
    494c:	eb 01       	movw	r28, r22
    494e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4950:	fe 84       	ldd	r15, Y+14	; 0x0e
    4952:	0e 15       	cp	r16, r14
    4954:	1f 05       	cpc	r17, r15
    4956:	41 f4       	brne	.+16     	; 0x4968 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x4c>
    4958:	c1 81       	ldd	r28, Z+1	; 0x01
    495a:	c4 30       	cpi	r28, 0x04	; 4
    495c:	29 f0       	breq	.+10     	; 0x4968 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x4c>
    495e:	85 2f       	mov	r24, r21
    4960:	94 2f       	mov	r25, r20
    4962:	02 c0       	rjmp	.+4      	; 0x4968 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x4c>
    4964:	e5 2f       	mov	r30, r21
    4966:	f4 2f       	mov	r31, r20
    4968:	a2 17       	cp	r26, r18
    496a:	b3 07       	cpc	r27, r19
    496c:	51 f0       	breq	.+20     	; 0x4982 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x66>
    496e:	5e 2f       	mov	r21, r30
    4970:	4f 2f       	mov	r20, r31
    4972:	e6 cf       	rjmp	.-52     	; 0x4940 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x24>
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	1f 91       	pop	r17
    497a:	0f 91       	pop	r16
    497c:	ff 90       	pop	r15
    497e:	ef 90       	pop	r14
    4980:	75 cf       	rjmp	.-278    	; 0x486c <_ZN20TeaMachineController12GetNextDrinkEv>
    4982:	df 91       	pop	r29
    4984:	cf 91       	pop	r28
    4986:	1f 91       	pop	r17
    4988:	0f 91       	pop	r16
    498a:	ff 90       	pop	r15
    498c:	ef 90       	pop	r14
    498e:	08 95       	ret

00004990 <_ZN20TeaMachineController16GetDrinkLocationEi>:
    4990:	fc 01       	movw	r30, r24
    4992:	b0 96       	adiw	r30, 0x20	; 32
    4994:	29 e0       	ldi	r18, 0x09	; 9
    4996:	30 e0       	ldi	r19, 0x00	; 0
    4998:	8f ef       	ldi	r24, 0xFF	; 255
    499a:	9f ef       	ldi	r25, 0xFF	; 255
    499c:	b2 91       	ld	r27, -Z
    499e:	a2 91       	ld	r26, -Z
    49a0:	10 97       	sbiw	r26, 0x00	; 0
    49a2:	41 f0       	breq	.+16     	; 0x49b4 <_ZN20TeaMachineController16GetDrinkLocationEi+0x24>
    49a4:	1d 96       	adiw	r26, 0x0d	; 13
    49a6:	4d 91       	ld	r20, X+
    49a8:	5c 91       	ld	r21, X
    49aa:	1e 97       	sbiw	r26, 0x0e	; 14
    49ac:	64 17       	cp	r22, r20
    49ae:	75 07       	cpc	r23, r21
    49b0:	09 f4       	brne	.+2      	; 0x49b4 <_ZN20TeaMachineController16GetDrinkLocationEi+0x24>
    49b2:	c9 01       	movw	r24, r18
    49b4:	21 50       	subi	r18, 0x01	; 1
    49b6:	31 09       	sbc	r19, r1
    49b8:	89 f7       	brne	.-30     	; 0x499c <_ZN20TeaMachineController16GetDrinkLocationEi+0xc>
    49ba:	08 95       	ret

000049bc <_ZN20TeaMachineController29NotifyConveyorAdvanceCompleteEv>:
//  NotifyConveyorAdvance()
//
//  Inform controller that conveyor advance has completed
//
void TeaMachineController::NotifyConveyorAdvanceComplete()
{
    49bc:	0f 93       	push	r16
    49be:	1f 93       	push	r17
    49c0:	cf 93       	push	r28
    49c2:	df 93       	push	r29
    49c4:	ec 01       	movw	r28, r24
    if( m_drinks[ST_COLLECTION_A] != NULL )
    49c6:	0e 8d       	ldd	r16, Y+30	; 0x1e
    49c8:	1f 8d       	ldd	r17, Y+31	; 0x1f
    49ca:	01 15       	cp	r16, r1
    49cc:	11 05       	cpc	r17, r1
    49ce:	31 f0       	breq	.+12     	; 0x49dc <_ZN20TeaMachineController29NotifyConveyorAdvanceCompleteEv+0x20>
    {
        // There should not be a drink at Collection station A, but if there is, delete it
        delete m_drinks[ST_COLLECTION_A];
    49d0:	c8 01       	movw	r24, r16
    49d2:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <_ZN5DrinkD1Ev>
    49d6:	c8 01       	movw	r24, r16
    49d8:	0e 94 b1 33 	call	0x6762	; 0x6762 <_ZdlPv>
    }
    
    // Move the drinks along by one position
    m_drinks[ST_COLLECTION_A] = m_drinks[ST_COLLECTION_B];
    49dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    49de:	9d 8d       	ldd	r25, Y+29	; 0x1d
    49e0:	9f 8f       	std	Y+31, r25	; 0x1f
    49e2:	8e 8f       	std	Y+30, r24	; 0x1e
    m_drinks[ST_COLLECTION_B] = m_drinks[ST_COLLECTION_C];
    49e4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    49e6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    49e8:	9d 8f       	std	Y+29, r25	; 0x1d
    49ea:	8c 8f       	std	Y+28, r24	; 0x1c
    m_drinks[ST_COLLECTION_C] = m_drinks[ST_STIR];
    49ec:	88 8d       	ldd	r24, Y+24	; 0x18
    49ee:	99 8d       	ldd	r25, Y+25	; 0x19
    49f0:	9b 8f       	std	Y+27, r25	; 0x1b
    49f2:	8a 8f       	std	Y+26, r24	; 0x1a
    m_drinks[ST_STIR] = m_drinks[ST_MILK];
    49f4:	8e 89       	ldd	r24, Y+22	; 0x16
    49f6:	9f 89       	ldd	r25, Y+23	; 0x17
    49f8:	99 8f       	std	Y+25, r25	; 0x19
    49fa:	88 8f       	std	Y+24, r24	; 0x18
    m_drinks[ST_MILK] = m_drinks[ST_BREW];
    49fc:	8c 89       	ldd	r24, Y+20	; 0x14
    49fe:	9d 89       	ldd	r25, Y+21	; 0x15
    4a00:	9f 8b       	std	Y+23, r25	; 0x17
    4a02:	8e 8b       	std	Y+22, r24	; 0x16
    m_drinks[ST_BREW] = m_drinks[ST_RECEPTION_A];
    4a04:	8a 89       	ldd	r24, Y+18	; 0x12
    4a06:	9b 89       	ldd	r25, Y+19	; 0x13
    4a08:	9d 8b       	std	Y+21, r25	; 0x15
    4a0a:	8c 8b       	std	Y+20, r24	; 0x14
    m_drinks[ST_RECEPTION_A] = m_drinks[ST_RECEPTION_B];
    4a0c:	88 89       	ldd	r24, Y+16	; 0x10
    4a0e:	99 89       	ldd	r25, Y+17	; 0x11
    4a10:	9b 8b       	std	Y+19, r25	; 0x13
    4a12:	8a 8b       	std	Y+18, r24	; 0x12
    m_drinks[ST_RECEPTION_B] = m_drinks[ST_RECEPTION_C];
    4a14:	8e 85       	ldd	r24, Y+14	; 0x0e
    4a16:	9f 85       	ldd	r25, Y+15	; 0x0f
    4a18:	99 8b       	std	Y+17, r25	; 0x11
    4a1a:	88 8b       	std	Y+16, r24	; 0x10
    m_drinks[ST_RECEPTION_C] = NULL;
    4a1c:	1f 86       	std	Y+15, r1	; 0x0f
    4a1e:	1e 86       	std	Y+14, r1	; 0x0e
    
    // Notify UI Manager that station positions have all advanced by one
    m_pUIManager->NotifyStationAdvanceComplete();
    4a20:	88 81       	ld	r24, Y
    4a22:	99 81       	ldd	r25, Y+1	; 0x01
}
    4a24:	df 91       	pop	r29
    4a26:	cf 91       	pop	r28
    4a28:	1f 91       	pop	r17
    4a2a:	0f 91       	pop	r16
    m_drinks[ST_RECEPTION_A] = m_drinks[ST_RECEPTION_B];
    m_drinks[ST_RECEPTION_B] = m_drinks[ST_RECEPTION_C];
    m_drinks[ST_RECEPTION_C] = NULL;
    
    // Notify UI Manager that station positions have all advanced by one
    m_pUIManager->NotifyStationAdvanceComplete();
    4a2c:	0c 94 a5 2d 	jmp	0x5b4a	; 0x5b4a <_ZN9UIManager28NotifyStationAdvanceCompleteEv>

00004a30 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>:
//  HandleError
//
//  Handle a failure condition by displaying error code and context
//
void TeaMachineController::HandleError( TeaMachineErrorContext context, unsigned long lErrorCode )
{
    4a30:	ec 01       	movw	r28, r24
    4a32:	16 2f       	mov	r17, r22
    4a34:	69 01       	movw	r12, r18
    4a36:	7a 01       	movw	r14, r20
	// Stop all devices
	m_pBrewManager->Stop();
    4a38:	8a 81       	ldd	r24, Y+2	; 0x02
    4a3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	ed 91       	ld	r30, X+
    4a40:	fc 91       	ld	r31, X
    4a42:	06 80       	ldd	r0, Z+6	; 0x06
    4a44:	f7 81       	ldd	r31, Z+7	; 0x07
    4a46:	e0 2d       	mov	r30, r0
    4a48:	19 95       	eicall
	m_pMilkManager->Stop();
    4a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    4a4e:	dc 01       	movw	r26, r24
    4a50:	ed 91       	ld	r30, X+
    4a52:	fc 91       	ld	r31, X
    4a54:	06 80       	ldd	r0, Z+6	; 0x06
    4a56:	f7 81       	ldd	r31, Z+7	; 0x07
    4a58:	e0 2d       	mov	r30, r0
    4a5a:	19 95       	eicall
	m_pStirManager->Stop();
    4a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    4a60:	dc 01       	movw	r26, r24
    4a62:	ed 91       	ld	r30, X+
    4a64:	fc 91       	ld	r31, X
    4a66:	06 80       	ldd	r0, Z+6	; 0x06
    4a68:	f7 81       	ldd	r31, Z+7	; 0x07
    4a6a:	e0 2d       	mov	r30, r0
    4a6c:	19 95       	eicall
	m_pConveyorManager->Stop();
    4a6e:	88 85       	ldd	r24, Y+8	; 0x08
    4a70:	99 85       	ldd	r25, Y+9	; 0x09
    4a72:	dc 01       	movw	r26, r24
    4a74:	ed 91       	ld	r30, X+
    4a76:	fc 91       	ld	r31, X
    4a78:	06 80       	ldd	r0, Z+6	; 0x06
    4a7a:	f7 81       	ldd	r31, Z+7	; 0x07
    4a7c:	e0 2d       	mov	r30, r0
    4a7e:	19 95       	eicall
	
	// Illuminate FAULT LED and display failure information
	m_pTeaMachine->GetSystem()->ClearOutputRegisterBit(OUTREG_LED_FAULT);
    4a80:	8a 85       	ldd	r24, Y+10	; 0x0a
    4a82:	9b 85       	ldd	r25, Y+11	; 0x0b
    4a84:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    4a88:	64 e0       	ldi	r22, 0x04	; 4
    4a8a:	70 e0       	ldi	r23, 0x00	; 0
    4a8c:	aa da       	rcall	.-2732   	; 0x3fe2 <_ZN6System22ClearOutputRegisterBitEj>
	m_pUIManager->SetMessage( TXT_FAIL, (int)context, (int)lErrorCode >> 4, (int)lErrorCode & 0x0F, false, true );
    4a8e:	c6 01       	movw	r24, r12
    4a90:	8f 70       	andi	r24, 0x0F	; 15
    4a92:	99 27       	eor	r25, r25
    4a94:	96 01       	movw	r18, r12
    4a96:	44 e0       	ldi	r20, 0x04	; 4
    4a98:	35 95       	asr	r19
    4a9a:	27 95       	ror	r18
    4a9c:	4a 95       	dec	r20
    4a9e:	e1 f7       	brne	.-8      	; 0x4a98 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm+0x68>
    4aa0:	41 2f       	mov	r20, r17
    4aa2:	50 e0       	ldi	r21, 0x00	; 0
    4aa4:	cc 24       	eor	r12, r12
    4aa6:	c3 94       	inc	r12
    4aa8:	e1 2c       	mov	r14, r1
    4aaa:	8c 01       	movw	r16, r24
    4aac:	6d e3       	ldi	r22, 0x3D	; 61
    4aae:	78 e0       	ldi	r23, 0x08	; 8
    4ab0:	88 81       	ld	r24, Y
    4ab2:	99 81       	ldd	r25, Y+1	; 0x01
    4ab4:	8c d4       	rcall	.+2328   	; 0x53ce <_ZN9UIManager10SetMessageEPciiibb>
    4ab6:	ff cf       	rjmp	.-2      	; 0x4ab6 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm+0x86>

00004ab8 <_ZN20TeaMachineController17TestUserInterfaceEv>:
//  TestUserInterface()
//
//  Operate UI as if tea machine was in service but without brew functions etc
//
bool TeaMachineController::TestUserInterface()
{
    4ab8:	ec 01       	movw	r28, r24
    bool bResult = true;
    ProcessManagerResponse UIManagerResponse = m_pUIManager->BeginReset();
    4aba:	88 81       	ld	r24, Y
    4abc:	99 81       	ldd	r25, Y+1	; 0x01
    4abe:	dc 01       	movw	r26, r24
    4ac0:	ed 91       	ld	r30, X+
    4ac2:	fc 91       	ld	r31, X
    4ac4:	01 90       	ld	r0, Z+
    4ac6:	f0 81       	ld	r31, Z
    4ac8:	e0 2d       	mov	r30, r0
    4aca:	19 95       	eicall
    while( UIManagerResponse == ProcessIncomplete )
    4acc:	81 11       	cpse	r24, r1
    4ace:	09 c0       	rjmp	.+18     	; 0x4ae2 <_ZN20TeaMachineController17TestUserInterfaceEv+0x2a>
    {
        if( UIManagerResponse == ProcessIncomplete )
        {
            UIManagerResponse = m_pUIManager->Continue();
    4ad0:	88 81       	ld	r24, Y
    4ad2:	99 81       	ldd	r25, Y+1	; 0x01
    4ad4:	dc 01       	movw	r26, r24
    4ad6:	ed 91       	ld	r30, X+
    4ad8:	fc 91       	ld	r31, X
    4ada:	04 80       	ldd	r0, Z+4	; 0x04
    4adc:	f5 81       	ldd	r31, Z+5	; 0x05
    4ade:	e0 2d       	mov	r30, r0
    4ae0:	f4 cf       	rjmp	.-24     	; 0x4aca <_ZN20TeaMachineController17TestUserInterfaceEv+0x12>
        }
    } // while

	// Initialise conveyor as this may be required in the test
    ProcessManagerResponse conveyorManagerResponse = m_pConveyorManager->BeginReset();
    4ae2:	88 85       	ldd	r24, Y+8	; 0x08
    4ae4:	99 85       	ldd	r25, Y+9	; 0x09
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	ed 91       	ld	r30, X+
    4aea:	fc 91       	ld	r31, X
    4aec:	01 90       	ld	r0, Z+
    4aee:	f0 81       	ld	r31, Z
    4af0:	e0 2d       	mov	r30, r0
    4af2:	19 95       	eicall
    4af4:	18 2f       	mov	r17, r24
    while( conveyorManagerResponse == ProcessIncomplete )
    4af6:	81 11       	cpse	r24, r1
    4af8:	09 c0       	rjmp	.+18     	; 0x4b0c <_ZN20TeaMachineController17TestUserInterfaceEv+0x54>
    {
	    if( conveyorManagerResponse == ProcessIncomplete )
	    {
		    conveyorManagerResponse = m_pConveyorManager->Continue();
    4afa:	88 85       	ldd	r24, Y+8	; 0x08
    4afc:	99 85       	ldd	r25, Y+9	; 0x09
    4afe:	dc 01       	movw	r26, r24
    4b00:	ed 91       	ld	r30, X+
    4b02:	fc 91       	ld	r31, X
    4b04:	04 80       	ldd	r0, Z+4	; 0x04
    4b06:	f5 81       	ldd	r31, Z+5	; 0x05
    4b08:	e0 2d       	mov	r30, r0
    4b0a:	f3 cf       	rjmp	.-26     	; 0x4af2 <_ZN20TeaMachineController17TestUserInterfaceEv+0x3a>
	    }
    } // while
	unsigned long nNextAdvance = millis() + CONVEYOR_TEST_PERIOD;
    4b0c:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    4b10:	6b 01       	movw	r12, r22
    4b12:	7c 01       	movw	r14, r24
    4b14:	b0 e1       	ldi	r27, 0x10	; 16
    4b16:	cb 0e       	add	r12, r27
    4b18:	b7 e2       	ldi	r27, 0x27	; 39
    4b1a:	db 1e       	adc	r13, r27
    4b1c:	e1 1c       	adc	r14, r1
    4b1e:	f1 1c       	adc	r15, r1
	
	// Begin the processing cycle
    UIManagerResponse = m_pUIManager->BeginProcess();
    4b20:	88 81       	ld	r24, Y
    4b22:	99 81       	ldd	r25, Y+1	; 0x01
    4b24:	dc 01       	movw	r26, r24
    4b26:	ed 91       	ld	r30, X+
    4b28:	fc 91       	ld	r31, X
    4b2a:	02 80       	ldd	r0, Z+2	; 0x02
    4b2c:	f3 81       	ldd	r31, Z+3	; 0x03
    4b2e:	e0 2d       	mov	r30, r0
    4b30:	19 95       	eicall
    if( UIManagerResponse != ProcessFailed )
    4b32:	81 30       	cpi	r24, 0x01	; 1
    4b34:	21 f1       	breq	.+72     	; 0x4b7e <_ZN20TeaMachineController17TestUserInterfaceEv+0xc6>
    {
        // Do this loop forever
        while(true)
        {
            // Yield to UI manager
            m_pUIManager->Continue();
    4b36:	88 81       	ld	r24, Y
    4b38:	99 81       	ldd	r25, Y+1	; 0x01
    4b3a:	dc 01       	movw	r26, r24
    4b3c:	ed 91       	ld	r30, X+
    4b3e:	fc 91       	ld	r31, X
    4b40:	04 80       	ldd	r0, Z+4	; 0x04
    4b42:	f5 81       	ldd	r31, Z+5	; 0x05
    4b44:	e0 2d       	mov	r30, r0
    4b46:	19 95       	eicall
 
			if((m_pTeaMachine->GetSystem()->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    4b48:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b4a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b4c:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    4b50:	db d9       	rcall	.-3146   	; 0x3f08 <_ZN6System21ReadInputRegisterDataEv>
    4b52:	93 ff       	sbrs	r25, 3
    4b54:	09 c0       	rjmp	.+18     	; 0x4b68 <_ZN20TeaMachineController17TestUserInterfaceEv+0xb0>
			{
				// Action switch is up, so, every few seconds, advance the conveyor
				if( (millis() > nNextAdvance) && (conveyorManagerResponse == ProcessComplete))
    4b56:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    4b5a:	c6 16       	cp	r12, r22
    4b5c:	d7 06       	cpc	r13, r23
    4b5e:	e8 06       	cpc	r14, r24
    4b60:	f9 06       	cpc	r15, r25
    4b62:	10 f4       	brcc	.+4      	; 0x4b68 <_ZN20TeaMachineController17TestUserInterfaceEv+0xb0>
    4b64:	12 30       	cpi	r17, 0x02	; 2
    4b66:	a1 f0       	breq	.+40     	; 0x4b90 <_ZN20TeaMachineController17TestUserInterfaceEv+0xd8>
					nNextAdvance = millis() + CONVEYOR_TEST_PERIOD;
				}
			}
			
			// Yield to conveyor manager
			conveyorManagerResponse = m_pConveyorManager->Continue();
    4b68:	88 85       	ldd	r24, Y+8	; 0x08
    4b6a:	99 85       	ldd	r25, Y+9	; 0x09
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	ed 91       	ld	r30, X+
    4b70:	fc 91       	ld	r31, X
    4b72:	04 80       	ldd	r0, Z+4	; 0x04
    4b74:	f5 81       	ldd	r31, Z+5	; 0x05
    4b76:	e0 2d       	mov	r30, r0
    4b78:	19 95       	eicall
    4b7a:	18 2f       	mov	r17, r24
	// Begin the processing cycle
    UIManagerResponse = m_pUIManager->BeginProcess();
    if( UIManagerResponse != ProcessFailed )
    {
        // Do this loop forever
        while(true)
    4b7c:	dc cf       	rjmp	.-72     	; 0x4b36 <_ZN20TeaMachineController17TestUserInterfaceEv+0x7e>
	ProcessManagerBase();
	ProcessManagerBase(TeaMachineController *pController);
	~ProcessManagerBase();

	// Returns process code for most recent error
   	unsigned long GetLastError() { return m_lErrorCode; }
    4b7e:	e8 81       	ld	r30, Y
    4b80:	f9 81       	ldd	r31, Y+1	; 0x01
			conveyorManagerResponse = m_pConveyorManager->Continue();
        } // while
    }
    else
    {
        HandleError( ErrorContext_Reset, m_pUIManager->GetLastError() );
    4b82:	20 89       	ldd	r18, Z+16	; 0x10
    4b84:	31 89       	ldd	r19, Z+17	; 0x11
    4b86:	42 89       	ldd	r20, Z+18	; 0x12
    4b88:	53 89       	ldd	r21, Z+19	; 0x13
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	ce 01       	movw	r24, r28
    4b8e:	50 df       	rcall	.-352    	; 0x4a30 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>
			{
				// Action switch is up, so, every few seconds, advance the conveyor
				if( (millis() > nNextAdvance) && (conveyorManagerResponse == ProcessComplete))
				{
					// Tell UI Manager that conveyor is advancing
					m_pUIManager->NotifyStationAdvanceBegins();
    4b90:	88 81       	ld	r24, Y
    4b92:	99 81       	ldd	r25, Y+1	; 0x01
    4b94:	d6 d7       	rcall	.+4012   	; 0x5b42 <_ZN9UIManager26NotifyStationAdvanceBeginsEv>
					
					// Initiate advance
					conveyorManagerResponse = m_pConveyorManager->BeginProcess();
    4b96:	88 85       	ldd	r24, Y+8	; 0x08
    4b98:	99 85       	ldd	r25, Y+9	; 0x09
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	ed 91       	ld	r30, X+
    4b9e:	fc 91       	ld	r31, X
    4ba0:	02 80       	ldd	r0, Z+2	; 0x02
    4ba2:	f3 81       	ldd	r31, Z+3	; 0x03
    4ba4:	e0 2d       	mov	r30, r0
    4ba6:	19 95       	eicall
					
					// Remember to do another advance
					nNextAdvance = millis() + CONVEYOR_TEST_PERIOD;
    4ba8:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    4bac:	6b 01       	movw	r12, r22
    4bae:	7c 01       	movw	r14, r24
    4bb0:	b0 e1       	ldi	r27, 0x10	; 16
    4bb2:	cb 0e       	add	r12, r27
    4bb4:	b7 e2       	ldi	r27, 0x27	; 39
    4bb6:	db 1e       	adc	r13, r27
    4bb8:	e1 1c       	adc	r14, r1
    4bba:	f1 1c       	adc	r15, r1
    4bbc:	d5 cf       	rjmp	.-86     	; 0x4b68 <_ZN20TeaMachineController17TestUserInterfaceEv+0xb0>

00004bbe <_ZN20TeaMachineController13ResetHardwareEv>:
//  ResetHardware()
//
//  Restore hardware to a known state
//
bool TeaMachineController::ResetHardware()
{     
    4bbe:	df 92       	push	r13
    4bc0:	ef 92       	push	r14
    4bc2:	ff 92       	push	r15
    4bc4:	0f 93       	push	r16
    4bc6:	1f 93       	push	r17
    4bc8:	cf 93       	push	r28
    4bca:	df 93       	push	r29
    4bcc:	ec 01       	movw	r28, r24
    bool bResult = true;
    
	Serial.print( "Beginning reset sequence\n" );
    4bce:	62 e4       	ldi	r22, 0x42	; 66
    4bd0:	78 e0       	ldi	r23, 0x08	; 8
    4bd2:	85 e5       	ldi	r24, 0x55	; 85
    4bd4:	9a e0       	ldi	r25, 0x0A	; 10
    4bd6:	0e 94 ff 33 	call	0x67fe	; 0x67fe <_ZN5Print5printEPKc>
	
    // Initiate reset sequences
    ProcessManagerResponse brewManagerResponse = m_pBrewManager->BeginReset();
    4bda:	8a 81       	ldd	r24, Y+2	; 0x02
    4bdc:	9b 81       	ldd	r25, Y+3	; 0x03
    4bde:	dc 01       	movw	r26, r24
    4be0:	ed 91       	ld	r30, X+
    4be2:	fc 91       	ld	r31, X
    4be4:	01 90       	ld	r0, Z+
    4be6:	f0 81       	ld	r31, Z
    4be8:	e0 2d       	mov	r30, r0
    4bea:	19 95       	eicall
    4bec:	d8 2e       	mov	r13, r24
    ProcessManagerResponse milkManagerResponse = m_pMilkManager->BeginReset();
    4bee:	8c 81       	ldd	r24, Y+4	; 0x04
    4bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    4bf2:	dc 01       	movw	r26, r24
    4bf4:	ed 91       	ld	r30, X+
    4bf6:	fc 91       	ld	r31, X
    4bf8:	01 90       	ld	r0, Z+
    4bfa:	f0 81       	ld	r31, Z
    4bfc:	e0 2d       	mov	r30, r0
    4bfe:	19 95       	eicall
    4c00:	e8 2e       	mov	r14, r24
    ProcessManagerResponse stirManagerResponse = m_pStirManager->BeginReset();
    4c02:	8e 81       	ldd	r24, Y+6	; 0x06
    4c04:	9f 81       	ldd	r25, Y+7	; 0x07
    4c06:	dc 01       	movw	r26, r24
    4c08:	ed 91       	ld	r30, X+
    4c0a:	fc 91       	ld	r31, X
    4c0c:	01 90       	ld	r0, Z+
    4c0e:	f0 81       	ld	r31, Z
    4c10:	e0 2d       	mov	r30, r0
    4c12:	19 95       	eicall
    4c14:	f8 2e       	mov	r15, r24
    ProcessManagerResponse conveyorManagerResponse = m_pConveyorManager->BeginReset();
    4c16:	88 85       	ldd	r24, Y+8	; 0x08
    4c18:	99 85       	ldd	r25, Y+9	; 0x09
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	ed 91       	ld	r30, X+
    4c1e:	fc 91       	ld	r31, X
    4c20:	01 90       	ld	r0, Z+
    4c22:	f0 81       	ld	r31, Z
    4c24:	e0 2d       	mov	r30, r0
    4c26:	19 95       	eicall
    4c28:	08 2f       	mov	r16, r24
    ProcessManagerResponse UIManagerResponse = m_pUIManager->BeginReset();
    4c2a:	88 81       	ld	r24, Y
    4c2c:	99 81       	ldd	r25, Y+1	; 0x01
    4c2e:	dc 01       	movw	r26, r24
    4c30:	ed 91       	ld	r30, X+
    4c32:	fc 91       	ld	r31, X
    4c34:	01 90       	ld	r0, Z+
    4c36:	f0 81       	ld	r31, Z
    4c38:	e0 2d       	mov	r30, r0
    4c3a:	19 95       	eicall
    4c3c:	18 2f       	mov	r17, r24
    // Ensure reset sequences complete
    while(     (brewManagerResponse == ProcessIncomplete) 
            || (milkManagerResponse == ProcessIncomplete)
            || (stirManagerResponse == ProcessIncomplete)
            || (conveyorManagerResponse == ProcessIncomplete)
            || (UIManagerResponse == ProcessIncomplete))
    4c3e:	dd 20       	and	r13, r13
    4c40:	49 f0       	breq	.+18     	; 0x4c54 <_ZN20TeaMachineController13ResetHardwareEv+0x96>
    ProcessManagerResponse conveyorManagerResponse = m_pConveyorManager->BeginReset();
    ProcessManagerResponse UIManagerResponse = m_pUIManager->BeginReset();
    
    // Ensure reset sequences complete
    while(     (brewManagerResponse == ProcessIncomplete) 
            || (milkManagerResponse == ProcessIncomplete)
    4c42:	ee 20       	and	r14, r14
    4c44:	99 f0       	breq	.+38     	; 0x4c6c <_ZN20TeaMachineController13ResetHardwareEv+0xae>
            || (stirManagerResponse == ProcessIncomplete)
    4c46:	ff 20       	and	r15, r15
    4c48:	e9 f0       	breq	.+58     	; 0x4c84 <_ZN20TeaMachineController13ResetHardwareEv+0xc6>
            || (conveyorManagerResponse == ProcessIncomplete)
    4c4a:	00 23       	and	r16, r16
    4c4c:	39 f1       	breq	.+78     	; 0x4c9c <_ZN20TeaMachineController13ResetHardwareEv+0xde>
            || (UIManagerResponse == ProcessIncomplete))
    4c4e:	11 23       	and	r17, r17
    4c50:	19 f1       	breq	.+70     	; 0x4c98 <_ZN20TeaMachineController13ResetHardwareEv+0xda>
    4c52:	39 c0       	rjmp	.+114    	; 0x4cc6 <_ZN20TeaMachineController13ResetHardwareEv+0x108>
    {
        if( brewManagerResponse == ProcessIncomplete )
        {
            brewManagerResponse = m_pBrewManager->Continue();
    4c54:	8a 81       	ldd	r24, Y+2	; 0x02
    4c56:	9b 81       	ldd	r25, Y+3	; 0x03
    4c58:	dc 01       	movw	r26, r24
    4c5a:	ed 91       	ld	r30, X+
    4c5c:	fc 91       	ld	r31, X
    4c5e:	04 80       	ldd	r0, Z+4	; 0x04
    4c60:	f5 81       	ldd	r31, Z+5	; 0x05
    4c62:	e0 2d       	mov	r30, r0
    4c64:	19 95       	eicall
    4c66:	d8 2e       	mov	r13, r24
        }
        if( milkManagerResponse == ProcessIncomplete )
    4c68:	e1 10       	cpse	r14, r1
    4c6a:	0a c0       	rjmp	.+20     	; 0x4c80 <_ZN20TeaMachineController13ResetHardwareEv+0xc2>
        {
            milkManagerResponse = m_pMilkManager->Continue();
    4c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    4c70:	dc 01       	movw	r26, r24
    4c72:	ed 91       	ld	r30, X+
    4c74:	fc 91       	ld	r31, X
    4c76:	04 80       	ldd	r0, Z+4	; 0x04
    4c78:	f5 81       	ldd	r31, Z+5	; 0x05
    4c7a:	e0 2d       	mov	r30, r0
    4c7c:	19 95       	eicall
    4c7e:	e8 2e       	mov	r14, r24
        }
        if( stirManagerResponse == ProcessIncomplete )
    4c80:	f1 10       	cpse	r15, r1
    4c82:	0a c0       	rjmp	.+20     	; 0x4c98 <_ZN20TeaMachineController13ResetHardwareEv+0xda>
        {
            stirManagerResponse = m_pStirManager->Continue();
    4c84:	8e 81       	ldd	r24, Y+6	; 0x06
    4c86:	9f 81       	ldd	r25, Y+7	; 0x07
    4c88:	dc 01       	movw	r26, r24
    4c8a:	ed 91       	ld	r30, X+
    4c8c:	fc 91       	ld	r31, X
    4c8e:	04 80       	ldd	r0, Z+4	; 0x04
    4c90:	f5 81       	ldd	r31, Z+5	; 0x05
    4c92:	e0 2d       	mov	r30, r0
    4c94:	19 95       	eicall
    4c96:	f8 2e       	mov	r15, r24
        }
        if( conveyorManagerResponse == ProcessIncomplete )
    4c98:	01 11       	cpse	r16, r1
    4c9a:	0a c0       	rjmp	.+20     	; 0x4cb0 <_ZN20TeaMachineController13ResetHardwareEv+0xf2>
        {
            conveyorManagerResponse = m_pConveyorManager->Continue();
    4c9c:	88 85       	ldd	r24, Y+8	; 0x08
    4c9e:	99 85       	ldd	r25, Y+9	; 0x09
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	ed 91       	ld	r30, X+
    4ca4:	fc 91       	ld	r31, X
    4ca6:	04 80       	ldd	r0, Z+4	; 0x04
    4ca8:	f5 81       	ldd	r31, Z+5	; 0x05
    4caa:	e0 2d       	mov	r30, r0
    4cac:	19 95       	eicall
    4cae:	08 2f       	mov	r16, r24
        }
        if( UIManagerResponse == ProcessIncomplete )
    4cb0:	11 11       	cpse	r17, r1
    4cb2:	c5 cf       	rjmp	.-118    	; 0x4c3e <_ZN20TeaMachineController13ResetHardwareEv+0x80>
        {
            UIManagerResponse = m_pUIManager->Continue();
    4cb4:	88 81       	ld	r24, Y
    4cb6:	99 81       	ldd	r25, Y+1	; 0x01
    4cb8:	dc 01       	movw	r26, r24
    4cba:	ed 91       	ld	r30, X+
    4cbc:	fc 91       	ld	r31, X
    4cbe:	04 80       	ldd	r0, Z+4	; 0x04
    4cc0:	f5 81       	ldd	r31, Z+5	; 0x05
    4cc2:	e0 2d       	mov	r30, r0
    4cc4:	ba cf       	rjmp	.-140    	; 0x4c3a <_ZN20TeaMachineController13ResetHardwareEv+0x7c>
        }
    } // while
 
    // Handle any errors resulting from the reset sequence
    unsigned long lErrorCode = PROC_OK;
    if( brewManagerResponse == ProcessFailed )
    4cc6:	b1 e0       	ldi	r27, 0x01	; 1
    4cc8:	db 12       	cpse	r13, r27
    4cca:	03 c0       	rjmp	.+6      	; 0x4cd2 <_ZN20TeaMachineController13ResetHardwareEv+0x114>
    4ccc:	ea 81       	ldd	r30, Y+2	; 0x02
    4cce:	fb 81       	ldd	r31, Y+3	; 0x03
    4cd0:	05 c0       	rjmp	.+10     	; 0x4cdc <_ZN20TeaMachineController13ResetHardwareEv+0x11e>
    {
        HandleError( ErrorContext_Reset, m_pBrewManager->GetLastError() );
        bResult = false;
    }
    if( milkManagerResponse == ProcessFailed )
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	e8 12       	cpse	r14, r24
    4cd6:	09 c0       	rjmp	.+18     	; 0x4cea <_ZN20TeaMachineController13ResetHardwareEv+0x12c>
    4cd8:	ec 81       	ldd	r30, Y+4	; 0x04
    4cda:	fd 81       	ldd	r31, Y+5	; 0x05
    {
        HandleError( ErrorContext_Reset, m_pMilkManager->GetLastError() );
    4cdc:	20 89       	ldd	r18, Z+16	; 0x10
    4cde:	31 89       	ldd	r19, Z+17	; 0x11
    4ce0:	42 89       	ldd	r20, Z+18	; 0x12
    4ce2:	53 89       	ldd	r21, Z+19	; 0x13
    4ce4:	60 e0       	ldi	r22, 0x00	; 0
    4ce6:	ce 01       	movw	r24, r28
    4ce8:	a3 de       	rcall	.-698    	; 0x4a30 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>
        bResult = false;
    }
    if( stirManagerResponse == ProcessFailed )
    4cea:	a1 e0       	ldi	r26, 0x01	; 1
    4cec:	fa 12       	cpse	r15, r26
    4cee:	03 c0       	rjmp	.+6      	; 0x4cf6 <_ZN20TeaMachineController13ResetHardwareEv+0x138>
    4cf0:	ee 81       	ldd	r30, Y+6	; 0x06
    4cf2:	ff 81       	ldd	r31, Y+7	; 0x07
    4cf4:	f3 cf       	rjmp	.-26     	; 0x4cdc <_ZN20TeaMachineController13ResetHardwareEv+0x11e>
    {
        HandleError( ErrorContext_Reset, m_pStirManager->GetLastError() );
        bResult = false;
    }
    if( conveyorManagerResponse == ProcessFailed )
    4cf6:	01 30       	cpi	r16, 0x01	; 1
    4cf8:	19 f4       	brne	.+6      	; 0x4d00 <_ZN20TeaMachineController13ResetHardwareEv+0x142>
    4cfa:	e8 85       	ldd	r30, Y+8	; 0x08
    4cfc:	f9 85       	ldd	r31, Y+9	; 0x09
    4cfe:	ee cf       	rjmp	.-36     	; 0x4cdc <_ZN20TeaMachineController13ResetHardwareEv+0x11e>
    {
        HandleError( ErrorContext_Reset, m_pConveyorManager->GetLastError() );
        bResult = false;
    }
    if( UIManagerResponse == ProcessFailed )
    4d00:	11 30       	cpi	r17, 0x01	; 1
    4d02:	19 f4       	brne	.+6      	; 0x4d0a <_ZN20TeaMachineController13ResetHardwareEv+0x14c>
    4d04:	e8 81       	ld	r30, Y
    4d06:	f9 81       	ldd	r31, Y+1	; 0x01
    4d08:	e9 cf       	rjmp	.-46     	; 0x4cdc <_ZN20TeaMachineController13ResetHardwareEv+0x11e>
        HandleError( ErrorContext_Reset, m_pUIManager->GetLastError() );
        bResult = false;
    }
   
    return bResult;
}
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	df 91       	pop	r29
    4d0e:	cf 91       	pop	r28
    4d10:	1f 91       	pop	r17
    4d12:	0f 91       	pop	r16
    4d14:	ff 90       	pop	r15
    4d16:	ef 90       	pop	r14
    4d18:	df 90       	pop	r13
    4d1a:	08 95       	ret

00004d1c <_ZN20TeaMachineController7ServiceEv>:
//  Service()
//
//  Main service loop
//
void TeaMachineController::Service()
{
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	ec 01       	movw	r28, r24
    if( ResetHardware() )
    4d22:	4d df       	rcall	.-358    	; 0x4bbe <_ZN20TeaMachineController13ResetHardwareEv>
    4d24:	88 23       	and	r24, r24
    4d26:	09 f4       	brne	.+2      	; 0x4d2a <_ZN20TeaMachineController7ServiceEv+0xe>
    4d28:	2e c1       	rjmp	.+604    	; 0x4f86 <_ZN20TeaMachineController7ServiceEv+0x26a>
    {
        m_pUIManager->BeginProcess();
    4d2a:	88 81       	ld	r24, Y
    4d2c:	99 81       	ldd	r25, Y+1	; 0x01
    4d2e:	dc 01       	movw	r26, r24
    4d30:	ed 91       	ld	r30, X+
    4d32:	fc 91       	ld	r31, X
    4d34:	02 80       	ldd	r0, Z+2	; 0x02
    4d36:	f3 81       	ldd	r31, Z+3	; 0x03
    4d38:	e0 2d       	mov	r30, r0
    4d3a:	19 95       	eicall
        
        // Do this loop forever
        while(!m_pTeaMachine->GetSystem()->SystemModeHasChanged())
    4d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    4d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4d40:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN21ATMegaApplicationBase9GetSystemEv>
    4d44:	d9 d9       	rcall	.-3150   	; 0x40f8 <_ZN6System20SystemModeHasChangedEv>
    4d46:	81 11       	cpse	r24, r1
    4d48:	1e c1       	rjmp	.+572    	; 0x4f86 <_ZN20TeaMachineController7ServiceEv+0x26a>
        {
            // Yield to UI manager
            m_pUIManager->Continue();
    4d4a:	88 81       	ld	r24, Y
    4d4c:	99 81       	ldd	r25, Y+1	; 0x01
    4d4e:	dc 01       	movw	r26, r24
    4d50:	ed 91       	ld	r30, X+
    4d52:	fc 91       	ld	r31, X
    4d54:	04 80       	ldd	r0, Z+4	; 0x04
    4d56:	f5 81       	ldd	r31, Z+5	; 0x05
    4d58:	e0 2d       	mov	r30, r0
    4d5a:	19 95       	eicall
            
            switch( m_pConveyorManager->GetLastResponse() )
    4d5c:	a8 85       	ldd	r26, Y+8	; 0x08
    4d5e:	b9 85       	ldd	r27, Y+9	; 0x09
    4d60:	58 96       	adiw	r26, 0x18	; 24
    4d62:	8c 91       	ld	r24, X
    4d64:	58 97       	sbiw	r26, 0x18	; 24
    4d66:	81 30       	cpi	r24, 0x01	; 1
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <_ZN20TeaMachineController7ServiceEv+0x50>
    4d6a:	9d c0       	rjmp	.+314    	; 0x4ea6 <_ZN20TeaMachineController7ServiceEv+0x18a>
    4d6c:	08 f4       	brcc	.+2      	; 0x4d70 <_ZN20TeaMachineController7ServiceEv+0x54>
    4d6e:	93 c0       	rjmp	.+294    	; 0x4e96 <_ZN20TeaMachineController7ServiceEv+0x17a>
    4d70:	82 30       	cpi	r24, 0x02	; 2
    4d72:	21 f7       	brne	.-56     	; 0x4d3c <_ZN20TeaMachineController7ServiceEv+0x20>
                // Conveyor is not advancing
   //             if( ActiveDrinkIsPresent() )
                if( true )
                {
                    // At least one cup is present on preparation/reception stations and is active (i.e. user has chosen drink)
                    if( (m_drinks[ST_STIR] != NULL) && (m_pStirManager->GetLastResponse() != ProcessIncomplete)  )
    4d74:	e8 8d       	ldd	r30, Y+24	; 0x18
    4d76:	f9 8d       	ldd	r31, Y+25	; 0x19
    4d78:	30 97       	sbiw	r30, 0x00	; 0
    4d7a:	61 f0       	breq	.+24     	; 0x4d94 <_ZN20TeaMachineController7ServiceEv+0x78>
    4d7c:	ae 81       	ldd	r26, Y+6	; 0x06
    4d7e:	bf 81       	ldd	r27, Y+7	; 0x07
    4d80:	58 96       	adiw	r26, 0x18	; 24
    4d82:	8c 91       	ld	r24, X
    4d84:	88 23       	and	r24, r24
    4d86:	31 f0       	breq	.+12     	; 0x4d94 <_ZN20TeaMachineController7ServiceEv+0x78>
                    {
                        // Check drink standing at stir station
                        if( m_drinks[ST_STIR]->CupIsPresent() && m_drinks[ST_STIR]->SelectionIsConfirmed() && (m_drinks[ST_STIR]->GetState() == MilkStageComplete ) )
    4d88:	80 89       	ldd	r24, Z+16	; 0x10
    4d8a:	88 23       	and	r24, r24
    4d8c:	19 f0       	breq	.+6      	; 0x4d94 <_ZN20TeaMachineController7ServiceEv+0x78>
    4d8e:	87 85       	ldd	r24, Z+15	; 0x0f
    4d90:	81 11       	cpse	r24, r1
    4d92:	90 c0       	rjmp	.+288    	; 0x4eb4 <_ZN20TeaMachineController7ServiceEv+0x198>
	                            HandleError( ErrorContext_Service, m_pStirManager->GetLastError() );
                            }
                        }
                    }
                    
                    if( (m_drinks[ST_MILK] != NULL) && (m_pMilkManager->GetLastResponse() != ProcessIncomplete)  )
    4d94:	ee 89       	ldd	r30, Y+22	; 0x16
    4d96:	ff 89       	ldd	r31, Y+23	; 0x17
    4d98:	30 97       	sbiw	r30, 0x00	; 0
    4d9a:	61 f0       	breq	.+24     	; 0x4db4 <_ZN20TeaMachineController7ServiceEv+0x98>
    4d9c:	ac 81       	ldd	r26, Y+4	; 0x04
    4d9e:	bd 81       	ldd	r27, Y+5	; 0x05
    4da0:	58 96       	adiw	r26, 0x18	; 24
    4da2:	8c 91       	ld	r24, X
    4da4:	88 23       	and	r24, r24
    4da6:	31 f0       	breq	.+12     	; 0x4db4 <_ZN20TeaMachineController7ServiceEv+0x98>
                    {
                        // Check drink standing at milk station
                        if( m_drinks[ST_MILK]->CupIsPresent() && m_drinks[ST_MILK]->SelectionIsConfirmed() && (m_drinks[ST_MILK]->GetState() == BrewStageComplete ) )
    4da8:	80 89       	ldd	r24, Z+16	; 0x10
    4daa:	88 23       	and	r24, r24
    4dac:	19 f0       	breq	.+6      	; 0x4db4 <_ZN20TeaMachineController7ServiceEv+0x98>
    4dae:	87 85       	ldd	r24, Z+15	; 0x0f
    4db0:	81 11       	cpse	r24, r1
    4db2:	9d c0       	rjmp	.+314    	; 0x4eee <_ZN20TeaMachineController7ServiceEv+0x1d2>
								HandleError( ErrorContext_Service, m_pMilkManager->GetLastError() );
							}
                        }
                    }
                    
                    if( ( m_drinks[ST_BREW] != NULL) && (m_pBrewManager->GetLastResponse() != ProcessIncomplete) )
    4db4:	ec 89       	ldd	r30, Y+20	; 0x14
    4db6:	fd 89       	ldd	r31, Y+21	; 0x15
    4db8:	30 97       	sbiw	r30, 0x00	; 0
    4dba:	61 f0       	breq	.+24     	; 0x4dd4 <_ZN20TeaMachineController7ServiceEv+0xb8>
    4dbc:	aa 81       	ldd	r26, Y+2	; 0x02
    4dbe:	bb 81       	ldd	r27, Y+3	; 0x03
    4dc0:	58 96       	adiw	r26, 0x18	; 24
    4dc2:	8c 91       	ld	r24, X
    4dc4:	88 23       	and	r24, r24
    4dc6:	31 f0       	breq	.+12     	; 0x4dd4 <_ZN20TeaMachineController7ServiceEv+0xb8>
                    {
                        // Check drink standing at brew station
                        if( m_drinks[ST_BREW]->CupIsPresent() && m_drinks[ST_BREW]->SelectionIsConfirmed() && (m_drinks[ST_BREW]->GetState() == Empty) )
    4dc8:	80 89       	ldd	r24, Z+16	; 0x10
    4dca:	88 23       	and	r24, r24
    4dcc:	19 f0       	breq	.+6      	; 0x4dd4 <_ZN20TeaMachineController7ServiceEv+0xb8>
    4dce:	87 85       	ldd	r24, Z+15	; 0x0f
    4dd0:	81 11       	cpse	r24, r1
    4dd2:	aa c0       	rjmp	.+340    	; 0x4f28 <_ZN20TeaMachineController7ServiceEv+0x20c>
                            }
                        }
                    }
                    
                    // Yield to brew process manager
                    if( m_pBrewManager->Continue() == ProcessFailed )
    4dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd8:	dc 01       	movw	r26, r24
    4dda:	ed 91       	ld	r30, X+
    4ddc:	fc 91       	ld	r31, X
    4dde:	04 80       	ldd	r0, Z+4	; 0x04
    4de0:	f5 81       	ldd	r31, Z+5	; 0x05
    4de2:	e0 2d       	mov	r30, r0
    4de4:	19 95       	eicall
    4de6:	81 30       	cpi	r24, 0x01	; 1
    4de8:	49 f4       	brne	.+18     	; 0x4dfc <_ZN20TeaMachineController7ServiceEv+0xe0>
    4dea:	ea 81       	ldd	r30, Y+2	; 0x02
    4dec:	fb 81       	ldd	r31, Y+3	; 0x03
                           // Milk station cup is ready to begin milk process
                            m_pMilkManager->SetDrink(m_drinks[ST_MILK]);
                            if( m_pMilkManager->BeginProcess() == ProcessFailed )
							{
								// Handle process failure
								HandleError( ErrorContext_Service, m_pMilkManager->GetLastError() );
    4dee:	20 89       	ldd	r18, Z+16	; 0x10
    4df0:	31 89       	ldd	r19, Z+17	; 0x11
    4df2:	42 89       	ldd	r20, Z+18	; 0x12
    4df4:	53 89       	ldd	r21, Z+19	; 0x13
    4df6:	61 e0       	ldi	r22, 0x01	; 1
    4df8:	ce 01       	movw	r24, r28
    4dfa:	1a de       	rcall	.-972    	; 0x4a30 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>
	                    // Handle process failure
	                    HandleError( ErrorContext_Service, m_pBrewManager->GetLastError() );
                    }
                    
                    // Yield to milk process manager
                    if( m_pMilkManager->Continue() == ProcessFailed )
    4dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    4dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    4e00:	dc 01       	movw	r26, r24
    4e02:	ed 91       	ld	r30, X+
    4e04:	fc 91       	ld	r31, X
    4e06:	04 80       	ldd	r0, Z+4	; 0x04
    4e08:	f5 81       	ldd	r31, Z+5	; 0x05
    4e0a:	e0 2d       	mov	r30, r0
    4e0c:	19 95       	eicall
    4e0e:	81 30       	cpi	r24, 0x01	; 1
    4e10:	19 f4       	brne	.+6      	; 0x4e18 <_ZN20TeaMachineController7ServiceEv+0xfc>
    4e12:	ec 81       	ldd	r30, Y+4	; 0x04
    4e14:	fd 81       	ldd	r31, Y+5	; 0x05
    4e16:	eb cf       	rjmp	.-42     	; 0x4dee <_ZN20TeaMachineController7ServiceEv+0xd2>
	                    // Handle process failure
	                    HandleError( ErrorContext_Service, m_pMilkManager->GetLastError() );
                    }
                    
                    // Yield to stir process manager
                    if( m_pStirManager->Continue() == ProcessFailed )
    4e18:	8e 81       	ldd	r24, Y+6	; 0x06
    4e1a:	9f 81       	ldd	r25, Y+7	; 0x07
    4e1c:	dc 01       	movw	r26, r24
    4e1e:	ed 91       	ld	r30, X+
    4e20:	fc 91       	ld	r31, X
    4e22:	04 80       	ldd	r0, Z+4	; 0x04
    4e24:	f5 81       	ldd	r31, Z+5	; 0x05
    4e26:	e0 2d       	mov	r30, r0
    4e28:	19 95       	eicall
    4e2a:	81 30       	cpi	r24, 0x01	; 1
    4e2c:	19 f4       	brne	.+6      	; 0x4e34 <_ZN20TeaMachineController7ServiceEv+0x118>
    4e2e:	ee 81       	ldd	r30, Y+6	; 0x06
    4e30:	ff 81       	ldd	r31, Y+7	; 0x07
                    {
	                    // Handle process failure
	                    HandleError( ErrorContext_Service, m_pStirManager->GetLastError() );
                    }
                    
                    if( PreparationStationsAreInactive() )
    4e32:	dd cf       	rjmp	.-70     	; 0x4dee <_ZN20TeaMachineController7ServiceEv+0xd2>
    4e34:	ce 01       	movw	r24, r28
    4e36:	6a dc       	rcall	.-1836   	; 0x470c <_ZN20TeaMachineController30PreparationStationsAreInactiveEv>
    4e38:	88 23       	and	r24, r24
						//   (c) A milk-complete cup is at the milk station
						//   (d) A ready-to-drink cup is at the stir station
						// Advance cannot take place if:
						//   (a) A cup is present on the far left station
						//   (b) An unconfirmed cup is present at the brew station 
						if((	ReceptionCupsReadyToAdvance()
    4e3a:	21 f1       	breq	.+72     	; 0x4e84 <_ZN20TeaMachineController7ServiceEv+0x168>
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	1a dc       	rcall	.-1996   	; 0x4674 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv>
							||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
							||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
							||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
    4e40:	81 11       	cpse	r24, r1
    4e42:	15 c0       	rjmp	.+42     	; 0x4e6e <_ZN20TeaMachineController7ServiceEv+0x152>
						//   (d) A ready-to-drink cup is at the stir station
						// Advance cannot take place if:
						//   (a) A cup is present on the far left station
						//   (b) An unconfirmed cup is present at the brew station 
						if((	ReceptionCupsReadyToAdvance()
							||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
    4e44:	41 e0       	ldi	r20, 0x01	; 1
    4e46:	64 e0       	ldi	r22, 0x04	; 4
    4e48:	70 e0       	ldi	r23, 0x00	; 0
    4e4a:	ce 01       	movw	r24, r28
    4e4c:	f0 db       	rcall	.-2080   	; 0x462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    4e4e:	81 11       	cpse	r24, r1
    4e50:	0e c0       	rjmp	.+28     	; 0x4e6e <_ZN20TeaMachineController7ServiceEv+0x152>
							||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
    4e52:	42 e0       	ldi	r20, 0x02	; 2
    4e54:	65 e0       	ldi	r22, 0x05	; 5
    4e56:	70 e0       	ldi	r23, 0x00	; 0
    4e58:	ce 01       	movw	r24, r28
    4e5a:	e9 db       	rcall	.-2094   	; 0x462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    4e5c:	81 11       	cpse	r24, r1
    4e5e:	07 c0       	rjmp	.+14     	; 0x4e6e <_ZN20TeaMachineController7ServiceEv+0x152>
							||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
    4e60:	43 e0       	ldi	r20, 0x03	; 3
    4e62:	66 e0       	ldi	r22, 0x06	; 6
    4e64:	70 e0       	ldi	r23, 0x00	; 0
    4e66:	ce 01       	movw	r24, r28
    4e68:	e2 db       	rcall	.-2108   	; 0x462e <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    4e6a:	88 23       	and	r24, r24
    4e6c:	59 f0       	breq	.+22     	; 0x4e84 <_ZN20TeaMachineController7ServiceEv+0x168>
    4e6e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4e70:	9f 8d       	ldd	r25, Y+31	; 0x1f
    4e72:	89 2b       	or	r24, r25
    4e74:	39 f4       	brne	.+14     	; 0x4e84 <_ZN20TeaMachineController7ServiceEv+0x168>
    4e76:	64 e0       	ldi	r22, 0x04	; 4
    4e78:	70 e0       	ldi	r23, 0x00	; 0
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	ea db       	rcall	.-2092   	; 0x4652 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    4e7e:	88 23       	and	r24, r24
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <_ZN20TeaMachineController7ServiceEv+0x168>
    4e82:	6e c0       	rjmp	.+220    	; 0x4f60 <_ZN20TeaMachineController7ServiceEv+0x244>
    4e84:	88 85       	ldd	r24, Y+8	; 0x08
							m_pConveyorManager->BeginProcess();
						}
                    }
					
					// Yield to the conveyor manager
					m_pConveyorManager->Continue();
    4e86:	99 85       	ldd	r25, Y+9	; 0x09
    4e88:	dc 01       	movw	r26, r24
    4e8a:	ed 91       	ld	r30, X+
    4e8c:	fc 91       	ld	r31, X
    4e8e:	04 80       	ldd	r0, Z+4	; 0x04
    4e90:	f5 81       	ldd	r31, Z+5	; 0x05
    4e92:	e0 2d       	mov	r30, r0
    4e94:	52 cf       	rjmp	.-348    	; 0x4d3a <_ZN20TeaMachineController7ServiceEv+0x1e>
    4e96:	ed 91       	ld	r30, X+
                }
                break;
                
                case ProcessIncomplete:
                // Conveyor is in the process of advancing, so do nothing else until it completes
                m_pConveyorManager->Continue();
    4e98:	fc 91       	ld	r31, X
    4e9a:	11 97       	sbiw	r26, 0x01	; 1
    4e9c:	04 80       	ldd	r0, Z+4	; 0x04
    4e9e:	f5 81       	ldd	r31, Z+5	; 0x05
    4ea0:	e0 2d       	mov	r30, r0
    4ea2:	cd 01       	movw	r24, r26
    4ea4:	4a cf       	rjmp	.-364    	; 0x4d3a <_ZN20TeaMachineController7ServiceEv+0x1e>
    4ea6:	50 96       	adiw	r26, 0x10	; 16
                break;
                
                case ProcessFailed:
                // Conveyor failure
                HandleError( ErrorContext_Service, m_pConveyorManager->GetLastError() );
    4ea8:	2d 91       	ld	r18, X+
    4eaa:	3d 91       	ld	r19, X+
    4eac:	4d 91       	ld	r20, X+
    4eae:	5c 91       	ld	r21, X
    4eb0:	53 97       	sbiw	r26, 0x13	; 19
    4eb2:	a1 cf       	rjmp	.-190    	; 0x4df6 <_ZN20TeaMachineController7ServiceEv+0xda>
    4eb4:	81 81       	ldd	r24, Z+1	; 0x01
                {
                    // At least one cup is present on preparation/reception stations and is active (i.e. user has chosen drink)
                    if( (m_drinks[ST_STIR] != NULL) && (m_pStirManager->GetLastResponse() != ProcessIncomplete)  )
                    {
                        // Check drink standing at stir station
                        if( m_drinks[ST_STIR]->CupIsPresent() && m_drinks[ST_STIR]->SelectionIsConfirmed() && (m_drinks[ST_STIR]->GetState() == MilkStageComplete ) )
    4eb6:	82 30       	cpi	r24, 0x02	; 2
    4eb8:	09 f0       	breq	.+2      	; 0x4ebc <_ZN20TeaMachineController7ServiceEv+0x1a0>
    4eba:	6c cf       	rjmp	.-296    	; 0x4d94 <_ZN20TeaMachineController7ServiceEv+0x78>
    4ebc:	6c e5       	ldi	r22, 0x5C	; 92
                        {
Serial.println("Starting stir process");
    4ebe:	78 e0       	ldi	r23, 0x08	; 8
    4ec0:	85 e5       	ldi	r24, 0x55	; 85
    4ec2:	9a e0       	ldi	r25, 0x0A	; 10
    4ec4:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    4ec8:	88 8d       	ldd	r24, Y+24	; 0x18
                            // Stir station cup is ready to begin stir process
                            m_pStirManager->SetDrink(m_drinks[ST_STIR]);
    4eca:	99 8d       	ldd	r25, Y+25	; 0x19
    4ecc:	ee 81       	ldd	r30, Y+6	; 0x06
    4ece:	ff 81       	ldd	r31, Y+7	; 0x07
    4ed0:	93 8f       	std	Z+27, r25	; 0x1b
	bool Test();							            // Perform a complete cycle test
    ProcessManagerResponse BeginReset();                // Initiate reset sequence
    ProcessManagerResponse BeginProcess();              // Initiate Stir process
	ProcessManagerResponse Continue();		            // Initiate the next step of the process
	void Stop();	    	                            // Terminate the Stir process
    void SetDrink( Drink *pDrink ) {m_pDrink = pDrink; }; // Set the current drink
    4ed2:	82 8f       	std	Z+26, r24	; 0x1a
    4ed4:	8e 81       	ldd	r24, Y+6	; 0x06
                            if( m_pStirManager->BeginProcess() == ProcessFailed )
    4ed6:	9f 81       	ldd	r25, Y+7	; 0x07
    4ed8:	dc 01       	movw	r26, r24
    4eda:	ed 91       	ld	r30, X+
    4edc:	fc 91       	ld	r31, X
    4ede:	02 80       	ldd	r0, Z+2	; 0x02
    4ee0:	f3 81       	ldd	r31, Z+3	; 0x03
    4ee2:	e0 2d       	mov	r30, r0
    4ee4:	19 95       	eicall
    4ee6:	81 30       	cpi	r24, 0x01	; 1
    4ee8:	09 f0       	breq	.+2      	; 0x4eec <_ZN20TeaMachineController7ServiceEv+0x1d0>
    4eea:	54 cf       	rjmp	.-344    	; 0x4d94 <_ZN20TeaMachineController7ServiceEv+0x78>
    4eec:	a0 cf       	rjmp	.-192    	; 0x4e2e <_ZN20TeaMachineController7ServiceEv+0x112>
    4eee:	81 81       	ldd	r24, Z+1	; 0x01
                    }
                    
                    if( (m_drinks[ST_MILK] != NULL) && (m_pMilkManager->GetLastResponse() != ProcessIncomplete)  )
                    {
                        // Check drink standing at milk station
                        if( m_drinks[ST_MILK]->CupIsPresent() && m_drinks[ST_MILK]->SelectionIsConfirmed() && (m_drinks[ST_MILK]->GetState() == BrewStageComplete ) )
    4ef0:	81 30       	cpi	r24, 0x01	; 1
    4ef2:	09 f0       	breq	.+2      	; 0x4ef6 <_ZN20TeaMachineController7ServiceEv+0x1da>
    4ef4:	5f cf       	rjmp	.-322    	; 0x4db4 <_ZN20TeaMachineController7ServiceEv+0x98>
    4ef6:	62 e7       	ldi	r22, 0x72	; 114
                        {
 Serial.println("Starting milk process");
    4ef8:	78 e0       	ldi	r23, 0x08	; 8
    4efa:	85 e5       	ldi	r24, 0x55	; 85
    4efc:	9a e0       	ldi	r25, 0x0A	; 10
    4efe:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    4f02:	8e 89       	ldd	r24, Y+22	; 0x16
                           // Milk station cup is ready to begin milk process
                            m_pMilkManager->SetDrink(m_drinks[ST_MILK]);
    4f04:	9f 89       	ldd	r25, Y+23	; 0x17
    4f06:	ec 81       	ldd	r30, Y+4	; 0x04
    4f08:	fd 81       	ldd	r31, Y+5	; 0x05
    4f0a:	97 83       	std	Z+7, r25	; 0x07
    
    // Returns response to last Begin/Advance call
    ProcessManagerResponse GetLastResponse() { return m_LastResponse; };
		
	// Set drink currently being prepared           
    void SetDrink( Drink *pDrink ) { m_pDrink = pDrink; };
    4f0c:	86 83       	std	Z+6, r24	; 0x06
    4f0e:	8c 81       	ldd	r24, Y+4	; 0x04
                            if( m_pMilkManager->BeginProcess() == ProcessFailed )
    4f10:	9d 81       	ldd	r25, Y+5	; 0x05
    4f12:	dc 01       	movw	r26, r24
    4f14:	ed 91       	ld	r30, X+
    4f16:	fc 91       	ld	r31, X
    4f18:	02 80       	ldd	r0, Z+2	; 0x02
    4f1a:	f3 81       	ldd	r31, Z+3	; 0x03
    4f1c:	e0 2d       	mov	r30, r0
    4f1e:	19 95       	eicall
    4f20:	81 30       	cpi	r24, 0x01	; 1
    4f22:	09 f0       	breq	.+2      	; 0x4f26 <_ZN20TeaMachineController7ServiceEv+0x20a>
    4f24:	47 cf       	rjmp	.-370    	; 0x4db4 <_ZN20TeaMachineController7ServiceEv+0x98>
    4f26:	75 cf       	rjmp	.-278    	; 0x4e12 <_ZN20TeaMachineController7ServiceEv+0xf6>
    4f28:	81 81       	ldd	r24, Z+1	; 0x01
                    }
                    
                    if( ( m_drinks[ST_BREW] != NULL) && (m_pBrewManager->GetLastResponse() != ProcessIncomplete) )
                    {
                        // Check drink standing at brew station
                        if( m_drinks[ST_BREW]->CupIsPresent() && m_drinks[ST_BREW]->SelectionIsConfirmed() && (m_drinks[ST_BREW]->GetState() == Empty) )
    4f2a:	81 11       	cpse	r24, r1
    4f2c:	53 cf       	rjmp	.-346    	; 0x4dd4 <_ZN20TeaMachineController7ServiceEv+0xb8>
    4f2e:	68 e8       	ldi	r22, 0x88	; 136
                        {
 Serial.println("Starting brew process");
    4f30:	78 e0       	ldi	r23, 0x08	; 8
    4f32:	85 e5       	ldi	r24, 0x55	; 85
    4f34:	9a e0       	ldi	r25, 0x0A	; 10
    4f36:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
    4f3a:	8c 89       	ldd	r24, Y+20	; 0x14
                           // Brew station cup is ready to begin brew process
                            m_pBrewManager->SetDrink(m_drinks[ST_BREW]);
    4f3c:	9d 89       	ldd	r25, Y+21	; 0x15
    4f3e:	ea 81       	ldd	r30, Y+2	; 0x02
    4f40:	fb 81       	ldd	r31, Y+3	; 0x03
    4f42:	97 83       	std	Z+7, r25	; 0x07
    4f44:	86 83       	std	Z+6, r24	; 0x06
    4f46:	8a 81       	ldd	r24, Y+2	; 0x02
                            if( m_pBrewManager->BeginProcess() == ProcessFailed )
    4f48:	9b 81       	ldd	r25, Y+3	; 0x03
    4f4a:	dc 01       	movw	r26, r24
    4f4c:	ed 91       	ld	r30, X+
    4f4e:	fc 91       	ld	r31, X
    4f50:	02 80       	ldd	r0, Z+2	; 0x02
    4f52:	f3 81       	ldd	r31, Z+3	; 0x03
    4f54:	e0 2d       	mov	r30, r0
    4f56:	19 95       	eicall
    4f58:	81 30       	cpi	r24, 0x01	; 1
    4f5a:	09 f0       	breq	.+2      	; 0x4f5e <_ZN20TeaMachineController7ServiceEv+0x242>
    4f5c:	3b cf       	rjmp	.-394    	; 0x4dd4 <_ZN20TeaMachineController7ServiceEv+0xb8>
    4f5e:	45 cf       	rjmp	.-374    	; 0x4dea <_ZN20TeaMachineController7ServiceEv+0xce>
    4f60:	6e e9       	ldi	r22, 0x9E	; 158
						if((	ReceptionCupsReadyToAdvance()
							||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
							||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
							||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
						{
Serial.println("Conveyor advance");
    4f62:	78 e0       	ldi	r23, 0x08	; 8
    4f64:	85 e5       	ldi	r24, 0x55	; 85
    4f66:	9a e0       	ldi	r25, 0x0A	; 10
    4f68:	0e 94 1a 34 	call	0x6834	; 0x6834 <_ZN5Print7printlnEPKc>
							// Tell UI Manager that conveyor is advancing
							m_pUIManager->NotifyStationAdvanceBegins();
    4f6c:	88 81       	ld	r24, Y
    4f6e:	99 81       	ldd	r25, Y+1	; 0x01
    4f70:	e8 d5       	rcall	.+3024   	; 0x5b42 <_ZN9UIManager26NotifyStationAdvanceBeginsEv>
    4f72:	88 85       	ldd	r24, Y+8	; 0x08
							
							// Initiate the advance
							m_pConveyorManager->BeginProcess();
    4f74:	99 85       	ldd	r25, Y+9	; 0x09
    4f76:	dc 01       	movw	r26, r24
    4f78:	ed 91       	ld	r30, X+
    4f7a:	fc 91       	ld	r31, X
    4f7c:	02 80       	ldd	r0, Z+2	; 0x02
    4f7e:	f3 81       	ldd	r31, Z+3	; 0x03
    4f80:	e0 2d       	mov	r30, r0
    4f82:	19 95       	eicall
    4f84:	7f cf       	rjmp	.-258    	; 0x4e84 <_ZN20TeaMachineController7ServiceEv+0x168>
    4f86:	df 91       	pop	r29
                HandleError( ErrorContext_Service, m_pConveyorManager->GetLastError() );
                break;
            } // switch
        } // while
    }
}
    4f88:	cf 91       	pop	r28
    4f8a:	08 95       	ret

00004f8c <_ZN20TeaMachineController17LockCollisionZoneEP18ProcessManagerBase>:
    4f8c:	fc 01       	movw	r30, r24
//
//	Acquire a lock on the zone in which the milk dispenser and the stirrer collide
//
bool TeaMachineController::LockCollisionZone( ProcessManagerBase *pRequestor )
{
	if( m_pCollisionZoneOwner == NULL )
    4f8e:	82 a5       	ldd	r24, Z+42	; 0x2a
    4f90:	93 a5       	ldd	r25, Z+43	; 0x2b
    4f92:	89 2b       	or	r24, r25
    4f94:	11 f4       	brne	.+4      	; 0x4f9a <_ZN20TeaMachineController17LockCollisionZoneEP18ProcessManagerBase+0xe>
	{
		// Caller has acquired the collision zone
		m_pCollisionZoneOwner = pRequestor;
    4f96:	73 a7       	std	Z+43, r23	; 0x2b
    4f98:	62 a7       	std	Z+42, r22	; 0x2a
	}
	
	return (m_pCollisionZoneOwner == pRequestor);
    4f9a:	81 e0       	ldi	r24, 0x01	; 1
    4f9c:	22 a5       	ldd	r18, Z+42	; 0x2a
    4f9e:	33 a5       	ldd	r19, Z+43	; 0x2b
    4fa0:	26 17       	cp	r18, r22
    4fa2:	37 07       	cpc	r19, r23
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <_ZN20TeaMachineController17LockCollisionZoneEP18ProcessManagerBase+0x1c>
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
}
    4fa8:	08 95       	ret

00004faa <_ZN20TeaMachineController20ReleaseCollisionZoneEP18ProcessManagerBase>:
//
//	Release previously acquired lock on the collision zone
//
void TeaMachineController::ReleaseCollisionZone( ProcessManagerBase *pOwner )
{
	if( m_pCollisionZoneOwner == pOwner )
    4faa:	fc 01       	movw	r30, r24
    4fac:	22 a5       	ldd	r18, Z+42	; 0x2a
    4fae:	33 a5       	ldd	r19, Z+43	; 0x2b
    4fb0:	26 17       	cp	r18, r22
    4fb2:	37 07       	cpc	r19, r23
    4fb4:	11 f4       	brne	.+4      	; 0x4fba <_ZN20TeaMachineController20ReleaseCollisionZoneEP18ProcessManagerBase+0x10>
	{
		// Caller is current owner so release lock
		m_pCollisionZoneOwner = NULL;
    4fb6:	13 a6       	std	Z+43, r1	; 0x2b
    4fb8:	12 a6       	std	Z+42, r1	; 0x2a
    4fba:	08 95       	ret

00004fbc <_ZN20TeaMachineController10InitialiseEv>:
//  Initialise()
//
//  Initialise class members and manager objects
//
bool TeaMachineController::Initialise()
{
    4fbc:	0f 93       	push	r16
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	ec 01       	movw	r28, r24
    // Create and initialise UI manager
    m_pUIManager = new UIManager(this);
    4fc6:	8c e2       	ldi	r24, 0x2C	; 44
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4fce:	8c 01       	movw	r16, r24
    4fd0:	be 01       	movw	r22, r28
    4fd2:	0a d1       	rcall	.+532    	; 0x51e8 <_ZN9UIManagerC1EP20TeaMachineController>
    4fd4:	19 83       	std	Y+1, r17	; 0x01
    4fd6:	08 83       	st	Y, r16
    m_pUIManager->Initialise();
    4fd8:	c8 01       	movw	r24, r16
    4fda:	0c d6       	rcall	.+3096   	; 0x5bf4 <_ZN9UIManager10InitialiseEv>

    // Create and initialise brew manager
    m_pBrewManager = new BrewManager(this);
    4fdc:	89 e3       	ldi	r24, 0x39	; 57
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4fe4:	8c 01       	movw	r16, r24
    4fe6:	be 01       	movw	r22, r28
    4fe8:	0e 94 ca 04 	call	0x994	; 0x994 <_ZN11BrewManagerC1EP20TeaMachineController>
    4fec:	1b 83       	std	Y+3, r17	; 0x03
    4fee:	0a 83       	std	Y+2, r16	; 0x02
    m_pBrewManager->Initialise();
    4ff0:	c8 01       	movw	r24, r16
    4ff2:	0e 94 05 09 	call	0x120a	; 0x120a <_ZN11BrewManager10InitialiseEv>

    // Create and initialise Milk manager
    m_pMilkManager = new MilkManager(this);
    4ff6:	82 e2       	ldi	r24, 0x22	; 34
    4ff8:	90 e0       	ldi	r25, 0x00	; 0
    4ffa:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    4ffe:	8c 01       	movw	r16, r24
    5000:	be 01       	movw	r22, r28
    5002:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <_ZN11MilkManagerC1EP20TeaMachineController>
    5006:	1d 83       	std	Y+5, r17	; 0x05
    5008:	0c 83       	std	Y+4, r16	; 0x04
    m_pMilkManager->Initialise();
    500a:	c8 01       	movw	r24, r16
    500c:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <_ZN11MilkManager10InitialiseEv>
  
    // Create and initialise Stir manager
    m_pStirManager = new StirManager(this);
    5010:	86 e2       	ldi	r24, 0x26	; 38
    5012:	90 e0       	ldi	r25, 0x00	; 0
    5014:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    5018:	8c 01       	movw	r16, r24
    501a:	be 01       	movw	r22, r28
    501c:	0e 94 a5 1b 	call	0x374a	; 0x374a <_ZN11StirManagerC1EP20TeaMachineController>
    5020:	1f 83       	std	Y+7, r17	; 0x07
    5022:	0e 83       	std	Y+6, r16	; 0x06
    m_pStirManager->Initialise();
    5024:	c8 01       	movw	r24, r16
    5026:	0e 94 56 1e 	call	0x3cac	; 0x3cac <_ZN11StirManager10InitialiseEv>

    // Create and initialise conveyor manager
    m_pConveyorManager = new ConveyorManager(this);
    502a:	8c e1       	ldi	r24, 0x1C	; 28
    502c:	90 e0       	ldi	r25, 0x00	; 0
    502e:	0e 94 b0 33 	call	0x6760	; 0x6760 <_Znwj>
    5032:	8c 01       	movw	r16, r24
    5034:	be 01       	movw	r22, r28
    5036:	0e 94 b5 09 	call	0x136a	; 0x136a <_ZN15ConveyorManagerC1EP20TeaMachineController>
    503a:	19 87       	std	Y+9, r17	; 0x09
    503c:	08 87       	std	Y+8, r16	; 0x08
    m_pConveyorManager->Initialise();
    503e:	c8 01       	movw	r24, r16
    5040:	0e 94 3d 0a 	call	0x147a	; 0x147a <_ZN15ConveyorManager10InitialiseEv>

    return true; 
}
    5044:	81 e0       	ldi	r24, 0x01	; 1
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	1f 91       	pop	r17
    504c:	0f 91       	pop	r16
    504e:	08 95       	ret

00005050 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode>:
//  Start()
//
//  Start the tea machine
//
bool TeaMachineController::Start( TeaMachineControllerMode mode )
{
    5050:	cf 92       	push	r12
    5052:	ef 92       	push	r14
    5054:	ff 92       	push	r15
    5056:	0f 93       	push	r16
    5058:	1f 93       	push	r17
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	ec 01       	movw	r28, r24
    5060:	16 2f       	mov	r17, r22
    bool bResult = false;
 
    // Initialise the tea machine
    Initialise();
    5062:	ac df       	rcall	.-168    	; 0x4fbc <_ZN20TeaMachineController10InitialiseEv>

    switch( mode )
    5064:	81 2f       	mov	r24, r17
    5066:	11 0f       	add	r17, r17
    5068:	99 0b       	sbc	r25, r25
    506a:	aa 0b       	sbc	r26, r26
    506c:	bb 0b       	sbc	r27, r27
    506e:	fc 01       	movw	r30, r24
    5070:	32 96       	adiw	r30, 0x02	; 2
    5072:	e7 30       	cpi	r30, 0x07	; 7
    5074:	f1 05       	cpc	r31, r1
    5076:	08 f0       	brcs	.+2      	; 0x507a <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x2a>
    5078:	78 c0       	rjmp	.+240    	; 0x516a <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x11a>
    507a:	88 27       	eor	r24, r24
    507c:	e3 55       	subi	r30, 0x53	; 83
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	8f 4f       	sbci	r24, 0xFF	; 255
    5082:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__tablejump2__>
    {
        // Start tea machine for normal 'in service' operation (no logging)
        case ControllerMode_InService:
			Serial.end();
    5086:	85 e5       	ldi	r24, 0x55	; 85
    5088:	9a e0       	ldi	r25, 0x0A	; 10
    508a:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <_ZN14HardwareSerial3endEv>
            Service();
    508e:	ce 01       	movw	r24, r28
    5090:	45 de       	rcall	.-886    	; 0x4d1c <_ZN20TeaMachineController7ServiceEv>
    5092:	26 e0       	ldi	r18, 0x06	; 6
    5094:	40 e8       	ldi	r20, 0x80	; 128
    5096:	55 e2       	ldi	r21, 0x25	; 37
    5098:	60 e0       	ldi	r22, 0x00	; 0
    509a:	70 e0       	ldi	r23, 0x00	; 0
    509c:	85 e5       	ldi	r24, 0x55	; 85
    509e:	9a e0       	ldi	r25, 0x0A	; 10
    50a0:	0e 94 89 32 	call	0x6512	; 0x6512 <_ZN14HardwareSerial5beginEmh>
    50a4:	62 c0       	rjmp	.+196    	; 0x516a <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x11a>
			Serial.begin(SERIAL_BAUDRATE);
            break;
			
        // Start tea machine for normal operation with logging switched on
        case ControllerMode_InServiceWithLogging:
			m_pUIManager->SetMessage( TXT_TEST, 2, ControllerMode_InServiceWithLogging, BLANK );
    50a6:	c1 2c       	mov	r12, r1
    50a8:	e1 2c       	mov	r14, r1
    50aa:	0f ef       	ldi	r16, 0xFF	; 255
    50ac:	1f ef       	ldi	r17, 0xFF	; 255
    50ae:	20 e0       	ldi	r18, 0x00	; 0
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	42 e0       	ldi	r20, 0x02	; 2
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	6f ea       	ldi	r22, 0xAF	; 175
    50b8:	78 e0       	ldi	r23, 0x08	; 8
    50ba:	88 81       	ld	r24, Y
    50bc:	99 81       	ldd	r25, Y+1	; 0x01
		    Service();
    50be:	87 d1       	rcall	.+782    	; 0x53ce <_ZN9UIManager10SetMessageEPciiibb>
    50c0:	ce 01       	movw	r24, r28
    50c2:	2c de       	rcall	.-936    	; 0x4d1c <_ZN20TeaMachineController7ServiceEv>
		    break;
           
        // Test the user interface operation
        case ControllerMode_TestUserInterface:
            TestUserInterface();
    50c4:	52 c0       	rjmp	.+164    	; 0x516a <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x11a>
    50c6:	ce 01       	movw	r24, r28
    50c8:	f7 dc       	rcall	.-1554   	; 0x4ab8 <_ZN20TeaMachineController17TestUserInterfaceEv>
            break;
           
        // Test the brew process 
        case ControllerMode_TestBrewManager:          
			m_pUIManager->SetMessage( TXT_TEST, 2, ControllerMode_TestBrewManager, BLANK );
    50ca:	c1 2c       	mov	r12, r1
    50cc:	e1 2c       	mov	r14, r1
    50ce:	0f ef       	ldi	r16, 0xFF	; 255
    50d0:	1f ef       	ldi	r17, 0xFF	; 255
    50d2:	22 e0       	ldi	r18, 0x02	; 2
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	42 e0       	ldi	r20, 0x02	; 2
    50d8:	50 e0       	ldi	r21, 0x00	; 0
    50da:	6f ea       	ldi	r22, 0xAF	; 175
    50dc:	78 e0       	ldi	r23, 0x08	; 8
    50de:	88 81       	ld	r24, Y
    50e0:	99 81       	ldd	r25, Y+1	; 0x01
    50e2:	75 d1       	rcall	.+746    	; 0x53ce <_ZN9UIManager10SetMessageEPciiibb>
            bResult = m_pBrewManager->Test();
    50e4:	8a 81       	ldd	r24, Y+2	; 0x02
    50e6:	9b 81       	ldd	r25, Y+3	; 0x03
    50e8:	1f c0       	rjmp	.+62     	; 0x5128 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0xd8>
            break;
            
        // Test the milk process
        case ControllerMode_TestMilkManager:
			m_pUIManager->SetMessage( TXT_TEST, 2, ControllerMode_TestMilkManager, BLANK );
    50ea:	c1 2c       	mov	r12, r1
    50ec:	e1 2c       	mov	r14, r1
    50ee:	0f ef       	ldi	r16, 0xFF	; 255
    50f0:	1f ef       	ldi	r17, 0xFF	; 255
    50f2:	23 e0       	ldi	r18, 0x03	; 3
    50f4:	30 e0       	ldi	r19, 0x00	; 0
    50f6:	42 e0       	ldi	r20, 0x02	; 2
    50f8:	50 e0       	ldi	r21, 0x00	; 0
    50fa:	6f ea       	ldi	r22, 0xAF	; 175
    50fc:	78 e0       	ldi	r23, 0x08	; 8
    50fe:	88 81       	ld	r24, Y
    5100:	99 81       	ldd	r25, Y+1	; 0x01
    5102:	65 d1       	rcall	.+714    	; 0x53ce <_ZN9UIManager10SetMessageEPciiibb>
            bResult = m_pMilkManager->Test();
    5104:	8c 81       	ldd	r24, Y+4	; 0x04
    5106:	9d 81       	ldd	r25, Y+5	; 0x05
    5108:	0f c0       	rjmp	.+30     	; 0x5128 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0xd8>
            break;
            
        // Test the stir process
        case ControllerMode_TestStirManager:
			m_pUIManager->SetMessage( TXT_TEST, 2, ControllerMode_TestStirManager, BLANK );
    510a:	c1 2c       	mov	r12, r1
    510c:	e1 2c       	mov	r14, r1
    510e:	0f ef       	ldi	r16, 0xFF	; 255
    5110:	1f ef       	ldi	r17, 0xFF	; 255
    5112:	24 e0       	ldi	r18, 0x04	; 4
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	42 e0       	ldi	r20, 0x02	; 2
    5118:	50 e0       	ldi	r21, 0x00	; 0
    511a:	6f ea       	ldi	r22, 0xAF	; 175
    511c:	78 e0       	ldi	r23, 0x08	; 8
    511e:	88 81       	ld	r24, Y
    5120:	99 81       	ldd	r25, Y+1	; 0x01
    5122:	55 d1       	rcall	.+682    	; 0x53ce <_ZN9UIManager10SetMessageEPciiibb>
            bResult = m_pStirManager->Test();
    5124:	8e 81       	ldd	r24, Y+6	; 0x06
    5126:	9f 81       	ldd	r25, Y+7	; 0x07
    5128:	dc 01       	movw	r26, r24
    512a:	ed 91       	ld	r30, X+
    512c:	fc 91       	ld	r31, X
    512e:	02 84       	ldd	r0, Z+10	; 0x0a
    5130:	f3 85       	ldd	r31, Z+11	; 0x0b
    5132:	e0 2d       	mov	r30, r0
			m_pUIManager->SetMessage( TXT_LOAD, BLANK, BLANK, BLANK );
		   break;
    } //switch
   
    return bResult;
}
    5134:	df 91       	pop	r29
    5136:	cf 91       	pop	r28
    5138:	1f 91       	pop	r17
    513a:	0f 91       	pop	r16
    513c:	ff 90       	pop	r15
    513e:	ef 90       	pop	r14
    5140:	cf 90       	pop	r12
            break;
            
        // Test the stir process
        case ControllerMode_TestStirManager:
			m_pUIManager->SetMessage( TXT_TEST, 2, ControllerMode_TestStirManager, BLANK );
            bResult = m_pStirManager->Test();
    5142:	19 94       	eijmp
	    case ControllerMode_TestConveyorManager:
		   break;
         
        // Set load positions
		case ControllerMode_Load:
			bResult = m_pMilkManager->SetLoadPosition();
    5144:	8c 81       	ldd	r24, Y+4	; 0x04
    5146:	9d 81       	ldd	r25, Y+5	; 0x05
    5148:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN11MilkManager15SetLoadPositionEv>
    514c:	f8 2e       	mov	r15, r24
			m_pUIManager->SetMessage( TXT_LOAD, BLANK, BLANK, BLANK );
    514e:	c1 2c       	mov	r12, r1
    5150:	e1 2c       	mov	r14, r1
    5152:	0f ef       	ldi	r16, 0xFF	; 255
    5154:	1f ef       	ldi	r17, 0xFF	; 255
    5156:	2f ef       	ldi	r18, 0xFF	; 255
    5158:	3f ef       	ldi	r19, 0xFF	; 255
    515a:	4f ef       	ldi	r20, 0xFF	; 255
    515c:	5f ef       	ldi	r21, 0xFF	; 255
    515e:	64 eb       	ldi	r22, 0xB4	; 180
    5160:	78 e0       	ldi	r23, 0x08	; 8
    5162:	88 81       	ld	r24, Y
    5164:	99 81       	ldd	r25, Y+1	; 0x01
    5166:	33 d1       	rcall	.+614    	; 0x53ce <_ZN9UIManager10SetMessageEPciiibb>
		   break;
    5168:	01 c0       	rjmp	.+2      	; 0x516c <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x11c>
//
//  Start the tea machine
//
bool TeaMachineController::Start( TeaMachineControllerMode mode )
{
    bool bResult = false;
    516a:	f1 2c       	mov	r15, r1
			m_pUIManager->SetMessage( TXT_LOAD, BLANK, BLANK, BLANK );
		   break;
    } //switch
   
    return bResult;
}
    516c:	8f 2d       	mov	r24, r15
    516e:	df 91       	pop	r29
    5170:	cf 91       	pop	r28
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	ff 90       	pop	r15
    5178:	ef 90       	pop	r14
    517a:	cf 90       	pop	r12
    517c:	08 95       	ret

0000517e <_ZN9UIManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    517e:	fc 01       	movw	r30, r24
    5180:	17 8e       	std	Z+31, r1	; 0x1f
    5182:	10 8e       	std	Z+24, r1	; 0x18
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	08 95       	ret

00005188 <_ZN9UIManager4StopEv>:
    5188:	08 95       	ret

0000518a <_ZN9UIManager12BeginProcessEv>:
    518a:	cf 93       	push	r28
    518c:	df 93       	push	r29
    518e:	ec 01       	movw	r28, r24
    5190:	41 e0       	ldi	r20, 0x01	; 1
    5192:	60 e0       	ldi	r22, 0x00	; 0
    5194:	89 8d       	ldd	r24, Y+25	; 0x19
    5196:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5198:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
    519c:	89 8d       	ldd	r24, Y+25	; 0x19
    519e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    51a0:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN7Display6UpdateEv>
    51a4:	82 e0       	ldi	r24, 0x02	; 2
    51a6:	8f 8f       	std	Y+31, r24	; 0x1f
    51a8:	18 8e       	std	Y+24, r1	; 0x18
    51aa:	80 e0       	ldi	r24, 0x00	; 0
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	08 95       	ret

000051b2 <_ZN9UIManager12ClearMembersEv>:
    51b2:	cf 93       	push	r28
    51b4:	df 93       	push	r29
    51b6:	ec 01       	movw	r28, r24
    51b8:	1a 8e       	std	Y+26, r1	; 0x1a
    51ba:	19 8e       	std	Y+25, r1	; 0x19
    51bc:	1c 8e       	std	Y+28, r1	; 0x1c
    51be:	1b 8e       	std	Y+27, r1	; 0x1b
    51c0:	1e 8e       	std	Y+30, r1	; 0x1e
    51c2:	1d 8e       	std	Y+29, r1	; 0x1d
    51c4:	19 a2       	std	Y+33, r1	; 0x21
    51c6:	18 a2       	std	Y+32, r1	; 0x20
    51c8:	1f 8e       	std	Y+31, r1	; 0x1f
    51ca:	1c a2       	std	Y+36, r1	; 0x24
    51cc:	1d a2       	std	Y+37, r1	; 0x25
    51ce:	1e a2       	std	Y+38, r1	; 0x26
    51d0:	1f a2       	std	Y+39, r1	; 0x27
    51d2:	1a a2       	std	Y+34, r1	; 0x22
    51d4:	1b a2       	std	Y+35, r1	; 0x23
    51d6:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    51da:	68 a7       	std	Y+40, r22	; 0x28
    51dc:	79 a7       	std	Y+41, r23	; 0x29
    51de:	8a a7       	std	Y+42, r24	; 0x2a
    51e0:	9b a7       	std	Y+43, r25	; 0x2b
    51e2:	df 91       	pop	r29
    51e4:	cf 91       	pop	r28
    51e6:	08 95       	ret

000051e8 <_ZN9UIManagerC1EP20TeaMachineController>:
    51e8:	cf 93       	push	r28
    51ea:	df 93       	push	r29
    51ec:	ec 01       	movw	r28, r24
    51ee:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    51f2:	85 ee       	ldi	r24, 0xE5	; 229
    51f4:	98 e0       	ldi	r25, 0x08	; 8
    51f6:	99 83       	std	Y+1, r25	; 0x01
    51f8:	88 83       	st	Y, r24
    51fa:	ce 01       	movw	r24, r28
    51fc:	df 91       	pop	r29
    51fe:	cf 91       	pop	r28
    5200:	d8 cf       	rjmp	.-80     	; 0x51b2 <_ZN9UIManager12ClearMembersEv>

00005202 <_ZN9UIManager24ClearCurrentDrinkDisplayEv>:
//	ClearCurrentDrinkDisplay
//
//  Clear current drink display information
//
void UIManager::ClearCurrentDrinkDisplay()
{
    5202:	cf 93       	push	r28
    5204:	df 93       	push	r29
    5206:	ec 01       	movw	r28, r24
	// Clear current cup details
	m_pDisplay->Set( IndicatorCupNumber, BLANK );
    5208:	4f ef       	ldi	r20, 0xFF	; 255
    520a:	5f ef       	ldi	r21, 0xFF	; 255
    520c:	60 e0       	ldi	r22, 0x00	; 0
    520e:	89 8d       	ldd	r24, Y+25	; 0x19
    5210:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5212:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorMilkLevel, BLANK );
    5216:	4f ef       	ldi	r20, 0xFF	; 255
    5218:	5f ef       	ldi	r21, 0xFF	; 255
    521a:	61 e0       	ldi	r22, 0x01	; 1
    521c:	89 8d       	ldd	r24, Y+25	; 0x19
    521e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5220:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorSugarLevel, BLANK );
    5224:	4f ef       	ldi	r20, 0xFF	; 255
    5226:	5f ef       	ldi	r21, 0xFF	; 255
    5228:	62 e0       	ldi	r22, 0x02	; 2
    522a:	89 8d       	ldd	r24, Y+25	; 0x19
    522c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    522e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorStrengthLevel, BLANK );
    5232:	4f ef       	ldi	r20, 0xFF	; 255
    5234:	5f ef       	ldi	r21, 0xFF	; 255
    5236:	63 e0       	ldi	r22, 0x03	; 3
    5238:	89 8d       	ldd	r24, Y+25	; 0x19
    523a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    523c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorDrinkName1, ' ' );
    5240:	40 e2       	ldi	r20, 0x20	; 32
    5242:	60 e0       	ldi	r22, 0x00	; 0
    5244:	89 8d       	ldd	r24, Y+25	; 0x19
    5246:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5248:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName2, ' ' );
    524c:	40 e2       	ldi	r20, 0x20	; 32
    524e:	61 e0       	ldi	r22, 0x01	; 1
    5250:	89 8d       	ldd	r24, Y+25	; 0x19
    5252:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5254:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName3, ' ' );
    5258:	40 e2       	ldi	r20, 0x20	; 32
    525a:	62 e0       	ldi	r22, 0x02	; 2
    525c:	89 8d       	ldd	r24, Y+25	; 0x19
    525e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5260:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName4, ' ' );	
    5264:	40 e2       	ldi	r20, 0x20	; 32
    5266:	63 e0       	ldi	r22, 0x03	; 3
    5268:	89 8d       	ldd	r24, Y+25	; 0x19
    526a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    526c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorLED_GoButton, false );
    5270:	40 e0       	ldi	r20, 0x00	; 0
    5272:	62 e0       	ldi	r22, 0x02	; 2
    5274:	89 8d       	ldd	r24, Y+25	; 0x19
    5276:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5278:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
	m_pDisplay->Set( IndicatorLED_StopButton, false );
    527c:	40 e0       	ldi	r20, 0x00	; 0
    527e:	63 e0       	ldi	r22, 0x03	; 3
    5280:	89 8d       	ldd	r24, Y+25	; 0x19
    5282:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    5284:	df 91       	pop	r29
    5286:	cf 91       	pop	r28
	m_pDisplay->Set( IndicatorDrinkName1, ' ' );
	m_pDisplay->Set( IndicatorDrinkName2, ' ' );
	m_pDisplay->Set( IndicatorDrinkName3, ' ' );
	m_pDisplay->Set( IndicatorDrinkName4, ' ' );	
	m_pDisplay->Set( IndicatorLED_GoButton, false );
	m_pDisplay->Set( IndicatorLED_StopButton, false );
    5288:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>

0000528c <_ZN9UIManager15SetCurrentDrinkEP5Drink>:
//	SetCurrentDrink()
//
//  Set the drink to be displayed and modified by the user
//
void UIManager::SetCurrentDrink( Drink *pDrink )
{
    528c:	ef 92       	push	r14
    528e:	ff 92       	push	r15
    5290:	0f 93       	push	r16
    5292:	1f 93       	push	r17
    5294:	cf 93       	push	r28
    5296:	df 93       	push	r29
    5298:	00 d0       	rcall	.+0      	; 0x529a <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xe>
    529a:	1f 92       	push	r1
    529c:	1f 92       	push	r1
    529e:	cd b7       	in	r28, 0x3d	; 61
    52a0:	de b7       	in	r29, 0x3e	; 62
    52a2:	fc 01       	movw	r30, r24
    m_pCurrentDrink = pDrink;
    52a4:	71 a3       	std	Z+33, r23	; 0x21
    52a6:	60 a3       	std	Z+32, r22	; 0x20
    
    if( (m_pDisplay != NULL))
    52a8:	81 8d       	ldd	r24, Z+25	; 0x19
    52aa:	92 8d       	ldd	r25, Z+26	; 0x1a
    52ac:	00 97       	sbiw	r24, 0x00	; 0
    52ae:	09 f4       	brne	.+2      	; 0x52b2 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x26>
    52b0:	82 c0       	rjmp	.+260    	; 0x53b6 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x12a>
    52b2:	7b 01       	movw	r14, r22
    52b4:	8f 01       	movw	r16, r30
	{
		if( pDrink != NULL )
    52b6:	61 15       	cp	r22, r1
    52b8:	71 05       	cpc	r23, r1
    52ba:	09 f4       	brne	.+2      	; 0x52be <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x32>
    52bc:	6a c0       	rjmp	.+212    	; 0x5392 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x106>
		{
			if( pDrink->GetState() != Invalid )
    52be:	fb 01       	movw	r30, r22
    52c0:	21 81       	ldd	r18, Z+1	; 0x01
    52c2:	24 30       	cpi	r18, 0x04	; 4
    52c4:	09 f4       	brne	.+2      	; 0x52c8 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x3c>
    52c6:	65 c0       	rjmp	.+202    	; 0x5392 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x106>
			{
				// Update the display with the new drink details
				m_pDisplay->Set( IndicatorCupNumber, (int)pDrink->GetID() );
    52c8:	45 85       	ldd	r20, Z+13	; 0x0d
    52ca:	56 85       	ldd	r21, Z+14	; 0x0e
    52cc:	60 e0       	ldi	r22, 0x00	; 0
    52ce:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
				m_pDisplay->Set( IndicatorMilkLevel, (int)pDrink->GetMilk() );
    52d2:	f7 01       	movw	r30, r14
    52d4:	47 81       	ldd	r20, Z+7	; 0x07
    52d6:	50 85       	ldd	r21, Z+8	; 0x08
    52d8:	61 e0       	ldi	r22, 0x01	; 1
    52da:	f8 01       	movw	r30, r16
    52dc:	81 8d       	ldd	r24, Z+25	; 0x19
    52de:	92 8d       	ldd	r25, Z+26	; 0x1a
    52e0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
				m_pDisplay->Set( IndicatorSugarLevel, (int)pDrink->GetSugar() );
    52e4:	f7 01       	movw	r30, r14
    52e6:	41 85       	ldd	r20, Z+9	; 0x09
    52e8:	52 85       	ldd	r21, Z+10	; 0x0a
    52ea:	62 e0       	ldi	r22, 0x02	; 2
    52ec:	f8 01       	movw	r30, r16
    52ee:	81 8d       	ldd	r24, Z+25	; 0x19
    52f0:	92 8d       	ldd	r25, Z+26	; 0x1a
    52f2:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
				m_pDisplay->Set( IndicatorStrengthLevel, (int)pDrink->GetStrength() );
    52f6:	f7 01       	movw	r30, r14
    52f8:	43 85       	ldd	r20, Z+11	; 0x0b
    52fa:	54 85       	ldd	r21, Z+12	; 0x0c
    52fc:	63 e0       	ldi	r22, 0x03	; 3
    52fe:	f8 01       	movw	r30, r16
    5300:	81 8d       	ldd	r24, Z+25	; 0x19
    5302:	92 8d       	ldd	r25, Z+26	; 0x1a
    5304:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
        
				char szName[DISPLAY_DRINKNAMELENGTH+1];
				strcpy( szName, pDrink->GetName() );
    5308:	b7 01       	movw	r22, r14
    530a:	6e 5f       	subi	r22, 0xFE	; 254
    530c:	7f 4f       	sbci	r23, 0xFF	; 255
    530e:	ce 01       	movw	r24, r28
    5310:	01 96       	adiw	r24, 0x01	; 1
    5312:	0e 94 cf 3c 	call	0x799e	; 0x799e <strcpy>
				m_pDisplay->Set( IndicatorDrinkName1, szName[0] );
    5316:	49 81       	ldd	r20, Y+1	; 0x01
    5318:	60 e0       	ldi	r22, 0x00	; 0
    531a:	f8 01       	movw	r30, r16
    531c:	81 8d       	ldd	r24, Z+25	; 0x19
    531e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5320:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
				m_pDisplay->Set( IndicatorDrinkName2, szName[1] );
    5324:	4a 81       	ldd	r20, Y+2	; 0x02
    5326:	61 e0       	ldi	r22, 0x01	; 1
    5328:	f8 01       	movw	r30, r16
    532a:	81 8d       	ldd	r24, Z+25	; 0x19
    532c:	92 8d       	ldd	r25, Z+26	; 0x1a
    532e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
				m_pDisplay->Set( IndicatorDrinkName3, szName[2] );
    5332:	4b 81       	ldd	r20, Y+3	; 0x03
    5334:	62 e0       	ldi	r22, 0x02	; 2
    5336:	f8 01       	movw	r30, r16
    5338:	81 8d       	ldd	r24, Z+25	; 0x19
    533a:	92 8d       	ldd	r25, Z+26	; 0x1a
    533c:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
				m_pDisplay->Set( IndicatorDrinkName4, szName[3] );
    5340:	4c 81       	ldd	r20, Y+4	; 0x04
    5342:	63 e0       	ldi	r22, 0x03	; 3
    5344:	f8 01       	movw	r30, r16
    5346:	81 8d       	ldd	r24, Z+25	; 0x19
    5348:	92 8d       	ldd	r25, Z+26	; 0x1a
    534a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
        
				m_pDisplay->Set( IndicatorLED_GoButton, !pDrink->SelectionIsConfirmed() );
    534e:	f7 01       	movw	r30, r14
    5350:	47 85       	ldd	r20, Z+15	; 0x0f
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	48 27       	eor	r20, r24
    5356:	62 e0       	ldi	r22, 0x02	; 2
    5358:	f8 01       	movw	r30, r16
    535a:	81 8d       	ldd	r24, Z+25	; 0x19
    535c:	92 8d       	ldd	r25, Z+26	; 0x1a
    535e:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
    5362:	f7 01       	movw	r30, r14
    5364:	47 85       	ldd	r20, Z+15	; 0x0f
				m_pDisplay->Set( IndicatorLED_StopButton, pDrink->SelectionIsConfirmed() && (pDrink->GetState() == Empty) && (m_pController->GetDrinkLocation(pDrink->GetID()) <= ST_RECEPTION_A) );
    5366:	44 23       	and	r20, r20
    5368:	69 f0       	breq	.+26     	; 0x5384 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xf8>
    536a:	81 81       	ldd	r24, Z+1	; 0x01
    536c:	81 11       	cpse	r24, r1
    536e:	09 c0       	rjmp	.+18     	; 0x5382 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xf6>
    5370:	65 85       	ldd	r22, Z+13	; 0x0d
    5372:	76 85       	ldd	r23, Z+14	; 0x0e
    5374:	f8 01       	movw	r30, r16
    5376:	84 81       	ldd	r24, Z+4	; 0x04
    5378:	95 81       	ldd	r25, Z+5	; 0x05
    537a:	0a db       	rcall	.-2540   	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
    537c:	41 e0       	ldi	r20, 0x01	; 1
    537e:	04 97       	sbiw	r24, 0x04	; 4
    5380:	0c f0       	brlt	.+2      	; 0x5384 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xf8>
    5382:	40 e0       	ldi	r20, 0x00	; 0
    5384:	63 e0       	ldi	r22, 0x03	; 3
    5386:	f8 01       	movw	r30, r16
    5388:	81 8d       	ldd	r24, Z+25	; 0x19
    538a:	92 8d       	ldd	r25, Z+26	; 0x1a
    538c:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
    5390:	02 c0       	rjmp	.+4      	; 0x5396 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x10a>
			}
			else
			{
				ClearCurrentDrinkDisplay();
    5392:	c8 01       	movw	r24, r16
    5394:	36 df       	rcall	.-404    	; 0x5202 <_ZN9UIManager24ClearCurrentDrinkDisplayEv>
		else
		{
			ClearCurrentDrinkDisplay();
		}

		m_pDisplay->Update();
    5396:	f8 01       	movw	r30, r16
    5398:	81 8d       	ldd	r24, Z+25	; 0x19
    539a:	92 8d       	ldd	r25, Z+26	; 0x1a
	}
}
    539c:	0f 90       	pop	r0
    539e:	0f 90       	pop	r0
    53a0:	0f 90       	pop	r0
    53a2:	0f 90       	pop	r0
    53a4:	0f 90       	pop	r0
    53a6:	df 91       	pop	r29
    53a8:	cf 91       	pop	r28
    53aa:	1f 91       	pop	r17
    53ac:	0f 91       	pop	r16
    53ae:	ff 90       	pop	r15
    53b0:	ef 90       	pop	r14
		else
		{
			ClearCurrentDrinkDisplay();
		}

		m_pDisplay->Update();
    53b2:	0c 94 b5 12 	jmp	0x256a	; 0x256a <_ZN7Display6UpdateEv>
	}
}
    53b6:	0f 90       	pop	r0
    53b8:	0f 90       	pop	r0
    53ba:	0f 90       	pop	r0
    53bc:	0f 90       	pop	r0
    53be:	0f 90       	pop	r0
    53c0:	df 91       	pop	r29
    53c2:	cf 91       	pop	r28
    53c4:	1f 91       	pop	r17
    53c6:	0f 91       	pop	r16
    53c8:	ff 90       	pop	r15
    53ca:	ef 90       	pop	r14
    53cc:	08 95       	ret

000053ce <_ZN9UIManager10SetMessageEPciiibb>:
//  SetMessage()
//
//  Display a message to the user
//
void UIManager::SetMessage( char *pText, int nMilkIndicator, int nSugarIndicator, int nStrengthIndicator, bool bStatusOK, bool bStatusFail )
{
    53ce:	4f 92       	push	r4
    53d0:	5f 92       	push	r5
    53d2:	6f 92       	push	r6
    53d4:	7f 92       	push	r7
    53d6:	8f 92       	push	r8
    53d8:	9f 92       	push	r9
    53da:	af 92       	push	r10
    53dc:	bf 92       	push	r11
    53de:	cf 92       	push	r12
    53e0:	ef 92       	push	r14
    53e2:	0f 93       	push	r16
    53e4:	1f 93       	push	r17
    53e6:	cf 93       	push	r28
    53e8:	df 93       	push	r29
    53ea:	ec 01       	movw	r28, r24
    53ec:	5b 01       	movw	r10, r22
    53ee:	3a 01       	movw	r6, r20
    53f0:	49 01       	movw	r8, r18
	int nLength = strlen( pText );
    53f2:	fb 01       	movw	r30, r22
    53f4:	01 90       	ld	r0, Z+
    53f6:	00 20       	and	r0, r0
    53f8:	e9 f7       	brne	.-6      	; 0x53f4 <_ZN9UIManager10SetMessageEPciiibb+0x26>
    53fa:	31 97       	sbiw	r30, 0x01	; 1
    53fc:	2f 01       	movw	r4, r30
    53fe:	46 1a       	sub	r4, r22
    5400:	57 0a       	sbc	r5, r23
	m_pDisplay->Set( IndicatorDrinkName1, (nLength > 0) ? pText[0] : ' ' );
    5402:	14 14       	cp	r1, r4
    5404:	15 04       	cpc	r1, r5
    5406:	1c f4       	brge	.+6      	; 0x540e <_ZN9UIManager10SetMessageEPciiibb+0x40>
    5408:	fb 01       	movw	r30, r22
    540a:	40 81       	ld	r20, Z
    540c:	01 c0       	rjmp	.+2      	; 0x5410 <_ZN9UIManager10SetMessageEPciiibb+0x42>
    540e:	40 e2       	ldi	r20, 0x20	; 32
    5410:	60 e0       	ldi	r22, 0x00	; 0
    5412:	89 8d       	ldd	r24, Y+25	; 0x19
    5414:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5416:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName2, (nLength > 1) ? pText[1] : ' ' );
    541a:	f2 e0       	ldi	r31, 0x02	; 2
    541c:	4f 16       	cp	r4, r31
    541e:	51 04       	cpc	r5, r1
    5420:	1c f0       	brlt	.+6      	; 0x5428 <_ZN9UIManager10SetMessageEPciiibb+0x5a>
    5422:	f5 01       	movw	r30, r10
    5424:	41 81       	ldd	r20, Z+1	; 0x01
    5426:	01 c0       	rjmp	.+2      	; 0x542a <_ZN9UIManager10SetMessageEPciiibb+0x5c>
    5428:	40 e2       	ldi	r20, 0x20	; 32
    542a:	61 e0       	ldi	r22, 0x01	; 1
    542c:	89 8d       	ldd	r24, Y+25	; 0x19
    542e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5430:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName3, (nLength > 2) ? pText[2] : ' ' );
    5434:	f3 e0       	ldi	r31, 0x03	; 3
    5436:	4f 16       	cp	r4, r31
    5438:	51 04       	cpc	r5, r1
    543a:	1c f0       	brlt	.+6      	; 0x5442 <_ZN9UIManager10SetMessageEPciiibb+0x74>
    543c:	f5 01       	movw	r30, r10
    543e:	42 81       	ldd	r20, Z+2	; 0x02
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <_ZN9UIManager10SetMessageEPciiibb+0x76>
    5442:	40 e2       	ldi	r20, 0x20	; 32
    5444:	62 e0       	ldi	r22, 0x02	; 2
    5446:	89 8d       	ldd	r24, Y+25	; 0x19
    5448:	9a 8d       	ldd	r25, Y+26	; 0x1a
    544a:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName4, (nLength > 3) ? pText[3] : ' ' );
    544e:	f4 e0       	ldi	r31, 0x04	; 4
    5450:	4f 16       	cp	r4, r31
    5452:	51 04       	cpc	r5, r1
    5454:	1c f0       	brlt	.+6      	; 0x545c <_ZN9UIManager10SetMessageEPciiibb+0x8e>
    5456:	f5 01       	movw	r30, r10
    5458:	43 81       	ldd	r20, Z+3	; 0x03
    545a:	01 c0       	rjmp	.+2      	; 0x545e <_ZN9UIManager10SetMessageEPciiibb+0x90>
    545c:	40 e2       	ldi	r20, 0x20	; 32
    545e:	63 e0       	ldi	r22, 0x03	; 3
    5460:	89 8d       	ldd	r24, Y+25	; 0x19
    5462:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5464:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorMilkLevel, nMilkIndicator );
    5468:	a3 01       	movw	r20, r6
    546a:	61 e0       	ldi	r22, 0x01	; 1
    546c:	89 8d       	ldd	r24, Y+25	; 0x19
    546e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5470:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorSugarLevel, nSugarIndicator );
    5474:	a4 01       	movw	r20, r8
    5476:	62 e0       	ldi	r22, 0x02	; 2
    5478:	89 8d       	ldd	r24, Y+25	; 0x19
    547a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    547c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorStrengthLevel, nStrengthIndicator );
    5480:	a8 01       	movw	r20, r16
    5482:	63 e0       	ldi	r22, 0x03	; 3
    5484:	89 8d       	ldd	r24, Y+25	; 0x19
    5486:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5488:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorCupNumber, BLANK );
    548c:	4f ef       	ldi	r20, 0xFF	; 255
    548e:	5f ef       	ldi	r21, 0xFF	; 255
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	89 8d       	ldd	r24, Y+25	; 0x19
    5494:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5496:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorLED_StatusGreen, bStatusOK );
    549a:	4e 2d       	mov	r20, r14
    549c:	60 e0       	ldi	r22, 0x00	; 0
    549e:	89 8d       	ldd	r24, Y+25	; 0x19
    54a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    54a2:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
	m_pDisplay->Set( IndicatorLED_StatusRed, bStatusFail );
    54a6:	4c 2d       	mov	r20, r12
    54a8:	61 e0       	ldi	r22, 0x01	; 1
    54aa:	89 8d       	ldd	r24, Y+25	; 0x19
    54ac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    54ae:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
	m_pDisplay->Update();
    54b2:	89 8d       	ldd	r24, Y+25	; 0x19
    54b4:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	ef 90       	pop	r14
    54c0:	cf 90       	pop	r12
    54c2:	bf 90       	pop	r11
    54c4:	af 90       	pop	r10
    54c6:	9f 90       	pop	r9
    54c8:	8f 90       	pop	r8
    54ca:	7f 90       	pop	r7
    54cc:	6f 90       	pop	r6
    54ce:	5f 90       	pop	r5
    54d0:	4f 90       	pop	r4
	m_pDisplay->Set( IndicatorSugarLevel, nSugarIndicator );
	m_pDisplay->Set( IndicatorStrengthLevel, nStrengthIndicator );
	m_pDisplay->Set( IndicatorCupNumber, BLANK );
	m_pDisplay->Set( IndicatorLED_StatusGreen, bStatusOK );
	m_pDisplay->Set( IndicatorLED_StatusRed, bStatusFail );
	m_pDisplay->Update();
    54d2:	0c 94 b5 12 	jmp	0x256a	; 0x256a <_ZN7Display6UpdateEv>

000054d6 <_ZN9UIManager23HandleUserControlEventsEv>:
//  HandleUserControlEvents()
//
//  Confirm user control states and take appropriate action
//
void UIManager::HandleUserControlEvents()
{
    54d6:	ef 92       	push	r14
    54d8:	ff 92       	push	r15
    54da:	0f 93       	push	r16
    54dc:	1f 93       	push	r17
    54de:	cf 93       	push	r28
    54e0:	df 93       	push	r29
    54e2:	00 d0       	rcall	.+0      	; 0x54e4 <_ZN9UIManager23HandleUserControlEventsEv+0xe>
    54e4:	1f 92       	push	r1
    54e6:	1f 92       	push	r1
    54e8:	cd b7       	in	r28, 0x3d	; 61
    54ea:	de b7       	in	r29, 0x3e	; 62
    54ec:	8c 01       	movw	r16, r24
    if( m_pCurrentDrink != NULL )
    54ee:	dc 01       	movw	r26, r24
    54f0:	90 96       	adiw	r26, 0x20	; 32
    54f2:	8d 91       	ld	r24, X+
    54f4:	9c 91       	ld	r25, X
    54f6:	91 97       	sbiw	r26, 0x21	; 33
    54f8:	89 2b       	or	r24, r25
    54fa:	09 f4       	brne	.+2      	; 0x54fe <_ZN9UIManager23HandleUserControlEventsEv+0x28>
    54fc:	eb c1       	rjmp	.+982    	; 0x58d4 <_ZN9UIManager23HandleUserControlEventsEv+0x3fe>
    {
        if( m_pUserControls->CheckSettledEvent( UC_CUP_INC ) == UserControlSwitchedOn )
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	70 e0       	ldi	r23, 0x00	; 0
    5502:	5d 96       	adiw	r26, 0x1d	; 29
    5504:	8d 91       	ld	r24, X+
    5506:	9c 91       	ld	r25, X
    5508:	5e 97       	sbiw	r26, 0x1e	; 30
    550a:	c8 d3       	rcall	.+1936   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    550c:	81 30       	cpi	r24, 0x01	; 1
    550e:	b9 f4       	brne	.+46     	; 0x553e <_ZN9UIManager23HandleUserControlEventsEv+0x68>
        {
            // User has toggled Cup increment control
            SetCurrentDrink( m_pController->GetDrinkToTheRight(m_pCurrentDrink) );
    5510:	f8 01       	movw	r30, r16
    5512:	60 a1       	ldd	r22, Z+32	; 0x20
    5514:	71 a1       	ldd	r23, Z+33	; 0x21
    5516:	84 81       	ldd	r24, Z+4	; 0x04
    5518:	95 81       	ldd	r25, Z+5	; 0x05
    551a:	c6 d9       	rcall	.-3188   	; 0x48a8 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink>
    551c:	bc 01       	movw	r22, r24
    551e:	c8 01       	movw	r24, r16
    5520:	b5 de       	rcall	.-662    	; 0x528c <_ZN9UIManager15SetCurrentDrinkEP5Drink>
    5522:	d8 01       	movw	r26, r16
    5524:	90 96       	adiw	r26, 0x20	; 32
    5526:	ed 91       	ld	r30, X+
    5528:	fc 91       	ld	r31, X
    552a:	91 97       	sbiw	r26, 0x21	; 33
            m_pDisplay->Set( IndicatorCupNumber, (int)m_pCurrentDrink->GetID() );
    552c:	45 85       	ldd	r20, Z+13	; 0x0d
    552e:	56 85       	ldd	r21, Z+14	; 0x0e
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	59 96       	adiw	r26, 0x19	; 25
    5534:	8d 91       	ld	r24, X+
    5536:	9c 91       	ld	r25, X
    5538:	5a 97       	sbiw	r26, 0x1a	; 26
    553a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
        }

        if( m_pUserControls->CheckSettledEvent( UC_CUP_DEC ) == UserControlSwitchedOn )
    553e:	61 e0       	ldi	r22, 0x01	; 1
    5540:	70 e0       	ldi	r23, 0x00	; 0
    5542:	f8 01       	movw	r30, r16
    5544:	85 8d       	ldd	r24, Z+29	; 0x1d
    5546:	96 8d       	ldd	r25, Z+30	; 0x1e
    5548:	a9 d3       	rcall	.+1874   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    554a:	81 30       	cpi	r24, 0x01	; 1
    554c:	d9 f4       	brne	.+54     	; 0x5584 <_ZN9UIManager23HandleUserControlEventsEv+0xae>
        {
            // User has toggled Cup decrement control
            SetCurrentDrink( m_pController->GetDrinkToTheLeft(m_pCurrentDrink) );
    554e:	d8 01       	movw	r26, r16
    5550:	90 96       	adiw	r26, 0x20	; 32
    5552:	6d 91       	ld	r22, X+
    5554:	7c 91       	ld	r23, X
    5556:	91 97       	sbiw	r26, 0x21	; 33
    5558:	14 96       	adiw	r26, 0x04	; 4
    555a:	8d 91       	ld	r24, X+
    555c:	9c 91       	ld	r25, X
    555e:	15 97       	sbiw	r26, 0x05	; 5
    5560:	dd d9       	rcall	.-3142   	; 0x491c <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink>
    5562:	bc 01       	movw	r22, r24
    5564:	c8 01       	movw	r24, r16
    5566:	92 de       	rcall	.-732    	; 0x528c <_ZN9UIManager15SetCurrentDrinkEP5Drink>
    5568:	d8 01       	movw	r26, r16
    556a:	90 96       	adiw	r26, 0x20	; 32
    556c:	ed 91       	ld	r30, X+
    556e:	fc 91       	ld	r31, X
    5570:	91 97       	sbiw	r26, 0x21	; 33
            m_pDisplay->Set( IndicatorCupNumber, (int)m_pCurrentDrink->GetID() );
    5572:	45 85       	ldd	r20, Z+13	; 0x0d
    5574:	56 85       	ldd	r21, Z+14	; 0x0e
    5576:	60 e0       	ldi	r22, 0x00	; 0
    5578:	59 96       	adiw	r26, 0x19	; 25
    557a:	8d 91       	ld	r24, X+
    557c:	9c 91       	ld	r25, X
    557e:	5a 97       	sbiw	r26, 0x1a	; 26
    5580:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
    5584:	d8 01       	movw	r26, r16
    5586:	90 96       	adiw	r26, 0x20	; 32
    5588:	ed 91       	ld	r30, X+
    558a:	fc 91       	ld	r31, X
    558c:	91 97       	sbiw	r26, 0x21	; 33
        }

        if( !m_pCurrentDrink->SelectionIsConfirmed() )
    558e:	87 85       	ldd	r24, Z+15	; 0x0f
    5590:	81 11       	cpse	r24, r1
    5592:	5f c1       	rjmp	.+702    	; 0x5852 <_ZN9UIManager23HandleUserControlEventsEv+0x37c>
        {
            // Can only make changes to a drink whose selection is not yet confirmed
            if( m_pUserControls->CheckSettledEvent( UC_DRINK_INC ) == UserControlSwitchedOn )
    5594:	62 e0       	ldi	r22, 0x02	; 2
    5596:	70 e0       	ldi	r23, 0x00	; 0
    5598:	5d 96       	adiw	r26, 0x1d	; 29
    559a:	8d 91       	ld	r24, X+
    559c:	9c 91       	ld	r25, X
    559e:	5e 97       	sbiw	r26, 0x1e	; 30
    55a0:	7d d3       	rcall	.+1786   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    55a2:	81 30       	cpi	r24, 0x01	; 1
    55a4:	81 f5       	brne	.+96     	; 0x5606 <_ZN9UIManager23HandleUserControlEventsEv+0x130>
            {
                // User has toggled 'Next drink type' control
                m_pCurrentDrink->SetNextType();
    55a6:	f8 01       	movw	r30, r16
    55a8:	80 a1       	ldd	r24, Z+32	; 0x20
    55aa:	91 a1       	ldd	r25, Z+33	; 0x21
    55ac:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN5Drink11SetNextTypeEv>
                
                // Update display
                char szName[DISPLAY_DRINKNAMELENGTH+1];
                strcpy( szName, m_pCurrentDrink->GetName() );
    55b0:	d8 01       	movw	r26, r16
    55b2:	90 96       	adiw	r26, 0x20	; 32
    55b4:	6d 91       	ld	r22, X+
    55b6:	7c 91       	ld	r23, X
    55b8:	91 97       	sbiw	r26, 0x21	; 33
    55ba:	6e 5f       	subi	r22, 0xFE	; 254
    55bc:	7f 4f       	sbci	r23, 0xFF	; 255
    55be:	ce 01       	movw	r24, r28
    55c0:	01 96       	adiw	r24, 0x01	; 1
    55c2:	0e 94 cf 3c 	call	0x799e	; 0x799e <strcpy>
                m_pDisplay->Set( IndicatorDrinkName1, szName[0] );
    55c6:	49 81       	ldd	r20, Y+1	; 0x01
    55c8:	60 e0       	ldi	r22, 0x00	; 0
    55ca:	f8 01       	movw	r30, r16
    55cc:	81 8d       	ldd	r24, Z+25	; 0x19
    55ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    55d0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName2, szName[1] );
    55d4:	4a 81       	ldd	r20, Y+2	; 0x02
    55d6:	61 e0       	ldi	r22, 0x01	; 1
    55d8:	d8 01       	movw	r26, r16
    55da:	59 96       	adiw	r26, 0x19	; 25
    55dc:	8d 91       	ld	r24, X+
    55de:	9c 91       	ld	r25, X
    55e0:	5a 97       	sbiw	r26, 0x1a	; 26
    55e2:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName3, szName[2] );
    55e6:	4b 81       	ldd	r20, Y+3	; 0x03
    55e8:	62 e0       	ldi	r22, 0x02	; 2
    55ea:	f8 01       	movw	r30, r16
    55ec:	81 8d       	ldd	r24, Z+25	; 0x19
    55ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    55f0:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName4, szName[3] );
    55f4:	4c 81       	ldd	r20, Y+4	; 0x04
    55f6:	63 e0       	ldi	r22, 0x03	; 3
    55f8:	d8 01       	movw	r26, r16
    55fa:	59 96       	adiw	r26, 0x19	; 25
    55fc:	8d 91       	ld	r24, X+
    55fe:	9c 91       	ld	r25, X
    5600:	5a 97       	sbiw	r26, 0x1a	; 26
    5602:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
            }

            if( m_pUserControls->CheckSettledEvent( UC_DRINK_DEC ) == UserControlSwitchedOn )
    5606:	63 e0       	ldi	r22, 0x03	; 3
    5608:	70 e0       	ldi	r23, 0x00	; 0
    560a:	f8 01       	movw	r30, r16
    560c:	85 8d       	ldd	r24, Z+29	; 0x1d
    560e:	96 8d       	ldd	r25, Z+30	; 0x1e
    5610:	45 d3       	rcall	.+1674   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5612:	81 30       	cpi	r24, 0x01	; 1
    5614:	81 f5       	brne	.+96     	; 0x5676 <_ZN9UIManager23HandleUserControlEventsEv+0x1a0>
            {
                // User has toggled 'Previous drink type' control
                m_pCurrentDrink->SetPreviousType();
    5616:	d8 01       	movw	r26, r16
    5618:	90 96       	adiw	r26, 0x20	; 32
    561a:	8d 91       	ld	r24, X+
    561c:	9c 91       	ld	r25, X
    561e:	91 97       	sbiw	r26, 0x21	; 33
    5620:	0e 94 48 13 	call	0x2690	; 0x2690 <_ZN5Drink15SetPreviousTypeEv>
                
                // Update display
                char szName[DISPLAY_DRINKNAMELENGTH+1];
                strcpy( szName, m_pCurrentDrink->GetName() );
    5624:	f8 01       	movw	r30, r16
    5626:	60 a1       	ldd	r22, Z+32	; 0x20
    5628:	71 a1       	ldd	r23, Z+33	; 0x21
    562a:	6e 5f       	subi	r22, 0xFE	; 254
    562c:	7f 4f       	sbci	r23, 0xFF	; 255
    562e:	ce 01       	movw	r24, r28
    5630:	01 96       	adiw	r24, 0x01	; 1
    5632:	0e 94 cf 3c 	call	0x799e	; 0x799e <strcpy>
                m_pDisplay->Set( IndicatorDrinkName1, szName[0] );
    5636:	49 81       	ldd	r20, Y+1	; 0x01
    5638:	60 e0       	ldi	r22, 0x00	; 0
    563a:	d8 01       	movw	r26, r16
    563c:	59 96       	adiw	r26, 0x19	; 25
    563e:	8d 91       	ld	r24, X+
    5640:	9c 91       	ld	r25, X
    5642:	5a 97       	sbiw	r26, 0x1a	; 26
    5644:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName2, szName[1] );
    5648:	4a 81       	ldd	r20, Y+2	; 0x02
    564a:	61 e0       	ldi	r22, 0x01	; 1
    564c:	f8 01       	movw	r30, r16
    564e:	81 8d       	ldd	r24, Z+25	; 0x19
    5650:	92 8d       	ldd	r25, Z+26	; 0x1a
    5652:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName3, szName[2] );
    5656:	4b 81       	ldd	r20, Y+3	; 0x03
    5658:	62 e0       	ldi	r22, 0x02	; 2
    565a:	d8 01       	movw	r26, r16
    565c:	59 96       	adiw	r26, 0x19	; 25
    565e:	8d 91       	ld	r24, X+
    5660:	9c 91       	ld	r25, X
    5662:	5a 97       	sbiw	r26, 0x1a	; 26
    5664:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName4, szName[3] );
    5668:	4c 81       	ldd	r20, Y+4	; 0x04
    566a:	63 e0       	ldi	r22, 0x03	; 3
    566c:	f8 01       	movw	r30, r16
    566e:	81 8d       	ldd	r24, Z+25	; 0x19
    5670:	92 8d       	ldd	r25, Z+26	; 0x1a
    5672:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <_ZN7Display3SetE14IndicatorAlphac>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_MILK_INC ) == UserControlSwitchedOn )
    5676:	64 e0       	ldi	r22, 0x04	; 4
    5678:	70 e0       	ldi	r23, 0x00	; 0
    567a:	d8 01       	movw	r26, r16
    567c:	5d 96       	adiw	r26, 0x1d	; 29
    567e:	8d 91       	ld	r24, X+
    5680:	9c 91       	ld	r25, X
    5682:	5e 97       	sbiw	r26, 0x1e	; 30
    5684:	0b d3       	rcall	.+1558   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5686:	81 30       	cpi	r24, 0x01	; 1
    5688:	a1 f4       	brne	.+40     	; 0x56b2 <_ZN9UIManager23HandleUserControlEventsEv+0x1dc>
            {
                // User has toggled 'Increment milk' control
                m_pCurrentDrink->IncrementMilk();
    568a:	d8 01       	movw	r26, r16
    568c:	90 96       	adiw	r26, 0x20	; 32
    568e:	ed 91       	ld	r30, X+
    5690:	fc 91       	ld	r31, X
    5692:	91 97       	sbiw	r26, 0x21	; 33
    int         GetSugar() { return m_nSugar; }
    void        IncrementSugar() { m_nSugar = (m_nSugar == MAX_SUGAR) ? MAX_SUGAR : m_nSugar + 1; }
    void        DecrementSugar()  { m_nSugar = (m_nSugar == 0) ? 0 : m_nSugar - 1; }
    
    int         GetStrength() { return m_nStrength; }
    void        IncrementStrength() { m_nStrength = (m_nStrength == MAX_STRENGTH) ? MAX_STRENGTH : m_nStrength + 1; }
    5694:	47 81       	ldd	r20, Z+7	; 0x07
    5696:	50 85       	ldd	r21, Z+8	; 0x08
    5698:	43 30       	cpi	r20, 0x03	; 3
    569a:	51 05       	cpc	r21, r1
    569c:	11 f0       	breq	.+4      	; 0x56a2 <_ZN9UIManager23HandleUserControlEventsEv+0x1cc>
    569e:	4f 5f       	subi	r20, 0xFF	; 255
    56a0:	5f 4f       	sbci	r21, 0xFF	; 255
    56a2:	50 87       	std	Z+8, r21	; 0x08
    56a4:	47 83       	std	Z+7, r20	; 0x07
                m_pDisplay->Set( IndicatorMilkLevel, (int)m_pCurrentDrink->GetMilk() );
    56a6:	61 e0       	ldi	r22, 0x01	; 1
    56a8:	f8 01       	movw	r30, r16
    56aa:	81 8d       	ldd	r24, Z+25	; 0x19
    56ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    56ae:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_MILK_DEC ) == UserControlSwitchedOn )
    56b2:	65 e0       	ldi	r22, 0x05	; 5
    56b4:	70 e0       	ldi	r23, 0x00	; 0
    56b6:	d8 01       	movw	r26, r16
    56b8:	5d 96       	adiw	r26, 0x1d	; 29
    56ba:	8d 91       	ld	r24, X+
    56bc:	9c 91       	ld	r25, X
    56be:	5e 97       	sbiw	r26, 0x1e	; 30
    56c0:	ed d2       	rcall	.+1498   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    56c2:	81 30       	cpi	r24, 0x01	; 1
    56c4:	a1 f4       	brne	.+40     	; 0x56ee <_ZN9UIManager23HandleUserControlEventsEv+0x218>
            {
                // User has toggled 'Decrement milk' control
                m_pCurrentDrink->DecrementMilk();
    56c6:	d8 01       	movw	r26, r16
    56c8:	90 96       	adiw	r26, 0x20	; 32
    56ca:	ed 91       	ld	r30, X+
    56cc:	fc 91       	ld	r31, X
    56ce:	91 97       	sbiw	r26, 0x21	; 33
    void        DecrementStrength()  { m_nStrength = (m_nStrength == 0) ? 0 : m_nStrength - 1; }
    56d0:	47 81       	ldd	r20, Z+7	; 0x07
    56d2:	50 85       	ldd	r21, Z+8	; 0x08
    56d4:	41 15       	cp	r20, r1
    56d6:	51 05       	cpc	r21, r1
    56d8:	11 f0       	breq	.+4      	; 0x56de <_ZN9UIManager23HandleUserControlEventsEv+0x208>
    56da:	41 50       	subi	r20, 0x01	; 1
    56dc:	51 09       	sbc	r21, r1
    56de:	50 87       	std	Z+8, r21	; 0x08
    56e0:	47 83       	std	Z+7, r20	; 0x07
                m_pDisplay->Set( IndicatorMilkLevel, (int)m_pCurrentDrink->GetMilk() );
    56e2:	61 e0       	ldi	r22, 0x01	; 1
    56e4:	f8 01       	movw	r30, r16
    56e6:	81 8d       	ldd	r24, Z+25	; 0x19
    56e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    56ea:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_SUGAR_INC ) == UserControlSwitchedOn )
    56ee:	66 e0       	ldi	r22, 0x06	; 6
    56f0:	70 e0       	ldi	r23, 0x00	; 0
    56f2:	d8 01       	movw	r26, r16
    56f4:	5d 96       	adiw	r26, 0x1d	; 29
    56f6:	8d 91       	ld	r24, X+
    56f8:	9c 91       	ld	r25, X
    56fa:	5e 97       	sbiw	r26, 0x1e	; 30
    56fc:	cf d2       	rcall	.+1438   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    56fe:	81 30       	cpi	r24, 0x01	; 1
    5700:	a1 f4       	brne	.+40     	; 0x572a <_ZN9UIManager23HandleUserControlEventsEv+0x254>
            {
                // User has toggled 'Increment sugar' control
                m_pCurrentDrink->IncrementSugar();
    5702:	d8 01       	movw	r26, r16
    5704:	90 96       	adiw	r26, 0x20	; 32
    5706:	ed 91       	ld	r30, X+
    5708:	fc 91       	ld	r31, X
    570a:	91 97       	sbiw	r26, 0x21	; 33
    int         GetSugar() { return m_nSugar; }
    void        IncrementSugar() { m_nSugar = (m_nSugar == MAX_SUGAR) ? MAX_SUGAR : m_nSugar + 1; }
    void        DecrementSugar()  { m_nSugar = (m_nSugar == 0) ? 0 : m_nSugar - 1; }
    
    int         GetStrength() { return m_nStrength; }
    void        IncrementStrength() { m_nStrength = (m_nStrength == MAX_STRENGTH) ? MAX_STRENGTH : m_nStrength + 1; }
    570c:	41 85       	ldd	r20, Z+9	; 0x09
    570e:	52 85       	ldd	r21, Z+10	; 0x0a
    5710:	43 30       	cpi	r20, 0x03	; 3
    5712:	51 05       	cpc	r21, r1
    5714:	11 f0       	breq	.+4      	; 0x571a <_ZN9UIManager23HandleUserControlEventsEv+0x244>
    5716:	4f 5f       	subi	r20, 0xFF	; 255
    5718:	5f 4f       	sbci	r21, 0xFF	; 255
    571a:	52 87       	std	Z+10, r21	; 0x0a
    571c:	41 87       	std	Z+9, r20	; 0x09
                m_pDisplay->Set( IndicatorSugarLevel, (int)m_pCurrentDrink->GetSugar() );
    571e:	62 e0       	ldi	r22, 0x02	; 2
    5720:	f8 01       	movw	r30, r16
    5722:	81 8d       	ldd	r24, Z+25	; 0x19
    5724:	92 8d       	ldd	r25, Z+26	; 0x1a
    5726:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_SUGAR_DEC ) == UserControlSwitchedOn )
    572a:	67 e0       	ldi	r22, 0x07	; 7
    572c:	70 e0       	ldi	r23, 0x00	; 0
    572e:	d8 01       	movw	r26, r16
    5730:	5d 96       	adiw	r26, 0x1d	; 29
    5732:	8d 91       	ld	r24, X+
    5734:	9c 91       	ld	r25, X
    5736:	5e 97       	sbiw	r26, 0x1e	; 30
    5738:	b1 d2       	rcall	.+1378   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    573a:	81 30       	cpi	r24, 0x01	; 1
    573c:	a1 f4       	brne	.+40     	; 0x5766 <_ZN9UIManager23HandleUserControlEventsEv+0x290>
            {
                // User has toggled 'Decrement sugar' control
                m_pCurrentDrink->DecrementSugar();
    573e:	d8 01       	movw	r26, r16
    5740:	90 96       	adiw	r26, 0x20	; 32
    5742:	ed 91       	ld	r30, X+
    5744:	fc 91       	ld	r31, X
    5746:	91 97       	sbiw	r26, 0x21	; 33
    void        DecrementStrength()  { m_nStrength = (m_nStrength == 0) ? 0 : m_nStrength - 1; }
    5748:	41 85       	ldd	r20, Z+9	; 0x09
    574a:	52 85       	ldd	r21, Z+10	; 0x0a
    574c:	41 15       	cp	r20, r1
    574e:	51 05       	cpc	r21, r1
    5750:	11 f0       	breq	.+4      	; 0x5756 <_ZN9UIManager23HandleUserControlEventsEv+0x280>
    5752:	41 50       	subi	r20, 0x01	; 1
    5754:	51 09       	sbc	r21, r1
    5756:	52 87       	std	Z+10, r21	; 0x0a
    5758:	41 87       	std	Z+9, r20	; 0x09
                m_pDisplay->Set( IndicatorSugarLevel, (int)m_pCurrentDrink->GetSugar() );
    575a:	62 e0       	ldi	r22, 0x02	; 2
    575c:	f8 01       	movw	r30, r16
    575e:	81 8d       	ldd	r24, Z+25	; 0x19
    5760:	92 8d       	ldd	r25, Z+26	; 0x1a
    5762:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_STRENGTH_INC ) == UserControlSwitchedOn )
    5766:	68 e0       	ldi	r22, 0x08	; 8
    5768:	70 e0       	ldi	r23, 0x00	; 0
    576a:	d8 01       	movw	r26, r16
    576c:	5d 96       	adiw	r26, 0x1d	; 29
    576e:	8d 91       	ld	r24, X+
    5770:	9c 91       	ld	r25, X
    5772:	5e 97       	sbiw	r26, 0x1e	; 30
    5774:	93 d2       	rcall	.+1318   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5776:	81 30       	cpi	r24, 0x01	; 1
    5778:	a1 f4       	brne	.+40     	; 0x57a2 <_ZN9UIManager23HandleUserControlEventsEv+0x2cc>
            {
                // User has toggled 'Increment strength' control
                m_pCurrentDrink->IncrementStrength();
    577a:	d8 01       	movw	r26, r16
    577c:	90 96       	adiw	r26, 0x20	; 32
    577e:	ed 91       	ld	r30, X+
    5780:	fc 91       	ld	r31, X
    5782:	91 97       	sbiw	r26, 0x21	; 33
    int         GetSugar() { return m_nSugar; }
    void        IncrementSugar() { m_nSugar = (m_nSugar == MAX_SUGAR) ? MAX_SUGAR : m_nSugar + 1; }
    void        DecrementSugar()  { m_nSugar = (m_nSugar == 0) ? 0 : m_nSugar - 1; }
    
    int         GetStrength() { return m_nStrength; }
    void        IncrementStrength() { m_nStrength = (m_nStrength == MAX_STRENGTH) ? MAX_STRENGTH : m_nStrength + 1; }
    5784:	43 85       	ldd	r20, Z+11	; 0x0b
    5786:	54 85       	ldd	r21, Z+12	; 0x0c
    5788:	43 30       	cpi	r20, 0x03	; 3
    578a:	51 05       	cpc	r21, r1
    578c:	11 f0       	breq	.+4      	; 0x5792 <_ZN9UIManager23HandleUserControlEventsEv+0x2bc>
    578e:	4f 5f       	subi	r20, 0xFF	; 255
    5790:	5f 4f       	sbci	r21, 0xFF	; 255
    5792:	54 87       	std	Z+12, r21	; 0x0c
    5794:	43 87       	std	Z+11, r20	; 0x0b
                m_pDisplay->Set( IndicatorStrengthLevel, (int)m_pCurrentDrink->GetStrength() );
    5796:	63 e0       	ldi	r22, 0x03	; 3
    5798:	f8 01       	movw	r30, r16
    579a:	81 8d       	ldd	r24, Z+25	; 0x19
    579c:	92 8d       	ldd	r25, Z+26	; 0x1a
    579e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_STRENGTH_DEC ) == UserControlSwitchedOn )
    57a2:	69 e0       	ldi	r22, 0x09	; 9
    57a4:	70 e0       	ldi	r23, 0x00	; 0
    57a6:	d8 01       	movw	r26, r16
    57a8:	5d 96       	adiw	r26, 0x1d	; 29
    57aa:	8d 91       	ld	r24, X+
    57ac:	9c 91       	ld	r25, X
    57ae:	5e 97       	sbiw	r26, 0x1e	; 30
    57b0:	75 d2       	rcall	.+1258   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    57b2:	81 30       	cpi	r24, 0x01	; 1
    57b4:	a1 f4       	brne	.+40     	; 0x57de <_ZN9UIManager23HandleUserControlEventsEv+0x308>
            {
                // User has toggled 'Decrement strength' control
                m_pCurrentDrink->DecrementStrength();
    57b6:	d8 01       	movw	r26, r16
    57b8:	90 96       	adiw	r26, 0x20	; 32
    57ba:	ed 91       	ld	r30, X+
    57bc:	fc 91       	ld	r31, X
    57be:	91 97       	sbiw	r26, 0x21	; 33
    void        DecrementStrength()  { m_nStrength = (m_nStrength == 0) ? 0 : m_nStrength - 1; }
    57c0:	43 85       	ldd	r20, Z+11	; 0x0b
    57c2:	54 85       	ldd	r21, Z+12	; 0x0c
    57c4:	41 15       	cp	r20, r1
    57c6:	51 05       	cpc	r21, r1
    57c8:	11 f0       	breq	.+4      	; 0x57ce <_ZN9UIManager23HandleUserControlEventsEv+0x2f8>
    57ca:	41 50       	subi	r20, 0x01	; 1
    57cc:	51 09       	sbc	r21, r1
    57ce:	54 87       	std	Z+12, r21	; 0x0c
    57d0:	43 87       	std	Z+11, r20	; 0x0b
                m_pDisplay->Set( IndicatorStrengthLevel, (int)m_pCurrentDrink->GetStrength() );
    57d2:	63 e0       	ldi	r22, 0x03	; 3
    57d4:	f8 01       	movw	r30, r16
    57d6:	81 8d       	ldd	r24, Z+25	; 0x19
    57d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    57da:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_GO ) == UserControlSwitchedOn )
    57de:	6a e0       	ldi	r22, 0x0A	; 10
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	d8 01       	movw	r26, r16
    57e4:	5d 96       	adiw	r26, 0x1d	; 29
    57e6:	8d 91       	ld	r24, X+
    57e8:	9c 91       	ld	r25, X
    57ea:	5e 97       	sbiw	r26, 0x1e	; 30
    57ec:	57 d2       	rcall	.+1198   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    57ee:	81 30       	cpi	r24, 0x01	; 1
    57f0:	81 f5       	brne	.+96     	; 0x5852 <_ZN9UIManager23HandleUserControlEventsEv+0x37c>
    
    bool        CupIsPresent() { return m_bCupIsPresent; }
    void        SetSelectionConfirmed( bool bConfirmed ) { m_bSelectionIsConfirmed = bConfirmed; }
    57f2:	d8 01       	movw	r26, r16
    57f4:	90 96       	adiw	r26, 0x20	; 32
    57f6:	ed 91       	ld	r30, X+
    57f8:	fc 91       	ld	r31, X
    57fa:	91 97       	sbiw	r26, 0x21	; 33
    57fc:	87 87       	std	Z+15, r24	; 0x0f
            {
                // User has pressed GO button
                m_pCurrentDrink->SetSelectionConfirmed( true );
                m_pDisplay->Set( IndicatorLED_GoButton, false );
    57fe:	40 e0       	ldi	r20, 0x00	; 0
    5800:	62 e0       	ldi	r22, 0x02	; 2
    5802:	59 96       	adiw	r26, 0x19	; 25
    5804:	8d 91       	ld	r24, X+
    5806:	9c 91       	ld	r25, X
    5808:	5a 97       	sbiw	r26, 0x1a	; 26
    580a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
                m_pDisplay->Set( IndicatorLED_StopButton, true );
    580e:	41 e0       	ldi	r20, 0x01	; 1
    5810:	63 e0       	ldi	r22, 0x03	; 3
    5812:	f8 01       	movw	r30, r16
    5814:	81 8d       	ldd	r24, Z+25	; 0x19
    5816:	92 8d       	ldd	r25, Z+26	; 0x1a
    5818:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
    581c:	d8 01       	movw	r26, r16
    581e:	90 96       	adiw	r26, 0x20	; 32
    5820:	ed 91       	ld	r30, X+
    5822:	fc 91       	ld	r31, X
				
				// Stop the station indicator flashing for this drink 
				int nStation = m_pController->GetDrinkLocation( m_pCurrentDrink->GetID() );
    5824:	91 97       	sbiw	r26, 0x21	; 33
    5826:	65 85       	ldd	r22, Z+13	; 0x0d
    5828:	76 85       	ldd	r23, Z+14	; 0x0e
    582a:	14 96       	adiw	r26, 0x04	; 4
    582c:	8d 91       	ld	r24, X+
    582e:	9c 91       	ld	r25, X
    5830:	15 97       	sbiw	r26, 0x05	; 5
    5832:	ae d8       	rcall	.-3748   	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
    5834:	d8 01       	movw	r26, r16
    5836:	90 96       	adiw	r26, 0x20	; 32
    5838:	ed 91       	ld	r30, X+
    583a:	fc 91       	ld	r31, X
    583c:	91 97       	sbiw	r26, 0x21	; 33
                m_pDisplay->Set( nStation, m_pCurrentDrink->GetID(), false );
    583e:	45 85       	ldd	r20, Z+13	; 0x0d
    5840:	56 85       	ldd	r21, Z+14	; 0x0e
    5842:	20 e0       	ldi	r18, 0x00	; 0
    5844:	bc 01       	movw	r22, r24
    5846:	59 96       	adiw	r26, 0x19	; 25
    5848:	8d 91       	ld	r24, X+
    584a:	9c 91       	ld	r25, X
    584c:	5a 97       	sbiw	r26, 0x1a	; 26
    584e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7Display3SetEiib>
            }
        }            
    
        if( m_pUserControls->CheckSettledEvent( UC_CANCEL ) == UserControlSwitchedOn )
    5852:	6b e0       	ldi	r22, 0x0B	; 11
    5854:	70 e0       	ldi	r23, 0x00	; 0
    5856:	f8 01       	movw	r30, r16
    5858:	85 8d       	ldd	r24, Z+29	; 0x1d
    585a:	96 8d       	ldd	r25, Z+30	; 0x1e
    585c:	1f d2       	rcall	.+1086   	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    585e:	81 30       	cpi	r24, 0x01	; 1
    5860:	a1 f5       	brne	.+104    	; 0x58ca <_ZN9UIManager23HandleUserControlEventsEv+0x3f4>
    5862:	d8 01       	movw	r26, r16
    5864:	90 96       	adiw	r26, 0x20	; 32
    5866:	ed 91       	ld	r30, X+
    5868:	fc 91       	ld	r31, X
        {
            // User has pressed CANCEL button
            int nStation = m_pController->GetDrinkLocation( m_pCurrentDrink->GetID() );
    586a:	91 97       	sbiw	r26, 0x21	; 33
    586c:	65 85       	ldd	r22, Z+13	; 0x0d
    586e:	76 85       	ldd	r23, Z+14	; 0x0e
    5870:	14 96       	adiw	r26, 0x04	; 4
    5872:	8d 91       	ld	r24, X+
    5874:	9c 91       	ld	r25, X
    5876:	15 97       	sbiw	r26, 0x05	; 5
    5878:	8b d8       	rcall	.-3818   	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
    587a:	7c 01       	movw	r14, r24
            if( (nStation==ST_RECEPTION_A) || (nStation==ST_RECEPTION_B) || (nStation==ST_RECEPTION_C) )
    587c:	01 97       	sbiw	r24, 0x01	; 1
    587e:	03 97       	sbiw	r24, 0x03	; 3
    5880:	20 f5       	brcc	.+72     	; 0x58ca <_ZN9UIManager23HandleUserControlEventsEv+0x3f4>
    5882:	d8 01       	movw	r26, r16
    5884:	90 96       	adiw	r26, 0x20	; 32
    5886:	ed 91       	ld	r30, X+
    5888:	fc 91       	ld	r31, X
    588a:	91 97       	sbiw	r26, 0x21	; 33
    588c:	17 86       	std	Z+15, r1	; 0x0f
            {
                // Cancellation only allowed at reception stations
                m_pCurrentDrink->SetSelectionConfirmed( false );
                m_pDisplay->Set( IndicatorLED_GoButton, true );
    588e:	41 e0       	ldi	r20, 0x01	; 1
    5890:	62 e0       	ldi	r22, 0x02	; 2
    5892:	59 96       	adiw	r26, 0x19	; 25
    5894:	8d 91       	ld	r24, X+
    5896:	9c 91       	ld	r25, X
    5898:	5a 97       	sbiw	r26, 0x1a	; 26
    589a:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
                m_pDisplay->Set( IndicatorLED_StopButton, false );
    589e:	40 e0       	ldi	r20, 0x00	; 0
    58a0:	63 e0       	ldi	r22, 0x03	; 3
    58a2:	f8 01       	movw	r30, r16
    58a4:	81 8d       	ldd	r24, Z+25	; 0x19
    58a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    58a8:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
    58ac:	d8 01       	movw	r26, r16
    58ae:	90 96       	adiw	r26, 0x20	; 32
    58b0:	ed 91       	ld	r30, X+
    58b2:	fc 91       	ld	r31, X
    58b4:	91 97       	sbiw	r26, 0x21	; 33
				m_pDisplay->Set( nStation, m_pCurrentDrink->GetID(), true );
    58b6:	45 85       	ldd	r20, Z+13	; 0x0d
    58b8:	56 85       	ldd	r21, Z+14	; 0x0e
    58ba:	21 e0       	ldi	r18, 0x01	; 1
    58bc:	b7 01       	movw	r22, r14
    58be:	59 96       	adiw	r26, 0x19	; 25
    58c0:	8d 91       	ld	r24, X+
    58c2:	9c 91       	ld	r25, X
    58c4:	5a 97       	sbiw	r26, 0x1a	; 26
    58c6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7Display3SetEiib>
            }
        }
        
        // Render changes to display hardware
        m_pDisplay->Update();
    58ca:	f8 01       	movw	r30, r16
    58cc:	81 8d       	ldd	r24, Z+25	; 0x19
    58ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    58d0:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN7Display6UpdateEv>
    }        

    // Now record current settled state of controls
    m_pUserControls->RecordSettledStates();
    58d4:	d8 01       	movw	r26, r16
    58d6:	5d 96       	adiw	r26, 0x1d	; 29
    58d8:	8d 91       	ld	r24, X+
    58da:	9c 91       	ld	r25, X
}
    58dc:	5e 97       	sbiw	r26, 0x1e	; 30
    58de:	0f 90       	pop	r0
    58e0:	0f 90       	pop	r0
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
    58e8:	df 91       	pop	r29
    58ea:	cf 91       	pop	r28
    58ec:	1f 91       	pop	r17
    58ee:	0f 91       	pop	r16
    58f0:	ff 90       	pop	r15
        // Render changes to display hardware
        m_pDisplay->Update();
    }        

    // Now record current settled state of controls
    m_pUserControls->RecordSettledStates();
    58f2:	ef 90       	pop	r14
    58f4:	ca c1       	rjmp	.+916    	; 0x5c8a <_ZN12UserControls19RecordSettledStatesEv>

000058f6 <_ZN9UIManager18HandleCupPlacementEi>:
//	HandleCupPlacement()
//
//  A new cup has been detected
//
void UIManager::HandleCupPlacement( int nStation )
{
    58f6:	ef 92       	push	r14
    58f8:	ff 92       	push	r15
    58fa:	0f 93       	push	r16
    58fc:	1f 93       	push	r17
    58fe:	cf 93       	push	r28
    5900:	df 93       	push	r29
    5902:	ec 01       	movw	r28, r24
    5904:	8b 01       	movw	r16, r22
   Drink *pNewDrink = m_pController->NotifyNewDrinkRequest( nStation );
    5906:	8c 81       	ldd	r24, Y+4	; 0x04
    5908:	9d 81       	ldd	r25, Y+5	; 0x05
    590a:	0e 94 00 24 	call	0x4800	; 0x4800 <_ZN20TeaMachineController21NotifyNewDrinkRequestEj>
    590e:	7c 01       	movw	r14, r24
    5910:	89 8d       	ldd	r24, Y+25	; 0x19
    5912:	9a 8d       	ldd	r25, Y+26	; 0x1a

   if( nStation <= ST_BREW )
    5914:	05 30       	cpi	r16, 0x05	; 5
    5916:	11 05       	cpc	r17, r1
    5918:	64 f4       	brge	.+24     	; 0x5932 <_ZN9UIManager18HandleCupPlacementEi+0x3c>
    bool        SelectionIsConfirmed() { return m_bSelectionIsConfirmed; }

    int         GetID() { return m_nDrinkID; }
    
    DrinkState  GetState() { return m_State; }
    void        SetState( DrinkState state ){ m_State = state; }
    591a:	f7 01       	movw	r30, r14
    591c:	11 82       	std	Z+1, r1	; 0x01
   {
       // Cup has been placed in a correct station for a new drink
       pNewDrink->SetState( Empty );
	   
	   // Show new cup ID and make it flash
       m_pDisplay->Set( nStation, pNewDrink->GetID(), true );
    591e:	45 85       	ldd	r20, Z+13	; 0x0d
    5920:	56 85       	ldd	r21, Z+14	; 0x0e
    5922:	21 e0       	ldi	r18, 0x01	; 1
    5924:	b8 01       	movw	r22, r16
    5926:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7Display3SetEiib>
       SetCurrentDrink( pNewDrink );
    592a:	b7 01       	movw	r22, r14
    592c:	ce 01       	movw	r24, r28
    592e:	ae dc       	rcall	.-1700   	; 0x528c <_ZN9UIManager15SetCurrentDrinkEP5Drink>
    5930:	09 c0       	rjmp	.+18     	; 0x5944 <_ZN9UIManager18HandleCupPlacementEi+0x4e>
    5932:	24 e0       	ldi	r18, 0x04	; 4
    5934:	f7 01       	movw	r30, r14
    5936:	21 83       	std	Z+1, r18	; 0x01
   }
   else
   {
       // Cup has been placed on an incorrect station, so it will be ignored
       pNewDrink->SetState( Invalid );
       m_pDisplay->Set( nStation, UNEXPECTED );	  
    5938:	20 e0       	ldi	r18, 0x00	; 0
    593a:	4d ef       	ldi	r20, 0xFD	; 253
    593c:	5f ef       	ldi	r21, 0xFF	; 255
    593e:	b8 01       	movw	r22, r16
    5940:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7Display3SetEiib>
   }
   m_pDisplay->Update();
    5944:	89 8d       	ldd	r24, Y+25	; 0x19
    5946:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    5948:	df 91       	pop	r29
    594a:	cf 91       	pop	r28
    594c:	1f 91       	pop	r17
    594e:	0f 91       	pop	r16
    5950:	ff 90       	pop	r15
    5952:	ef 90       	pop	r14
   {
       // Cup has been placed on an incorrect station, so it will be ignored
       pNewDrink->SetState( Invalid );
       m_pDisplay->Set( nStation, UNEXPECTED );	  
   }
   m_pDisplay->Update();
    5954:	0c 94 b5 12 	jmp	0x256a	; 0x256a <_ZN7Display6UpdateEv>

00005958 <_ZN9UIManager16HandleCupRemovalEi>:
//	HandleCupRemoval()
//
//  A cup has been removed
//
void UIManager::HandleCupRemoval( int nStation )
{
    5958:	0f 93       	push	r16
    595a:	1f 93       	push	r17
    595c:	cf 93       	push	r28
    595e:	df 93       	push	r29
    5960:	ec 01       	movw	r28, r24
    5962:	8b 01       	movw	r16, r22
    m_pController->NotifyCupRemoval( nStation );
    5964:	8c 81       	ldd	r24, Y+4	; 0x04
    5966:	9d 81       	ldd	r25, Y+5	; 0x05
    5968:	0e 94 9c 23 	call	0x4738	; 0x4738 <_ZN20TeaMachineController16NotifyCupRemovalEj>
    m_pDisplay->Set( nStation, BLANK );
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	4f ef       	ldi	r20, 0xFF	; 255
    5970:	5f ef       	ldi	r21, 0xFF	; 255
    5972:	b8 01       	movw	r22, r16
    5974:	89 8d       	ldd	r24, Y+25	; 0x19
    5976:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5978:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7Display3SetEiib>

	SetCurrentDrink( m_pController->GetNextDrink() );
    597c:	8c 81       	ldd	r24, Y+4	; 0x04
    597e:	9d 81       	ldd	r25, Y+5	; 0x05
    5980:	0e 94 36 24 	call	0x486c	; 0x486c <_ZN20TeaMachineController12GetNextDrinkEv>
    5984:	bc 01       	movw	r22, r24
    5986:	ce 01       	movw	r24, r28
}
    5988:	df 91       	pop	r29
    598a:	cf 91       	pop	r28
    598c:	1f 91       	pop	r17
    598e:	0f 91       	pop	r16
void UIManager::HandleCupRemoval( int nStation )
{
    m_pController->NotifyCupRemoval( nStation );
    m_pDisplay->Set( nStation, BLANK );

	SetCurrentDrink( m_pController->GetNextDrink() );
    5990:	7d cc       	rjmp	.-1798   	; 0x528c <_ZN9UIManager15SetCurrentDrinkEP5Drink>

00005992 <_ZN9UIManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse UIManager::AdvanceStateMachine()
{
    5992:	0f 93       	push	r16
    5994:	1f 93       	push	r17
    5996:	cf 93       	push	r28
    5998:	df 93       	push	r29
    599a:	ec 01       	movw	r28, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    599c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    599e:	82 30       	cpi	r24, 0x02	; 2
    59a0:	61 f1       	breq	.+88     	; 0x59fa <_ZN9UIManager19AdvanceStateMachineEv+0x68>
    59a2:	28 f4       	brcc	.+10     	; 0x59ae <_ZN9UIManager19AdvanceStateMachineEv+0x1c>
    59a4:	88 23       	and	r24, r24
    59a6:	59 f0       	breq	.+22     	; 0x59be <_ZN9UIManager19AdvanceStateMachineEv+0x2c>
    59a8:	81 30       	cpi	r24, 0x01	; 1
    59aa:	b1 f0       	breq	.+44     	; 0x59d8 <_ZN9UIManager19AdvanceStateMachineEv+0x46>
    59ac:	79 c0       	rjmp	.+242    	; 0x5aa0 <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    59ae:	84 30       	cpi	r24, 0x04	; 4
    59b0:	09 f4       	brne	.+2      	; 0x59b4 <_ZN9UIManager19AdvanceStateMachineEv+0x22>
    59b2:	52 c0       	rjmp	.+164    	; 0x5a58 <_ZN9UIManager19AdvanceStateMachineEv+0xc6>
    59b4:	68 f1       	brcs	.+90     	; 0x5a10 <_ZN9UIManager19AdvanceStateMachineEv+0x7e>
    59b6:	85 30       	cpi	r24, 0x05	; 5
    59b8:	09 f4       	brne	.+2      	; 0x59bc <_ZN9UIManager19AdvanceStateMachineEv+0x2a>
    59ba:	5e c0       	rjmp	.+188    	; 0x5a78 <_ZN9UIManager19AdvanceStateMachineEv+0xe6>
    59bc:	71 c0       	rjmp	.+226    	; 0x5aa0 <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    {
        // Reset user interface
        case UIReset:
            Serial.print("State: UIReset\n");
    59be:	69 eb       	ldi	r22, 0xB9	; 185
    59c0:	78 e0       	ldi	r23, 0x08	; 8
    59c2:	85 e5       	ldi	r24, 0x55	; 85
    59c4:	9a e0       	ldi	r25, 0x0A	; 10
    59c6:	1b d7       	rcall	.+3638   	; 0x67fe <_ZN5Print5printEPKc>
            ClearTimeout();
    59c8:	ce 01       	movw	r24, r28
    59ca:	0e 94 bf 1a 	call	0x357e	; 0x357e <_ZN18ProcessManagerBase12ClearTimeoutEv>
            m_pUserControls->ReadStates();
    59ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59d2:	c7 d1       	rcall	.+910    	; 0x5d62 <_ZN12UserControls10ReadStatesEv>
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	63 c0       	rjmp	.+198    	; 0x5a9e <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
            SetNextState(UIResetComplete);
            break;
            
        // Obtain settled user control states
        case UIResetComplete:
            Serial.print("State: UIResetComplete\n");
    59d8:	69 ec       	ldi	r22, 0xC9	; 201
    59da:	78 e0       	ldi	r23, 0x08	; 8
    59dc:	85 e5       	ldi	r24, 0x55	; 85
    59de:	9a e0       	ldi	r25, 0x0A	; 10
    59e0:	0e d7       	rcall	.+3612   	; 0x67fe <_ZN5Print5printEPKc>
            if( m_pUserControls->ReadSettledStates() )
    59e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59e6:	da d1       	rcall	.+948    	; 0x5d9c <_ZN12UserControls17ReadSettledStatesEv>
    59e8:	88 23       	and	r24, r24
    59ea:	29 f0       	breq	.+10     	; 0x59f6 <_ZN9UIManager19AdvanceStateMachineEv+0x64>
            {
                m_pUserControls->RecordSettledStates();            
    59ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59f0:	4c d1       	rcall	.+664    	; 0x5c8a <_ZN12UserControls19RecordSettledStatesEv>
    59f2:	82 e0       	ldi	r24, 0x02	; 2
                response = ProcessComplete;
    59f4:	56 c0       	rjmp	.+172    	; 0x5aa2 <_ZN9UIManager19AdvanceStateMachineEv+0x110>
    59f6:	1f 8e       	std	Y+31, r1	; 0x1f
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    59f8:	53 c0       	rjmp	.+166    	; 0x5aa0 <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    59fa:	8a a1       	ldd	r24, Y+34	; 0x22
            }
            break;
                             
        // UIScanStations: Scan cup stations
        case UIScanStations:
			if( !m_bStationAdvanceInProgress )
    59fc:	81 11       	cpse	r24, r1
    59fe:	06 c0       	rjmp	.+12     	; 0x5a0c <_ZN9UIManager19AdvanceStateMachineEv+0x7a>
    5a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
			{
				// Scan cup stations
				m_pCupDetector->Update();
    5a02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a04:	0e 94 af 0a 	call	0x155e	; 0x155e <_ZN11CupDetector6UpdateEv>
    5a08:	81 e0       	ldi	r24, 0x01	; 1
				m_bResultsAwaitChecking = true;
    5a0a:	8b a3       	std	Y+35, r24	; 0x23
    5a0c:	83 e0       	ldi	r24, 0x03	; 3
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    5a0e:	47 c0       	rjmp	.+142    	; 0x5a9e <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
    5a10:	8a a1       	ldd	r24, Y+34	; 0x22
            SetNextState(UICheckStationScanResults);
            break;
        
        // UICheckStationScanResults: Determine whether cups have been added or removed
        case UICheckStationScanResults:
			if( !m_bStationAdvanceInProgress && m_bResultsAwaitChecking )
    5a12:	81 11       	cpse	r24, r1
    5a14:	1f c0       	rjmp	.+62     	; 0x5a54 <_ZN9UIManager19AdvanceStateMachineEv+0xc2>
    5a16:	8b a1       	ldd	r24, Y+35	; 0x23
    5a18:	88 23       	and	r24, r24
    5a1a:	e1 f0       	breq	.+56     	; 0x5a54 <_ZN9UIManager19AdvanceStateMachineEv+0xc2>
    5a1c:	01 e0       	ldi	r16, 0x01	; 1
    5a1e:	10 e0       	ldi	r17, 0x00	; 0
    5a20:	eb 8d       	ldd	r30, Y+27	; 0x1b
    bool Initialise();                               // Initialise the cup detector
 	bool Test();					                 // Test the cup detector
   
    void Update();                                   // Scan all stations
    bool IsPresent( int nStation );                  // Returns true if cup was detected
    StationEvent GetChange( int nStation ) { return m_StationEvents[nStation]; }
    5a22:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5a24:	e0 0f       	add	r30, r16
    5a26:	f1 1f       	adc	r31, r17
    5a28:	80 89       	ldd	r24, Z+16	; 0x10
			{
				// Check results of last scan
				for( int nStation = 1; nStation <=STATIONS; nStation++ )
				{
					if(m_pCupDetector->GetChange(nStation) == StationEventCupAdded)
    5a2a:	81 30       	cpi	r24, 0x01	; 1
    5a2c:	19 f4       	brne	.+6      	; 0x5a34 <_ZN9UIManager19AdvanceStateMachineEv+0xa2>
					{
						// A cup has been placed on the conveyor
						HandleCupPlacement(nStation);
    5a2e:	b8 01       	movw	r22, r16
    5a30:	ce 01       	movw	r24, r28
    5a32:	61 df       	rcall	.-318    	; 0x58f6 <_ZN9UIManager18HandleCupPlacementEi>
    5a34:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5a36:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5a38:	e0 0f       	add	r30, r16
    5a3a:	f1 1f       	adc	r31, r17
					}
					if(m_pCupDetector->GetChange(nStation) == StationEventCupRemoved)
    5a3c:	80 89       	ldd	r24, Z+16	; 0x10
    5a3e:	82 30       	cpi	r24, 0x02	; 2
    5a40:	19 f4       	brne	.+6      	; 0x5a48 <_ZN9UIManager19AdvanceStateMachineEv+0xb6>
					{
						// A cup has been removed from the conveyor
						HandleCupRemoval(nStation);
    5a42:	b8 01       	movw	r22, r16
    5a44:	ce 01       	movw	r24, r28
    5a46:	88 df       	rcall	.-240    	; 0x5958 <_ZN9UIManager16HandleCupRemovalEi>
    5a48:	0f 5f       	subi	r16, 0xFF	; 255
        // UICheckStationScanResults: Determine whether cups have been added or removed
        case UICheckStationScanResults:
			if( !m_bStationAdvanceInProgress && m_bResultsAwaitChecking )
			{
				// Check results of last scan
				for( int nStation = 1; nStation <=STATIONS; nStation++ )
    5a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    5a4c:	0a 30       	cpi	r16, 0x0A	; 10
    5a4e:	11 05       	cpc	r17, r1
    5a50:	39 f7       	brne	.-50     	; 0x5a20 <_ZN9UIManager19AdvanceStateMachineEv+0x8e>
					{
						// A cup has been removed from the conveyor
						HandleCupRemoval(nStation);
					}
				} // for
				m_bResultsAwaitChecking = false;
    5a52:	1b a2       	std	Y+35, r1	; 0x23
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    5a54:	84 e0       	ldi	r24, 0x04	; 4
    5a56:	23 c0       	rjmp	.+70     	; 0x5a9e <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
            break;
            
        // UICheckControls: Examine the user controls
        case UIScanControls:
            // Check state of controls
            m_pUserControls->ReadStates();
    5a58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a5c:	82 d1       	rcall	.+772    	; 0x5d62 <_ZN12UserControls10ReadStatesEv>
    5a5e:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
            m_lDebounceCheckTime = millis() + UC_DEBOUNCE_DELAY;
    5a62:	dc 01       	movw	r26, r24
    5a64:	cb 01       	movw	r24, r22
    5a66:	c2 96       	adiw	r24, 0x32	; 50
    5a68:	a1 1d       	adc	r26, r1
    5a6a:	b1 1d       	adc	r27, r1
    5a6c:	8c a3       	std	Y+36, r24	; 0x24
    5a6e:	9d a3       	std	Y+37, r25	; 0x25
    5a70:	ae a3       	std	Y+38, r26	; 0x26
    5a72:	bf a3       	std	Y+39, r27	; 0x27
    5a74:	85 e0       	ldi	r24, 0x05	; 5
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    5a76:	13 c0       	rjmp	.+38     	; 0x5a9e <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
    5a78:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
            SetNextState(UICheckControlScanResults);
            break;
            
        // UICheckControlScanResults: Act on any changes to the user controls
        case UICheckControlScanResults:
            if( millis() > m_lDebounceCheckTime )
    5a7c:	0c a1       	ldd	r16, Y+36	; 0x24
    5a7e:	1d a1       	ldd	r17, Y+37	; 0x25
    5a80:	2e a1       	ldd	r18, Y+38	; 0x26
    5a82:	3f a1       	ldd	r19, Y+39	; 0x27
    5a84:	06 17       	cp	r16, r22
    5a86:	17 07       	cpc	r17, r23
    5a88:	28 07       	cpc	r18, r24
    5a8a:	39 07       	cpc	r19, r25
            {
                 if( m_pUserControls->ReadSettledStates() )
    5a8c:	48 f4       	brcc	.+18     	; 0x5aa0 <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    5a8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a90:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a92:	84 d1       	rcall	.+776    	; 0x5d9c <_ZN12UserControls17ReadSettledStatesEv>
    5a94:	88 23       	and	r24, r24
    5a96:	f1 f2       	breq	.-68     	; 0x5a54 <_ZN9UIManager19AdvanceStateMachineEv+0xc2>
                {
                    // Check state of controls
                    HandleUserControlEvents();
    5a98:	ce 01       	movw	r24, r28
    5a9a:	1d dd       	rcall	.-1478   	; 0x54d6 <_ZN9UIManager23HandleUserControlEventsEv>
    5a9c:	82 e0       	ldi	r24, 0x02	; 2
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    5a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
//
//  Initiate the next step of the process
//
ProcessManagerResponse UIManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    5aa2:	df 91       	pop	r29
            
            break;          
    } // switch            
            
	return response;
}
    5aa4:	cf 91       	pop	r28
    5aa6:	1f 91       	pop	r17
    5aa8:	0f 91       	pop	r16
    5aaa:	08 95       	ret

00005aac <_ZN9UIManager8ContinueEv>:
    5aac:	cf 92       	push	r12
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse UIManager::Continue()
{
    5aae:	df 92       	push	r13
    5ab0:	ef 92       	push	r14
    5ab2:	ff 92       	push	r15
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
    5aba:	ec 01       	movw	r28, r24
    5abc:	18 8d       	ldd	r17, Y+24	; 0x18
    ProcessManagerResponse response = GetLastResponse();
    
	// Implement display flashing as required
	if( (millis() > m_lNextFlashActionTime) && (m_pDisplay != NULL) )
    5abe:	0e 94 f6 35 	call	0x6bec	; 0x6bec <millis>
    5ac2:	c8 a4       	ldd	r12, Y+40	; 0x28
    5ac4:	d9 a4       	ldd	r13, Y+41	; 0x29
    5ac6:	ea a4       	ldd	r14, Y+42	; 0x2a
    5ac8:	fb a4       	ldd	r15, Y+43	; 0x2b
    5aca:	c6 16       	cp	r12, r22
    5acc:	d7 06       	cpc	r13, r23
    5ace:	e8 06       	cpc	r14, r24
    5ad0:	f9 06       	cpc	r15, r25
    5ad2:	20 f4       	brcc	.+8      	; 0x5adc <_ZN9UIManager8ContinueEv+0x30>
    5ad4:	89 8d       	ldd	r24, Y+25	; 0x19
    5ad6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5ad8:	00 97       	sbiw	r24, 0x00	; 0
    5ada:	29 f4       	brne	.+10     	; 0x5ae6 <_ZN9UIManager8ContinueEv+0x3a>
	{
		m_lNextFlashActionTime = m_pDisplay->DoFlash();
	}
	
	// Advance process state machine if necessary
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    5adc:	88 8d       	ldd	r24, Y+24	; 0x18
    5ade:	81 50       	subi	r24, 0x01	; 1
    5ae0:	82 30       	cpi	r24, 0x02	; 2
    5ae2:	40 f4       	brcc	.+16     	; 0x5af4 <_ZN9UIManager8ContinueEv+0x48>
    5ae4:	25 c0       	rjmp	.+74     	; 0x5b30 <_ZN9UIManager8ContinueEv+0x84>
    ProcessManagerResponse response = GetLastResponse();
    
	// Implement display flashing as required
	if( (millis() > m_lNextFlashActionTime) && (m_pDisplay != NULL) )
	{
		m_lNextFlashActionTime = m_pDisplay->DoFlash();
    5ae6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <_ZN7Display7DoFlashEv>
    5aea:	68 a7       	std	Y+40, r22	; 0x28
    5aec:	79 a7       	std	Y+41, r23	; 0x29
    5aee:	8a a7       	std	Y+42, r24	; 0x2a
    5af0:	9b a7       	std	Y+43, r25	; 0x2b
    5af2:	f4 cf       	rjmp	.-24     	; 0x5adc <_ZN9UIManager8ContinueEv+0x30>
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    5af4:	ce 01       	movw	r24, r28
    5af6:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    5afa:	81 11       	cpse	r24, r1
    5afc:	04 c0       	rjmp	.+8      	; 0x5b06 <_ZN9UIManager8ContinueEv+0x5a>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    5afe:	ce 01       	movw	r24, r28
    5b00:	48 df       	rcall	.-368    	; 0x5992 <_ZN9UIManager19AdvanceStateMachineEv>
    5b02:	18 2f       	mov	r17, r24
    5b04:	14 c0       	rjmp	.+40     	; 0x5b2e <_ZN9UIManager8ContinueEv+0x82>
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
    5b06:	60 e0       	ldi	r22, 0x00	; 0
    5b08:	74 e0       	ldi	r23, 0x04	; 4
    5b0a:	85 e5       	ldi	r24, 0x55	; 85
    5b0c:	9a e0       	ldi	r25, 0x0A	; 10
    5b0e:	77 d6       	rcall	.+3310   	; 0x67fe <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
    5b10:	48 89       	ldd	r20, Y+16	; 0x10
    5b12:	59 89       	ldd	r21, Y+17	; 0x11
    5b14:	6a 89       	ldd	r22, Y+18	; 0x12
    5b16:	7b 89       	ldd	r23, Y+19	; 0x13
    5b18:	2a e0       	ldi	r18, 0x0A	; 10
    5b1a:	30 e0       	ldi	r19, 0x00	; 0
    5b1c:	85 e5       	ldi	r24, 0x55	; 85
    5b1e:	9a e0       	ldi	r25, 0x0A	; 10
    5b20:	e0 d6       	rcall	.+3520   	; 0x68e2 <_ZN5Print5printEmi>
            Serial.print("\n");
    5b22:	6a e3       	ldi	r22, 0x3A	; 58
    5b24:	7a e0       	ldi	r23, 0x0A	; 10
    5b26:	85 e5       	ldi	r24, 0x55	; 85
    5b28:	9a e0       	ldi	r25, 0x0A	; 10
    5b2a:	69 d6       	rcall	.+3282   	; 0x67fe <_ZN5Print5printEPKc>
	}
	
	// Advance process state machine if necessary
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
    5b2c:	11 e0       	ldi	r17, 0x01	; 1
	void SetTimeout(unsigned long lTimeout, long lApplicableErrorCode );
    void ClearTimeout();                            // Remove the timeout
	bool CheckTimeoutExpired();						// Check timeout
	void SetErrorCode(long lErrorCode);	            // Set process error code

    void SetResponse( ProcessManagerResponse response ) { m_LastResponse = response; }
    5b2e:	18 8f       	std	Y+24, r17	; 0x18
        
        SetResponse(response);
    }
    
    return response;
}
    5b30:	81 2f       	mov	r24, r17
    5b32:	df 91       	pop	r29
    5b34:	cf 91       	pop	r28
    5b36:	1f 91       	pop	r17
    5b38:	ff 90       	pop	r15
    5b3a:	ef 90       	pop	r14
    5b3c:	df 90       	pop	r13
    5b3e:	cf 90       	pop	r12
    5b40:	08 95       	ret

00005b42 <_ZN9UIManager26NotifyStationAdvanceBeginsEv>:
//  Called when the station positions begin advancing by one (as a result
//  of the conveyor moving by one position)
//
void UIManager::NotifyStationAdvanceBegins()
{
	m_bStationAdvanceInProgress = true;
    5b42:	21 e0       	ldi	r18, 0x01	; 1
    5b44:	fc 01       	movw	r30, r24
    5b46:	22 a3       	std	Z+34, r18	; 0x22
    5b48:	08 95       	ret

00005b4a <_ZN9UIManager28NotifyStationAdvanceCompleteEv>:
//
//  Called when the station positions have advanced by one (as a result
//  of the conveyor moving by one position)
//
void UIManager::NotifyStationAdvanceComplete()
{
    5b4a:	0f 93       	push	r16
    5b4c:	1f 93       	push	r17
    5b4e:	cf 93       	push	r28
    5b50:	df 93       	push	r29
    5b52:	ec 01       	movw	r28, r24
	if( m_pCupDetector != NULL )
    5b54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b58:	00 97       	sbiw	r24, 0x00	; 0
    5b5a:	11 f0       	breq	.+4      	; 0x5b60 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x16>
	{
		m_pCupDetector->NotifyStationAdvance();
    5b5c:	0e 94 11 0b 	call	0x1622	; 0x1622 <_ZN11CupDetector20NotifyStationAdvanceEv>
//
//  Called when the station positions have advanced by one (as a result
//  of the conveyor moving by one position)
//
void UIManager::NotifyStationAdvanceComplete()
{
    5b60:	01 e0       	ldi	r16, 0x01	; 1
    5b62:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	// Update the station indicators
	for( int nStation = ST_FARRIGHT; nStation <= ST_FARLEFT; nStation++ )
	{
		Drink *pDrink = m_pController->GetDrinkByStation( nStation );
    5b64:	b8 01       	movw	r22, r16
    5b66:	8c 81       	ldd	r24, Y+4	; 0x04
    5b68:	9d 81       	ldd	r25, Y+5	; 0x05
    5b6a:	0e 94 2c 24 	call	0x4858	; 0x4858 <_ZN20TeaMachineController17GetDrinkByStationEi>
    5b6e:	fc 01       	movw	r30, r24
    5b70:	89 8d       	ldd	r24, Y+25	; 0x19
    5b72:	9a 8d       	ldd	r25, Y+26	; 0x1a
		if( pDrink != NULL )
    5b74:	30 97       	sbiw	r30, 0x00	; 0
    5b76:	99 f0       	breq	.+38     	; 0x5b9e <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x54>
    5b78:	31 81       	ldd	r19, Z+1	; 0x01
		{
			if( pDrink->GetState() != Invalid )
    5b7a:	34 30       	cpi	r19, 0x04	; 4
    5b7c:	61 f0       	breq	.+24     	; 0x5b96 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x4c>
			{
				// Valid drink is present
				m_pDisplay->Set( nStation, pDrink->GetID(), !pDrink->SelectionIsConfirmed() || (pDrink->GetState()==ReadyToDrink));
    5b7e:	27 85       	ldd	r18, Z+15	; 0x0f
    5b80:	22 23       	and	r18, r18
    5b82:	29 f0       	breq	.+10     	; 0x5b8e <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x44>
    5b84:	21 e0       	ldi	r18, 0x01	; 1
    5b86:	33 30       	cpi	r19, 0x03	; 3
    5b88:	19 f0       	breq	.+6      	; 0x5b90 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x46>
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	01 c0       	rjmp	.+2      	; 0x5b90 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x46>
    5b8e:	21 e0       	ldi	r18, 0x01	; 1
    5b90:	45 85       	ldd	r20, Z+13	; 0x0d
    5b92:	56 85       	ldd	r21, Z+14	; 0x0e
    5b94:	07 c0       	rjmp	.+14     	; 0x5ba4 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x5a>
			}
			else
			{
				// Invalid cup present
				m_pDisplay->Set( nStation, UNEXPECTED );
    5b96:	20 e0       	ldi	r18, 0x00	; 0
    5b98:	4d ef       	ldi	r20, 0xFD	; 253
    5b9a:	5f ef       	ldi	r21, 0xFF	; 255
    5b9c:	03 c0       	rjmp	.+6      	; 0x5ba4 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x5a>
			}
		}
		else
		{
			// No cup present
			m_pDisplay->Set( nStation, BLANK );				
    5b9e:	20 e0       	ldi	r18, 0x00	; 0
    5ba0:	4f ef       	ldi	r20, 0xFF	; 255
    5ba2:	5f ef       	ldi	r21, 0xFF	; 255
    5ba4:	b8 01       	movw	r22, r16
    5ba6:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <_ZN7Display3SetEiib>
		}
		m_pDisplay->Update();
    5baa:	89 8d       	ldd	r24, Y+25	; 0x19
    5bac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5bae:	0e 94 b5 12 	call	0x256a	; 0x256a <_ZN7Display6UpdateEv>
	{
		m_pCupDetector->NotifyStationAdvance();
	}
	
	// Update the station indicators
	for( int nStation = ST_FARRIGHT; nStation <= ST_FARLEFT; nStation++ )
    5bb2:	0f 5f       	subi	r16, 0xFF	; 255
    5bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    5bb6:	0a 30       	cpi	r16, 0x0A	; 10
    5bb8:	11 05       	cpc	r17, r1
    5bba:	a1 f6       	brne	.-88     	; 0x5b64 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x1a>
			m_pDisplay->Set( nStation, BLANK );				
		}
		m_pDisplay->Update();
	}
	
	if(m_pCurrentDrink != NULL )
    5bbc:	e8 a1       	ldd	r30, Y+32	; 0x20
    5bbe:	f9 a1       	ldd	r31, Y+33	; 0x21
    5bc0:	30 97       	sbiw	r30, 0x00	; 0
    5bc2:	91 f0       	breq	.+36     	; 0x5be8 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x9e>
	{
		// If current drink has advanced beyond reception stations, cancellation is not possible, so extinguish 'stop' LED
		m_pDisplay->Set( IndicatorLED_StopButton, (m_pController->GetDrinkLocation(m_pCurrentDrink->GetID()) <= ST_RECEPTION_A) && m_pCurrentDrink->SelectionIsConfirmed());
    5bc4:	65 85       	ldd	r22, Z+13	; 0x0d
    5bc6:	76 85       	ldd	r23, Z+14	; 0x0e
    5bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    5bca:	9d 81       	ldd	r25, Y+5	; 0x05
    5bcc:	0e 94 c8 24 	call	0x4990	; 0x4990 <_ZN20TeaMachineController16GetDrinkLocationEi>
    5bd0:	04 97       	sbiw	r24, 0x04	; 4
    5bd2:	24 f4       	brge	.+8      	; 0x5bdc <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x92>
    5bd4:	e8 a1       	ldd	r30, Y+32	; 0x20
    5bd6:	f9 a1       	ldd	r31, Y+33	; 0x21
    5bd8:	47 85       	ldd	r20, Z+15	; 0x0f
    5bda:	01 c0       	rjmp	.+2      	; 0x5bde <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x94>
    5bdc:	40 e0       	ldi	r20, 0x00	; 0
    5bde:	63 e0       	ldi	r22, 0x03	; 3
    5be0:	89 8d       	ldd	r24, Y+25	; 0x19
    5be2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5be4:	0e 94 30 0f 	call	0x1e60	; 0x1e60 <_ZN7Display3SetE12IndicatorLEDb>
	}
	
	// Station advance has completed, so clear flag
	m_bStationAdvanceInProgress = false;
    5be8:	1a a2       	std	Y+34, r1	; 0x22
    5bea:	df 91       	pop	r29
    5bec:	cf 91       	pop	r28
    5bee:	1f 91       	pop	r17
    5bf0:	0f 91       	pop	r16
    5bf2:	08 95       	ret

00005bf4 <_ZN9UIManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the UI manager
//
bool UIManager::Initialise()
{
    5bf4:	0f 93       	push	r16
    5bf6:	1f 93       	push	r17
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	ec 01       	movw	r28, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    5bfe:	0e 94 93 1a 	call	0x3526	; 0x3526 <_ZN18ProcessManagerBase10InitialiseEv>

    // Initialise display
	m_pDisplay = new Display(m_pTeaMachine);
    5c02:	87 e3       	ldi	r24, 0x37	; 55
    5c04:	90 e0       	ldi	r25, 0x00	; 0
    5c06:	ac d5       	rcall	.+2904   	; 0x6760 <_Znwj>
    5c08:	8c 01       	movw	r16, r24
    5c0a:	6a 81       	ldd	r22, Y+2	; 0x02
    5c0c:	7b 81       	ldd	r23, Y+3	; 0x03
    5c0e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN7DisplayC1EP10TeaMachine>
    5c12:	1a 8f       	std	Y+26, r17	; 0x1a
    5c14:	09 8f       	std	Y+25, r16	; 0x19
	m_pDisplay->Initialise();
    5c16:	c8 01       	movw	r24, r16
    5c18:	0e 94 c1 12 	call	0x2582	; 0x2582 <_ZN7Display10InitialiseEv>

    // Initialise cup detector
    m_pCupDetector = new CupDetector(m_pTeaMachine);
    5c1c:	8a e1       	ldi	r24, 0x1A	; 26
    5c1e:	90 e0       	ldi	r25, 0x00	; 0
    5c20:	9f d5       	rcall	.+2878   	; 0x6760 <_Znwj>
    5c22:	8c 01       	movw	r16, r24
    5c24:	6a 81       	ldd	r22, Y+2	; 0x02
    5c26:	7b 81       	ldd	r23, Y+3	; 0x03
    5c28:	0e 94 91 0a 	call	0x1522	; 0x1522 <_ZN11CupDetectorC1EP10TeaMachine>
    5c2c:	1c 8f       	std	Y+28, r17	; 0x1c
    5c2e:	0b 8f       	std	Y+27, r16	; 0x1b
    m_pCupDetector->Initialise();
    5c30:	c8 01       	movw	r24, r16
    5c32:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN11CupDetector10InitialiseEv>
 
    // Initialise user controls
    m_pUserControls = new UserControls(m_pTeaMachine);
    5c36:	8d e2       	ldi	r24, 0x2D	; 45
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	92 d5       	rcall	.+2852   	; 0x6760 <_Znwj>
    5c3c:	8c 01       	movw	r16, r24
    5c3e:	6a 81       	ldd	r22, Y+2	; 0x02
    5c40:	7b 81       	ldd	r23, Y+3	; 0x03
    5c42:	14 d0       	rcall	.+40     	; 0x5c6c <_ZN12UserControlsC1EP10TeaMachine>
    5c44:	1e 8f       	std	Y+30, r17	; 0x1e
    m_pUserControls->Initialise();
    5c46:	0d 8f       	std	Y+29, r16	; 0x1d
    5c48:	c8 01       	movw	r24, r16
    5c4a:	1d d0       	rcall	.+58     	; 0x5c86 <_ZN12UserControls10InitialiseEv>
    
    return true;
}
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	df 91       	pop	r29
    5c50:	cf 91       	pop	r28
    5c52:	1f 91       	pop	r17
    5c54:	0f 91       	pop	r16
    5c56:	08 95       	ret

00005c58 <_ZN12UserControls12ClearMembersEv>:
//
//	Class constructor
//
UserControls::UserControls()
{
    ClearMembers();
    5c58:	fc 01       	movw	r30, r24
    5c5a:	36 96       	adiw	r30, 0x06	; 6
    5c5c:	42 96       	adiw	r24, 0x12	; 18
    5c5e:	11 92       	st	Z+, r1
    5c60:	14 86       	std	Z+12, r1	; 0x0c
    5c62:	11 8e       	std	Z+25, r1	; 0x19
    5c64:	e8 17       	cp	r30, r24
    5c66:	f9 07       	cpc	r31, r25
    5c68:	d1 f7       	brne	.-12     	; 0x5c5e <_ZN12UserControls12ClearMembersEv+0x6>
    5c6a:	08 95       	ret

00005c6c <_ZN12UserControlsC1EP10TeaMachine>:
} //UserControls

//
//	Class constructor
//
UserControls::UserControls(TeaMachine *pTeaMachine) : TeaMachineComponent( pTeaMachine )
    5c6c:	cf 93       	push	r28
    5c6e:	df 93       	push	r29
    5c70:	ec 01       	movw	r28, r24
    5c72:	0e 94 d6 22 	call	0x45ac	; 0x45ac <_ZN19TeaMachineComponentC1EP10TeaMachine>
    5c76:	85 e2       	ldi	r24, 0x25	; 37
    5c78:	9a e0       	ldi	r25, 0x0A	; 10
    5c7a:	99 83       	std	Y+1, r25	; 0x01
    5c7c:	88 83       	st	Y, r24
{
    ClearMembers();
    5c7e:	ce 01       	movw	r24, r28
} //UserControls
    5c80:	df 91       	pop	r29
    5c82:	cf 91       	pop	r28
//
//	Class constructor
//
UserControls::UserControls(TeaMachine *pTeaMachine) : TeaMachineComponent( pTeaMachine )
{
    ClearMembers();
    5c84:	e9 cf       	rjmp	.-46     	; 0x5c58 <_ZN12UserControls12ClearMembersEv>

00005c86 <_ZN12UserControls10InitialiseEv>:
//
//  Initialise the user controls class
//
bool UserControls::Initialise()
{
    ClearMembers();
    5c86:	e8 cf       	rjmp	.-48     	; 0x5c58 <_ZN12UserControls12ClearMembersEv>
}
    5c88:	08 95       	ret

00005c8a <_ZN12UserControls19RecordSettledStatesEv>:
//  RecordSettledStates
//
//  Store the current settled states as the previous settled states
//
void UserControls::RecordSettledStates( )
{
    5c8a:	fc 01       	movw	r30, r24
    5c8c:	73 96       	adiw	r30, 0x13	; 19
    5c8e:	4f 96       	adiw	r24, 0x1f	; 31
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    {
        m_bPreviousSettledControlStates[ nControlID ] = m_bSettledControlStates[ nControlID ];
    5c90:	21 91       	ld	r18, Z+
    5c92:	24 87       	std	Z+12, r18	; 0x0c
//
//  Store the current settled states as the previous settled states
//
void UserControls::RecordSettledStates( )
{
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    5c94:	e8 17       	cp	r30, r24
    5c96:	f9 07       	cpc	r31, r25
    5c98:	d9 f7       	brne	.-10     	; 0x5c90 <_ZN12UserControls19RecordSettledStatesEv+0x6>
    {
        m_bPreviousSettledControlStates[ nControlID ] = m_bSettledControlStates[ nControlID ];
    } // for
}
    5c9a:	08 95       	ret

00005c9c <_ZN12UserControls17CheckSettledEventEi>:
//  Determine the changes between two sets of settled user control states
//
UserControlEvent UserControls::CheckSettledEvent( int nControlID )
{
    UserControlEvent controlEvent = UserControlNoChange;
    if( m_bSettledControlStates[nControlID] != m_bPreviousSettledControlStates[nControlID] )
    5c9c:	fc 01       	movw	r30, r24
    5c9e:	e6 0f       	add	r30, r22
    5ca0:	f7 1f       	adc	r31, r23
    5ca2:	83 89       	ldd	r24, Z+19	; 0x13
    5ca4:	90 a1       	ldd	r25, Z+32	; 0x20
    5ca6:	89 17       	cp	r24, r25
    5ca8:	21 f0       	breq	.+8      	; 0x5cb2 <_ZN12UserControls17CheckSettledEventEi+0x16>
    {
        controlEvent = m_bSettledControlStates[nControlID] ? UserControlSwitchedOff : UserControlSwitchedOn;
    5caa:	81 11       	cpse	r24, r1
    5cac:	04 c0       	rjmp	.+8      	; 0x5cb6 <_ZN12UserControls17CheckSettledEventEi+0x1a>
    5cae:	81 e0       	ldi	r24, 0x01	; 1
    5cb0:	08 95       	ret
//
//  Determine the changes between two sets of settled user control states
//
UserControlEvent UserControls::CheckSettledEvent( int nControlID )
{
    UserControlEvent controlEvent = UserControlNoChange;
    5cb2:	80 e0       	ldi	r24, 0x00	; 0
    5cb4:	08 95       	ret
    if( m_bSettledControlStates[nControlID] != m_bPreviousSettledControlStates[nControlID] )
    {
        controlEvent = m_bSettledControlStates[nControlID] ? UserControlSwitchedOff : UserControlSwitchedOn;
    5cb6:	82 e0       	ldi	r24, 0x02	; 2
    }
    
    return controlEvent;
}
    5cb8:	08 95       	ret

00005cba <_ZN12UserControls21GetControlStateDirectEi>:
//  GetControlStateDirect
//  
//  Read the state of a given control directly from the input register
//
bool UserControls::GetControlStateDirect( int nControlID )
{
    5cba:	0f 93       	push	r16
    5cbc:	1f 93       	push	r17
    5cbe:	cf 93       	push	r28
    5cc0:	df 93       	push	r29
    5cc2:	1f 92       	push	r1
    5cc4:	1f 92       	push	r1
    5cc6:	cd b7       	in	r28, 0x3d	; 61
    5cc8:	de b7       	in	r29, 0x3e	; 62
    5cca:	8b 01       	movw	r16, r22
    bool bState = false;
    
    // Read the input register
    byte userControlsLower = 0;
    5ccc:	1a 82       	std	Y+2, r1	; 0x02
    byte userControlsUpper = 0;
    5cce:	19 82       	std	Y+1, r1	; 0x01
    m_pSystem->ReadInputRegisterData( &userControlsLower, &userControlsUpper );
    5cd0:	ae 01       	movw	r20, r28
    5cd2:	4f 5f       	subi	r20, 0xFF	; 255
    5cd4:	5f 4f       	sbci	r21, 0xFF	; 255
    5cd6:	be 01       	movw	r22, r28
    5cd8:	6e 5f       	subi	r22, 0xFE	; 254
    5cda:	7f 4f       	sbci	r23, 0xFF	; 255
    5cdc:	fc 01       	movw	r30, r24
    5cde:	84 81       	ldd	r24, Z+4	; 0x04
    5ce0:	95 81       	ldd	r25, Z+5	; 0x05
    5ce2:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN6System21ReadInputRegisterDataEPhS0_>

    switch( nControlID )
    5ce6:	0c 30       	cpi	r16, 0x0C	; 12
    5ce8:	11 05       	cpc	r17, r1
    5cea:	98 f5       	brcc	.+102    	; 0x5d52 <_ZN12UserControls21GetControlStateDirectEi+0x98>
    5cec:	f8 01       	movw	r30, r16
    5cee:	88 27       	eor	r24, r24
    5cf0:	ec 54       	subi	r30, 0x4C	; 76
    5cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cf4:	8f 4f       	sbci	r24, 0xFF	; 255
    5cf6:	0c 94 93 3a 	jmp	0x7526	; 0x7526 <__tablejump2__>
    {
        case UC_CUP_INC:
        bState = (userControlsLower & 0x01);
    5cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    5cfc:	1a c0       	rjmp	.+52     	; 0x5d32 <_ZN12UserControls21GetControlStateDirectEi+0x78>
        break;
        
        case UC_CUP_DEC:
        bState = (userControlsLower & 0x02);
    5cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    5d00:	1b c0       	rjmp	.+54     	; 0x5d38 <_ZN12UserControls21GetControlStateDirectEi+0x7e>
        break;
        
        case UC_MILK_INC:
        bState = (userControlsLower & 0x04);
    5d02:	8a 81       	ldd	r24, Y+2	; 0x02
    5d04:	1d c0       	rjmp	.+58     	; 0x5d40 <_ZN12UserControls21GetControlStateDirectEi+0x86>
        break;
        
        case UC_MILK_DEC:
        bState = (userControlsLower & 0x08);
    5d06:	8a 81       	ldd	r24, Y+2	; 0x02
    5d08:	20 c0       	rjmp	.+64     	; 0x5d4a <_ZN12UserControls21GetControlStateDirectEi+0x90>
        break;
        
        case UC_SUGAR_INC:
        bState = (userControlsLower & 0x10);
    5d0a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d0c:	82 95       	swap	r24
    5d0e:	81 70       	andi	r24, 0x01	; 1
        break;
    5d10:	21 c0       	rjmp	.+66     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_SUGAR_DEC:
        bState = (userControlsLower & 0x20);
    5d12:	8a 81       	ldd	r24, Y+2	; 0x02
    5d14:	85 fb       	bst	r24, 5
    5d16:	88 27       	eor	r24, r24
    5d18:	80 f9       	bld	r24, 0
        break;
    5d1a:	1c c0       	rjmp	.+56     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_STRENGTH_INC:
        bState = (userControlsLower & 0x40);
    5d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d1e:	86 fb       	bst	r24, 6
    5d20:	88 27       	eor	r24, r24
    5d22:	80 f9       	bld	r24, 0
        break;
    5d24:	17 c0       	rjmp	.+46     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_STRENGTH_DEC:
        bState = (userControlsLower & 0x80);
    5d26:	8a 81       	ldd	r24, Y+2	; 0x02
    5d28:	88 1f       	adc	r24, r24
    5d2a:	88 27       	eor	r24, r24
    5d2c:	88 1f       	adc	r24, r24
        break;
    5d2e:	12 c0       	rjmp	.+36     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_DRINK_INC:
        bState = (userControlsUpper & 0x01);
    5d30:	89 81       	ldd	r24, Y+1	; 0x01
    5d32:	81 70       	andi	r24, 0x01	; 1
        break;
    5d34:	0f c0       	rjmp	.+30     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_DRINK_DEC:
        bState = (userControlsUpper & 0x02);
    5d36:	89 81       	ldd	r24, Y+1	; 0x01
    5d38:	86 95       	lsr	r24
    5d3a:	81 70       	andi	r24, 0x01	; 1
        break;
    5d3c:	0b c0       	rjmp	.+22     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_GO:
        bState = (userControlsUpper & 0x04);
    5d3e:	89 81       	ldd	r24, Y+1	; 0x01
    5d40:	82 fb       	bst	r24, 2
    5d42:	88 27       	eor	r24, r24
    5d44:	80 f9       	bld	r24, 0
        break;
    5d46:	06 c0       	rjmp	.+12     	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_CANCEL:
        bState = (userControlsUpper & 0x08);
    5d48:	89 81       	ldd	r24, Y+1	; 0x01
    5d4a:	83 fb       	bst	r24, 3
    5d4c:	88 27       	eor	r24, r24
    5d4e:	80 f9       	bld	r24, 0
        break;        
    5d50:	01 c0       	rjmp	.+2      	; 0x5d54 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
//  
//  Read the state of a given control directly from the input register
//
bool UserControls::GetControlStateDirect( int nControlID )
{
    bool bState = false;
    5d52:	80 e0       	ldi	r24, 0x00	; 0
        bState = (userControlsUpper & 0x08);
        break;        
    } // switch  
    
    return bState;      
}    
    5d54:	0f 90       	pop	r0
    5d56:	0f 90       	pop	r0
    5d58:	df 91       	pop	r29
    5d5a:	cf 91       	pop	r28
    5d5c:	1f 91       	pop	r17
    5d5e:	0f 91       	pop	r16
    5d60:	08 95       	ret

00005d62 <_ZN12UserControls10ReadStatesEv>:
//  ReadStates
//
//  Read the current states of the user controls
//
void UserControls::ReadStates( )
{
    5d62:	ef 92       	push	r14
    5d64:	ff 92       	push	r15
    5d66:	0f 93       	push	r16
    5d68:	1f 93       	push	r17
    5d6a:	cf 93       	push	r28
    5d6c:	df 93       	push	r29
    5d6e:	7c 01       	movw	r14, r24
    5d70:	8c 01       	movw	r16, r24
    5d72:	0a 5f       	subi	r16, 0xFA	; 250
    5d74:	1f 4f       	sbci	r17, 0xFF	; 255
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    5d76:	c0 e0       	ldi	r28, 0x00	; 0
    5d78:	d0 e0       	ldi	r29, 0x00	; 0
    {
        m_bControlStates[nControlID] = GetControlStateDirect( nControlID );
    5d7a:	be 01       	movw	r22, r28
    5d7c:	c7 01       	movw	r24, r14
    5d7e:	9d df       	rcall	.-198    	; 0x5cba <_ZN12UserControls21GetControlStateDirectEi>
    5d80:	f8 01       	movw	r30, r16
    5d82:	81 93       	st	Z+, r24
    5d84:	8f 01       	movw	r16, r30
//
//  Read the current states of the user controls
//
void UserControls::ReadStates( )
{
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    5d86:	21 96       	adiw	r28, 0x01	; 1
    5d88:	cc 30       	cpi	r28, 0x0C	; 12
    5d8a:	d1 05       	cpc	r29, r1
    5d8c:	b1 f7       	brne	.-20     	; 0x5d7a <_ZN12UserControls10ReadStatesEv+0x18>
    {
        m_bControlStates[nControlID] = GetControlStateDirect( nControlID );
    } // for
}
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	1f 91       	pop	r17
    5d94:	0f 91       	pop	r16
    5d96:	ff 90       	pop	r15
    5d98:	ef 90       	pop	r14
    5d9a:	08 95       	ret

00005d9c <_ZN12UserControls17ReadSettledStatesEv>:
//  ReadSettledStates
//
//  Read the current states of the user controls and compare them with previously read states to see if they have settled
//
bool UserControls::ReadSettledStates( )
{
    5d9c:	cf 92       	push	r12
    5d9e:	df 92       	push	r13
    5da0:	ff 92       	push	r15
    5da2:	0f 93       	push	r16
    5da4:	1f 93       	push	r17
    5da6:	cf 93       	push	r28
    5da8:	df 93       	push	r29
    5daa:	6c 01       	movw	r12, r24
    5dac:	8c 01       	movw	r16, r24
    5dae:	0a 5f       	subi	r16, 0xFA	; 250
    5db0:	1f 4f       	sbci	r17, 0xFF	; 255
    bool bSettled = true;
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    5db2:	c0 e0       	ldi	r28, 0x00	; 0
    5db4:	d0 e0       	ldi	r29, 0x00	; 0
//
//  Read the current states of the user controls and compare them with previously read states to see if they have settled
//
bool UserControls::ReadSettledStates( )
{
    bool bSettled = true;
    5db6:	ff 24       	eor	r15, r15
    5db8:	f3 94       	inc	r15
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    {
        m_bSettledControlStates[nControlID] = GetControlStateDirect( nControlID );
    5dba:	be 01       	movw	r22, r28
    5dbc:	c6 01       	movw	r24, r12
    5dbe:	7d df       	rcall	.-262    	; 0x5cba <_ZN12UserControls21GetControlStateDirectEi>
    5dc0:	f8 01       	movw	r30, r16
    5dc2:	85 87       	std	Z+13, r24	; 0x0d
        if(m_bSettledControlStates[nControlID] != m_bControlStates[nControlID] )
    5dc4:	90 81       	ld	r25, Z
    5dc6:	0f 5f       	subi	r16, 0xFF	; 255
    5dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    5dca:	89 13       	cpse	r24, r25
        {
            // Controls have not settled
            bSettled = false;
    5dcc:	f1 2c       	mov	r15, r1
//  Read the current states of the user controls and compare them with previously read states to see if they have settled
//
bool UserControls::ReadSettledStates( )
{
    bool bSettled = true;
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    5dce:	21 96       	adiw	r28, 0x01	; 1
    5dd0:	cc 30       	cpi	r28, 0x0C	; 12
    5dd2:	d1 05       	cpc	r29, r1
    5dd4:	91 f7       	brne	.-28     	; 0x5dba <_ZN12UserControls17ReadSettledStatesEv+0x1e>
            bSettled = false;
        }
    } // for
    
    return bSettled;
}
    5dd6:	8f 2d       	mov	r24, r15
    5dd8:	df 91       	pop	r29
    5dda:	cf 91       	pop	r28
    5ddc:	1f 91       	pop	r17
    5dde:	0f 91       	pop	r16
    5de0:	ff 90       	pop	r15
    5de2:	df 90       	pop	r13
    5de4:	cf 90       	pop	r12
    5de6:	08 95       	ret

00005de8 <_ZN12UserControls4TestEv>:
//  Test()
//
//  Test the user controls
//
bool UserControls::Test()
{
    5de8:	ec 01       	movw	r28, r24
    // Read/debounce initial states
    ReadStates();
    5dea:	bb df       	rcall	.-138    	; 0x5d62 <_ZN12UserControls10ReadStatesEv>
    delay(UC_DEBOUNCE_DELAY);
    5dec:	62 e3       	ldi	r22, 0x32	; 50
    5dee:	70 e0       	ldi	r23, 0x00	; 0
    5df0:	80 e0       	ldi	r24, 0x00	; 0
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	2c d7       	rcall	.+3672   	; 0x6c4e <delay>
    ReadSettledStates();
    5df6:	ce 01       	movw	r24, r28
    5df8:	d1 df       	rcall	.-94     	; 0x5d9c <_ZN12UserControls17ReadSettledStatesEv>
    RecordSettledStates();
    5dfa:	ce 01       	movw	r24, r28
    5dfc:	46 df       	rcall	.-372    	; 0x5c8a <_ZN12UserControls19RecordSettledStatesEv>
    5dfe:	64 e1       	ldi	r22, 0x14	; 20
    
    while( true )
    {
        delay(20);
    5e00:	70 e0       	ldi	r23, 0x00	; 0
    5e02:	80 e0       	ldi	r24, 0x00	; 0
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	23 d7       	rcall	.+3654   	; 0x6c4e <delay>
        ReadStates();
    5e08:	ce 01       	movw	r24, r28
    5e0a:	ab df       	rcall	.-170    	; 0x5d62 <_ZN12UserControls10ReadStatesEv>
        delay(UC_DEBOUNCE_DELAY);
    5e0c:	62 e3       	ldi	r22, 0x32	; 50
    5e0e:	70 e0       	ldi	r23, 0x00	; 0
    5e10:	80 e0       	ldi	r24, 0x00	; 0
    5e12:	90 e0       	ldi	r25, 0x00	; 0
        ReadSettledStates();
    5e14:	1c d7       	rcall	.+3640   	; 0x6c4e <delay>
    5e16:	ce 01       	movw	r24, r28
    5e18:	c1 df       	rcall	.-126    	; 0x5d9c <_ZN12UserControls17ReadSettledStatesEv>
        
        if( CheckSettledEvent( UC_CUP_INC ) == UserControlSwitchedOn )
    5e1a:	60 e0       	ldi	r22, 0x00	; 0
    5e1c:	70 e0       	ldi	r23, 0x00	; 0
    5e1e:	ce 01       	movw	r24, r28
    5e20:	3d df       	rcall	.-390    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5e22:	81 30       	cpi	r24, 0x01	; 1
    5e24:	29 f4       	brne	.+10     	; 0x5e30 <_ZN12UserControls4TestEv+0x48>
        {
            // User has toggled Cup increment control
            Serial.println( "Cup UP on" );
    5e26:	61 ef       	ldi	r22, 0xF1	; 241
    5e28:	78 e0       	ldi	r23, 0x08	; 8
    5e2a:	85 e5       	ldi	r24, 0x55	; 85
    5e2c:	9a e0       	ldi	r25, 0x0A	; 10
    5e2e:	02 d5       	rcall	.+2564   	; 0x6834 <_ZN5Print7printlnEPKc>
    5e30:	61 e0       	ldi	r22, 0x01	; 1
        }

        if( CheckSettledEvent( UC_CUP_DEC ) == UserControlSwitchedOn )
    5e32:	70 e0       	ldi	r23, 0x00	; 0
    5e34:	ce 01       	movw	r24, r28
    5e36:	32 df       	rcall	.-412    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5e38:	81 30       	cpi	r24, 0x01	; 1
    5e3a:	29 f4       	brne	.+10     	; 0x5e46 <_ZN12UserControls4TestEv+0x5e>
        {
            // User has toggled Cup decrement control
            Serial.println( "Cup DOWN on" );
    5e3c:	6b ef       	ldi	r22, 0xFB	; 251
    5e3e:	78 e0       	ldi	r23, 0x08	; 8
    5e40:	85 e5       	ldi	r24, 0x55	; 85
    5e42:	9a e0       	ldi	r25, 0x0A	; 10
    5e44:	f7 d4       	rcall	.+2542   	; 0x6834 <_ZN5Print7printlnEPKc>
        }

        if( CheckSettledEvent( UC_DRINK_INC ) == UserControlSwitchedOn )
    5e46:	62 e0       	ldi	r22, 0x02	; 2
    5e48:	70 e0       	ldi	r23, 0x00	; 0
    5e4a:	ce 01       	movw	r24, r28
    5e4c:	27 df       	rcall	.-434    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5e4e:	81 30       	cpi	r24, 0x01	; 1
    5e50:	29 f4       	brne	.+10     	; 0x5e5c <_ZN12UserControls4TestEv+0x74>
        {
            // User has toggled 'Next drink type' control
            Serial.println( "Drink UP on" );
    5e52:	67 e0       	ldi	r22, 0x07	; 7
    5e54:	79 e0       	ldi	r23, 0x09	; 9
    5e56:	85 e5       	ldi	r24, 0x55	; 85
    5e58:	9a e0       	ldi	r25, 0x0A	; 10
    5e5a:	ec d4       	rcall	.+2520   	; 0x6834 <_ZN5Print7printlnEPKc>
        }

        if( CheckSettledEvent( UC_DRINK_DEC ) == UserControlSwitchedOn )
    5e5c:	63 e0       	ldi	r22, 0x03	; 3
    5e5e:	70 e0       	ldi	r23, 0x00	; 0
    5e60:	ce 01       	movw	r24, r28
    5e62:	1c df       	rcall	.-456    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5e64:	81 30       	cpi	r24, 0x01	; 1
    5e66:	29 f4       	brne	.+10     	; 0x5e72 <_ZN12UserControls4TestEv+0x8a>
        {
            // User has toggled 'Previous drink type' control
            Serial.println( "Drink DOWN on" );
    5e68:	63 e1       	ldi	r22, 0x13	; 19
    5e6a:	79 e0       	ldi	r23, 0x09	; 9
    5e6c:	85 e5       	ldi	r24, 0x55	; 85
    5e6e:	9a e0       	ldi	r25, 0x0A	; 10
        }
        
        if( CheckSettledEvent( UC_MILK_INC ) == UserControlSwitchedOn )
    5e70:	e1 d4       	rcall	.+2498   	; 0x6834 <_ZN5Print7printlnEPKc>
    5e72:	64 e0       	ldi	r22, 0x04	; 4
    5e74:	70 e0       	ldi	r23, 0x00	; 0
    5e76:	ce 01       	movw	r24, r28
    5e78:	11 df       	rcall	.-478    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5e7a:	81 30       	cpi	r24, 0x01	; 1
        {
            // User has toggled 'Increment milk' control
            Serial.println( "Milk UP on" );
    5e7c:	29 f4       	brne	.+10     	; 0x5e88 <_ZN12UserControls4TestEv+0xa0>
    5e7e:	61 e2       	ldi	r22, 0x21	; 33
    5e80:	79 e0       	ldi	r23, 0x09	; 9
    5e82:	85 e5       	ldi	r24, 0x55	; 85
    5e84:	9a e0       	ldi	r25, 0x0A	; 10
        }
        
        if( CheckSettledEvent( UC_MILK_DEC ) == UserControlSwitchedOn )
    5e86:	d6 d4       	rcall	.+2476   	; 0x6834 <_ZN5Print7printlnEPKc>
    5e88:	65 e0       	ldi	r22, 0x05	; 5
    5e8a:	70 e0       	ldi	r23, 0x00	; 0
    5e8c:	ce 01       	movw	r24, r28
    5e8e:	06 df       	rcall	.-500    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5e90:	81 30       	cpi	r24, 0x01	; 1
        {
            // User has toggled 'Decrement milk' control
            Serial.println( "Milk DOWN on" );
    5e92:	29 f4       	brne	.+10     	; 0x5e9e <_ZN12UserControls4TestEv+0xb6>
    5e94:	6c e2       	ldi	r22, 0x2C	; 44
    5e96:	79 e0       	ldi	r23, 0x09	; 9
    5e98:	85 e5       	ldi	r24, 0x55	; 85
    5e9a:	9a e0       	ldi	r25, 0x0A	; 10
        }
        
        if( CheckSettledEvent( UC_SUGAR_INC ) == UserControlSwitchedOn )
    5e9c:	cb d4       	rcall	.+2454   	; 0x6834 <_ZN5Print7printlnEPKc>
    5e9e:	66 e0       	ldi	r22, 0x06	; 6
    5ea0:	70 e0       	ldi	r23, 0x00	; 0
    5ea2:	ce 01       	movw	r24, r28
    5ea4:	fb de       	rcall	.-522    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Increment sugar' control
            Serial.println( "Sugar UP on" );
    5ea6:	81 30       	cpi	r24, 0x01	; 1
    5ea8:	29 f4       	brne	.+10     	; 0x5eb4 <_ZN12UserControls4TestEv+0xcc>
    5eaa:	69 e3       	ldi	r22, 0x39	; 57
    5eac:	79 e0       	ldi	r23, 0x09	; 9
    5eae:	85 e5       	ldi	r24, 0x55	; 85
        }
        
        if( CheckSettledEvent( UC_SUGAR_DEC ) == UserControlSwitchedOn )
    5eb0:	9a e0       	ldi	r25, 0x0A	; 10
    5eb2:	c0 d4       	rcall	.+2432   	; 0x6834 <_ZN5Print7printlnEPKc>
    5eb4:	67 e0       	ldi	r22, 0x07	; 7
    5eb6:	70 e0       	ldi	r23, 0x00	; 0
    5eb8:	ce 01       	movw	r24, r28
    5eba:	f0 de       	rcall	.-544    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Decrement sugar' control
            Serial.println( "Sugar DOWN on" );
    5ebc:	81 30       	cpi	r24, 0x01	; 1
    5ebe:	29 f4       	brne	.+10     	; 0x5eca <_ZN12UserControls4TestEv+0xe2>
    5ec0:	65 e4       	ldi	r22, 0x45	; 69
    5ec2:	79 e0       	ldi	r23, 0x09	; 9
    5ec4:	85 e5       	ldi	r24, 0x55	; 85
        }
        
        if( CheckSettledEvent( UC_STRENGTH_INC ) == UserControlSwitchedOn )
    5ec6:	9a e0       	ldi	r25, 0x0A	; 10
    5ec8:	b5 d4       	rcall	.+2410   	; 0x6834 <_ZN5Print7printlnEPKc>
    5eca:	68 e0       	ldi	r22, 0x08	; 8
    5ecc:	70 e0       	ldi	r23, 0x00	; 0
    5ece:	ce 01       	movw	r24, r28
    5ed0:	e5 de       	rcall	.-566    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Increment strength' control
            Serial.println( "Strength UP on" );
    5ed2:	81 30       	cpi	r24, 0x01	; 1
    5ed4:	29 f4       	brne	.+10     	; 0x5ee0 <_ZN12UserControls4TestEv+0xf8>
    5ed6:	63 e5       	ldi	r22, 0x53	; 83
    5ed8:	79 e0       	ldi	r23, 0x09	; 9
    5eda:	85 e5       	ldi	r24, 0x55	; 85
        }
        
        if( CheckSettledEvent( UC_STRENGTH_DEC ) == UserControlSwitchedOn )
    5edc:	9a e0       	ldi	r25, 0x0A	; 10
    5ede:	aa d4       	rcall	.+2388   	; 0x6834 <_ZN5Print7printlnEPKc>
    5ee0:	69 e0       	ldi	r22, 0x09	; 9
    5ee2:	70 e0       	ldi	r23, 0x00	; 0
    5ee4:	ce 01       	movw	r24, r28
    5ee6:	da de       	rcall	.-588    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Decrement strength' control
            Serial.println( "Strength DOWN on" );
    5ee8:	81 30       	cpi	r24, 0x01	; 1
    5eea:	29 f4       	brne	.+10     	; 0x5ef6 <_ZN12UserControls4TestEv+0x10e>
    5eec:	62 e6       	ldi	r22, 0x62	; 98
    5eee:	79 e0       	ldi	r23, 0x09	; 9
    5ef0:	85 e5       	ldi	r24, 0x55	; 85
        }
        
        if( CheckSettledEvent( UC_GO ) == UserControlSwitchedOn )
    5ef2:	9a e0       	ldi	r25, 0x0A	; 10
    5ef4:	9f d4       	rcall	.+2366   	; 0x6834 <_ZN5Print7printlnEPKc>
    5ef6:	6a e0       	ldi	r22, 0x0A	; 10
    5ef8:	70 e0       	ldi	r23, 0x00	; 0
    5efa:	ce 01       	movw	r24, r28
    5efc:	cf de       	rcall	.-610    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has pressed GO button
            Serial.println( "GO on" );
    5efe:	81 30       	cpi	r24, 0x01	; 1
    5f00:	29 f4       	brne	.+10     	; 0x5f0c <_ZN12UserControls4TestEv+0x124>
    5f02:	63 e7       	ldi	r22, 0x73	; 115
    5f04:	79 e0       	ldi	r23, 0x09	; 9
    5f06:	85 e5       	ldi	r24, 0x55	; 85
        }
        
        if( CheckSettledEvent( UC_CANCEL ) == UserControlSwitchedOn )
    5f08:	9a e0       	ldi	r25, 0x0A	; 10
    5f0a:	94 d4       	rcall	.+2344   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f0c:	6b e0       	ldi	r22, 0x0B	; 11
    5f0e:	70 e0       	ldi	r23, 0x00	; 0
    5f10:	ce 01       	movw	r24, r28
    5f12:	c4 de       	rcall	.-632    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has pressed CANCEL button
            Serial.println( "CANCEL on" );
    5f14:	81 30       	cpi	r24, 0x01	; 1
    5f16:	29 f4       	brne	.+10     	; 0x5f22 <_ZN12UserControls4TestEv+0x13a>
    5f18:	69 e7       	ldi	r22, 0x79	; 121
    5f1a:	79 e0       	ldi	r23, 0x09	; 9
    5f1c:	85 e5       	ldi	r24, 0x55	; 85
    5f1e:	9a e0       	ldi	r25, 0x0A	; 10
        }        
    
        if( CheckSettledEvent( UC_CUP_INC ) == UserControlSwitchedOff )
    5f20:	89 d4       	rcall	.+2322   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f22:	60 e0       	ldi	r22, 0x00	; 0
    5f24:	70 e0       	ldi	r23, 0x00	; 0
    5f26:	ce 01       	movw	r24, r28
    5f28:	b9 de       	rcall	.-654    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled Cup increment control
            Serial.println( "Cup UP off" );
    5f2a:	82 30       	cpi	r24, 0x02	; 2
    5f2c:	29 f4       	brne	.+10     	; 0x5f38 <_ZN12UserControls4TestEv+0x150>
    5f2e:	63 e8       	ldi	r22, 0x83	; 131
    5f30:	79 e0       	ldi	r23, 0x09	; 9
    5f32:	85 e5       	ldi	r24, 0x55	; 85
        }

        if( CheckSettledEvent( UC_CUP_DEC ) == UserControlSwitchedOff )
    5f34:	9a e0       	ldi	r25, 0x0A	; 10
    5f36:	7e d4       	rcall	.+2300   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f38:	61 e0       	ldi	r22, 0x01	; 1
    5f3a:	70 e0       	ldi	r23, 0x00	; 0
    5f3c:	ce 01       	movw	r24, r28
    5f3e:	ae de       	rcall	.-676    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled Cup decrement control
            Serial.println( "Cup DOWN off" );
    5f40:	82 30       	cpi	r24, 0x02	; 2
    5f42:	29 f4       	brne	.+10     	; 0x5f4e <_ZN12UserControls4TestEv+0x166>
    5f44:	6e e8       	ldi	r22, 0x8E	; 142
    5f46:	79 e0       	ldi	r23, 0x09	; 9
    5f48:	85 e5       	ldi	r24, 0x55	; 85
        }

        if( CheckSettledEvent( UC_DRINK_INC ) == UserControlSwitchedOff )
    5f4a:	9a e0       	ldi	r25, 0x0A	; 10
    5f4c:	73 d4       	rcall	.+2278   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f4e:	62 e0       	ldi	r22, 0x02	; 2
    5f50:	70 e0       	ldi	r23, 0x00	; 0
    5f52:	ce 01       	movw	r24, r28
    5f54:	a3 de       	rcall	.-698    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Next drink type' control
            Serial.println( "Drink UP off" );
    5f56:	82 30       	cpi	r24, 0x02	; 2
    5f58:	29 f4       	brne	.+10     	; 0x5f64 <_ZN12UserControls4TestEv+0x17c>
    5f5a:	6b e9       	ldi	r22, 0x9B	; 155
    5f5c:	79 e0       	ldi	r23, 0x09	; 9
        }

        if( CheckSettledEvent( UC_DRINK_DEC ) == UserControlSwitchedOff )
    5f5e:	85 e5       	ldi	r24, 0x55	; 85
    5f60:	9a e0       	ldi	r25, 0x0A	; 10
    5f62:	68 d4       	rcall	.+2256   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f64:	63 e0       	ldi	r22, 0x03	; 3
    5f66:	70 e0       	ldi	r23, 0x00	; 0
    5f68:	ce 01       	movw	r24, r28
        {
            // User has toggled 'Previous drink type' control
            Serial.println( "Drink DOWN off" );
    5f6a:	98 de       	rcall	.-720    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5f6c:	82 30       	cpi	r24, 0x02	; 2
    5f6e:	29 f4       	brne	.+10     	; 0x5f7a <_ZN12UserControls4TestEv+0x192>
    5f70:	68 ea       	ldi	r22, 0xA8	; 168
    5f72:	79 e0       	ldi	r23, 0x09	; 9
        }
    
        if( CheckSettledEvent( UC_MILK_INC ) == UserControlSwitchedOff )
    5f74:	85 e5       	ldi	r24, 0x55	; 85
    5f76:	9a e0       	ldi	r25, 0x0A	; 10
    5f78:	5d d4       	rcall	.+2234   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f7a:	64 e0       	ldi	r22, 0x04	; 4
    5f7c:	70 e0       	ldi	r23, 0x00	; 0
    5f7e:	ce 01       	movw	r24, r28
        {
            // User has toggled 'Increment milk' control
            Serial.println( "Milk UP off" );
    5f80:	8d de       	rcall	.-742    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5f82:	82 30       	cpi	r24, 0x02	; 2
    5f84:	29 f4       	brne	.+10     	; 0x5f90 <_ZN12UserControls4TestEv+0x1a8>
    5f86:	67 eb       	ldi	r22, 0xB7	; 183
    5f88:	79 e0       	ldi	r23, 0x09	; 9
        }
    
        if( CheckSettledEvent( UC_MILK_DEC ) == UserControlSwitchedOff )
    5f8a:	85 e5       	ldi	r24, 0x55	; 85
    5f8c:	9a e0       	ldi	r25, 0x0A	; 10
    5f8e:	52 d4       	rcall	.+2212   	; 0x6834 <_ZN5Print7printlnEPKc>
    5f90:	65 e0       	ldi	r22, 0x05	; 5
    5f92:	70 e0       	ldi	r23, 0x00	; 0
        {
            // User has toggled 'Decrement milk' control
            Serial.println( "Milk DOWN off" );
    5f94:	ce 01       	movw	r24, r28
    5f96:	82 de       	rcall	.-764    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5f98:	82 30       	cpi	r24, 0x02	; 2
    5f9a:	29 f4       	brne	.+10     	; 0x5fa6 <_ZN12UserControls4TestEv+0x1be>
    5f9c:	63 ec       	ldi	r22, 0xC3	; 195
        }
    
        if( CheckSettledEvent( UC_SUGAR_INC ) == UserControlSwitchedOff )
    5f9e:	79 e0       	ldi	r23, 0x09	; 9
    5fa0:	85 e5       	ldi	r24, 0x55	; 85
    5fa2:	9a e0       	ldi	r25, 0x0A	; 10
    5fa4:	47 d4       	rcall	.+2190   	; 0x6834 <_ZN5Print7printlnEPKc>
    5fa6:	66 e0       	ldi	r22, 0x06	; 6
    5fa8:	70 e0       	ldi	r23, 0x00	; 0
        {
            // User has toggled 'Increment sugar' control
            Serial.println( "Sugar UP off" );
    5faa:	ce 01       	movw	r24, r28
    5fac:	77 de       	rcall	.-786    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5fae:	82 30       	cpi	r24, 0x02	; 2
    5fb0:	29 f4       	brne	.+10     	; 0x5fbc <_ZN12UserControls4TestEv+0x1d4>
    5fb2:	61 ed       	ldi	r22, 0xD1	; 209
        }
    
        if( CheckSettledEvent( UC_SUGAR_DEC ) == UserControlSwitchedOff )
    5fb4:	79 e0       	ldi	r23, 0x09	; 9
    5fb6:	85 e5       	ldi	r24, 0x55	; 85
    5fb8:	9a e0       	ldi	r25, 0x0A	; 10
    5fba:	3c d4       	rcall	.+2168   	; 0x6834 <_ZN5Print7printlnEPKc>
    5fbc:	67 e0       	ldi	r22, 0x07	; 7
    5fbe:	70 e0       	ldi	r23, 0x00	; 0
        {
            // User has toggled 'Decrement sugar' control
            Serial.println( "Sugar DOWN off" );
    5fc0:	ce 01       	movw	r24, r28
    5fc2:	6c de       	rcall	.-808    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5fc4:	82 30       	cpi	r24, 0x02	; 2
    5fc6:	29 f4       	brne	.+10     	; 0x5fd2 <_ZN12UserControls4TestEv+0x1ea>
    5fc8:	6e ed       	ldi	r22, 0xDE	; 222
        }
    
        if( CheckSettledEvent( UC_STRENGTH_INC ) == UserControlSwitchedOff )
    5fca:	79 e0       	ldi	r23, 0x09	; 9
    5fcc:	85 e5       	ldi	r24, 0x55	; 85
    5fce:	9a e0       	ldi	r25, 0x0A	; 10
    5fd0:	31 d4       	rcall	.+2146   	; 0x6834 <_ZN5Print7printlnEPKc>
    5fd2:	68 e0       	ldi	r22, 0x08	; 8
    5fd4:	70 e0       	ldi	r23, 0x00	; 0
    5fd6:	ce 01       	movw	r24, r28
        {
            // User has toggled 'Increment strength' control
            Serial.println( "Strength UP off" );
    5fd8:	61 de       	rcall	.-830    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5fda:	82 30       	cpi	r24, 0x02	; 2
    5fdc:	29 f4       	brne	.+10     	; 0x5fe8 <_ZN12UserControls4TestEv+0x200>
    5fde:	6d ee       	ldi	r22, 0xED	; 237
    5fe0:	79 e0       	ldi	r23, 0x09	; 9
    5fe2:	85 e5       	ldi	r24, 0x55	; 85
        }
    
        if( CheckSettledEvent( UC_STRENGTH_DEC ) == UserControlSwitchedOff )
    5fe4:	9a e0       	ldi	r25, 0x0A	; 10
    5fe6:	26 d4       	rcall	.+2124   	; 0x6834 <_ZN5Print7printlnEPKc>
    5fe8:	69 e0       	ldi	r22, 0x09	; 9
    5fea:	70 e0       	ldi	r23, 0x00	; 0
    5fec:	ce 01       	movw	r24, r28
    5fee:	56 de       	rcall	.-852    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    5ff0:	82 30       	cpi	r24, 0x02	; 2
        {
            // User has toggled 'Decrement strength' control
            Serial.println( "Strength DOWN off" );
    5ff2:	29 f4       	brne	.+10     	; 0x5ffe <_ZN12UserControls4TestEv+0x216>
    5ff4:	6d ef       	ldi	r22, 0xFD	; 253
    5ff6:	79 e0       	ldi	r23, 0x09	; 9
    5ff8:	85 e5       	ldi	r24, 0x55	; 85
    5ffa:	9a e0       	ldi	r25, 0x0A	; 10
    5ffc:	1b d4       	rcall	.+2102   	; 0x6834 <_ZN5Print7printlnEPKc>
        }
    
        if( CheckSettledEvent( UC_GO ) == UserControlSwitchedOff )
    5ffe:	6a e0       	ldi	r22, 0x0A	; 10
    6000:	70 e0       	ldi	r23, 0x00	; 0
    6002:	ce 01       	movw	r24, r28
    6004:	4b de       	rcall	.-874    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    6006:	82 30       	cpi	r24, 0x02	; 2
    6008:	29 f4       	brne	.+10     	; 0x6014 <_ZN12UserControls4TestEv+0x22c>
    600a:	6f e0       	ldi	r22, 0x0F	; 15
        {
            // User has pressed GO button
            Serial.println( "GO off" );
    600c:	7a e0       	ldi	r23, 0x0A	; 10
    600e:	85 e5       	ldi	r24, 0x55	; 85
    6010:	9a e0       	ldi	r25, 0x0A	; 10
    6012:	10 d4       	rcall	.+2080   	; 0x6834 <_ZN5Print7printlnEPKc>
    6014:	6b e0       	ldi	r22, 0x0B	; 11
    6016:	70 e0       	ldi	r23, 0x00	; 0
        }
    
        if( CheckSettledEvent( UC_CANCEL ) == UserControlSwitchedOff )
    6018:	ce 01       	movw	r24, r28
    601a:	40 de       	rcall	.-896    	; 0x5c9c <_ZN12UserControls17CheckSettledEventEi>
    601c:	82 30       	cpi	r24, 0x02	; 2
    601e:	09 f0       	breq	.+2      	; 0x6022 <_ZN12UserControls4TestEv+0x23a>
    6020:	ec ce       	rjmp	.-552    	; 0x5dfa <_ZN12UserControls4TestEv+0x12>
    6022:	66 e1       	ldi	r22, 0x16	; 22
    6024:	7a e0       	ldi	r23, 0x0A	; 10
    6026:	85 e5       	ldi	r24, 0x55	; 85
        {
            // User has pressed CANCEL button
            Serial.println( "CANCEL off" );
    6028:	9a e0       	ldi	r25, 0x0A	; 10
    602a:	04 d4       	rcall	.+2056   	; 0x6834 <_ZN5Print7printlnEPKc>
    602c:	e6 ce       	rjmp	.-564    	; 0x5dfa <_ZN12UserControls4TestEv+0x12>

0000602e <__subsf3>:
    602e:	50 58       	subi	r21, 0x80	; 128

00006030 <__addsf3>:
    6030:	bb 27       	eor	r27, r27
    6032:	aa 27       	eor	r26, r26
    6034:	0e d0       	rcall	.+28     	; 0x6052 <__addsf3x>
    6036:	b4 c0       	rjmp	.+360    	; 0x61a0 <__fp_round>
    6038:	a5 d0       	rcall	.+330    	; 0x6184 <__fp_pscA>
    603a:	30 f0       	brcs	.+12     	; 0x6048 <__addsf3+0x18>
    603c:	aa d0       	rcall	.+340    	; 0x6192 <__fp_pscB>
    603e:	20 f0       	brcs	.+8      	; 0x6048 <__addsf3+0x18>
    6040:	31 f4       	brne	.+12     	; 0x604e <__addsf3+0x1e>
    6042:	9f 3f       	cpi	r25, 0xFF	; 255
    6044:	11 f4       	brne	.+4      	; 0x604a <__addsf3+0x1a>
    6046:	1e f4       	brtc	.+6      	; 0x604e <__addsf3+0x1e>
    6048:	9a c0       	rjmp	.+308    	; 0x617e <__fp_nan>
    604a:	0e f4       	brtc	.+2      	; 0x604e <__addsf3+0x1e>
    604c:	e0 95       	com	r30
    604e:	e7 fb       	bst	r30, 7
    6050:	90 c0       	rjmp	.+288    	; 0x6172 <__fp_inf>

00006052 <__addsf3x>:
    6052:	e9 2f       	mov	r30, r25
    6054:	b6 d0       	rcall	.+364    	; 0x61c2 <__fp_split3>
    6056:	80 f3       	brcs	.-32     	; 0x6038 <__addsf3+0x8>
    6058:	ba 17       	cp	r27, r26
    605a:	62 07       	cpc	r22, r18
    605c:	73 07       	cpc	r23, r19
    605e:	84 07       	cpc	r24, r20
    6060:	95 07       	cpc	r25, r21
    6062:	18 f0       	brcs	.+6      	; 0x606a <__addsf3x+0x18>
    6064:	71 f4       	brne	.+28     	; 0x6082 <__addsf3x+0x30>
    6066:	9e f5       	brtc	.+102    	; 0x60ce <__addsf3x+0x7c>
    6068:	ce c0       	rjmp	.+412    	; 0x6206 <__fp_zero>
    606a:	0e f4       	brtc	.+2      	; 0x606e <__addsf3x+0x1c>
    606c:	e0 95       	com	r30
    606e:	0b 2e       	mov	r0, r27
    6070:	ba 2f       	mov	r27, r26
    6072:	a0 2d       	mov	r26, r0
    6074:	0b 01       	movw	r0, r22
    6076:	b9 01       	movw	r22, r18
    6078:	90 01       	movw	r18, r0
    607a:	0c 01       	movw	r0, r24
    607c:	ca 01       	movw	r24, r20
    607e:	a0 01       	movw	r20, r0
    6080:	11 24       	eor	r1, r1
    6082:	ff 27       	eor	r31, r31
    6084:	59 1b       	sub	r21, r25
    6086:	99 f0       	breq	.+38     	; 0x60ae <__addsf3x+0x5c>
    6088:	59 3f       	cpi	r21, 0xF9	; 249
    608a:	50 f4       	brcc	.+20     	; 0x60a0 <__addsf3x+0x4e>
    608c:	50 3e       	cpi	r21, 0xE0	; 224
    608e:	68 f1       	brcs	.+90     	; 0x60ea <__addsf3x+0x98>
    6090:	1a 16       	cp	r1, r26
    6092:	f0 40       	sbci	r31, 0x00	; 0
    6094:	a2 2f       	mov	r26, r18
    6096:	23 2f       	mov	r18, r19
    6098:	34 2f       	mov	r19, r20
    609a:	44 27       	eor	r20, r20
    609c:	58 5f       	subi	r21, 0xF8	; 248
    609e:	f3 cf       	rjmp	.-26     	; 0x6086 <__addsf3x+0x34>
    60a0:	46 95       	lsr	r20
    60a2:	37 95       	ror	r19
    60a4:	27 95       	ror	r18
    60a6:	a7 95       	ror	r26
    60a8:	f0 40       	sbci	r31, 0x00	; 0
    60aa:	53 95       	inc	r21
    60ac:	c9 f7       	brne	.-14     	; 0x60a0 <__addsf3x+0x4e>
    60ae:	7e f4       	brtc	.+30     	; 0x60ce <__addsf3x+0x7c>
    60b0:	1f 16       	cp	r1, r31
    60b2:	ba 0b       	sbc	r27, r26
    60b4:	62 0b       	sbc	r22, r18
    60b6:	73 0b       	sbc	r23, r19
    60b8:	84 0b       	sbc	r24, r20
    60ba:	ba f0       	brmi	.+46     	; 0x60ea <__addsf3x+0x98>
    60bc:	91 50       	subi	r25, 0x01	; 1
    60be:	a1 f0       	breq	.+40     	; 0x60e8 <__addsf3x+0x96>
    60c0:	ff 0f       	add	r31, r31
    60c2:	bb 1f       	adc	r27, r27
    60c4:	66 1f       	adc	r22, r22
    60c6:	77 1f       	adc	r23, r23
    60c8:	88 1f       	adc	r24, r24
    60ca:	c2 f7       	brpl	.-16     	; 0x60bc <__addsf3x+0x6a>
    60cc:	0e c0       	rjmp	.+28     	; 0x60ea <__addsf3x+0x98>
    60ce:	ba 0f       	add	r27, r26
    60d0:	62 1f       	adc	r22, r18
    60d2:	73 1f       	adc	r23, r19
    60d4:	84 1f       	adc	r24, r20
    60d6:	48 f4       	brcc	.+18     	; 0x60ea <__addsf3x+0x98>
    60d8:	87 95       	ror	r24
    60da:	77 95       	ror	r23
    60dc:	67 95       	ror	r22
    60de:	b7 95       	ror	r27
    60e0:	f7 95       	ror	r31
    60e2:	9e 3f       	cpi	r25, 0xFE	; 254
    60e4:	08 f0       	brcs	.+2      	; 0x60e8 <__addsf3x+0x96>
    60e6:	b3 cf       	rjmp	.-154    	; 0x604e <__addsf3+0x1e>
    60e8:	93 95       	inc	r25
    60ea:	88 0f       	add	r24, r24
    60ec:	08 f0       	brcs	.+2      	; 0x60f0 <__addsf3x+0x9e>
    60ee:	99 27       	eor	r25, r25
    60f0:	ee 0f       	add	r30, r30
    60f2:	97 95       	ror	r25
    60f4:	87 95       	ror	r24
    60f6:	08 95       	ret

000060f8 <__floatunsisf>:
    60f8:	e8 94       	clt
    60fa:	09 c0       	rjmp	.+18     	; 0x610e <__floatsisf+0x12>

000060fc <__floatsisf>:
    60fc:	97 fb       	bst	r25, 7
    60fe:	3e f4       	brtc	.+14     	; 0x610e <__floatsisf+0x12>
    6100:	90 95       	com	r25
    6102:	80 95       	com	r24
    6104:	70 95       	com	r23
    6106:	61 95       	neg	r22
    6108:	7f 4f       	sbci	r23, 0xFF	; 255
    610a:	8f 4f       	sbci	r24, 0xFF	; 255
    610c:	9f 4f       	sbci	r25, 0xFF	; 255
    610e:	99 23       	and	r25, r25
    6110:	a9 f0       	breq	.+42     	; 0x613c <__floatsisf+0x40>
    6112:	f9 2f       	mov	r31, r25
    6114:	96 e9       	ldi	r25, 0x96	; 150
    6116:	bb 27       	eor	r27, r27
    6118:	93 95       	inc	r25
    611a:	f6 95       	lsr	r31
    611c:	87 95       	ror	r24
    611e:	77 95       	ror	r23
    6120:	67 95       	ror	r22
    6122:	b7 95       	ror	r27
    6124:	f1 11       	cpse	r31, r1
    6126:	f8 cf       	rjmp	.-16     	; 0x6118 <__floatsisf+0x1c>
    6128:	fa f4       	brpl	.+62     	; 0x6168 <__floatsisf+0x6c>
    612a:	bb 0f       	add	r27, r27
    612c:	11 f4       	brne	.+4      	; 0x6132 <__floatsisf+0x36>
    612e:	60 ff       	sbrs	r22, 0
    6130:	1b c0       	rjmp	.+54     	; 0x6168 <__floatsisf+0x6c>
    6132:	6f 5f       	subi	r22, 0xFF	; 255
    6134:	7f 4f       	sbci	r23, 0xFF	; 255
    6136:	8f 4f       	sbci	r24, 0xFF	; 255
    6138:	9f 4f       	sbci	r25, 0xFF	; 255
    613a:	16 c0       	rjmp	.+44     	; 0x6168 <__floatsisf+0x6c>
    613c:	88 23       	and	r24, r24
    613e:	11 f0       	breq	.+4      	; 0x6144 <__floatsisf+0x48>
    6140:	96 e9       	ldi	r25, 0x96	; 150
    6142:	11 c0       	rjmp	.+34     	; 0x6166 <__floatsisf+0x6a>
    6144:	77 23       	and	r23, r23
    6146:	21 f0       	breq	.+8      	; 0x6150 <__floatsisf+0x54>
    6148:	9e e8       	ldi	r25, 0x8E	; 142
    614a:	87 2f       	mov	r24, r23
    614c:	76 2f       	mov	r23, r22
    614e:	05 c0       	rjmp	.+10     	; 0x615a <__floatsisf+0x5e>
    6150:	66 23       	and	r22, r22
    6152:	71 f0       	breq	.+28     	; 0x6170 <__floatsisf+0x74>
    6154:	96 e8       	ldi	r25, 0x86	; 134
    6156:	86 2f       	mov	r24, r22
    6158:	70 e0       	ldi	r23, 0x00	; 0
    615a:	60 e0       	ldi	r22, 0x00	; 0
    615c:	2a f0       	brmi	.+10     	; 0x6168 <__floatsisf+0x6c>
    615e:	9a 95       	dec	r25
    6160:	66 0f       	add	r22, r22
    6162:	77 1f       	adc	r23, r23
    6164:	88 1f       	adc	r24, r24
    6166:	da f7       	brpl	.-10     	; 0x615e <__floatsisf+0x62>
    6168:	88 0f       	add	r24, r24
    616a:	96 95       	lsr	r25
    616c:	87 95       	ror	r24
    616e:	97 f9       	bld	r25, 7
    6170:	08 95       	ret

00006172 <__fp_inf>:
    6172:	97 f9       	bld	r25, 7
    6174:	9f 67       	ori	r25, 0x7F	; 127
    6176:	80 e8       	ldi	r24, 0x80	; 128
    6178:	70 e0       	ldi	r23, 0x00	; 0
    617a:	60 e0       	ldi	r22, 0x00	; 0
    617c:	08 95       	ret

0000617e <__fp_nan>:
    617e:	9f ef       	ldi	r25, 0xFF	; 255
    6180:	80 ec       	ldi	r24, 0xC0	; 192
    6182:	08 95       	ret

00006184 <__fp_pscA>:
    6184:	00 24       	eor	r0, r0
    6186:	0a 94       	dec	r0
    6188:	16 16       	cp	r1, r22
    618a:	17 06       	cpc	r1, r23
    618c:	18 06       	cpc	r1, r24
    618e:	09 06       	cpc	r0, r25
    6190:	08 95       	ret

00006192 <__fp_pscB>:
    6192:	00 24       	eor	r0, r0
    6194:	0a 94       	dec	r0
    6196:	12 16       	cp	r1, r18
    6198:	13 06       	cpc	r1, r19
    619a:	14 06       	cpc	r1, r20
    619c:	05 06       	cpc	r0, r21
    619e:	08 95       	ret

000061a0 <__fp_round>:
    61a0:	09 2e       	mov	r0, r25
    61a2:	03 94       	inc	r0
    61a4:	00 0c       	add	r0, r0
    61a6:	11 f4       	brne	.+4      	; 0x61ac <__fp_round+0xc>
    61a8:	88 23       	and	r24, r24
    61aa:	52 f0       	brmi	.+20     	; 0x61c0 <__fp_round+0x20>
    61ac:	bb 0f       	add	r27, r27
    61ae:	40 f4       	brcc	.+16     	; 0x61c0 <__fp_round+0x20>
    61b0:	bf 2b       	or	r27, r31
    61b2:	11 f4       	brne	.+4      	; 0x61b8 <__fp_round+0x18>
    61b4:	60 ff       	sbrs	r22, 0
    61b6:	04 c0       	rjmp	.+8      	; 0x61c0 <__fp_round+0x20>
    61b8:	6f 5f       	subi	r22, 0xFF	; 255
    61ba:	7f 4f       	sbci	r23, 0xFF	; 255
    61bc:	8f 4f       	sbci	r24, 0xFF	; 255
    61be:	9f 4f       	sbci	r25, 0xFF	; 255
    61c0:	08 95       	ret

000061c2 <__fp_split3>:
    61c2:	57 fd       	sbrc	r21, 7
    61c4:	90 58       	subi	r25, 0x80	; 128
    61c6:	44 0f       	add	r20, r20
    61c8:	55 1f       	adc	r21, r21
    61ca:	59 f0       	breq	.+22     	; 0x61e2 <__fp_splitA+0x10>
    61cc:	5f 3f       	cpi	r21, 0xFF	; 255
    61ce:	71 f0       	breq	.+28     	; 0x61ec <__fp_splitA+0x1a>
    61d0:	47 95       	ror	r20

000061d2 <__fp_splitA>:
    61d2:	88 0f       	add	r24, r24
    61d4:	97 fb       	bst	r25, 7
    61d6:	99 1f       	adc	r25, r25
    61d8:	61 f0       	breq	.+24     	; 0x61f2 <__fp_splitA+0x20>
    61da:	9f 3f       	cpi	r25, 0xFF	; 255
    61dc:	79 f0       	breq	.+30     	; 0x61fc <__fp_splitA+0x2a>
    61de:	87 95       	ror	r24
    61e0:	08 95       	ret
    61e2:	12 16       	cp	r1, r18
    61e4:	13 06       	cpc	r1, r19
    61e6:	14 06       	cpc	r1, r20
    61e8:	55 1f       	adc	r21, r21
    61ea:	f2 cf       	rjmp	.-28     	; 0x61d0 <__fp_split3+0xe>
    61ec:	46 95       	lsr	r20
    61ee:	f1 df       	rcall	.-30     	; 0x61d2 <__fp_splitA>
    61f0:	08 c0       	rjmp	.+16     	; 0x6202 <__fp_splitA+0x30>
    61f2:	16 16       	cp	r1, r22
    61f4:	17 06       	cpc	r1, r23
    61f6:	18 06       	cpc	r1, r24
    61f8:	99 1f       	adc	r25, r25
    61fa:	f1 cf       	rjmp	.-30     	; 0x61de <__fp_splitA+0xc>
    61fc:	86 95       	lsr	r24
    61fe:	71 05       	cpc	r23, r1
    6200:	61 05       	cpc	r22, r1
    6202:	08 94       	sec
    6204:	08 95       	ret

00006206 <__fp_zero>:
    6206:	e8 94       	clt

00006208 <__fp_szero>:
    6208:	bb 27       	eor	r27, r27
    620a:	66 27       	eor	r22, r22
    620c:	77 27       	eor	r23, r23
    620e:	cb 01       	movw	r24, r22
    6210:	97 f9       	bld	r25, 7
    6212:	08 95       	ret

00006214 <__gesf2>:
    6214:	66 d0       	rcall	.+204    	; 0x62e2 <__fp_cmp>
    6216:	08 f4       	brcc	.+2      	; 0x621a <__gesf2+0x6>
    6218:	8f ef       	ldi	r24, 0xFF	; 255
    621a:	08 95       	ret

0000621c <__mulsf3>:
    621c:	0b d0       	rcall	.+22     	; 0x6234 <__mulsf3x>
    621e:	c0 cf       	rjmp	.-128    	; 0x61a0 <__fp_round>
    6220:	b1 df       	rcall	.-158    	; 0x6184 <__fp_pscA>
    6222:	28 f0       	brcs	.+10     	; 0x622e <__mulsf3+0x12>
    6224:	b6 df       	rcall	.-148    	; 0x6192 <__fp_pscB>
    6226:	18 f0       	brcs	.+6      	; 0x622e <__mulsf3+0x12>
    6228:	95 23       	and	r25, r21
    622a:	09 f0       	breq	.+2      	; 0x622e <__mulsf3+0x12>
    622c:	a2 cf       	rjmp	.-188    	; 0x6172 <__fp_inf>
    622e:	a7 cf       	rjmp	.-178    	; 0x617e <__fp_nan>
    6230:	11 24       	eor	r1, r1
    6232:	ea cf       	rjmp	.-44     	; 0x6208 <__fp_szero>

00006234 <__mulsf3x>:
    6234:	c6 df       	rcall	.-116    	; 0x61c2 <__fp_split3>
    6236:	a0 f3       	brcs	.-24     	; 0x6220 <__mulsf3+0x4>

00006238 <__mulsf3_pse>:
    6238:	95 9f       	mul	r25, r21
    623a:	d1 f3       	breq	.-12     	; 0x6230 <__mulsf3+0x14>
    623c:	95 0f       	add	r25, r21
    623e:	50 e0       	ldi	r21, 0x00	; 0
    6240:	55 1f       	adc	r21, r21
    6242:	62 9f       	mul	r22, r18
    6244:	f0 01       	movw	r30, r0
    6246:	72 9f       	mul	r23, r18
    6248:	bb 27       	eor	r27, r27
    624a:	f0 0d       	add	r31, r0
    624c:	b1 1d       	adc	r27, r1
    624e:	63 9f       	mul	r22, r19
    6250:	aa 27       	eor	r26, r26
    6252:	f0 0d       	add	r31, r0
    6254:	b1 1d       	adc	r27, r1
    6256:	aa 1f       	adc	r26, r26
    6258:	64 9f       	mul	r22, r20
    625a:	66 27       	eor	r22, r22
    625c:	b0 0d       	add	r27, r0
    625e:	a1 1d       	adc	r26, r1
    6260:	66 1f       	adc	r22, r22
    6262:	82 9f       	mul	r24, r18
    6264:	22 27       	eor	r18, r18
    6266:	b0 0d       	add	r27, r0
    6268:	a1 1d       	adc	r26, r1
    626a:	62 1f       	adc	r22, r18
    626c:	73 9f       	mul	r23, r19
    626e:	b0 0d       	add	r27, r0
    6270:	a1 1d       	adc	r26, r1
    6272:	62 1f       	adc	r22, r18
    6274:	83 9f       	mul	r24, r19
    6276:	a0 0d       	add	r26, r0
    6278:	61 1d       	adc	r22, r1
    627a:	22 1f       	adc	r18, r18
    627c:	74 9f       	mul	r23, r20
    627e:	33 27       	eor	r19, r19
    6280:	a0 0d       	add	r26, r0
    6282:	61 1d       	adc	r22, r1
    6284:	23 1f       	adc	r18, r19
    6286:	84 9f       	mul	r24, r20
    6288:	60 0d       	add	r22, r0
    628a:	21 1d       	adc	r18, r1
    628c:	82 2f       	mov	r24, r18
    628e:	76 2f       	mov	r23, r22
    6290:	6a 2f       	mov	r22, r26
    6292:	11 24       	eor	r1, r1
    6294:	9f 57       	subi	r25, 0x7F	; 127
    6296:	50 40       	sbci	r21, 0x00	; 0
    6298:	8a f0       	brmi	.+34     	; 0x62bc <__mulsf3_pse+0x84>
    629a:	e1 f0       	breq	.+56     	; 0x62d4 <__mulsf3_pse+0x9c>
    629c:	88 23       	and	r24, r24
    629e:	4a f0       	brmi	.+18     	; 0x62b2 <__mulsf3_pse+0x7a>
    62a0:	ee 0f       	add	r30, r30
    62a2:	ff 1f       	adc	r31, r31
    62a4:	bb 1f       	adc	r27, r27
    62a6:	66 1f       	adc	r22, r22
    62a8:	77 1f       	adc	r23, r23
    62aa:	88 1f       	adc	r24, r24
    62ac:	91 50       	subi	r25, 0x01	; 1
    62ae:	50 40       	sbci	r21, 0x00	; 0
    62b0:	a9 f7       	brne	.-22     	; 0x629c <__mulsf3_pse+0x64>
    62b2:	9e 3f       	cpi	r25, 0xFE	; 254
    62b4:	51 05       	cpc	r21, r1
    62b6:	70 f0       	brcs	.+28     	; 0x62d4 <__mulsf3_pse+0x9c>
    62b8:	5c cf       	rjmp	.-328    	; 0x6172 <__fp_inf>
    62ba:	a6 cf       	rjmp	.-180    	; 0x6208 <__fp_szero>
    62bc:	5f 3f       	cpi	r21, 0xFF	; 255
    62be:	ec f3       	brlt	.-6      	; 0x62ba <__mulsf3_pse+0x82>
    62c0:	98 3e       	cpi	r25, 0xE8	; 232
    62c2:	dc f3       	brlt	.-10     	; 0x62ba <__mulsf3_pse+0x82>
    62c4:	86 95       	lsr	r24
    62c6:	77 95       	ror	r23
    62c8:	67 95       	ror	r22
    62ca:	b7 95       	ror	r27
    62cc:	f7 95       	ror	r31
    62ce:	e7 95       	ror	r30
    62d0:	9f 5f       	subi	r25, 0xFF	; 255
    62d2:	c1 f7       	brne	.-16     	; 0x62c4 <__mulsf3_pse+0x8c>
    62d4:	fe 2b       	or	r31, r30
    62d6:	88 0f       	add	r24, r24
    62d8:	91 1d       	adc	r25, r1
    62da:	96 95       	lsr	r25
    62dc:	87 95       	ror	r24
    62de:	97 f9       	bld	r25, 7
    62e0:	08 95       	ret

000062e2 <__fp_cmp>:
    62e2:	99 0f       	add	r25, r25
    62e4:	00 08       	sbc	r0, r0
    62e6:	55 0f       	add	r21, r21
    62e8:	aa 0b       	sbc	r26, r26
    62ea:	e0 e8       	ldi	r30, 0x80	; 128
    62ec:	fe ef       	ldi	r31, 0xFE	; 254
    62ee:	16 16       	cp	r1, r22
    62f0:	17 06       	cpc	r1, r23
    62f2:	e8 07       	cpc	r30, r24
    62f4:	f9 07       	cpc	r31, r25
    62f6:	c0 f0       	brcs	.+48     	; 0x6328 <__fp_cmp+0x46>
    62f8:	12 16       	cp	r1, r18
    62fa:	13 06       	cpc	r1, r19
    62fc:	e4 07       	cpc	r30, r20
    62fe:	f5 07       	cpc	r31, r21
    6300:	98 f0       	brcs	.+38     	; 0x6328 <__fp_cmp+0x46>
    6302:	62 1b       	sub	r22, r18
    6304:	73 0b       	sbc	r23, r19
    6306:	84 0b       	sbc	r24, r20
    6308:	95 0b       	sbc	r25, r21
    630a:	39 f4       	brne	.+14     	; 0x631a <__fp_cmp+0x38>
    630c:	0a 26       	eor	r0, r26
    630e:	61 f0       	breq	.+24     	; 0x6328 <__fp_cmp+0x46>
    6310:	23 2b       	or	r18, r19
    6312:	24 2b       	or	r18, r20
    6314:	25 2b       	or	r18, r21
    6316:	21 f4       	brne	.+8      	; 0x6320 <__fp_cmp+0x3e>
    6318:	08 95       	ret
    631a:	0a 26       	eor	r0, r26
    631c:	09 f4       	brne	.+2      	; 0x6320 <__fp_cmp+0x3e>
    631e:	a1 40       	sbci	r26, 0x01	; 1
    6320:	a6 95       	lsr	r26
    6322:	8f ef       	ldi	r24, 0xFF	; 255
    6324:	81 1d       	adc	r24, r1
    6326:	81 1d       	adc	r24, r1
    6328:	08 95       	ret

0000632a <__cxa_pure_virtual>:
    632a:	0e 94 bb 3c 	call	0x7976	; 0x7976 <abort>

0000632e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    632e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    6330:	91 8d       	ldd	r25, Z+25	; 0x19
    6332:	22 8d       	ldd	r18, Z+26	; 0x1a
    6334:	89 2f       	mov	r24, r25
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	80 5c       	subi	r24, 0xC0	; 192
    633a:	9f 4f       	sbci	r25, 0xFF	; 255
    633c:	82 1b       	sub	r24, r18
    633e:	91 09       	sbc	r25, r1
}
    6340:	8f 73       	andi	r24, 0x3F	; 63
    6342:	99 27       	eor	r25, r25
    6344:	08 95       	ret

00006346 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    6346:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    6348:	91 8d       	ldd	r25, Z+25	; 0x19
    634a:	82 8d       	ldd	r24, Z+26	; 0x1a
    634c:	98 17       	cp	r25, r24
    634e:	31 f0       	breq	.+12     	; 0x635c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    6350:	82 8d       	ldd	r24, Z+26	; 0x1a
    6352:	e8 0f       	add	r30, r24
    6354:	f1 1d       	adc	r31, r1
    6356:	85 8d       	ldd	r24, Z+29	; 0x1d
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    635c:	8f ef       	ldi	r24, 0xFF	; 255
    635e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    6360:	08 95       	ret

00006362 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    6362:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    6364:	91 8d       	ldd	r25, Z+25	; 0x19
    6366:	82 8d       	ldd	r24, Z+26	; 0x1a
    6368:	98 17       	cp	r25, r24
    636a:	61 f0       	breq	.+24     	; 0x6384 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    636c:	82 8d       	ldd	r24, Z+26	; 0x1a
    636e:	df 01       	movw	r26, r30
    6370:	a8 0f       	add	r26, r24
    6372:	b1 1d       	adc	r27, r1
    6374:	5d 96       	adiw	r26, 0x1d	; 29
    6376:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    6378:	92 8d       	ldd	r25, Z+26	; 0x1a
    637a:	9f 5f       	subi	r25, 0xFF	; 255
    637c:	9f 73       	andi	r25, 0x3F	; 63
    637e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    6384:	8f ef       	ldi	r24, 0xFF	; 255
    6386:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    6388:	08 95       	ret

0000638a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    638a:	8d e6       	ldi	r24, 0x6D	; 109
    638c:	93 e3       	ldi	r25, 0x33	; 51
    638e:	89 2b       	or	r24, r25
    6390:	39 f0       	breq	.+14     	; 0x63a0 <_Z14serialEventRunv+0x16>
    6392:	80 e0       	ldi	r24, 0x00	; 0
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	89 2b       	or	r24, r25
    6398:	19 f0       	breq	.+6      	; 0x63a0 <_Z14serialEventRunv+0x16>
    639a:	9f d1       	rcall	.+830    	; 0x66da <_Z17Serial0_availablev>
    639c:	81 11       	cpse	r24, r1
    639e:	25 c0       	rjmp	.+74     	; 0x63ea <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    63a0:	80 e0       	ldi	r24, 0x00	; 0
    63a2:	90 e0       	ldi	r25, 0x00	; 0
    63a4:	89 2b       	or	r24, r25
    63a6:	41 f0       	breq	.+16     	; 0x63b8 <_Z14serialEventRunv+0x2e>
    63a8:	80 e0       	ldi	r24, 0x00	; 0
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	89 2b       	or	r24, r25
    63ae:	21 f0       	breq	.+8      	; 0x63b8 <_Z14serialEventRunv+0x2e>
    63b0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    63b4:	81 11       	cpse	r24, r1
    63b6:	1c c0       	rjmp	.+56     	; 0x63f0 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    63b8:	80 e0       	ldi	r24, 0x00	; 0
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	89 2b       	or	r24, r25
    63be:	41 f0       	breq	.+16     	; 0x63d0 <_Z14serialEventRunv+0x46>
    63c0:	80 e0       	ldi	r24, 0x00	; 0
    63c2:	90 e0       	ldi	r25, 0x00	; 0
    63c4:	89 2b       	or	r24, r25
    63c6:	21 f0       	breq	.+8      	; 0x63d0 <_Z14serialEventRunv+0x46>
    63c8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    63cc:	81 11       	cpse	r24, r1
    63ce:	13 c0       	rjmp	.+38     	; 0x63f6 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    63d0:	80 e0       	ldi	r24, 0x00	; 0
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	89 2b       	or	r24, r25
    63d6:	a1 f0       	breq	.+40     	; 0x6400 <_Z14serialEventRunv+0x76>
    63d8:	80 e0       	ldi	r24, 0x00	; 0
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	89 2b       	or	r24, r25
    63de:	81 f0       	breq	.+32     	; 0x6400 <_Z14serialEventRunv+0x76>
    63e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    63e4:	81 11       	cpse	r24, r1
    63e6:	0a c0       	rjmp	.+20     	; 0x63fc <_Z14serialEventRunv+0x72>
    63e8:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    63ea:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    63ee:	d8 cf       	rjmp	.-80     	; 0x63a0 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    63f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    63f4:	e1 cf       	rjmp	.-62     	; 0x63b8 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    63f6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    63fa:	ea cf       	rjmp	.-44     	; 0x63d0 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    63fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    6400:	08 95       	ret

00006402 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    6402:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    6404:	84 8d       	ldd	r24, Z+28	; 0x1c
    6406:	df 01       	movw	r26, r30
    6408:	a8 0f       	add	r26, r24
    640a:	b1 1d       	adc	r27, r1
    640c:	a3 5a       	subi	r26, 0xA3	; 163
    640e:	bf 4f       	sbci	r27, 0xFF	; 255
    6410:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    6412:	84 8d       	ldd	r24, Z+28	; 0x1c
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	01 96       	adiw	r24, 0x01	; 1
    6418:	8f 73       	andi	r24, 0x3F	; 63
    641a:	99 27       	eor	r25, r25
    641c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    641e:	a6 89       	ldd	r26, Z+22	; 0x16
    6420:	b7 89       	ldd	r27, Z+23	; 0x17
    6422:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    6424:	a0 89       	ldd	r26, Z+16	; 0x10
    6426:	b1 89       	ldd	r27, Z+17	; 0x11
    6428:	8c 91       	ld	r24, X
    642a:	80 64       	ori	r24, 0x40	; 64
    642c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    642e:	93 8d       	ldd	r25, Z+27	; 0x1b
    6430:	84 8d       	ldd	r24, Z+28	; 0x1c
    6432:	98 13       	cpse	r25, r24
    6434:	06 c0       	rjmp	.+12     	; 0x6442 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    6436:	02 88       	ldd	r0, Z+18	; 0x12
    6438:	f3 89       	ldd	r31, Z+19	; 0x13
    643a:	e0 2d       	mov	r30, r0
    643c:	80 81       	ld	r24, Z
    643e:	8f 7d       	andi	r24, 0xDF	; 223
    6440:	80 83       	st	Z, r24
    6442:	08 95       	ret

00006444 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    6444:	ef 92       	push	r14
    6446:	ff 92       	push	r15
    6448:	0f 93       	push	r16
    644a:	1f 93       	push	r17
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	ec 01       	movw	r28, r24
  _written = true;
    6452:	81 e0       	ldi	r24, 0x01	; 1
    6454:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    6456:	9b 8d       	ldd	r25, Y+27	; 0x1b
    6458:	8c 8d       	ldd	r24, Y+28	; 0x1c
    645a:	98 13       	cpse	r25, r24
    645c:	05 c0       	rjmp	.+10     	; 0x6468 <_ZN14HardwareSerial5writeEh+0x24>
    645e:	e8 89       	ldd	r30, Y+16	; 0x10
    6460:	f9 89       	ldd	r31, Y+17	; 0x11
    6462:	80 81       	ld	r24, Z
    6464:	85 fd       	sbrc	r24, 5
    6466:	23 c0       	rjmp	.+70     	; 0x64ae <_ZN14HardwareSerial5writeEh+0x6a>
    6468:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    646a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    646c:	10 e0       	ldi	r17, 0x00	; 0
    646e:	0f 5f       	subi	r16, 0xFF	; 255
    6470:	1f 4f       	sbci	r17, 0xFF	; 255
    6472:	0f 73       	andi	r16, 0x3F	; 63
    6474:	11 27       	eor	r17, r17
    6476:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    6478:	8c 8d       	ldd	r24, Y+28	; 0x1c
    647a:	e8 12       	cpse	r14, r24
    647c:	0b c0       	rjmp	.+22     	; 0x6494 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    647e:	0f b6       	in	r0, 0x3f	; 63
    6480:	07 fc       	sbrc	r0, 7
    6482:	fa cf       	rjmp	.-12     	; 0x6478 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    6484:	e8 89       	ldd	r30, Y+16	; 0x10
    6486:	f9 89       	ldd	r31, Y+17	; 0x11
    6488:	80 81       	ld	r24, Z
    648a:	85 ff       	sbrs	r24, 5
    648c:	f5 cf       	rjmp	.-22     	; 0x6478 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    648e:	ce 01       	movw	r24, r28
    6490:	b8 df       	rcall	.-144    	; 0x6402 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    6492:	f2 cf       	rjmp	.-28     	; 0x6478 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    6494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6496:	fe 01       	movw	r30, r28
    6498:	e8 0f       	add	r30, r24
    649a:	f1 1d       	adc	r31, r1
    649c:	e3 5a       	subi	r30, 0xA3	; 163
    649e:	ff 4f       	sbci	r31, 0xFF	; 255
    64a0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    64a2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    64a4:	ea 89       	ldd	r30, Y+18	; 0x12
    64a6:	fb 89       	ldd	r31, Y+19	; 0x13
    64a8:	80 81       	ld	r24, Z
    64aa:	80 62       	ori	r24, 0x20	; 32
    64ac:	07 c0       	rjmp	.+14     	; 0x64bc <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    64ae:	ee 89       	ldd	r30, Y+22	; 0x16
    64b0:	ff 89       	ldd	r31, Y+23	; 0x17
    64b2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    64b4:	e8 89       	ldd	r30, Y+16	; 0x10
    64b6:	f9 89       	ldd	r31, Y+17	; 0x11
    64b8:	80 81       	ld	r24, Z
    64ba:	80 64       	ori	r24, 0x40	; 64
    64bc:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    64be:	81 e0       	ldi	r24, 0x01	; 1
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	df 91       	pop	r29
    64c4:	cf 91       	pop	r28
    64c6:	1f 91       	pop	r17
    64c8:	0f 91       	pop	r16
    64ca:	ff 90       	pop	r15
    64cc:	ef 90       	pop	r14
    64ce:	08 95       	ret

000064d0 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    64d0:	cf 93       	push	r28
    64d2:	df 93       	push	r29
    64d4:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    64d6:	88 8d       	ldd	r24, Y+24	; 0x18
    64d8:	88 23       	and	r24, r24
    64da:	c1 f0       	breq	.+48     	; 0x650c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    64dc:	ea 89       	ldd	r30, Y+18	; 0x12
    64de:	fb 89       	ldd	r31, Y+19	; 0x13
    64e0:	80 81       	ld	r24, Z
    64e2:	85 fd       	sbrc	r24, 5
    64e4:	05 c0       	rjmp	.+10     	; 0x64f0 <_ZN14HardwareSerial5flushEv+0x20>
    64e6:	a8 89       	ldd	r26, Y+16	; 0x10
    64e8:	b9 89       	ldd	r27, Y+17	; 0x11
    64ea:	8c 91       	ld	r24, X
    64ec:	86 fd       	sbrc	r24, 6
    64ee:	0e c0       	rjmp	.+28     	; 0x650c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    64f0:	0f b6       	in	r0, 0x3f	; 63
    64f2:	07 fc       	sbrc	r0, 7
    64f4:	f5 cf       	rjmp	.-22     	; 0x64e0 <_ZN14HardwareSerial5flushEv+0x10>
    64f6:	80 81       	ld	r24, Z
    64f8:	85 ff       	sbrs	r24, 5
    64fa:	f2 cf       	rjmp	.-28     	; 0x64e0 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    64fc:	a8 89       	ldd	r26, Y+16	; 0x10
    64fe:	b9 89       	ldd	r27, Y+17	; 0x11
    6500:	8c 91       	ld	r24, X
    6502:	85 ff       	sbrs	r24, 5
    6504:	ed cf       	rjmp	.-38     	; 0x64e0 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    6506:	ce 01       	movw	r24, r28
    6508:	7c df       	rcall	.-264    	; 0x6402 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    650a:	e8 cf       	rjmp	.-48     	; 0x64dc <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    650c:	df 91       	pop	r29
    650e:	cf 91       	pop	r28
    6510:	08 95       	ret

00006512 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    6512:	cf 92       	push	r12
    6514:	df 92       	push	r13
    6516:	ef 92       	push	r14
    6518:	ff 92       	push	r15
    651a:	1f 93       	push	r17
    651c:	cf 93       	push	r28
    651e:	df 93       	push	r29
    6520:	ec 01       	movw	r28, r24
    6522:	6a 01       	movw	r12, r20
    6524:	7b 01       	movw	r14, r22
    6526:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    6528:	e8 89       	ldd	r30, Y+16	; 0x10
    652a:	f9 89       	ldd	r31, Y+17	; 0x11
    652c:	82 e0       	ldi	r24, 0x02	; 2
    652e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    6530:	41 15       	cp	r20, r1
    6532:	51 4e       	sbci	r21, 0xE1	; 225
    6534:	61 05       	cpc	r22, r1
    6536:	71 05       	cpc	r23, r1
    6538:	a9 f0       	breq	.+42     	; 0x6564 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    653a:	60 e0       	ldi	r22, 0x00	; 0
    653c:	79 e0       	ldi	r23, 0x09	; 9
    653e:	8d e3       	ldi	r24, 0x3D	; 61
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	a7 01       	movw	r20, r14
    6544:	96 01       	movw	r18, r12
    6546:	cd d7       	rcall	.+3994   	; 0x74e2 <__udivmodsi4>
    6548:	da 01       	movw	r26, r20
    654a:	c9 01       	movw	r24, r18
    654c:	01 97       	sbiw	r24, 0x01	; 1
    654e:	a1 09       	sbc	r26, r1
    6550:	b1 09       	sbc	r27, r1
    6552:	b6 95       	lsr	r27
    6554:	a7 95       	ror	r26
    6556:	97 95       	ror	r25
    6558:	87 95       	ror	r24
    655a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    655c:	21 15       	cp	r18, r1
    655e:	80 e1       	ldi	r24, 0x10	; 16
    6560:	38 07       	cpc	r19, r24
    6562:	a0 f0       	brcs	.+40     	; 0x658c <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    6564:	e8 89       	ldd	r30, Y+16	; 0x10
    6566:	f9 89       	ldd	r31, Y+17	; 0x11
    6568:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    656a:	60 e8       	ldi	r22, 0x80	; 128
    656c:	74 e8       	ldi	r23, 0x84	; 132
    656e:	8e e1       	ldi	r24, 0x1E	; 30
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	a7 01       	movw	r20, r14
    6574:	96 01       	movw	r18, r12
    6576:	b5 d7       	rcall	.+3946   	; 0x74e2 <__udivmodsi4>
    6578:	da 01       	movw	r26, r20
    657a:	c9 01       	movw	r24, r18
    657c:	01 97       	sbiw	r24, 0x01	; 1
    657e:	a1 09       	sbc	r26, r1
    6580:	b1 09       	sbc	r27, r1
    6582:	b6 95       	lsr	r27
    6584:	a7 95       	ror	r26
    6586:	97 95       	ror	r25
    6588:	87 95       	ror	r24
    658a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    658c:	ec 85       	ldd	r30, Y+12	; 0x0c
    658e:	fd 85       	ldd	r31, Y+13	; 0x0d
    6590:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    6592:	ee 85       	ldd	r30, Y+14	; 0x0e
    6594:	ff 85       	ldd	r31, Y+15	; 0x0f
    6596:	20 83       	st	Z, r18

  _written = false;
    6598:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    659a:	ec 89       	ldd	r30, Y+20	; 0x14
    659c:	fd 89       	ldd	r31, Y+21	; 0x15
    659e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    65a0:	ea 89       	ldd	r30, Y+18	; 0x12
    65a2:	fb 89       	ldd	r31, Y+19	; 0x13
    65a4:	80 81       	ld	r24, Z
    65a6:	80 61       	ori	r24, 0x10	; 16
    65a8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    65aa:	ea 89       	ldd	r30, Y+18	; 0x12
    65ac:	fb 89       	ldd	r31, Y+19	; 0x13
    65ae:	80 81       	ld	r24, Z
    65b0:	88 60       	ori	r24, 0x08	; 8
    65b2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    65b4:	ea 89       	ldd	r30, Y+18	; 0x12
    65b6:	fb 89       	ldd	r31, Y+19	; 0x13
    65b8:	80 81       	ld	r24, Z
    65ba:	80 68       	ori	r24, 0x80	; 128
    65bc:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    65be:	ea 89       	ldd	r30, Y+18	; 0x12
    65c0:	fb 89       	ldd	r31, Y+19	; 0x13
    65c2:	80 81       	ld	r24, Z
    65c4:	8f 7d       	andi	r24, 0xDF	; 223
    65c6:	80 83       	st	Z, r24
}
    65c8:	df 91       	pop	r29
    65ca:	cf 91       	pop	r28
    65cc:	1f 91       	pop	r17
    65ce:	ff 90       	pop	r15
    65d0:	ef 90       	pop	r14
    65d2:	df 90       	pop	r13
    65d4:	cf 90       	pop	r12
    65d6:	08 95       	ret

000065d8 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    65d8:	cf 93       	push	r28
    65da:	df 93       	push	r29
    65dc:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  flush();
    65de:	e8 81       	ld	r30, Y
    65e0:	f9 81       	ldd	r31, Y+1	; 0x01
    65e2:	02 84       	ldd	r0, Z+10	; 0x0a
    65e4:	f3 85       	ldd	r31, Z+11	; 0x0b
    65e6:	e0 2d       	mov	r30, r0
    65e8:	19 95       	eicall

  cbi(*_ucsrb, RXEN0);
    65ea:	ea 89       	ldd	r30, Y+18	; 0x12
    65ec:	fb 89       	ldd	r31, Y+19	; 0x13
    65ee:	80 81       	ld	r24, Z
    65f0:	8f 7e       	andi	r24, 0xEF	; 239
    65f2:	80 83       	st	Z, r24
  cbi(*_ucsrb, TXEN0);
    65f4:	ea 89       	ldd	r30, Y+18	; 0x12
    65f6:	fb 89       	ldd	r31, Y+19	; 0x13
    65f8:	80 81       	ld	r24, Z
    65fa:	87 7f       	andi	r24, 0xF7	; 247
    65fc:	80 83       	st	Z, r24
  cbi(*_ucsrb, RXCIE0);
    65fe:	ea 89       	ldd	r30, Y+18	; 0x12
    6600:	fb 89       	ldd	r31, Y+19	; 0x13
    6602:	80 81       	ld	r24, Z
    6604:	8f 77       	andi	r24, 0x7F	; 127
    6606:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    6608:	ea 89       	ldd	r30, Y+18	; 0x12
    660a:	fb 89       	ldd	r31, Y+19	; 0x13
    660c:	80 81       	ld	r24, Z
    660e:	8f 7d       	andi	r24, 0xDF	; 223
    6610:	80 83       	st	Z, r24
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    6612:	8a 8d       	ldd	r24, Y+26	; 0x1a
    6614:	89 8f       	std	Y+25, r24	; 0x19
}
    6616:	df 91       	pop	r29
    6618:	cf 91       	pop	r28
    661a:	08 95       	ret

0000661c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    661c:	1f 92       	push	r1
    661e:	0f 92       	push	r0
    6620:	0f b6       	in	r0, 0x3f	; 63
    6622:	0f 92       	push	r0
    6624:	11 24       	eor	r1, r1
    6626:	0b b6       	in	r0, 0x3b	; 59
    6628:	0f 92       	push	r0
    662a:	2f 93       	push	r18
    662c:	8f 93       	push	r24
    662e:	9f 93       	push	r25
    6630:	ef 93       	push	r30
    6632:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    6634:	e0 91 65 0a 	lds	r30, 0x0A65	; 0x800a65 <Serial+0x10>
    6638:	f0 91 66 0a 	lds	r31, 0x0A66	; 0x800a66 <Serial+0x11>
    663c:	80 81       	ld	r24, Z
    663e:	e0 91 6b 0a 	lds	r30, 0x0A6B	; 0x800a6b <Serial+0x16>
    6642:	f0 91 6c 0a 	lds	r31, 0x0A6C	; 0x800a6c <Serial+0x17>
    6646:	82 fd       	sbrc	r24, 2
    6648:	12 c0       	rjmp	.+36     	; 0x666e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    664a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    664c:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <Serial+0x19>
    6650:	8f 5f       	subi	r24, 0xFF	; 255
    6652:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    6654:	20 91 6f 0a 	lds	r18, 0x0A6F	; 0x800a6f <Serial+0x1a>
    6658:	82 17       	cp	r24, r18
    665a:	51 f0       	breq	.+20     	; 0x6670 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    665c:	e0 91 6e 0a 	lds	r30, 0x0A6E	; 0x800a6e <Serial+0x19>
    6660:	f0 e0       	ldi	r31, 0x00	; 0
    6662:	eb 5a       	subi	r30, 0xAB	; 171
    6664:	f5 4f       	sbci	r31, 0xF5	; 245
    6666:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    6668:	80 93 6e 0a 	sts	0x0A6E, r24	; 0x800a6e <Serial+0x19>
    666c:	01 c0       	rjmp	.+2      	; 0x6670 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    666e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    6670:	ff 91       	pop	r31
    6672:	ef 91       	pop	r30
    6674:	9f 91       	pop	r25
    6676:	8f 91       	pop	r24
    6678:	2f 91       	pop	r18
    667a:	0f 90       	pop	r0
    667c:	0b be       	out	0x3b, r0	; 59
    667e:	0f 90       	pop	r0
    6680:	0f be       	out	0x3f, r0	; 63
    6682:	0f 90       	pop	r0
    6684:	1f 90       	pop	r1
    6686:	18 95       	reti

00006688 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    6688:	1f 92       	push	r1
    668a:	0f 92       	push	r0
    668c:	0f b6       	in	r0, 0x3f	; 63
    668e:	0f 92       	push	r0
    6690:	11 24       	eor	r1, r1
    6692:	0b b6       	in	r0, 0x3b	; 59
    6694:	0f 92       	push	r0
    6696:	2f 93       	push	r18
    6698:	3f 93       	push	r19
    669a:	4f 93       	push	r20
    669c:	5f 93       	push	r21
    669e:	6f 93       	push	r22
    66a0:	7f 93       	push	r23
    66a2:	8f 93       	push	r24
    66a4:	9f 93       	push	r25
    66a6:	af 93       	push	r26
    66a8:	bf 93       	push	r27
    66aa:	ef 93       	push	r30
    66ac:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    66ae:	85 e5       	ldi	r24, 0x55	; 85
    66b0:	9a e0       	ldi	r25, 0x0A	; 10
    66b2:	a7 de       	rcall	.-690    	; 0x6402 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    66b4:	ff 91       	pop	r31
    66b6:	ef 91       	pop	r30
    66b8:	bf 91       	pop	r27
    66ba:	af 91       	pop	r26
    66bc:	9f 91       	pop	r25
    66be:	8f 91       	pop	r24
    66c0:	7f 91       	pop	r23
    66c2:	6f 91       	pop	r22
    66c4:	5f 91       	pop	r21
    66c6:	4f 91       	pop	r20
    66c8:	3f 91       	pop	r19
    66ca:	2f 91       	pop	r18
    66cc:	0f 90       	pop	r0
    66ce:	0b be       	out	0x3b, r0	; 59
    66d0:	0f 90       	pop	r0
    66d2:	0f be       	out	0x3f, r0	; 63
    66d4:	0f 90       	pop	r0
    66d6:	1f 90       	pop	r1
    66d8:	18 95       	reti

000066da <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    66da:	85 e5       	ldi	r24, 0x55	; 85
    66dc:	9a e0       	ldi	r25, 0x0A	; 10
    66de:	27 de       	rcall	.-946    	; 0x632e <_ZN14HardwareSerial9availableEv>
    66e0:	21 e0       	ldi	r18, 0x01	; 1
    66e2:	89 2b       	or	r24, r25
    66e4:	09 f4       	brne	.+2      	; 0x66e8 <_Z17Serial0_availablev+0xe>
    66e6:	20 e0       	ldi	r18, 0x00	; 0
}
    66e8:	82 2f       	mov	r24, r18
    66ea:	08 95       	ret

000066ec <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    66ec:	e5 e5       	ldi	r30, 0x55	; 85
    66ee:	fa e0       	ldi	r31, 0x0A	; 10
    66f0:	13 82       	std	Z+3, r1	; 0x03
    66f2:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    66f4:	88 ee       	ldi	r24, 0xE8	; 232
    66f6:	93 e0       	ldi	r25, 0x03	; 3
    66f8:	a0 e0       	ldi	r26, 0x00	; 0
    66fa:	b0 e0       	ldi	r27, 0x00	; 0
    66fc:	84 83       	std	Z+4, r24	; 0x04
    66fe:	95 83       	std	Z+5, r25	; 0x05
    6700:	a6 83       	std	Z+6, r26	; 0x06
    6702:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    6704:	8d e2       	ldi	r24, 0x2D	; 45
    6706:	9a e0       	ldi	r25, 0x0A	; 10
    6708:	91 83       	std	Z+1, r25	; 0x01
    670a:	80 83       	st	Z, r24
    670c:	85 ec       	ldi	r24, 0xC5	; 197
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	95 87       	std	Z+13, r25	; 0x0d
    6712:	84 87       	std	Z+12, r24	; 0x0c
    6714:	84 ec       	ldi	r24, 0xC4	; 196
    6716:	90 e0       	ldi	r25, 0x00	; 0
    6718:	97 87       	std	Z+15, r25	; 0x0f
    671a:	86 87       	std	Z+14, r24	; 0x0e
    671c:	80 ec       	ldi	r24, 0xC0	; 192
    671e:	90 e0       	ldi	r25, 0x00	; 0
    6720:	91 8b       	std	Z+17, r25	; 0x11
    6722:	80 8b       	std	Z+16, r24	; 0x10
    6724:	81 ec       	ldi	r24, 0xC1	; 193
    6726:	90 e0       	ldi	r25, 0x00	; 0
    6728:	93 8b       	std	Z+19, r25	; 0x13
    672a:	82 8b       	std	Z+18, r24	; 0x12
    672c:	82 ec       	ldi	r24, 0xC2	; 194
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	95 8b       	std	Z+21, r25	; 0x15
    6732:	84 8b       	std	Z+20, r24	; 0x14
    6734:	86 ec       	ldi	r24, 0xC6	; 198
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	97 8b       	std	Z+23, r25	; 0x17
    673a:	86 8b       	std	Z+22, r24	; 0x16
    673c:	11 8e       	std	Z+25, r1	; 0x19
    673e:	12 8e       	std	Z+26, r1	; 0x1a
    6740:	13 8e       	std	Z+27, r1	; 0x1b
    6742:	14 8e       	std	Z+28, r1	; 0x1c
    6744:	08 95       	ret

00006746 <initVariant>:
    6746:	08 95       	ret

00006748 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    6748:	c6 d2       	rcall	.+1420   	; 0x6cd6 <init>

	initVariant();
    674a:	fd df       	rcall	.-6      	; 0x6746 <initVariant>
    674c:	0e 94 c5 13 	call	0x278a	; 0x278a <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    6750:	c5 ec       	ldi	r28, 0xC5	; 197
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    6752:	d1 e3       	ldi	r29, 0x31	; 49
    6754:	0e 94 cc 13 	call	0x2798	; 0x2798 <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    6758:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    675a:	e1 f3       	breq	.-8      	; 0x6754 <main+0xc>
    675c:	16 de       	rcall	.-980    	; 0x638a <_Z14serialEventRunv>
    675e:	fa cf       	rjmp	.-12     	; 0x6754 <main+0xc>

00006760 <_Znwj>:
    6760:	09 c7       	rjmp	.+3602   	; 0x7574 <malloc>

00006762 <_ZdlPv>:
    6762:	a0 c7       	rjmp	.+3904   	; 0x76a4 <free>

00006764 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    6764:	cf 92       	push	r12
    6766:	df 92       	push	r13
    6768:	ef 92       	push	r14
    676a:	ff 92       	push	r15
    676c:	0f 93       	push	r16
    676e:	1f 93       	push	r17
    6770:	cf 93       	push	r28
    6772:	df 93       	push	r29
    6774:	6c 01       	movw	r12, r24
    6776:	7a 01       	movw	r14, r20
    6778:	8b 01       	movw	r16, r22
    677a:	c0 e0       	ldi	r28, 0x00	; 0
    677c:	d0 e0       	ldi	r29, 0x00	; 0
    677e:	ce 15       	cp	r28, r14
    6780:	df 05       	cpc	r29, r15
    6782:	81 f0       	breq	.+32     	; 0x67a4 <_ZN5Print5writeEPKhj+0x40>
    6784:	d8 01       	movw	r26, r16
    6786:	6d 91       	ld	r22, X+
    6788:	8d 01       	movw	r16, r26
    678a:	d6 01       	movw	r26, r12
    678c:	ed 91       	ld	r30, X+
    678e:	fc 91       	ld	r31, X
    6790:	01 90       	ld	r0, Z+
    6792:	f0 81       	ld	r31, Z
    6794:	e0 2d       	mov	r30, r0
    6796:	c6 01       	movw	r24, r12
    6798:	19 95       	eicall
    679a:	89 2b       	or	r24, r25
    679c:	11 f0       	breq	.+4      	; 0x67a2 <_ZN5Print5writeEPKhj+0x3e>
    679e:	21 96       	adiw	r28, 0x01	; 1
    67a0:	ee cf       	rjmp	.-36     	; 0x677e <_ZN5Print5writeEPKhj+0x1a>
    67a2:	7e 01       	movw	r14, r28
    67a4:	c7 01       	movw	r24, r14
    67a6:	df 91       	pop	r29
    67a8:	cf 91       	pop	r28
    67aa:	1f 91       	pop	r17
    67ac:	0f 91       	pop	r16
    67ae:	ff 90       	pop	r15
    67b0:	ef 90       	pop	r14
    67b2:	df 90       	pop	r13
    67b4:	cf 90       	pop	r12
    67b6:	08 95       	ret

000067b8 <_ZN5Print5writeEPKc>:
    67b8:	61 15       	cp	r22, r1
    67ba:	71 05       	cpc	r23, r1
    67bc:	79 f0       	breq	.+30     	; 0x67dc <_ZN5Print5writeEPKc+0x24>
    67be:	fb 01       	movw	r30, r22
    67c0:	01 90       	ld	r0, Z+
    67c2:	00 20       	and	r0, r0
    67c4:	e9 f7       	brne	.-6      	; 0x67c0 <_ZN5Print5writeEPKc+0x8>
    67c6:	31 97       	sbiw	r30, 0x01	; 1
    67c8:	af 01       	movw	r20, r30
    67ca:	46 1b       	sub	r20, r22
    67cc:	57 0b       	sbc	r21, r23
    67ce:	dc 01       	movw	r26, r24
    67d0:	ed 91       	ld	r30, X+
    67d2:	fc 91       	ld	r31, X
    67d4:	02 80       	ldd	r0, Z+2	; 0x02
    67d6:	f3 81       	ldd	r31, Z+3	; 0x03
    67d8:	e0 2d       	mov	r30, r0
    67da:	19 94       	eijmp
    67dc:	80 e0       	ldi	r24, 0x00	; 0
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	08 95       	ret

000067e2 <_ZN5Print5printERK6String>:
    67e2:	db 01       	movw	r26, r22
    67e4:	14 96       	adiw	r26, 0x04	; 4
    67e6:	4d 91       	ld	r20, X+
    67e8:	5c 91       	ld	r21, X
    67ea:	15 97       	sbiw	r26, 0x05	; 5
    67ec:	6d 91       	ld	r22, X+
    67ee:	7c 91       	ld	r23, X
    67f0:	dc 01       	movw	r26, r24
    67f2:	ed 91       	ld	r30, X+
    67f4:	fc 91       	ld	r31, X
    67f6:	02 80       	ldd	r0, Z+2	; 0x02
    67f8:	f3 81       	ldd	r31, Z+3	; 0x03
    67fa:	e0 2d       	mov	r30, r0
    67fc:	19 94       	eijmp

000067fe <_ZN5Print5printEPKc>:
    67fe:	dc cf       	rjmp	.-72     	; 0x67b8 <_ZN5Print5writeEPKc>

00006800 <_ZN5Print5printEc>:
    6800:	dc 01       	movw	r26, r24
    6802:	ed 91       	ld	r30, X+
    6804:	fc 91       	ld	r31, X
    6806:	01 90       	ld	r0, Z+
    6808:	f0 81       	ld	r31, Z
    680a:	e0 2d       	mov	r30, r0
    680c:	19 94       	eijmp

0000680e <_ZN5Print7printlnEv>:
    680e:	69 e3       	ldi	r22, 0x39	; 57
    6810:	7a e0       	ldi	r23, 0x0A	; 10
    6812:	d2 cf       	rjmp	.-92     	; 0x67b8 <_ZN5Print5writeEPKc>

00006814 <_ZN5Print7printlnERK6String>:
    6814:	0f 93       	push	r16
    6816:	1f 93       	push	r17
    6818:	cf 93       	push	r28
    681a:	df 93       	push	r29
    681c:	ec 01       	movw	r28, r24
    681e:	e1 df       	rcall	.-62     	; 0x67e2 <_ZN5Print5printERK6String>
    6820:	8c 01       	movw	r16, r24
    6822:	ce 01       	movw	r24, r28
    6824:	f4 df       	rcall	.-24     	; 0x680e <_ZN5Print7printlnEv>
    6826:	80 0f       	add	r24, r16
    6828:	91 1f       	adc	r25, r17
    682a:	df 91       	pop	r29
    682c:	cf 91       	pop	r28
    682e:	1f 91       	pop	r17
    6830:	0f 91       	pop	r16
    6832:	08 95       	ret

00006834 <_ZN5Print7printlnEPKc>:
    6834:	0f 93       	push	r16
    6836:	1f 93       	push	r17
    6838:	cf 93       	push	r28
    683a:	df 93       	push	r29
    683c:	ec 01       	movw	r28, r24
    683e:	bc df       	rcall	.-136    	; 0x67b8 <_ZN5Print5writeEPKc>
    6840:	8c 01       	movw	r16, r24
    6842:	ce 01       	movw	r24, r28
    6844:	e4 df       	rcall	.-56     	; 0x680e <_ZN5Print7printlnEv>
    6846:	80 0f       	add	r24, r16
    6848:	91 1f       	adc	r25, r17
    684a:	df 91       	pop	r29
    684c:	cf 91       	pop	r28
    684e:	1f 91       	pop	r17
    6850:	0f 91       	pop	r16
    6852:	08 95       	ret

00006854 <_ZN5Print11printNumberEmh>:
    6854:	8f 92       	push	r8
    6856:	9f 92       	push	r9
    6858:	af 92       	push	r10
    685a:	bf 92       	push	r11
    685c:	ef 92       	push	r14
    685e:	ff 92       	push	r15
    6860:	0f 93       	push	r16
    6862:	1f 93       	push	r17
    6864:	cf 93       	push	r28
    6866:	df 93       	push	r29
    6868:	cd b7       	in	r28, 0x3d	; 61
    686a:	de b7       	in	r29, 0x3e	; 62
    686c:	a1 97       	sbiw	r28, 0x21	; 33
    686e:	0f b6       	in	r0, 0x3f	; 63
    6870:	f8 94       	cli
    6872:	de bf       	out	0x3e, r29	; 62
    6874:	0f be       	out	0x3f, r0	; 63
    6876:	cd bf       	out	0x3d, r28	; 61
    6878:	7c 01       	movw	r14, r24
    687a:	fa 01       	movw	r30, r20
    687c:	cb 01       	movw	r24, r22
    687e:	19 a2       	std	Y+33, r1	; 0x21
    6880:	22 30       	cpi	r18, 0x02	; 2
    6882:	08 f4       	brcc	.+2      	; 0x6886 <_ZN5Print11printNumberEmh+0x32>
    6884:	2a e0       	ldi	r18, 0x0A	; 10
    6886:	8e 01       	movw	r16, r28
    6888:	0f 5d       	subi	r16, 0xDF	; 223
    688a:	1f 4f       	sbci	r17, 0xFF	; 255
    688c:	82 2e       	mov	r8, r18
    688e:	91 2c       	mov	r9, r1
    6890:	a1 2c       	mov	r10, r1
    6892:	b1 2c       	mov	r11, r1
    6894:	bf 01       	movw	r22, r30
    6896:	a5 01       	movw	r20, r10
    6898:	94 01       	movw	r18, r8
    689a:	23 d6       	rcall	.+3142   	; 0x74e2 <__udivmodsi4>
    689c:	f9 01       	movw	r30, r18
    689e:	ca 01       	movw	r24, r20
    68a0:	01 50       	subi	r16, 0x01	; 1
    68a2:	11 09       	sbc	r17, r1
    68a4:	6a 30       	cpi	r22, 0x0A	; 10
    68a6:	10 f4       	brcc	.+4      	; 0x68ac <_ZN5Print11printNumberEmh+0x58>
    68a8:	60 5d       	subi	r22, 0xD0	; 208
    68aa:	01 c0       	rjmp	.+2      	; 0x68ae <_ZN5Print11printNumberEmh+0x5a>
    68ac:	69 5c       	subi	r22, 0xC9	; 201
    68ae:	d8 01       	movw	r26, r16
    68b0:	6c 93       	st	X, r22
    68b2:	23 2b       	or	r18, r19
    68b4:	24 2b       	or	r18, r20
    68b6:	25 2b       	or	r18, r21
    68b8:	69 f7       	brne	.-38     	; 0x6894 <_ZN5Print11printNumberEmh+0x40>
    68ba:	b8 01       	movw	r22, r16
    68bc:	c7 01       	movw	r24, r14
    68be:	7c df       	rcall	.-264    	; 0x67b8 <_ZN5Print5writeEPKc>
    68c0:	a1 96       	adiw	r28, 0x21	; 33
    68c2:	0f b6       	in	r0, 0x3f	; 63
    68c4:	f8 94       	cli
    68c6:	de bf       	out	0x3e, r29	; 62
    68c8:	0f be       	out	0x3f, r0	; 63
    68ca:	cd bf       	out	0x3d, r28	; 61
    68cc:	df 91       	pop	r29
    68ce:	cf 91       	pop	r28
    68d0:	1f 91       	pop	r17
    68d2:	0f 91       	pop	r16
    68d4:	ff 90       	pop	r15
    68d6:	ef 90       	pop	r14
    68d8:	bf 90       	pop	r11
    68da:	af 90       	pop	r10
    68dc:	9f 90       	pop	r9
    68de:	8f 90       	pop	r8
    68e0:	08 95       	ret

000068e2 <_ZN5Print5printEmi>:
    68e2:	21 15       	cp	r18, r1
    68e4:	31 05       	cpc	r19, r1
    68e6:	41 f4       	brne	.+16     	; 0x68f8 <_ZN5Print5printEmi+0x16>
    68e8:	dc 01       	movw	r26, r24
    68ea:	ed 91       	ld	r30, X+
    68ec:	fc 91       	ld	r31, X
    68ee:	01 90       	ld	r0, Z+
    68f0:	f0 81       	ld	r31, Z
    68f2:	e0 2d       	mov	r30, r0
    68f4:	64 2f       	mov	r22, r20
    68f6:	19 94       	eijmp
    68f8:	ad cf       	rjmp	.-166    	; 0x6854 <_ZN5Print11printNumberEmh>

000068fa <_ZN5Print5printEhi>:
    68fa:	9a 01       	movw	r18, r20
    68fc:	46 2f       	mov	r20, r22
    68fe:	50 e0       	ldi	r21, 0x00	; 0
    6900:	60 e0       	ldi	r22, 0x00	; 0
    6902:	70 e0       	ldi	r23, 0x00	; 0
    6904:	ee cf       	rjmp	.-36     	; 0x68e2 <_ZN5Print5printEmi>

00006906 <_ZN5Print5printEji>:
    6906:	9a 01       	movw	r18, r20
    6908:	ab 01       	movw	r20, r22
    690a:	60 e0       	ldi	r22, 0x00	; 0
    690c:	70 e0       	ldi	r23, 0x00	; 0
    690e:	e9 cf       	rjmp	.-46     	; 0x68e2 <_ZN5Print5printEmi>

00006910 <_ZN5Print7printlnEji>:
    6910:	0f 93       	push	r16
    6912:	1f 93       	push	r17
    6914:	cf 93       	push	r28
    6916:	df 93       	push	r29
    6918:	ec 01       	movw	r28, r24
    691a:	f5 df       	rcall	.-22     	; 0x6906 <_ZN5Print5printEji>
    691c:	8c 01       	movw	r16, r24
    691e:	ce 01       	movw	r24, r28
    6920:	76 df       	rcall	.-276    	; 0x680e <_ZN5Print7printlnEv>
    6922:	80 0f       	add	r24, r16
    6924:	91 1f       	adc	r25, r17
    6926:	df 91       	pop	r29
    6928:	cf 91       	pop	r28
    692a:	1f 91       	pop	r17
    692c:	0f 91       	pop	r16
    692e:	08 95       	ret

00006930 <_ZN5Print5printEli>:
    6930:	cf 92       	push	r12
    6932:	df 92       	push	r13
    6934:	ef 92       	push	r14
    6936:	ff 92       	push	r15
    6938:	0f 93       	push	r16
    693a:	1f 93       	push	r17
    693c:	cf 93       	push	r28
    693e:	df 93       	push	r29
    6940:	21 15       	cp	r18, r1
    6942:	31 05       	cpc	r19, r1
    6944:	81 f4       	brne	.+32     	; 0x6966 <_ZN5Print5printEli+0x36>
    6946:	dc 01       	movw	r26, r24
    6948:	ed 91       	ld	r30, X+
    694a:	fc 91       	ld	r31, X
    694c:	01 90       	ld	r0, Z+
    694e:	f0 81       	ld	r31, Z
    6950:	e0 2d       	mov	r30, r0
    6952:	64 2f       	mov	r22, r20
    6954:	df 91       	pop	r29
    6956:	cf 91       	pop	r28
    6958:	1f 91       	pop	r17
    695a:	0f 91       	pop	r16
    695c:	ff 90       	pop	r15
    695e:	ef 90       	pop	r14
    6960:	df 90       	pop	r13
    6962:	cf 90       	pop	r12
    6964:	19 94       	eijmp
    6966:	2a 30       	cpi	r18, 0x0A	; 10
    6968:	31 05       	cpc	r19, r1
    696a:	f1 f4       	brne	.+60     	; 0x69a8 <_ZN5Print5printEli+0x78>
    696c:	77 ff       	sbrs	r23, 7
    696e:	1b c0       	rjmp	.+54     	; 0x69a6 <_ZN5Print5printEli+0x76>
    6970:	6a 01       	movw	r12, r20
    6972:	7b 01       	movw	r14, r22
    6974:	ec 01       	movw	r28, r24
    6976:	6d e2       	ldi	r22, 0x2D	; 45
    6978:	43 df       	rcall	.-378    	; 0x6800 <_ZN5Print5printEc>
    697a:	8c 01       	movw	r16, r24
    697c:	44 27       	eor	r20, r20
    697e:	55 27       	eor	r21, r21
    6980:	ba 01       	movw	r22, r20
    6982:	4c 19       	sub	r20, r12
    6984:	5d 09       	sbc	r21, r13
    6986:	6e 09       	sbc	r22, r14
    6988:	7f 09       	sbc	r23, r15
    698a:	2a e0       	ldi	r18, 0x0A	; 10
    698c:	ce 01       	movw	r24, r28
    698e:	62 df       	rcall	.-316    	; 0x6854 <_ZN5Print11printNumberEmh>
    6990:	80 0f       	add	r24, r16
    6992:	91 1f       	adc	r25, r17
    6994:	df 91       	pop	r29
    6996:	cf 91       	pop	r28
    6998:	1f 91       	pop	r17
    699a:	0f 91       	pop	r16
    699c:	ff 90       	pop	r15
    699e:	ef 90       	pop	r14
    69a0:	df 90       	pop	r13
    69a2:	cf 90       	pop	r12
    69a4:	08 95       	ret
    69a6:	2a e0       	ldi	r18, 0x0A	; 10
    69a8:	df 91       	pop	r29
    69aa:	cf 91       	pop	r28
    69ac:	1f 91       	pop	r17
    69ae:	0f 91       	pop	r16
    69b0:	ff 90       	pop	r15
    69b2:	ef 90       	pop	r14
    69b4:	df 90       	pop	r13
    69b6:	cf 90       	pop	r12
    69b8:	4d cf       	rjmp	.-358    	; 0x6854 <_ZN5Print11printNumberEmh>

000069ba <_ZN5Print5printEii>:
    69ba:	9a 01       	movw	r18, r20
    69bc:	ab 01       	movw	r20, r22
    69be:	77 0f       	add	r23, r23
    69c0:	66 0b       	sbc	r22, r22
    69c2:	77 0b       	sbc	r23, r23
    69c4:	b5 cf       	rjmp	.-150    	; 0x6930 <_ZN5Print5printEli>

000069c6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    69c6:	7f 92       	push	r7
    69c8:	8f 92       	push	r8
    69ca:	9f 92       	push	r9
    69cc:	af 92       	push	r10
    69ce:	bf 92       	push	r11
    69d0:	cf 92       	push	r12
    69d2:	df 92       	push	r13
    69d4:	ef 92       	push	r14
    69d6:	ff 92       	push	r15
    69d8:	0f 93       	push	r16
    69da:	1f 93       	push	r17
    69dc:	cf 93       	push	r28
    69de:	df 93       	push	r29
    69e0:	8c 01       	movw	r16, r24
    69e2:	6a 01       	movw	r12, r20
    69e4:	7b 01       	movw	r14, r22
    69e6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    69e8:	9a 01       	movw	r18, r20
    69ea:	ab 01       	movw	r20, r22
    69ec:	c7 01       	movw	r24, r14
    69ee:	b6 01       	movw	r22, r12
    69f0:	4c d5       	rcall	.+2712   	; 0x748a <__unordsf2>
    69f2:	88 23       	and	r24, r24
    69f4:	19 f0       	breq	.+6      	; 0x69fc <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    69f6:	6c e3       	ldi	r22, 0x3C	; 60
    69f8:	7a e0       	ldi	r23, 0x0A	; 10
    69fa:	24 c0       	rjmp	.+72     	; 0x6a44 <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    69fc:	46 01       	movw	r8, r12
    69fe:	57 01       	movw	r10, r14
    6a00:	e8 94       	clt
    6a02:	b7 f8       	bld	r11, 7
    6a04:	2f ef       	ldi	r18, 0xFF	; 255
    6a06:	3f ef       	ldi	r19, 0xFF	; 255
    6a08:	4f e7       	ldi	r20, 0x7F	; 127
    6a0a:	5f e7       	ldi	r21, 0x7F	; 127
    6a0c:	c5 01       	movw	r24, r10
    6a0e:	b4 01       	movw	r22, r8
    6a10:	3c d5       	rcall	.+2680   	; 0x748a <__unordsf2>
    6a12:	81 11       	cpse	r24, r1
    6a14:	0c c0       	rjmp	.+24     	; 0x6a2e <_ZN5Print10printFloatEdh+0x68>
    6a16:	2f ef       	ldi	r18, 0xFF	; 255
    6a18:	3f ef       	ldi	r19, 0xFF	; 255
    6a1a:	4f e7       	ldi	r20, 0x7F	; 127
    6a1c:	5f e7       	ldi	r21, 0x7F	; 127
    6a1e:	c5 01       	movw	r24, r10
    6a20:	b4 01       	movw	r22, r8
    6a22:	8e d4       	rcall	.+2332   	; 0x7340 <__cmpsf2>
    6a24:	18 16       	cp	r1, r24
    6a26:	1c f4       	brge	.+6      	; 0x6a2e <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6a28:	60 e4       	ldi	r22, 0x40	; 64
    6a2a:	7a e0       	ldi	r23, 0x0A	; 10
    6a2c:	0b c0       	rjmp	.+22     	; 0x6a44 <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    6a2e:	2f ef       	ldi	r18, 0xFF	; 255
    6a30:	3f ef       	ldi	r19, 0xFF	; 255
    6a32:	4f e7       	ldi	r20, 0x7F	; 127
    6a34:	5f e4       	ldi	r21, 0x4F	; 79
    6a36:	c7 01       	movw	r24, r14
    6a38:	b6 01       	movw	r22, r12
    6a3a:	ec db       	rcall	.-2088   	; 0x6214 <__gesf2>
    6a3c:	18 16       	cp	r1, r24
    6a3e:	8c f4       	brge	.+34     	; 0x6a62 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6a40:	64 e4       	ldi	r22, 0x44	; 68
    6a42:	7a e0       	ldi	r23, 0x0A	; 10
    6a44:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    6a46:	df 91       	pop	r29
    6a48:	cf 91       	pop	r28
    6a4a:	1f 91       	pop	r17
    6a4c:	0f 91       	pop	r16
    6a4e:	ff 90       	pop	r15
    6a50:	ef 90       	pop	r14
    6a52:	df 90       	pop	r13
    6a54:	cf 90       	pop	r12
    6a56:	bf 90       	pop	r11
    6a58:	af 90       	pop	r10
    6a5a:	9f 90       	pop	r9
    6a5c:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6a5e:	7f 90       	pop	r7
    6a60:	ab ce       	rjmp	.-682    	; 0x67b8 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    6a62:	2f ef       	ldi	r18, 0xFF	; 255
    6a64:	3f ef       	ldi	r19, 0xFF	; 255
    6a66:	4f e7       	ldi	r20, 0x7F	; 127
    6a68:	5f ec       	ldi	r21, 0xCF	; 207
    6a6a:	c7 01       	movw	r24, r14
    6a6c:	b6 01       	movw	r22, r12
    6a6e:	68 d4       	rcall	.+2256   	; 0x7340 <__cmpsf2>
    6a70:	87 fd       	sbrc	r24, 7
    6a72:	e6 cf       	rjmp	.-52     	; 0x6a40 <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    6a74:	20 e0       	ldi	r18, 0x00	; 0
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	a9 01       	movw	r20, r18
    6a7a:	c7 01       	movw	r24, r14
    6a7c:	b6 01       	movw	r22, r12
    6a7e:	60 d4       	rcall	.+2240   	; 0x7340 <__cmpsf2>
    6a80:	87 ff       	sbrs	r24, 7
    6a82:	09 c0       	rjmp	.+18     	; 0x6a96 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    6a84:	6d e2       	ldi	r22, 0x2D	; 45
    6a86:	c8 01       	movw	r24, r16
    6a88:	bb de       	rcall	.-650    	; 0x6800 <_ZN5Print5printEc>
    6a8a:	ec 01       	movw	r28, r24
    6a8c:	f7 fa       	bst	r15, 7
     number = -number;
    6a8e:	f0 94       	com	r15
    6a90:	f7 f8       	bld	r15, 7
    6a92:	f0 94       	com	r15
    6a94:	02 c0       	rjmp	.+4      	; 0x6a9a <_ZN5Print10printFloatEdh+0xd4>
    6a96:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    6a98:	d0 e0       	ldi	r29, 0x00	; 0
    6a9a:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6a9c:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    6a9e:	70 e0       	ldi	r23, 0x00	; 0
    6aa0:	80 e0       	ldi	r24, 0x00	; 0
    6aa2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    6aa4:	7b 14       	cp	r7, r11
    6aa6:	39 f0       	breq	.+14     	; 0x6ab6 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    6aa8:	20 e0       	ldi	r18, 0x00	; 0
    6aaa:	30 e0       	ldi	r19, 0x00	; 0
    6aac:	40 e2       	ldi	r20, 0x20	; 32
    6aae:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    6ab0:	4c d4       	rcall	.+2200   	; 0x734a <__divsf3>
    6ab2:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    6ab4:	f7 cf       	rjmp	.-18     	; 0x6aa4 <_ZN5Print10printFloatEdh+0xde>
    6ab6:	a7 01       	movw	r20, r14
    6ab8:	96 01       	movw	r18, r12
    6aba:	ba da       	rcall	.-2700   	; 0x6030 <__addsf3>
    6abc:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    6abe:	7c 01       	movw	r14, r24
    6ac0:	b5 d4       	rcall	.+2410   	; 0x742c <__fixunssfsi>
    6ac2:	4b 01       	movw	r8, r22
    6ac4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    6ac6:	2a e0       	ldi	r18, 0x0A	; 10
    6ac8:	ab 01       	movw	r20, r22
    6aca:	bc 01       	movw	r22, r24
    6acc:	c8 01       	movw	r24, r16
    6ace:	c2 de       	rcall	.-636    	; 0x6854 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    6ad0:	c8 0f       	add	r28, r24
    6ad2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    6ad4:	77 20       	and	r7, r7
    6ad6:	81 f1       	breq	.+96     	; 0x6b38 <_ZN5Print10printFloatEdh+0x172>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    6ad8:	c5 01       	movw	r24, r10
    6ada:	b4 01       	movw	r22, r8
    6adc:	0d db       	rcall	.-2534   	; 0x60f8 <__floatunsisf>
    6ade:	9b 01       	movw	r18, r22
    6ae0:	ac 01       	movw	r20, r24
    6ae2:	c7 01       	movw	r24, r14
    6ae4:	b6 01       	movw	r22, r12
    6ae6:	a3 da       	rcall	.-2746   	; 0x602e <__subsf3>
    6ae8:	6b 01       	movw	r12, r22
    6aea:	7c 01       	movw	r14, r24
    6aec:	68 e4       	ldi	r22, 0x48	; 72
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    6aee:	7a e0       	ldi	r23, 0x0A	; 10
    6af0:	c8 01       	movw	r24, r16
    6af2:	62 de       	rcall	.-828    	; 0x67b8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    6af4:	c8 0f       	add	r28, r24
    6af6:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    6af8:	20 e0       	ldi	r18, 0x00	; 0
    6afa:	30 e0       	ldi	r19, 0x00	; 0
    6afc:	40 e2       	ldi	r20, 0x20	; 32
    6afe:	51 e4       	ldi	r21, 0x41	; 65
    6b00:	c7 01       	movw	r24, r14
    6b02:	b6 01       	movw	r22, r12
    6b04:	8b db       	rcall	.-2282   	; 0x621c <__mulsf3>
    6b06:	4b 01       	movw	r8, r22
    unsigned int toPrint = (unsigned int)(remainder);
    6b08:	5c 01       	movw	r10, r24
    6b0a:	90 d4       	rcall	.+2336   	; 0x742c <__fixunssfsi>
    6b0c:	6b 01       	movw	r12, r22
    n += print(toPrint);
    6b0e:	7c 01       	movw	r14, r24
    6b10:	4a e0       	ldi	r20, 0x0A	; 10
    6b12:	50 e0       	ldi	r21, 0x00	; 0
    6b14:	c8 01       	movw	r24, r16
    6b16:	f7 de       	rcall	.-530    	; 0x6906 <_ZN5Print5printEji>
    6b18:	c8 0f       	add	r28, r24
    6b1a:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    6b1c:	b6 01       	movw	r22, r12
    6b1e:	80 e0       	ldi	r24, 0x00	; 0
    6b20:	90 e0       	ldi	r25, 0x00	; 0
    6b22:	ea da       	rcall	.-2604   	; 0x60f8 <__floatunsisf>
    6b24:	9b 01       	movw	r18, r22
    6b26:	ac 01       	movw	r20, r24
    6b28:	c5 01       	movw	r24, r10
    6b2a:	b4 01       	movw	r22, r8
    6b2c:	80 da       	rcall	.-2816   	; 0x602e <__subsf3>
    6b2e:	6b 01       	movw	r12, r22
    6b30:	7c 01       	movw	r14, r24
    6b32:	7a 94       	dec	r7
    6b34:	71 10       	cpse	r7, r1
    6b36:	e0 cf       	rjmp	.-64     	; 0x6af8 <_ZN5Print10printFloatEdh+0x132>
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    6b38:	ce 01       	movw	r24, r28
    6b3a:	df 91       	pop	r29
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    6b3c:	cf 91       	pop	r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    6b3e:	1f 91       	pop	r17
    6b40:	0f 91       	pop	r16
    6b42:	ff 90       	pop	r15
    6b44:	ef 90       	pop	r14
    6b46:	df 90       	pop	r13
    6b48:	cf 90       	pop	r12
    6b4a:	bf 90       	pop	r11
    6b4c:	af 90       	pop	r10
    6b4e:	9f 90       	pop	r9
    6b50:	8f 90       	pop	r8
    6b52:	7f 90       	pop	r7
    6b54:	08 95       	ret

00006b56 <_ZN5Print5printEdi>:
    6b56:	37 cf       	rjmp	.-402    	; 0x69c6 <_ZN5Print10printFloatEdh>

00006b58 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    6b58:	1f 92       	push	r1
    6b5a:	0f 92       	push	r0
    6b5c:	0f b6       	in	r0, 0x3f	; 63
    6b5e:	0f 92       	push	r0
    6b60:	11 24       	eor	r1, r1
    6b62:	2f 93       	push	r18
    6b64:	3f 93       	push	r19
    6b66:	8f 93       	push	r24
    6b68:	9f 93       	push	r25
    6b6a:	af 93       	push	r26
    6b6c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    6b6e:	80 91 f3 0a 	lds	r24, 0x0AF3	; 0x800af3 <timer0_millis>
    6b72:	90 91 f4 0a 	lds	r25, 0x0AF4	; 0x800af4 <timer0_millis+0x1>
    6b76:	a0 91 f5 0a 	lds	r26, 0x0AF5	; 0x800af5 <timer0_millis+0x2>
    6b7a:	b0 91 f6 0a 	lds	r27, 0x0AF6	; 0x800af6 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    6b7e:	30 91 f2 0a 	lds	r19, 0x0AF2	; 0x800af2 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    6b82:	23 e0       	ldi	r18, 0x03	; 3
    6b84:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    6b86:	2d 37       	cpi	r18, 0x7D	; 125
    6b88:	20 f4       	brcc	.+8      	; 0x6b92 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    6b8a:	01 96       	adiw	r24, 0x01	; 1
    6b8c:	a1 1d       	adc	r26, r1
    6b8e:	b1 1d       	adc	r27, r1
    6b90:	05 c0       	rjmp	.+10     	; 0x6b9c <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    6b92:	26 e8       	ldi	r18, 0x86	; 134
    6b94:	23 0f       	add	r18, r19
		m += 1;
    6b96:	02 96       	adiw	r24, 0x02	; 2
    6b98:	a1 1d       	adc	r26, r1
    6b9a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    6b9c:	20 93 f2 0a 	sts	0x0AF2, r18	; 0x800af2 <timer0_fract>
	timer0_millis = m;
    6ba0:	80 93 f3 0a 	sts	0x0AF3, r24	; 0x800af3 <timer0_millis>
    6ba4:	90 93 f4 0a 	sts	0x0AF4, r25	; 0x800af4 <timer0_millis+0x1>
    6ba8:	a0 93 f5 0a 	sts	0x0AF5, r26	; 0x800af5 <timer0_millis+0x2>
    6bac:	b0 93 f6 0a 	sts	0x0AF6, r27	; 0x800af6 <timer0_millis+0x3>
	timer0_overflow_count++;
    6bb0:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <timer0_overflow_count>
    6bb4:	90 91 f8 0a 	lds	r25, 0x0AF8	; 0x800af8 <timer0_overflow_count+0x1>
    6bb8:	a0 91 f9 0a 	lds	r26, 0x0AF9	; 0x800af9 <timer0_overflow_count+0x2>
    6bbc:	b0 91 fa 0a 	lds	r27, 0x0AFA	; 0x800afa <timer0_overflow_count+0x3>
    6bc0:	01 96       	adiw	r24, 0x01	; 1
    6bc2:	a1 1d       	adc	r26, r1
    6bc4:	b1 1d       	adc	r27, r1
    6bc6:	80 93 f7 0a 	sts	0x0AF7, r24	; 0x800af7 <timer0_overflow_count>
    6bca:	90 93 f8 0a 	sts	0x0AF8, r25	; 0x800af8 <timer0_overflow_count+0x1>
    6bce:	a0 93 f9 0a 	sts	0x0AF9, r26	; 0x800af9 <timer0_overflow_count+0x2>
    6bd2:	b0 93 fa 0a 	sts	0x0AFA, r27	; 0x800afa <timer0_overflow_count+0x3>
}
    6bd6:	bf 91       	pop	r27
    6bd8:	af 91       	pop	r26
    6bda:	9f 91       	pop	r25
    6bdc:	8f 91       	pop	r24
    6bde:	3f 91       	pop	r19
    6be0:	2f 91       	pop	r18
    6be2:	0f 90       	pop	r0
    6be4:	0f be       	out	0x3f, r0	; 63
    6be6:	0f 90       	pop	r0
    6be8:	1f 90       	pop	r1
    6bea:	18 95       	reti

00006bec <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    6bec:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    6bee:	f8 94       	cli
	m = timer0_millis;
    6bf0:	60 91 f3 0a 	lds	r22, 0x0AF3	; 0x800af3 <timer0_millis>
    6bf4:	70 91 f4 0a 	lds	r23, 0x0AF4	; 0x800af4 <timer0_millis+0x1>
    6bf8:	80 91 f5 0a 	lds	r24, 0x0AF5	; 0x800af5 <timer0_millis+0x2>
    6bfc:	90 91 f6 0a 	lds	r25, 0x0AF6	; 0x800af6 <timer0_millis+0x3>
	SREG = oldSREG;
    6c00:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    6c02:	08 95       	ret

00006c04 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    6c04:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    6c06:	f8 94       	cli
	m = timer0_overflow_count;
    6c08:	80 91 f7 0a 	lds	r24, 0x0AF7	; 0x800af7 <timer0_overflow_count>
    6c0c:	90 91 f8 0a 	lds	r25, 0x0AF8	; 0x800af8 <timer0_overflow_count+0x1>
    6c10:	a0 91 f9 0a 	lds	r26, 0x0AF9	; 0x800af9 <timer0_overflow_count+0x2>
    6c14:	b0 91 fa 0a 	lds	r27, 0x0AFA	; 0x800afa <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    6c18:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    6c1a:	a8 9b       	sbis	0x15, 0	; 21
    6c1c:	05 c0       	rjmp	.+10     	; 0x6c28 <micros+0x24>
    6c1e:	2f 3f       	cpi	r18, 0xFF	; 255
    6c20:	19 f0       	breq	.+6      	; 0x6c28 <micros+0x24>
		m++;
    6c22:	01 96       	adiw	r24, 0x01	; 1
    6c24:	a1 1d       	adc	r26, r1
    6c26:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    6c28:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    6c2a:	ba 2f       	mov	r27, r26
    6c2c:	a9 2f       	mov	r26, r25
    6c2e:	98 2f       	mov	r25, r24
    6c30:	88 27       	eor	r24, r24
    6c32:	82 0f       	add	r24, r18
    6c34:	91 1d       	adc	r25, r1
    6c36:	a1 1d       	adc	r26, r1
    6c38:	b1 1d       	adc	r27, r1
    6c3a:	bc 01       	movw	r22, r24
    6c3c:	cd 01       	movw	r24, r26
    6c3e:	42 e0       	ldi	r20, 0x02	; 2
    6c40:	66 0f       	add	r22, r22
    6c42:	77 1f       	adc	r23, r23
    6c44:	88 1f       	adc	r24, r24
    6c46:	99 1f       	adc	r25, r25
    6c48:	4a 95       	dec	r20
    6c4a:	d1 f7       	brne	.-12     	; 0x6c40 <micros+0x3c>
}
    6c4c:	08 95       	ret

00006c4e <delay>:

void delay(unsigned long ms)
{
    6c4e:	8f 92       	push	r8
    6c50:	9f 92       	push	r9
    6c52:	af 92       	push	r10
    6c54:	bf 92       	push	r11
    6c56:	cf 92       	push	r12
    6c58:	df 92       	push	r13
    6c5a:	ef 92       	push	r14
    6c5c:	ff 92       	push	r15
    6c5e:	6b 01       	movw	r12, r22
    6c60:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    6c62:	d0 df       	rcall	.-96     	; 0x6c04 <micros>
    6c64:	4b 01       	movw	r8, r22
    6c66:	5c 01       	movw	r10, r24

	while (ms > 0) {
    6c68:	c1 14       	cp	r12, r1
    6c6a:	d1 04       	cpc	r13, r1
    6c6c:	e1 04       	cpc	r14, r1
    6c6e:	f1 04       	cpc	r15, r1
		yield();
    6c70:	f1 f0       	breq	.+60     	; 0x6cae <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    6c72:	65 d3       	rcall	.+1738   	; 0x733e <yield>
    6c74:	c7 df       	rcall	.-114    	; 0x6c04 <micros>
    6c76:	dc 01       	movw	r26, r24
    6c78:	cb 01       	movw	r24, r22
    6c7a:	88 19       	sub	r24, r8
    6c7c:	99 09       	sbc	r25, r9
    6c7e:	aa 09       	sbc	r26, r10
    6c80:	bb 09       	sbc	r27, r11
    6c82:	88 3e       	cpi	r24, 0xE8	; 232
    6c84:	93 40       	sbci	r25, 0x03	; 3
    6c86:	a1 05       	cpc	r26, r1
    6c88:	b1 05       	cpc	r27, r1
    6c8a:	70 f3       	brcs	.-36     	; 0x6c68 <delay+0x1a>
			ms--;
    6c8c:	21 e0       	ldi	r18, 0x01	; 1
    6c8e:	c2 1a       	sub	r12, r18
    6c90:	d1 08       	sbc	r13, r1
    6c92:	e1 08       	sbc	r14, r1
    6c94:	f1 08       	sbc	r15, r1
			start += 1000;
    6c96:	88 ee       	ldi	r24, 0xE8	; 232
    6c98:	88 0e       	add	r8, r24
    6c9a:	83 e0       	ldi	r24, 0x03	; 3
    6c9c:	98 1e       	adc	r9, r24
    6c9e:	a1 1c       	adc	r10, r1
    6ca0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    6ca2:	c1 14       	cp	r12, r1
    6ca4:	d1 04       	cpc	r13, r1
    6ca6:	e1 04       	cpc	r14, r1
    6ca8:	f1 04       	cpc	r15, r1
    6caa:	21 f7       	brne	.-56     	; 0x6c74 <delay+0x26>
    6cac:	dd cf       	rjmp	.-70     	; 0x6c68 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    6cae:	ff 90       	pop	r15
    6cb0:	ef 90       	pop	r14
    6cb2:	df 90       	pop	r13
    6cb4:	cf 90       	pop	r12
    6cb6:	bf 90       	pop	r11
    6cb8:	af 90       	pop	r10
    6cba:	9f 90       	pop	r9
    6cbc:	8f 90       	pop	r8
    6cbe:	08 95       	ret

00006cc0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    6cc0:	82 30       	cpi	r24, 0x02	; 2
    6cc2:	91 05       	cpc	r25, r1
    6cc4:	38 f0       	brcs	.+14     	; 0x6cd4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    6cc6:	88 0f       	add	r24, r24
    6cc8:	99 1f       	adc	r25, r25
    6cca:	88 0f       	add	r24, r24
    6ccc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    6cce:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6cd0:	01 97       	sbiw	r24, 0x01	; 1
    6cd2:	f1 f7       	brne	.-4      	; 0x6cd0 <delayMicroseconds+0x10>
    6cd4:	08 95       	ret

00006cd6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6cd6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6cd8:	84 b5       	in	r24, 0x24	; 36
    6cda:	82 60       	ori	r24, 0x02	; 2
    6cdc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    6cde:	84 b5       	in	r24, 0x24	; 36
    6ce0:	81 60       	ori	r24, 0x01	; 1
    6ce2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6ce4:	85 b5       	in	r24, 0x25	; 37
    6ce6:	82 60       	ori	r24, 0x02	; 2
    6ce8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    6cea:	85 b5       	in	r24, 0x25	; 37
    6cec:	81 60       	ori	r24, 0x01	; 1
    6cee:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6cf0:	ee e6       	ldi	r30, 0x6E	; 110
    6cf2:	f0 e0       	ldi	r31, 0x00	; 0
    6cf4:	80 81       	ld	r24, Z
    6cf6:	81 60       	ori	r24, 0x01	; 1
    6cf8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    6cfa:	e1 e8       	ldi	r30, 0x81	; 129
    6cfc:	f0 e0       	ldi	r31, 0x00	; 0
    6cfe:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6d00:	80 81       	ld	r24, Z
    6d02:	82 60       	ori	r24, 0x02	; 2
    6d04:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6d06:	80 81       	ld	r24, Z
    6d08:	81 60       	ori	r24, 0x01	; 1
    6d0a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    6d0c:	e0 e8       	ldi	r30, 0x80	; 128
    6d0e:	f0 e0       	ldi	r31, 0x00	; 0
    6d10:	80 81       	ld	r24, Z
    6d12:	81 60       	ori	r24, 0x01	; 1
    6d14:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6d16:	e1 eb       	ldi	r30, 0xB1	; 177
    6d18:	f0 e0       	ldi	r31, 0x00	; 0
    6d1a:	80 81       	ld	r24, Z
    6d1c:	84 60       	ori	r24, 0x04	; 4
    6d1e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6d20:	e0 eb       	ldi	r30, 0xB0	; 176
    6d22:	f0 e0       	ldi	r31, 0x00	; 0
    6d24:	80 81       	ld	r24, Z
    6d26:	81 60       	ori	r24, 0x01	; 1
    6d28:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    6d2a:	e1 e9       	ldi	r30, 0x91	; 145
    6d2c:	f0 e0       	ldi	r31, 0x00	; 0
    6d2e:	80 81       	ld	r24, Z
    6d30:	82 60       	ori	r24, 0x02	; 2
    6d32:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6d34:	80 81       	ld	r24, Z
    6d36:	81 60       	ori	r24, 0x01	; 1
    6d38:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    6d3a:	e0 e9       	ldi	r30, 0x90	; 144
    6d3c:	f0 e0       	ldi	r31, 0x00	; 0
    6d3e:	80 81       	ld	r24, Z
    6d40:	81 60       	ori	r24, 0x01	; 1
    6d42:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6d44:	e1 ea       	ldi	r30, 0xA1	; 161
    6d46:	f0 e0       	ldi	r31, 0x00	; 0
    6d48:	80 81       	ld	r24, Z
    6d4a:	82 60       	ori	r24, 0x02	; 2
    6d4c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    6d4e:	80 81       	ld	r24, Z
    6d50:	81 60       	ori	r24, 0x01	; 1
    6d52:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6d54:	e0 ea       	ldi	r30, 0xA0	; 160
    6d56:	f0 e0       	ldi	r31, 0x00	; 0
    6d58:	80 81       	ld	r24, Z
    6d5a:	81 60       	ori	r24, 0x01	; 1
    6d5c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    6d5e:	e1 e2       	ldi	r30, 0x21	; 33
    6d60:	f1 e0       	ldi	r31, 0x01	; 1
    6d62:	80 81       	ld	r24, Z
    6d64:	82 60       	ori	r24, 0x02	; 2
    6d66:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    6d68:	80 81       	ld	r24, Z
    6d6a:	81 60       	ori	r24, 0x01	; 1
    6d6c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    6d6e:	e0 e2       	ldi	r30, 0x20	; 32
    6d70:	f1 e0       	ldi	r31, 0x01	; 1
    6d72:	80 81       	ld	r24, Z
    6d74:	81 60       	ori	r24, 0x01	; 1
    6d76:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    6d78:	ea e7       	ldi	r30, 0x7A	; 122
    6d7a:	f0 e0       	ldi	r31, 0x00	; 0
    6d7c:	80 81       	ld	r24, Z
    6d7e:	84 60       	ori	r24, 0x04	; 4
    6d80:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    6d82:	80 81       	ld	r24, Z
    6d84:	82 60       	ori	r24, 0x02	; 2
    6d86:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    6d88:	80 81       	ld	r24, Z
    6d8a:	81 60       	ori	r24, 0x01	; 1
    6d8c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    6d8e:	80 81       	ld	r24, Z
    6d90:	80 68       	ori	r24, 0x80	; 128
    6d92:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    6d94:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    6d98:	08 95       	ret

00006d9a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    6d9a:	90 e0       	ldi	r25, 0x00	; 0
    6d9c:	fc 01       	movw	r30, r24
    6d9e:	31 97       	sbiw	r30, 0x01	; 1
    6da0:	e2 31       	cpi	r30, 0x12	; 18
    6da2:	f1 05       	cpc	r31, r1
    6da4:	08 f0       	brcs	.+2      	; 0x6da8 <turnOffPWM+0xe>
    6da6:	4d c0       	rjmp	.+154    	; 0x6e42 <turnOffPWM+0xa8>
    6da8:	88 27       	eor	r24, r24
    6daa:	e0 54       	subi	r30, 0x40	; 64
    6dac:	ff 4f       	sbci	r31, 0xFF	; 255
    6dae:	8f 4f       	sbci	r24, 0xFF	; 255
    6db0:	ba c3       	rjmp	.+1908   	; 0x7526 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    6db2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    6db6:	8f 77       	andi	r24, 0x7F	; 127
    6db8:	03 c0       	rjmp	.+6      	; 0x6dc0 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    6dba:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    6dbe:	8f 7d       	andi	r24, 0xDF	; 223
    6dc0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    6dc4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    6dc6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    6dca:	87 7f       	andi	r24, 0xF7	; 247
    6dcc:	f9 cf       	rjmp	.-14     	; 0x6dc0 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    6dce:	84 b5       	in	r24, 0x24	; 36
    6dd0:	8f 77       	andi	r24, 0x7F	; 127
    6dd2:	02 c0       	rjmp	.+4      	; 0x6dd8 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6dd4:	84 b5       	in	r24, 0x24	; 36
    6dd6:	8f 7d       	andi	r24, 0xDF	; 223
    6dd8:	84 bd       	out	0x24, r24	; 36
    6dda:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    6ddc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    6de0:	8f 77       	andi	r24, 0x7F	; 127
    6de2:	03 c0       	rjmp	.+6      	; 0x6dea <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6de4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    6de8:	8f 7d       	andi	r24, 0xDF	; 223
    6dea:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    6dee:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6df0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    6df4:	8f 77       	andi	r24, 0x7F	; 127
    6df6:	07 c0       	rjmp	.+14     	; 0x6e06 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6df8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    6dfc:	8f 7d       	andi	r24, 0xDF	; 223
    6dfe:	03 c0       	rjmp	.+6      	; 0x6e06 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6e00:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    6e04:	87 7f       	andi	r24, 0xF7	; 247
    6e06:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    6e0a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    6e0c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6e10:	8f 77       	andi	r24, 0x7F	; 127
    6e12:	07 c0       	rjmp	.+14     	; 0x6e22 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    6e14:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6e18:	8f 7d       	andi	r24, 0xDF	; 223
    6e1a:	03 c0       	rjmp	.+6      	; 0x6e22 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    6e1c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6e20:	87 7f       	andi	r24, 0xF7	; 247
    6e22:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6e26:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6e28:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    6e2c:	8f 77       	andi	r24, 0x7F	; 127
    6e2e:	07 c0       	rjmp	.+14     	; 0x6e3e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6e30:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    6e34:	8f 7d       	andi	r24, 0xDF	; 223
    6e36:	03 c0       	rjmp	.+6      	; 0x6e3e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6e38:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    6e3c:	87 7f       	andi	r24, 0xF7	; 247
    6e3e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    6e42:	08 95       	ret

00006e44 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6e44:	cf 93       	push	r28
    6e46:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	fc 01       	movw	r30, r24
    6e4c:	ec 51       	subi	r30, 0x1C	; 28
    6e4e:	fc 4f       	sbci	r31, 0xFC	; 252
    6e50:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6e52:	fc 01       	movw	r30, r24
    6e54:	e6 5d       	subi	r30, 0xD6	; 214
    6e56:	fb 4f       	sbci	r31, 0xFB	; 251
    6e58:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    6e5a:	88 23       	and	r24, r24
    6e5c:	61 f1       	breq	.+88     	; 0x6eb6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	88 0f       	add	r24, r24
    6e62:	99 1f       	adc	r25, r25
    6e64:	fc 01       	movw	r30, r24
    6e66:	ec 55       	subi	r30, 0x5C	; 92
    6e68:	fb 4f       	sbci	r31, 0xFB	; 251
    6e6a:	c5 91       	lpm	r28, Z+
    6e6c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    6e6e:	fc 01       	movw	r30, r24
    6e70:	e6 57       	subi	r30, 0x76	; 118
    6e72:	fb 4f       	sbci	r31, 0xFB	; 251
    6e74:	a5 91       	lpm	r26, Z+
    6e76:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    6e78:	61 11       	cpse	r22, r1
    6e7a:	09 c0       	rjmp	.+18     	; 0x6e8e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    6e7c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6e7e:	f8 94       	cli
		*reg &= ~bit;
    6e80:	88 81       	ld	r24, Y
    6e82:	20 95       	com	r18
    6e84:	82 23       	and	r24, r18
    6e86:	88 83       	st	Y, r24
		*out &= ~bit;
    6e88:	ec 91       	ld	r30, X
    6e8a:	2e 23       	and	r18, r30
    6e8c:	0b c0       	rjmp	.+22     	; 0x6ea4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    6e8e:	62 30       	cpi	r22, 0x02	; 2
    6e90:	61 f4       	brne	.+24     	; 0x6eaa <pinMode+0x66>
		uint8_t oldSREG = SREG;
    6e92:	9f b7       	in	r25, 0x3f	; 63
                cli();
    6e94:	f8 94       	cli
		*reg &= ~bit;
    6e96:	88 81       	ld	r24, Y
    6e98:	32 2f       	mov	r19, r18
    6e9a:	30 95       	com	r19
    6e9c:	83 23       	and	r24, r19
    6e9e:	88 83       	st	Y, r24
		*out |= bit;
    6ea0:	ec 91       	ld	r30, X
    6ea2:	2e 2b       	or	r18, r30
    6ea4:	2c 93       	st	X, r18
		SREG = oldSREG;
    6ea6:	9f bf       	out	0x3f, r25	; 63
    6ea8:	06 c0       	rjmp	.+12     	; 0x6eb6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    6eaa:	8f b7       	in	r24, 0x3f	; 63
                cli();
    6eac:	f8 94       	cli
		*reg |= bit;
    6eae:	e8 81       	ld	r30, Y
    6eb0:	2e 2b       	or	r18, r30
    6eb2:	28 83       	st	Y, r18
		SREG = oldSREG;
    6eb4:	8f bf       	out	0x3f, r24	; 63
	}
}
    6eb6:	df 91       	pop	r29
    6eb8:	cf 91       	pop	r28
    6eba:	08 95       	ret

00006ebc <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    6ebc:	1f 93       	push	r17
    6ebe:	cf 93       	push	r28
    6ec0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6ec2:	28 2f       	mov	r18, r24
    6ec4:	30 e0       	ldi	r19, 0x00	; 0
    6ec6:	f9 01       	movw	r30, r18
    6ec8:	e2 56       	subi	r30, 0x62	; 98
    6eca:	fc 4f       	sbci	r31, 0xFC	; 252
    6ecc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6ece:	f9 01       	movw	r30, r18
    6ed0:	ec 51       	subi	r30, 0x1C	; 28
    6ed2:	fc 4f       	sbci	r31, 0xFC	; 252
    6ed4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6ed6:	f9 01       	movw	r30, r18
    6ed8:	e6 5d       	subi	r30, 0xD6	; 214
    6eda:	fb 4f       	sbci	r31, 0xFB	; 251
    6edc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    6ede:	cc 23       	and	r28, r28
    6ee0:	b9 f0       	breq	.+46     	; 0x6f10 <digitalWrite+0x54>
    6ee2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6ee4:	81 11       	cpse	r24, r1
    6ee6:	59 df       	rcall	.-334    	; 0x6d9a <turnOffPWM>

	out = portOutputRegister(port);
    6ee8:	ec 2f       	mov	r30, r28
    6eea:	f0 e0       	ldi	r31, 0x00	; 0
    6eec:	ee 0f       	add	r30, r30
    6eee:	ff 1f       	adc	r31, r31
    6ef0:	e6 57       	subi	r30, 0x76	; 118
    6ef2:	fb 4f       	sbci	r31, 0xFB	; 251
    6ef4:	a5 91       	lpm	r26, Z+
    6ef6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6ef8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    6efa:	f8 94       	cli

	if (val == LOW) {
    6efc:	11 11       	cpse	r17, r1
    6efe:	04 c0       	rjmp	.+8      	; 0x6f08 <digitalWrite+0x4c>
		*out &= ~bit;
    6f00:	8c 91       	ld	r24, X
    6f02:	d0 95       	com	r29
    6f04:	d8 23       	and	r29, r24
    6f06:	02 c0       	rjmp	.+4      	; 0x6f0c <digitalWrite+0x50>
	} else {
		*out |= bit;
    6f08:	ec 91       	ld	r30, X
    6f0a:	de 2b       	or	r29, r30
    6f0c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    6f0e:	9f bf       	out	0x3f, r25	; 63
}
    6f10:	df 91       	pop	r29
    6f12:	cf 91       	pop	r28
    6f14:	1f 91       	pop	r17
    6f16:	08 95       	ret

00006f18 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6f18:	cf 93       	push	r28
    6f1a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    6f1c:	28 2f       	mov	r18, r24
    6f1e:	30 e0       	ldi	r19, 0x00	; 0
    6f20:	f9 01       	movw	r30, r18
    6f22:	e2 56       	subi	r30, 0x62	; 98
    6f24:	fc 4f       	sbci	r31, 0xFC	; 252
    6f26:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6f28:	f9 01       	movw	r30, r18
    6f2a:	ec 51       	subi	r30, 0x1C	; 28
    6f2c:	fc 4f       	sbci	r31, 0xFC	; 252
    6f2e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6f30:	f9 01       	movw	r30, r18
    6f32:	e6 5d       	subi	r30, 0xD6	; 214
    6f34:	fb 4f       	sbci	r31, 0xFB	; 251
    6f36:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6f38:	cc 23       	and	r28, r28
    6f3a:	89 f0       	breq	.+34     	; 0x6f5e <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6f3c:	81 11       	cpse	r24, r1
    6f3e:	2d df       	rcall	.-422    	; 0x6d9a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6f40:	ec 2f       	mov	r30, r28
    6f42:	f0 e0       	ldi	r31, 0x00	; 0
    6f44:	ee 0f       	add	r30, r30
    6f46:	ff 1f       	adc	r31, r31
    6f48:	e0 59       	subi	r30, 0x90	; 144
    6f4a:	fb 4f       	sbci	r31, 0xFB	; 251
    6f4c:	a5 91       	lpm	r26, Z+
    6f4e:	b4 91       	lpm	r27, Z
    6f50:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6f52:	ed 23       	and	r30, r29
    6f54:	81 e0       	ldi	r24, 0x01	; 1
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	21 f4       	brne	.+8      	; 0x6f62 <digitalRead+0x4a>
    6f5a:	80 e0       	ldi	r24, 0x00	; 0
    6f5c:	02 c0       	rjmp	.+4      	; 0x6f62 <digitalRead+0x4a>
    6f5e:	80 e0       	ldi	r24, 0x00	; 0
    6f60:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6f62:	df 91       	pop	r29
    6f64:	cf 91       	pop	r28
    6f66:	08 95       	ret

00006f68 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    6f68:	bf 92       	push	r11
    6f6a:	cf 92       	push	r12
    6f6c:	df 92       	push	r13
    6f6e:	ef 92       	push	r14
    6f70:	ff 92       	push	r15
    6f72:	0f 93       	push	r16
    6f74:	1f 93       	push	r17
    6f76:	cf 93       	push	r28
    6f78:	df 93       	push	r29
    6f7a:	c8 2e       	mov	r12, r24
    6f7c:	d6 2e       	mov	r13, r22
    6f7e:	b4 2e       	mov	r11, r20
    6f80:	c7 e0       	ldi	r28, 0x07	; 7
    6f82:	d0 e0       	ldi	r29, 0x00	; 0
    6f84:	02 2f       	mov	r16, r18
    6f86:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    6f88:	87 e0       	ldi	r24, 0x07	; 7
    6f8a:	e8 2e       	mov	r14, r24
    6f8c:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    6f8e:	b1 10       	cpse	r11, r1
    6f90:	05 c0       	rjmp	.+10     	; 0x6f9c <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    6f92:	c7 01       	movw	r24, r14
    6f94:	8c 1b       	sub	r24, r28
    6f96:	9d 0b       	sbc	r25, r29
    6f98:	b8 01       	movw	r22, r16
    6f9a:	02 c0       	rjmp	.+4      	; 0x6fa0 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    6f9c:	b8 01       	movw	r22, r16
    6f9e:	8c 2f       	mov	r24, r28
    6fa0:	02 c0       	rjmp	.+4      	; 0x6fa6 <shiftOut+0x3e>
    6fa2:	75 95       	asr	r23
    6fa4:	67 95       	ror	r22
    6fa6:	8a 95       	dec	r24
    6fa8:	e2 f7       	brpl	.-8      	; 0x6fa2 <shiftOut+0x3a>
    6faa:	61 70       	andi	r22, 0x01	; 1
    6fac:	8c 2d       	mov	r24, r12
    6fae:	86 df       	rcall	.-244    	; 0x6ebc <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    6fb0:	61 e0       	ldi	r22, 0x01	; 1
    6fb2:	8d 2d       	mov	r24, r13
    6fb4:	83 df       	rcall	.-250    	; 0x6ebc <digitalWrite>
		digitalWrite(clockPin, LOW);		
    6fb6:	60 e0       	ldi	r22, 0x00	; 0
    6fb8:	8d 2d       	mov	r24, r13
    6fba:	80 df       	rcall	.-256    	; 0x6ebc <digitalWrite>
    6fbc:	21 97       	sbiw	r28, 0x01	; 1
    6fbe:	38 f7       	brcc	.-50     	; 0x6f8e <shiftOut+0x26>
	}
}
    6fc0:	df 91       	pop	r29
    6fc2:	cf 91       	pop	r28
    6fc4:	1f 91       	pop	r17
    6fc6:	0f 91       	pop	r16
    6fc8:	ff 90       	pop	r15
    6fca:	ef 90       	pop	r14
    6fcc:	df 90       	pop	r13
    6fce:	cf 90       	pop	r12
    6fd0:	bf 90       	pop	r11
    6fd2:	08 95       	ret

00006fd4 <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    6fd4:	fc 01       	movw	r30, r24
    6fd6:	80 81       	ld	r24, Z
    6fd8:	91 81       	ldd	r25, Z+1	; 0x01
    6fda:	64 c3       	rjmp	.+1736   	; 0x76a4 <free>

00006fdc <_ZN6String10invalidateEv>:
    6fdc:	cf 93       	push	r28
    6fde:	df 93       	push	r29
    6fe0:	ec 01       	movw	r28, r24
    6fe2:	88 81       	ld	r24, Y
    6fe4:	99 81       	ldd	r25, Y+1	; 0x01
    6fe6:	00 97       	sbiw	r24, 0x00	; 0
    6fe8:	09 f0       	breq	.+2      	; 0x6fec <_ZN6String10invalidateEv+0x10>
    6fea:	5c d3       	rcall	.+1720   	; 0x76a4 <free>
    6fec:	19 82       	std	Y+1, r1	; 0x01
    6fee:	18 82       	st	Y, r1
    6ff0:	1d 82       	std	Y+5, r1	; 0x05
    6ff2:	1c 82       	std	Y+4, r1	; 0x04
    6ff4:	1b 82       	std	Y+3, r1	; 0x03
    6ff6:	1a 82       	std	Y+2, r1	; 0x02
    6ff8:	df 91       	pop	r29
    6ffa:	cf 91       	pop	r28
    6ffc:	08 95       	ret

00006ffe <_ZN6String12changeBufferEj>:
    6ffe:	0f 93       	push	r16
    7000:	1f 93       	push	r17
    7002:	cf 93       	push	r28
    7004:	df 93       	push	r29
    7006:	ec 01       	movw	r28, r24
    7008:	8b 01       	movw	r16, r22
    700a:	6f 5f       	subi	r22, 0xFF	; 255
    700c:	7f 4f       	sbci	r23, 0xFF	; 255
    700e:	88 81       	ld	r24, Y
    7010:	99 81       	ldd	r25, Y+1	; 0x01
    7012:	d1 d3       	rcall	.+1954   	; 0x77b6 <realloc>
    7014:	00 97       	sbiw	r24, 0x00	; 0
    7016:	31 f0       	breq	.+12     	; 0x7024 <_ZN6String12changeBufferEj+0x26>
    7018:	99 83       	std	Y+1, r25	; 0x01
    701a:	88 83       	st	Y, r24
    701c:	1b 83       	std	Y+3, r17	; 0x03
    701e:	0a 83       	std	Y+2, r16	; 0x02
    7020:	81 e0       	ldi	r24, 0x01	; 1
    7022:	01 c0       	rjmp	.+2      	; 0x7026 <_ZN6String12changeBufferEj+0x28>
    7024:	80 e0       	ldi	r24, 0x00	; 0
    7026:	df 91       	pop	r29
    7028:	cf 91       	pop	r28
    702a:	1f 91       	pop	r17
    702c:	0f 91       	pop	r16
    702e:	08 95       	ret

00007030 <_ZN6String7reserveEj>:
    7030:	cf 93       	push	r28
    7032:	df 93       	push	r29
    7034:	ec 01       	movw	r28, r24
    7036:	88 81       	ld	r24, Y
    7038:	99 81       	ldd	r25, Y+1	; 0x01
    703a:	89 2b       	or	r24, r25
    703c:	29 f0       	breq	.+10     	; 0x7048 <_ZN6String7reserveEj+0x18>
    703e:	8a 81       	ldd	r24, Y+2	; 0x02
    7040:	9b 81       	ldd	r25, Y+3	; 0x03
    7042:	86 17       	cp	r24, r22
    7044:	97 07       	cpc	r25, r23
    7046:	58 f4       	brcc	.+22     	; 0x705e <_ZN6String7reserveEj+0x2e>
    7048:	ce 01       	movw	r24, r28
    704a:	d9 df       	rcall	.-78     	; 0x6ffe <_ZN6String12changeBufferEj>
    704c:	88 23       	and	r24, r24
    704e:	41 f0       	breq	.+16     	; 0x7060 <_ZN6String7reserveEj+0x30>
    7050:	8c 81       	ldd	r24, Y+4	; 0x04
    7052:	9d 81       	ldd	r25, Y+5	; 0x05
    7054:	89 2b       	or	r24, r25
    7056:	19 f4       	brne	.+6      	; 0x705e <_ZN6String7reserveEj+0x2e>
    7058:	e8 81       	ld	r30, Y
    705a:	f9 81       	ldd	r31, Y+1	; 0x01
    705c:	10 82       	st	Z, r1
    705e:	81 e0       	ldi	r24, 0x01	; 1
    7060:	df 91       	pop	r29
    7062:	cf 91       	pop	r28
    7064:	08 95       	ret

00007066 <_ZN6String4copyEPKcj>:
    7066:	ef 92       	push	r14
    7068:	ff 92       	push	r15
    706a:	0f 93       	push	r16
    706c:	1f 93       	push	r17
    706e:	cf 93       	push	r28
    7070:	df 93       	push	r29
    7072:	ec 01       	movw	r28, r24
    7074:	7b 01       	movw	r14, r22
    7076:	8a 01       	movw	r16, r20
    7078:	ba 01       	movw	r22, r20
    707a:	da df       	rcall	.-76     	; 0x7030 <_ZN6String7reserveEj>
    707c:	81 11       	cpse	r24, r1
    707e:	03 c0       	rjmp	.+6      	; 0x7086 <_ZN6String4copyEPKcj+0x20>
    7080:	ce 01       	movw	r24, r28
    7082:	ac df       	rcall	.-168    	; 0x6fdc <_ZN6String10invalidateEv>
    7084:	06 c0       	rjmp	.+12     	; 0x7092 <_ZN6String4copyEPKcj+0x2c>
    7086:	1d 83       	std	Y+5, r17	; 0x05
    7088:	0c 83       	std	Y+4, r16	; 0x04
    708a:	b7 01       	movw	r22, r14
    708c:	88 81       	ld	r24, Y
    708e:	99 81       	ldd	r25, Y+1	; 0x01
    7090:	86 d4       	rcall	.+2316   	; 0x799e <strcpy>
    7092:	ce 01       	movw	r24, r28
    7094:	df 91       	pop	r29
    7096:	cf 91       	pop	r28
    7098:	1f 91       	pop	r17
    709a:	0f 91       	pop	r16
    709c:	ff 90       	pop	r15
    709e:	ef 90       	pop	r14
    70a0:	08 95       	ret

000070a2 <_ZN6StringC1EPKc>:
    70a2:	fc 01       	movw	r30, r24
    70a4:	11 82       	std	Z+1, r1	; 0x01
    70a6:	10 82       	st	Z, r1
    70a8:	13 82       	std	Z+3, r1	; 0x03
    70aa:	12 82       	std	Z+2, r1	; 0x02
    70ac:	15 82       	std	Z+5, r1	; 0x05
    70ae:	14 82       	std	Z+4, r1	; 0x04
    70b0:	61 15       	cp	r22, r1
    70b2:	71 05       	cpc	r23, r1
    70b4:	49 f0       	breq	.+18     	; 0x70c8 <_ZN6StringC1EPKc+0x26>
    70b6:	fb 01       	movw	r30, r22
    70b8:	01 90       	ld	r0, Z+
    70ba:	00 20       	and	r0, r0
    70bc:	e9 f7       	brne	.-6      	; 0x70b8 <_ZN6StringC1EPKc+0x16>
    70be:	31 97       	sbiw	r30, 0x01	; 1
    70c0:	af 01       	movw	r20, r30
    70c2:	46 1b       	sub	r20, r22
    70c4:	57 0b       	sbc	r21, r23
    70c6:	cf cf       	rjmp	.-98     	; 0x7066 <_ZN6String4copyEPKcj>
    70c8:	08 95       	ret

000070ca <_ZN6StringaSERKS_>:
    70ca:	cf 93       	push	r28
    70cc:	df 93       	push	r29
    70ce:	ec 01       	movw	r28, r24
    70d0:	fb 01       	movw	r30, r22
    70d2:	86 17       	cp	r24, r22
    70d4:	97 07       	cpc	r25, r23
    70d6:	51 f0       	breq	.+20     	; 0x70ec <_ZN6StringaSERKS_+0x22>
    70d8:	60 81       	ld	r22, Z
    70da:	71 81       	ldd	r23, Z+1	; 0x01
    70dc:	61 15       	cp	r22, r1
    70de:	71 05       	cpc	r23, r1
    70e0:	21 f0       	breq	.+8      	; 0x70ea <_ZN6StringaSERKS_+0x20>
    70e2:	44 81       	ldd	r20, Z+4	; 0x04
    70e4:	55 81       	ldd	r21, Z+5	; 0x05
    70e6:	bf df       	rcall	.-130    	; 0x7066 <_ZN6String4copyEPKcj>
    70e8:	01 c0       	rjmp	.+2      	; 0x70ec <_ZN6StringaSERKS_+0x22>
    70ea:	78 df       	rcall	.-272    	; 0x6fdc <_ZN6String10invalidateEv>
    70ec:	ce 01       	movw	r24, r28
    70ee:	df 91       	pop	r29
    70f0:	cf 91       	pop	r28
    70f2:	08 95       	ret

000070f4 <_ZN6StringC1ERKS_>:
    70f4:	fc 01       	movw	r30, r24
    70f6:	11 82       	std	Z+1, r1	; 0x01
    70f8:	10 82       	st	Z, r1
    70fa:	13 82       	std	Z+3, r1	; 0x03
    70fc:	12 82       	std	Z+2, r1	; 0x02
    70fe:	15 82       	std	Z+5, r1	; 0x05
    7100:	14 82       	std	Z+4, r1	; 0x04
    7102:	e3 cf       	rjmp	.-58     	; 0x70ca <_ZN6StringaSERKS_>

00007104 <_ZN6String6concatEPKcj>:
    7104:	ef 92       	push	r14
    7106:	ff 92       	push	r15
    7108:	0f 93       	push	r16
    710a:	1f 93       	push	r17
    710c:	cf 93       	push	r28
    710e:	df 93       	push	r29
    7110:	61 15       	cp	r22, r1
    7112:	71 05       	cpc	r23, r1
    7114:	11 f4       	brne	.+4      	; 0x711a <_ZN6String6concatEPKcj+0x16>
    7116:	80 e0       	ldi	r24, 0x00	; 0
    7118:	1a c0       	rjmp	.+52     	; 0x714e <_ZN6String6concatEPKcj+0x4a>
    711a:	41 15       	cp	r20, r1
    711c:	51 05       	cpc	r21, r1
    711e:	b1 f0       	breq	.+44     	; 0x714c <_ZN6String6concatEPKcj+0x48>
    7120:	7b 01       	movw	r14, r22
    7122:	ec 01       	movw	r28, r24
    7124:	8c 81       	ldd	r24, Y+4	; 0x04
    7126:	9d 81       	ldd	r25, Y+5	; 0x05
    7128:	8a 01       	movw	r16, r20
    712a:	08 0f       	add	r16, r24
    712c:	19 1f       	adc	r17, r25
    712e:	b8 01       	movw	r22, r16
    7130:	ce 01       	movw	r24, r28
    7132:	7e df       	rcall	.-260    	; 0x7030 <_ZN6String7reserveEj>
    7134:	88 23       	and	r24, r24
    7136:	79 f3       	breq	.-34     	; 0x7116 <_ZN6String6concatEPKcj+0x12>
    7138:	28 81       	ld	r18, Y
    713a:	39 81       	ldd	r19, Y+1	; 0x01
    713c:	8c 81       	ldd	r24, Y+4	; 0x04
    713e:	9d 81       	ldd	r25, Y+5	; 0x05
    7140:	b7 01       	movw	r22, r14
    7142:	82 0f       	add	r24, r18
    7144:	93 1f       	adc	r25, r19
    7146:	2b d4       	rcall	.+2134   	; 0x799e <strcpy>
    7148:	1d 83       	std	Y+5, r17	; 0x05
    714a:	0c 83       	std	Y+4, r16	; 0x04
    714c:	81 e0       	ldi	r24, 0x01	; 1
    714e:	df 91       	pop	r29
    7150:	cf 91       	pop	r28
    7152:	1f 91       	pop	r17
    7154:	0f 91       	pop	r16
    7156:	ff 90       	pop	r15
    7158:	ef 90       	pop	r14
    715a:	08 95       	ret

0000715c <_ZN6String6concatEPKc>:
    715c:	61 15       	cp	r22, r1
    715e:	71 05       	cpc	r23, r1
    7160:	49 f0       	breq	.+18     	; 0x7174 <_ZN6String6concatEPKc+0x18>
    7162:	fb 01       	movw	r30, r22
    7164:	01 90       	ld	r0, Z+
    7166:	00 20       	and	r0, r0
    7168:	e9 f7       	brne	.-6      	; 0x7164 <_ZN6String6concatEPKc+0x8>
    716a:	31 97       	sbiw	r30, 0x01	; 1
    716c:	af 01       	movw	r20, r30
    716e:	46 1b       	sub	r20, r22
    7170:	57 0b       	sbc	r21, r23
    7172:	c8 cf       	rjmp	.-112    	; 0x7104 <_ZN6String6concatEPKcj>
    7174:	80 e0       	ldi	r24, 0x00	; 0
    7176:	08 95       	ret

00007178 <_ZN6String6concatEi>:
    7178:	ef 92       	push	r14
    717a:	ff 92       	push	r15
    717c:	0f 93       	push	r16
    717e:	1f 93       	push	r17
    7180:	cf 93       	push	r28
    7182:	df 93       	push	r29
    7184:	cd b7       	in	r28, 0x3d	; 61
    7186:	de b7       	in	r29, 0x3e	; 62
    7188:	28 97       	sbiw	r28, 0x08	; 8
    718a:	0f b6       	in	r0, 0x3f	; 63
    718c:	f8 94       	cli
    718e:	de bf       	out	0x3e, r29	; 62
    7190:	0f be       	out	0x3f, r0	; 63
    7192:	cd bf       	out	0x3d, r28	; 61
    7194:	7c 01       	movw	r14, r24
    7196:	cb 01       	movw	r24, r22
    7198:	4a e0       	ldi	r20, 0x0A	; 10
    719a:	8e 01       	movw	r16, r28
    719c:	0f 5f       	subi	r16, 0xFF	; 255
    719e:	1f 4f       	sbci	r17, 0xFF	; 255
    71a0:	b8 01       	movw	r22, r16
    71a2:	04 d4       	rcall	.+2056   	; 0x79ac <__itoa_ncheck>
    71a4:	f8 01       	movw	r30, r16
    71a6:	01 90       	ld	r0, Z+
    71a8:	00 20       	and	r0, r0
    71aa:	e9 f7       	brne	.-6      	; 0x71a6 <_ZN6String6concatEi+0x2e>
    71ac:	31 97       	sbiw	r30, 0x01	; 1
    71ae:	af 01       	movw	r20, r30
    71b0:	40 1b       	sub	r20, r16
    71b2:	51 0b       	sbc	r21, r17
    71b4:	b8 01       	movw	r22, r16
    71b6:	c7 01       	movw	r24, r14
    71b8:	a5 df       	rcall	.-182    	; 0x7104 <_ZN6String6concatEPKcj>
    71ba:	28 96       	adiw	r28, 0x08	; 8
    71bc:	0f b6       	in	r0, 0x3f	; 63
    71be:	f8 94       	cli
    71c0:	de bf       	out	0x3e, r29	; 62
    71c2:	0f be       	out	0x3f, r0	; 63
    71c4:	cd bf       	out	0x3d, r28	; 61
    71c6:	df 91       	pop	r29
    71c8:	cf 91       	pop	r28
    71ca:	1f 91       	pop	r17
    71cc:	0f 91       	pop	r16
    71ce:	ff 90       	pop	r15
    71d0:	ef 90       	pop	r14
    71d2:	08 95       	ret

000071d4 <_ZN6String6concatEl>:
    71d4:	ef 92       	push	r14
    71d6:	ff 92       	push	r15
    71d8:	0f 93       	push	r16
    71da:	1f 93       	push	r17
    71dc:	cf 93       	push	r28
    71de:	df 93       	push	r29
    71e0:	cd b7       	in	r28, 0x3d	; 61
    71e2:	de b7       	in	r29, 0x3e	; 62
    71e4:	2e 97       	sbiw	r28, 0x0e	; 14
    71e6:	0f b6       	in	r0, 0x3f	; 63
    71e8:	f8 94       	cli
    71ea:	de bf       	out	0x3e, r29	; 62
    71ec:	0f be       	out	0x3f, r0	; 63
    71ee:	cd bf       	out	0x3d, r28	; 61
    71f0:	7c 01       	movw	r14, r24
    71f2:	cb 01       	movw	r24, r22
    71f4:	ba 01       	movw	r22, r20
    71f6:	2a e0       	ldi	r18, 0x0A	; 10
    71f8:	8e 01       	movw	r16, r28
    71fa:	0f 5f       	subi	r16, 0xFF	; 255
    71fc:	1f 4f       	sbci	r17, 0xFF	; 255
    71fe:	a8 01       	movw	r20, r16
    7200:	df d3       	rcall	.+1982   	; 0x79c0 <__ltoa_ncheck>
    7202:	f8 01       	movw	r30, r16
    7204:	01 90       	ld	r0, Z+
    7206:	00 20       	and	r0, r0
    7208:	e9 f7       	brne	.-6      	; 0x7204 <_ZN6String6concatEl+0x30>
    720a:	31 97       	sbiw	r30, 0x01	; 1
    720c:	af 01       	movw	r20, r30
    720e:	40 1b       	sub	r20, r16
    7210:	51 0b       	sbc	r21, r17
    7212:	b8 01       	movw	r22, r16
    7214:	c7 01       	movw	r24, r14
    7216:	76 df       	rcall	.-276    	; 0x7104 <_ZN6String6concatEPKcj>
    7218:	2e 96       	adiw	r28, 0x0e	; 14
    721a:	0f b6       	in	r0, 0x3f	; 63
    721c:	f8 94       	cli
    721e:	de bf       	out	0x3e, r29	; 62
    7220:	0f be       	out	0x3f, r0	; 63
    7222:	cd bf       	out	0x3d, r28	; 61
    7224:	df 91       	pop	r29
    7226:	cf 91       	pop	r28
    7228:	1f 91       	pop	r17
    722a:	0f 91       	pop	r16
    722c:	ff 90       	pop	r15
    722e:	ef 90       	pop	r14
    7230:	08 95       	ret

00007232 <_ZN6String6concatEm>:
    7232:	ef 92       	push	r14
    7234:	ff 92       	push	r15
    7236:	0f 93       	push	r16
    7238:	1f 93       	push	r17
    723a:	cf 93       	push	r28
    723c:	df 93       	push	r29
    723e:	cd b7       	in	r28, 0x3d	; 61
    7240:	de b7       	in	r29, 0x3e	; 62
    7242:	2d 97       	sbiw	r28, 0x0d	; 13
    7244:	0f b6       	in	r0, 0x3f	; 63
    7246:	f8 94       	cli
    7248:	de bf       	out	0x3e, r29	; 62
    724a:	0f be       	out	0x3f, r0	; 63
    724c:	cd bf       	out	0x3d, r28	; 61
    724e:	7c 01       	movw	r14, r24
    7250:	cb 01       	movw	r24, r22
    7252:	ba 01       	movw	r22, r20
    7254:	2a e0       	ldi	r18, 0x0A	; 10
    7256:	8e 01       	movw	r16, r28
    7258:	0f 5f       	subi	r16, 0xFF	; 255
    725a:	1f 4f       	sbci	r17, 0xFF	; 255
    725c:	a8 01       	movw	r20, r16
    725e:	be d3       	rcall	.+1916   	; 0x79dc <__ultoa_ncheck>
    7260:	f8 01       	movw	r30, r16
    7262:	01 90       	ld	r0, Z+
    7264:	00 20       	and	r0, r0
    7266:	e9 f7       	brne	.-6      	; 0x7262 <_ZN6String6concatEm+0x30>
    7268:	31 97       	sbiw	r30, 0x01	; 1
    726a:	af 01       	movw	r20, r30
    726c:	40 1b       	sub	r20, r16
    726e:	51 0b       	sbc	r21, r17
    7270:	b8 01       	movw	r22, r16
    7272:	c7 01       	movw	r24, r14
    7274:	47 df       	rcall	.-370    	; 0x7104 <_ZN6String6concatEPKcj>
    7276:	2d 96       	adiw	r28, 0x0d	; 13
    7278:	0f b6       	in	r0, 0x3f	; 63
    727a:	f8 94       	cli
    727c:	de bf       	out	0x3e, r29	; 62
    727e:	0f be       	out	0x3f, r0	; 63
    7280:	cd bf       	out	0x3d, r28	; 61
    7282:	df 91       	pop	r29
    7284:	cf 91       	pop	r28
    7286:	1f 91       	pop	r17
    7288:	0f 91       	pop	r16
    728a:	ff 90       	pop	r15
    728c:	ef 90       	pop	r14
    728e:	08 95       	ret

00007290 <_ZN6String6concatEf>:
    7290:	ef 92       	push	r14
    7292:	ff 92       	push	r15
    7294:	0f 93       	push	r16
    7296:	1f 93       	push	r17
    7298:	cf 93       	push	r28
    729a:	df 93       	push	r29
    729c:	cd b7       	in	r28, 0x3d	; 61
    729e:	de b7       	in	r29, 0x3e	; 62
    72a0:	64 97       	sbiw	r28, 0x14	; 20
    72a2:	0f b6       	in	r0, 0x3f	; 63
    72a4:	f8 94       	cli
    72a6:	de bf       	out	0x3e, r29	; 62
    72a8:	0f be       	out	0x3f, r0	; 63
    72aa:	cd bf       	out	0x3d, r28	; 61
    72ac:	7c 01       	movw	r14, r24
    72ae:	cb 01       	movw	r24, r22
    72b0:	ba 01       	movw	r22, r20
    72b2:	8e 01       	movw	r16, r28
    72b4:	0f 5f       	subi	r16, 0xFF	; 255
    72b6:	1f 4f       	sbci	r17, 0xFF	; 255
    72b8:	22 e0       	ldi	r18, 0x02	; 2
    72ba:	44 e0       	ldi	r20, 0x04	; 4
    72bc:	3c d1       	rcall	.+632    	; 0x7536 <dtostrf>
    72be:	fc 01       	movw	r30, r24
    72c0:	01 90       	ld	r0, Z+
    72c2:	00 20       	and	r0, r0
    72c4:	e9 f7       	brne	.-6      	; 0x72c0 <_ZN6String6concatEf+0x30>
    72c6:	31 97       	sbiw	r30, 0x01	; 1
    72c8:	af 01       	movw	r20, r30
    72ca:	48 1b       	sub	r20, r24
    72cc:	59 0b       	sbc	r21, r25
    72ce:	bc 01       	movw	r22, r24
    72d0:	c7 01       	movw	r24, r14
    72d2:	18 df       	rcall	.-464    	; 0x7104 <_ZN6String6concatEPKcj>
    72d4:	64 96       	adiw	r28, 0x14	; 20
    72d6:	0f b6       	in	r0, 0x3f	; 63
    72d8:	f8 94       	cli
    72da:	de bf       	out	0x3e, r29	; 62
    72dc:	0f be       	out	0x3f, r0	; 63
    72de:	cd bf       	out	0x3d, r28	; 61
    72e0:	df 91       	pop	r29
    72e2:	cf 91       	pop	r28
    72e4:	1f 91       	pop	r17
    72e6:	0f 91       	pop	r16
    72e8:	ff 90       	pop	r15
    72ea:	ef 90       	pop	r14
    72ec:	08 95       	ret

000072ee <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    72ee:	cf 93       	push	r28
    72f0:	df 93       	push	r29
    72f2:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    72f4:	fb 01       	movw	r30, r22
    72f6:	44 81       	ldd	r20, Z+4	; 0x04
    72f8:	55 81       	ldd	r21, Z+5	; 0x05
    72fa:	60 81       	ld	r22, Z
    72fc:	71 81       	ldd	r23, Z+1	; 0x01
    72fe:	02 df       	rcall	.-508    	; 0x7104 <_ZN6String6concatEPKcj>
    7300:	81 11       	cpse	r24, r1
    7302:	02 c0       	rjmp	.+4      	; 0x7308 <_ZplRK15StringSumHelperRK6String+0x1a>
    7304:	ce 01       	movw	r24, r28
    7306:	6a de       	rcall	.-812    	; 0x6fdc <_ZN6String10invalidateEv>
	return a;
}
    7308:	ce 01       	movw	r24, r28
    730a:	df 91       	pop	r29
    730c:	cf 91       	pop	r28
    730e:	08 95       	ret

00007310 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    7310:	cf 93       	push	r28
    7312:	df 93       	push	r29
    7314:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    7316:	61 15       	cp	r22, r1
    7318:	71 05       	cpc	r23, r1
    731a:	59 f0       	breq	.+22     	; 0x7332 <_ZplRK15StringSumHelperPKc+0x22>
    731c:	fb 01       	movw	r30, r22
    731e:	01 90       	ld	r0, Z+
    7320:	00 20       	and	r0, r0
    7322:	e9 f7       	brne	.-6      	; 0x731e <_ZplRK15StringSumHelperPKc+0xe>
    7324:	31 97       	sbiw	r30, 0x01	; 1
    7326:	af 01       	movw	r20, r30
    7328:	46 1b       	sub	r20, r22
    732a:	57 0b       	sbc	r21, r23
    732c:	eb de       	rcall	.-554    	; 0x7104 <_ZN6String6concatEPKcj>
    732e:	81 11       	cpse	r24, r1
    7330:	02 c0       	rjmp	.+4      	; 0x7336 <_ZplRK15StringSumHelperPKc+0x26>
    7332:	ce 01       	movw	r24, r28
    7334:	53 de       	rcall	.-858    	; 0x6fdc <_ZN6String10invalidateEv>
	return a;
}
    7336:	ce 01       	movw	r24, r28
    7338:	df 91       	pop	r29
    733a:	cf 91       	pop	r28
    733c:	08 95       	ret

0000733e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    733e:	08 95       	ret

00007340 <__cmpsf2>:
    7340:	0e 94 71 31 	call	0x62e2	; 0x62e2 <__fp_cmp>
    7344:	08 f4       	brcc	.+2      	; 0x7348 <__cmpsf2+0x8>
    7346:	81 e0       	ldi	r24, 0x01	; 1
    7348:	08 95       	ret

0000734a <__divsf3>:
    734a:	12 d0       	rcall	.+36     	; 0x7370 <__divsf3x>
    734c:	0c 94 d0 30 	jmp	0x61a0	; 0x61a0 <__fp_round>
    7350:	0e 94 c9 30 	call	0x6192	; 0x6192 <__fp_pscB>
    7354:	58 f0       	brcs	.+22     	; 0x736c <__divsf3+0x22>
    7356:	0e 94 c2 30 	call	0x6184	; 0x6184 <__fp_pscA>
    735a:	40 f0       	brcs	.+16     	; 0x736c <__divsf3+0x22>
    735c:	29 f4       	brne	.+10     	; 0x7368 <__divsf3+0x1e>
    735e:	5f 3f       	cpi	r21, 0xFF	; 255
    7360:	29 f0       	breq	.+10     	; 0x736c <__divsf3+0x22>
    7362:	0c 94 b9 30 	jmp	0x6172	; 0x6172 <__fp_inf>
    7366:	51 11       	cpse	r21, r1
    7368:	0c 94 04 31 	jmp	0x6208	; 0x6208 <__fp_szero>
    736c:	0c 94 bf 30 	jmp	0x617e	; 0x617e <__fp_nan>

00007370 <__divsf3x>:
    7370:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__fp_split3>
    7374:	68 f3       	brcs	.-38     	; 0x7350 <__divsf3+0x6>

00007376 <__divsf3_pse>:
    7376:	99 23       	and	r25, r25
    7378:	b1 f3       	breq	.-20     	; 0x7366 <__divsf3+0x1c>
    737a:	55 23       	and	r21, r21
    737c:	91 f3       	breq	.-28     	; 0x7362 <__divsf3+0x18>
    737e:	95 1b       	sub	r25, r21
    7380:	55 0b       	sbc	r21, r21
    7382:	bb 27       	eor	r27, r27
    7384:	aa 27       	eor	r26, r26
    7386:	62 17       	cp	r22, r18
    7388:	73 07       	cpc	r23, r19
    738a:	84 07       	cpc	r24, r20
    738c:	38 f0       	brcs	.+14     	; 0x739c <__divsf3_pse+0x26>
    738e:	9f 5f       	subi	r25, 0xFF	; 255
    7390:	5f 4f       	sbci	r21, 0xFF	; 255
    7392:	22 0f       	add	r18, r18
    7394:	33 1f       	adc	r19, r19
    7396:	44 1f       	adc	r20, r20
    7398:	aa 1f       	adc	r26, r26
    739a:	a9 f3       	breq	.-22     	; 0x7386 <__divsf3_pse+0x10>
    739c:	35 d0       	rcall	.+106    	; 0x7408 <__divsf3_pse+0x92>
    739e:	0e 2e       	mov	r0, r30
    73a0:	3a f0       	brmi	.+14     	; 0x73b0 <__divsf3_pse+0x3a>
    73a2:	e0 e8       	ldi	r30, 0x80	; 128
    73a4:	32 d0       	rcall	.+100    	; 0x740a <__divsf3_pse+0x94>
    73a6:	91 50       	subi	r25, 0x01	; 1
    73a8:	50 40       	sbci	r21, 0x00	; 0
    73aa:	e6 95       	lsr	r30
    73ac:	00 1c       	adc	r0, r0
    73ae:	ca f7       	brpl	.-14     	; 0x73a2 <__divsf3_pse+0x2c>
    73b0:	2b d0       	rcall	.+86     	; 0x7408 <__divsf3_pse+0x92>
    73b2:	fe 2f       	mov	r31, r30
    73b4:	29 d0       	rcall	.+82     	; 0x7408 <__divsf3_pse+0x92>
    73b6:	66 0f       	add	r22, r22
    73b8:	77 1f       	adc	r23, r23
    73ba:	88 1f       	adc	r24, r24
    73bc:	bb 1f       	adc	r27, r27
    73be:	26 17       	cp	r18, r22
    73c0:	37 07       	cpc	r19, r23
    73c2:	48 07       	cpc	r20, r24
    73c4:	ab 07       	cpc	r26, r27
    73c6:	b0 e8       	ldi	r27, 0x80	; 128
    73c8:	09 f0       	breq	.+2      	; 0x73cc <__divsf3_pse+0x56>
    73ca:	bb 0b       	sbc	r27, r27
    73cc:	80 2d       	mov	r24, r0
    73ce:	bf 01       	movw	r22, r30
    73d0:	ff 27       	eor	r31, r31
    73d2:	93 58       	subi	r25, 0x83	; 131
    73d4:	5f 4f       	sbci	r21, 0xFF	; 255
    73d6:	3a f0       	brmi	.+14     	; 0x73e6 <__divsf3_pse+0x70>
    73d8:	9e 3f       	cpi	r25, 0xFE	; 254
    73da:	51 05       	cpc	r21, r1
    73dc:	78 f0       	brcs	.+30     	; 0x73fc <__divsf3_pse+0x86>
    73de:	0c 94 b9 30 	jmp	0x6172	; 0x6172 <__fp_inf>
    73e2:	0c 94 04 31 	jmp	0x6208	; 0x6208 <__fp_szero>
    73e6:	5f 3f       	cpi	r21, 0xFF	; 255
    73e8:	e4 f3       	brlt	.-8      	; 0x73e2 <__divsf3_pse+0x6c>
    73ea:	98 3e       	cpi	r25, 0xE8	; 232
    73ec:	d4 f3       	brlt	.-12     	; 0x73e2 <__divsf3_pse+0x6c>
    73ee:	86 95       	lsr	r24
    73f0:	77 95       	ror	r23
    73f2:	67 95       	ror	r22
    73f4:	b7 95       	ror	r27
    73f6:	f7 95       	ror	r31
    73f8:	9f 5f       	subi	r25, 0xFF	; 255
    73fa:	c9 f7       	brne	.-14     	; 0x73ee <__divsf3_pse+0x78>
    73fc:	88 0f       	add	r24, r24
    73fe:	91 1d       	adc	r25, r1
    7400:	96 95       	lsr	r25
    7402:	87 95       	ror	r24
    7404:	97 f9       	bld	r25, 7
    7406:	08 95       	ret
    7408:	e1 e0       	ldi	r30, 0x01	; 1
    740a:	66 0f       	add	r22, r22
    740c:	77 1f       	adc	r23, r23
    740e:	88 1f       	adc	r24, r24
    7410:	bb 1f       	adc	r27, r27
    7412:	62 17       	cp	r22, r18
    7414:	73 07       	cpc	r23, r19
    7416:	84 07       	cpc	r24, r20
    7418:	ba 07       	cpc	r27, r26
    741a:	20 f0       	brcs	.+8      	; 0x7424 <__divsf3_pse+0xae>
    741c:	62 1b       	sub	r22, r18
    741e:	73 0b       	sbc	r23, r19
    7420:	84 0b       	sbc	r24, r20
    7422:	ba 0b       	sbc	r27, r26
    7424:	ee 1f       	adc	r30, r30
    7426:	88 f7       	brcc	.-30     	; 0x740a <__divsf3_pse+0x94>
    7428:	e0 95       	com	r30
    742a:	08 95       	ret

0000742c <__fixunssfsi>:
    742c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__fp_splitA>
    7430:	88 f0       	brcs	.+34     	; 0x7454 <__fixunssfsi+0x28>
    7432:	9f 57       	subi	r25, 0x7F	; 127
    7434:	98 f0       	brcs	.+38     	; 0x745c <__fixunssfsi+0x30>
    7436:	b9 2f       	mov	r27, r25
    7438:	99 27       	eor	r25, r25
    743a:	b7 51       	subi	r27, 0x17	; 23
    743c:	b0 f0       	brcs	.+44     	; 0x746a <__fixunssfsi+0x3e>
    743e:	e1 f0       	breq	.+56     	; 0x7478 <__fixunssfsi+0x4c>
    7440:	66 0f       	add	r22, r22
    7442:	77 1f       	adc	r23, r23
    7444:	88 1f       	adc	r24, r24
    7446:	99 1f       	adc	r25, r25
    7448:	1a f0       	brmi	.+6      	; 0x7450 <__fixunssfsi+0x24>
    744a:	ba 95       	dec	r27
    744c:	c9 f7       	brne	.-14     	; 0x7440 <__fixunssfsi+0x14>
    744e:	14 c0       	rjmp	.+40     	; 0x7478 <__fixunssfsi+0x4c>
    7450:	b1 30       	cpi	r27, 0x01	; 1
    7452:	91 f0       	breq	.+36     	; 0x7478 <__fixunssfsi+0x4c>
    7454:	0e 94 03 31 	call	0x6206	; 0x6206 <__fp_zero>
    7458:	b1 e0       	ldi	r27, 0x01	; 1
    745a:	08 95       	ret
    745c:	0c 94 03 31 	jmp	0x6206	; 0x6206 <__fp_zero>
    7460:	67 2f       	mov	r22, r23
    7462:	78 2f       	mov	r23, r24
    7464:	88 27       	eor	r24, r24
    7466:	b8 5f       	subi	r27, 0xF8	; 248
    7468:	39 f0       	breq	.+14     	; 0x7478 <__fixunssfsi+0x4c>
    746a:	b9 3f       	cpi	r27, 0xF9	; 249
    746c:	cc f3       	brlt	.-14     	; 0x7460 <__fixunssfsi+0x34>
    746e:	86 95       	lsr	r24
    7470:	77 95       	ror	r23
    7472:	67 95       	ror	r22
    7474:	b3 95       	inc	r27
    7476:	d9 f7       	brne	.-10     	; 0x746e <__fixunssfsi+0x42>
    7478:	3e f4       	brtc	.+14     	; 0x7488 <__fixunssfsi+0x5c>
    747a:	90 95       	com	r25
    747c:	80 95       	com	r24
    747e:	70 95       	com	r23
    7480:	61 95       	neg	r22
    7482:	7f 4f       	sbci	r23, 0xFF	; 255
    7484:	8f 4f       	sbci	r24, 0xFF	; 255
    7486:	9f 4f       	sbci	r25, 0xFF	; 255
    7488:	08 95       	ret

0000748a <__unordsf2>:
    748a:	0e 94 71 31 	call	0x62e2	; 0x62e2 <__fp_cmp>
    748e:	88 0b       	sbc	r24, r24
    7490:	99 0b       	sbc	r25, r25
    7492:	08 95       	ret

00007494 <__udivmodhi4>:
    7494:	aa 1b       	sub	r26, r26
    7496:	bb 1b       	sub	r27, r27
    7498:	51 e1       	ldi	r21, 0x11	; 17
    749a:	07 c0       	rjmp	.+14     	; 0x74aa <__udivmodhi4_ep>

0000749c <__udivmodhi4_loop>:
    749c:	aa 1f       	adc	r26, r26
    749e:	bb 1f       	adc	r27, r27
    74a0:	a6 17       	cp	r26, r22
    74a2:	b7 07       	cpc	r27, r23
    74a4:	10 f0       	brcs	.+4      	; 0x74aa <__udivmodhi4_ep>
    74a6:	a6 1b       	sub	r26, r22
    74a8:	b7 0b       	sbc	r27, r23

000074aa <__udivmodhi4_ep>:
    74aa:	88 1f       	adc	r24, r24
    74ac:	99 1f       	adc	r25, r25
    74ae:	5a 95       	dec	r21
    74b0:	a9 f7       	brne	.-22     	; 0x749c <__udivmodhi4_loop>
    74b2:	80 95       	com	r24
    74b4:	90 95       	com	r25
    74b6:	bc 01       	movw	r22, r24
    74b8:	cd 01       	movw	r24, r26
    74ba:	08 95       	ret

000074bc <__divmodhi4>:
    74bc:	97 fb       	bst	r25, 7
    74be:	07 2e       	mov	r0, r23
    74c0:	16 f4       	brtc	.+4      	; 0x74c6 <__divmodhi4+0xa>
    74c2:	00 94       	com	r0
    74c4:	06 d0       	rcall	.+12     	; 0x74d2 <__divmodhi4_neg1>
    74c6:	77 fd       	sbrc	r23, 7
    74c8:	08 d0       	rcall	.+16     	; 0x74da <__divmodhi4_neg2>
    74ca:	e4 df       	rcall	.-56     	; 0x7494 <__udivmodhi4>
    74cc:	07 fc       	sbrc	r0, 7
    74ce:	05 d0       	rcall	.+10     	; 0x74da <__divmodhi4_neg2>
    74d0:	3e f4       	brtc	.+14     	; 0x74e0 <__divmodhi4_exit>

000074d2 <__divmodhi4_neg1>:
    74d2:	90 95       	com	r25
    74d4:	81 95       	neg	r24
    74d6:	9f 4f       	sbci	r25, 0xFF	; 255
    74d8:	08 95       	ret

000074da <__divmodhi4_neg2>:
    74da:	70 95       	com	r23
    74dc:	61 95       	neg	r22
    74de:	7f 4f       	sbci	r23, 0xFF	; 255

000074e0 <__divmodhi4_exit>:
    74e0:	08 95       	ret

000074e2 <__udivmodsi4>:
    74e2:	a1 e2       	ldi	r26, 0x21	; 33
    74e4:	1a 2e       	mov	r1, r26
    74e6:	aa 1b       	sub	r26, r26
    74e8:	bb 1b       	sub	r27, r27
    74ea:	fd 01       	movw	r30, r26
    74ec:	0d c0       	rjmp	.+26     	; 0x7508 <__udivmodsi4_ep>

000074ee <__udivmodsi4_loop>:
    74ee:	aa 1f       	adc	r26, r26
    74f0:	bb 1f       	adc	r27, r27
    74f2:	ee 1f       	adc	r30, r30
    74f4:	ff 1f       	adc	r31, r31
    74f6:	a2 17       	cp	r26, r18
    74f8:	b3 07       	cpc	r27, r19
    74fa:	e4 07       	cpc	r30, r20
    74fc:	f5 07       	cpc	r31, r21
    74fe:	20 f0       	brcs	.+8      	; 0x7508 <__udivmodsi4_ep>
    7500:	a2 1b       	sub	r26, r18
    7502:	b3 0b       	sbc	r27, r19
    7504:	e4 0b       	sbc	r30, r20
    7506:	f5 0b       	sbc	r31, r21

00007508 <__udivmodsi4_ep>:
    7508:	66 1f       	adc	r22, r22
    750a:	77 1f       	adc	r23, r23
    750c:	88 1f       	adc	r24, r24
    750e:	99 1f       	adc	r25, r25
    7510:	1a 94       	dec	r1
    7512:	69 f7       	brne	.-38     	; 0x74ee <__udivmodsi4_loop>
    7514:	60 95       	com	r22
    7516:	70 95       	com	r23
    7518:	80 95       	com	r24
    751a:	90 95       	com	r25
    751c:	9b 01       	movw	r18, r22
    751e:	ac 01       	movw	r20, r24
    7520:	bd 01       	movw	r22, r26
    7522:	cf 01       	movw	r24, r30
    7524:	08 95       	ret

00007526 <__tablejump2__>:
    7526:	ee 0f       	add	r30, r30
    7528:	ff 1f       	adc	r31, r31
    752a:	88 1f       	adc	r24, r24
    752c:	8b bf       	out	0x3b, r24	; 59
    752e:	07 90       	elpm	r0, Z+
    7530:	f6 91       	elpm	r31, Z
    7532:	e0 2d       	mov	r30, r0
    7534:	19 94       	eijmp

00007536 <dtostrf>:
    7536:	ef 92       	push	r14
    7538:	0f 93       	push	r16
    753a:	1f 93       	push	r17
    753c:	cf 93       	push	r28
    753e:	df 93       	push	r29
    7540:	e8 01       	movw	r28, r16
    7542:	47 fd       	sbrc	r20, 7
    7544:	02 c0       	rjmp	.+4      	; 0x754a <dtostrf+0x14>
    7546:	34 e0       	ldi	r19, 0x04	; 4
    7548:	01 c0       	rjmp	.+2      	; 0x754c <dtostrf+0x16>
    754a:	34 e1       	ldi	r19, 0x14	; 20
    754c:	04 2e       	mov	r0, r20
    754e:	00 0c       	add	r0, r0
    7550:	55 0b       	sbc	r21, r21
    7552:	57 ff       	sbrs	r21, 7
    7554:	03 c0       	rjmp	.+6      	; 0x755c <dtostrf+0x26>
    7556:	51 95       	neg	r21
    7558:	41 95       	neg	r20
    755a:	51 09       	sbc	r21, r1
    755c:	e3 2e       	mov	r14, r19
    755e:	02 2f       	mov	r16, r18
    7560:	24 2f       	mov	r18, r20
    7562:	ae 01       	movw	r20, r28
    7564:	75 d2       	rcall	.+1258   	; 0x7a50 <dtoa_prf>
    7566:	ce 01       	movw	r24, r28
    7568:	df 91       	pop	r29
    756a:	cf 91       	pop	r28
    756c:	1f 91       	pop	r17
    756e:	0f 91       	pop	r16
    7570:	ef 90       	pop	r14
    7572:	08 95       	ret

00007574 <malloc>:
    7574:	0f 93       	push	r16
    7576:	1f 93       	push	r17
    7578:	cf 93       	push	r28
    757a:	df 93       	push	r29
    757c:	82 30       	cpi	r24, 0x02	; 2
    757e:	91 05       	cpc	r25, r1
    7580:	10 f4       	brcc	.+4      	; 0x7586 <malloc+0x12>
    7582:	82 e0       	ldi	r24, 0x02	; 2
    7584:	90 e0       	ldi	r25, 0x00	; 0
    7586:	e0 91 fd 0a 	lds	r30, 0x0AFD	; 0x800afd <__flp>
    758a:	f0 91 fe 0a 	lds	r31, 0x0AFE	; 0x800afe <__flp+0x1>
    758e:	20 e0       	ldi	r18, 0x00	; 0
    7590:	30 e0       	ldi	r19, 0x00	; 0
    7592:	a0 e0       	ldi	r26, 0x00	; 0
    7594:	b0 e0       	ldi	r27, 0x00	; 0
    7596:	30 97       	sbiw	r30, 0x00	; 0
    7598:	19 f1       	breq	.+70     	; 0x75e0 <malloc+0x6c>
    759a:	40 81       	ld	r20, Z
    759c:	51 81       	ldd	r21, Z+1	; 0x01
    759e:	02 81       	ldd	r16, Z+2	; 0x02
    75a0:	13 81       	ldd	r17, Z+3	; 0x03
    75a2:	48 17       	cp	r20, r24
    75a4:	59 07       	cpc	r21, r25
    75a6:	c8 f0       	brcs	.+50     	; 0x75da <malloc+0x66>
    75a8:	84 17       	cp	r24, r20
    75aa:	95 07       	cpc	r25, r21
    75ac:	69 f4       	brne	.+26     	; 0x75c8 <malloc+0x54>
    75ae:	10 97       	sbiw	r26, 0x00	; 0
    75b0:	31 f0       	breq	.+12     	; 0x75be <malloc+0x4a>
    75b2:	12 96       	adiw	r26, 0x02	; 2
    75b4:	0c 93       	st	X, r16
    75b6:	12 97       	sbiw	r26, 0x02	; 2
    75b8:	13 96       	adiw	r26, 0x03	; 3
    75ba:	1c 93       	st	X, r17
    75bc:	27 c0       	rjmp	.+78     	; 0x760c <malloc+0x98>
    75be:	00 93 fd 0a 	sts	0x0AFD, r16	; 0x800afd <__flp>
    75c2:	10 93 fe 0a 	sts	0x0AFE, r17	; 0x800afe <__flp+0x1>
    75c6:	22 c0       	rjmp	.+68     	; 0x760c <malloc+0x98>
    75c8:	21 15       	cp	r18, r1
    75ca:	31 05       	cpc	r19, r1
    75cc:	19 f0       	breq	.+6      	; 0x75d4 <malloc+0x60>
    75ce:	42 17       	cp	r20, r18
    75d0:	53 07       	cpc	r21, r19
    75d2:	18 f4       	brcc	.+6      	; 0x75da <malloc+0x66>
    75d4:	9a 01       	movw	r18, r20
    75d6:	bd 01       	movw	r22, r26
    75d8:	ef 01       	movw	r28, r30
    75da:	df 01       	movw	r26, r30
    75dc:	f8 01       	movw	r30, r16
    75de:	db cf       	rjmp	.-74     	; 0x7596 <malloc+0x22>
    75e0:	21 15       	cp	r18, r1
    75e2:	31 05       	cpc	r19, r1
    75e4:	f9 f0       	breq	.+62     	; 0x7624 <malloc+0xb0>
    75e6:	28 1b       	sub	r18, r24
    75e8:	39 0b       	sbc	r19, r25
    75ea:	24 30       	cpi	r18, 0x04	; 4
    75ec:	31 05       	cpc	r19, r1
    75ee:	80 f4       	brcc	.+32     	; 0x7610 <malloc+0x9c>
    75f0:	8a 81       	ldd	r24, Y+2	; 0x02
    75f2:	9b 81       	ldd	r25, Y+3	; 0x03
    75f4:	61 15       	cp	r22, r1
    75f6:	71 05       	cpc	r23, r1
    75f8:	21 f0       	breq	.+8      	; 0x7602 <malloc+0x8e>
    75fa:	fb 01       	movw	r30, r22
    75fc:	93 83       	std	Z+3, r25	; 0x03
    75fe:	82 83       	std	Z+2, r24	; 0x02
    7600:	04 c0       	rjmp	.+8      	; 0x760a <malloc+0x96>
    7602:	90 93 fe 0a 	sts	0x0AFE, r25	; 0x800afe <__flp+0x1>
    7606:	80 93 fd 0a 	sts	0x0AFD, r24	; 0x800afd <__flp>
    760a:	fe 01       	movw	r30, r28
    760c:	32 96       	adiw	r30, 0x02	; 2
    760e:	44 c0       	rjmp	.+136    	; 0x7698 <malloc+0x124>
    7610:	fe 01       	movw	r30, r28
    7612:	e2 0f       	add	r30, r18
    7614:	f3 1f       	adc	r31, r19
    7616:	81 93       	st	Z+, r24
    7618:	91 93       	st	Z+, r25
    761a:	22 50       	subi	r18, 0x02	; 2
    761c:	31 09       	sbc	r19, r1
    761e:	39 83       	std	Y+1, r19	; 0x01
    7620:	28 83       	st	Y, r18
    7622:	3a c0       	rjmp	.+116    	; 0x7698 <malloc+0x124>
    7624:	20 91 fb 0a 	lds	r18, 0x0AFB	; 0x800afb <__brkval>
    7628:	30 91 fc 0a 	lds	r19, 0x0AFC	; 0x800afc <__brkval+0x1>
    762c:	23 2b       	or	r18, r19
    762e:	41 f4       	brne	.+16     	; 0x7640 <malloc+0xcc>
    7630:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    7634:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    7638:	30 93 fc 0a 	sts	0x0AFC, r19	; 0x800afc <__brkval+0x1>
    763c:	20 93 fb 0a 	sts	0x0AFB, r18	; 0x800afb <__brkval>
    7640:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    7644:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    7648:	21 15       	cp	r18, r1
    764a:	31 05       	cpc	r19, r1
    764c:	41 f4       	brne	.+16     	; 0x765e <malloc+0xea>
    764e:	2d b7       	in	r18, 0x3d	; 61
    7650:	3e b7       	in	r19, 0x3e	; 62
    7652:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7656:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    765a:	24 1b       	sub	r18, r20
    765c:	35 0b       	sbc	r19, r21
    765e:	e0 91 fb 0a 	lds	r30, 0x0AFB	; 0x800afb <__brkval>
    7662:	f0 91 fc 0a 	lds	r31, 0x0AFC	; 0x800afc <__brkval+0x1>
    7666:	e2 17       	cp	r30, r18
    7668:	f3 07       	cpc	r31, r19
    766a:	a0 f4       	brcc	.+40     	; 0x7694 <malloc+0x120>
    766c:	2e 1b       	sub	r18, r30
    766e:	3f 0b       	sbc	r19, r31
    7670:	28 17       	cp	r18, r24
    7672:	39 07       	cpc	r19, r25
    7674:	78 f0       	brcs	.+30     	; 0x7694 <malloc+0x120>
    7676:	ac 01       	movw	r20, r24
    7678:	4e 5f       	subi	r20, 0xFE	; 254
    767a:	5f 4f       	sbci	r21, 0xFF	; 255
    767c:	24 17       	cp	r18, r20
    767e:	35 07       	cpc	r19, r21
    7680:	48 f0       	brcs	.+18     	; 0x7694 <malloc+0x120>
    7682:	4e 0f       	add	r20, r30
    7684:	5f 1f       	adc	r21, r31
    7686:	50 93 fc 0a 	sts	0x0AFC, r21	; 0x800afc <__brkval+0x1>
    768a:	40 93 fb 0a 	sts	0x0AFB, r20	; 0x800afb <__brkval>
    768e:	81 93       	st	Z+, r24
    7690:	91 93       	st	Z+, r25
    7692:	02 c0       	rjmp	.+4      	; 0x7698 <malloc+0x124>
    7694:	e0 e0       	ldi	r30, 0x00	; 0
    7696:	f0 e0       	ldi	r31, 0x00	; 0
    7698:	cf 01       	movw	r24, r30
    769a:	df 91       	pop	r29
    769c:	cf 91       	pop	r28
    769e:	1f 91       	pop	r17
    76a0:	0f 91       	pop	r16
    76a2:	08 95       	ret

000076a4 <free>:
    76a4:	cf 93       	push	r28
    76a6:	df 93       	push	r29
    76a8:	00 97       	sbiw	r24, 0x00	; 0
    76aa:	09 f4       	brne	.+2      	; 0x76ae <free+0xa>
    76ac:	81 c0       	rjmp	.+258    	; 0x77b0 <free+0x10c>
    76ae:	fc 01       	movw	r30, r24
    76b0:	32 97       	sbiw	r30, 0x02	; 2
    76b2:	13 82       	std	Z+3, r1	; 0x03
    76b4:	12 82       	std	Z+2, r1	; 0x02
    76b6:	a0 91 fd 0a 	lds	r26, 0x0AFD	; 0x800afd <__flp>
    76ba:	b0 91 fe 0a 	lds	r27, 0x0AFE	; 0x800afe <__flp+0x1>
    76be:	10 97       	sbiw	r26, 0x00	; 0
    76c0:	81 f4       	brne	.+32     	; 0x76e2 <free+0x3e>
    76c2:	20 81       	ld	r18, Z
    76c4:	31 81       	ldd	r19, Z+1	; 0x01
    76c6:	82 0f       	add	r24, r18
    76c8:	93 1f       	adc	r25, r19
    76ca:	20 91 fb 0a 	lds	r18, 0x0AFB	; 0x800afb <__brkval>
    76ce:	30 91 fc 0a 	lds	r19, 0x0AFC	; 0x800afc <__brkval+0x1>
    76d2:	28 17       	cp	r18, r24
    76d4:	39 07       	cpc	r19, r25
    76d6:	51 f5       	brne	.+84     	; 0x772c <free+0x88>
    76d8:	f0 93 fc 0a 	sts	0x0AFC, r31	; 0x800afc <__brkval+0x1>
    76dc:	e0 93 fb 0a 	sts	0x0AFB, r30	; 0x800afb <__brkval>
    76e0:	67 c0       	rjmp	.+206    	; 0x77b0 <free+0x10c>
    76e2:	ed 01       	movw	r28, r26
    76e4:	20 e0       	ldi	r18, 0x00	; 0
    76e6:	30 e0       	ldi	r19, 0x00	; 0
    76e8:	ce 17       	cp	r28, r30
    76ea:	df 07       	cpc	r29, r31
    76ec:	40 f4       	brcc	.+16     	; 0x76fe <free+0x5a>
    76ee:	4a 81       	ldd	r20, Y+2	; 0x02
    76f0:	5b 81       	ldd	r21, Y+3	; 0x03
    76f2:	9e 01       	movw	r18, r28
    76f4:	41 15       	cp	r20, r1
    76f6:	51 05       	cpc	r21, r1
    76f8:	f1 f0       	breq	.+60     	; 0x7736 <free+0x92>
    76fa:	ea 01       	movw	r28, r20
    76fc:	f5 cf       	rjmp	.-22     	; 0x76e8 <free+0x44>
    76fe:	d3 83       	std	Z+3, r29	; 0x03
    7700:	c2 83       	std	Z+2, r28	; 0x02
    7702:	40 81       	ld	r20, Z
    7704:	51 81       	ldd	r21, Z+1	; 0x01
    7706:	84 0f       	add	r24, r20
    7708:	95 1f       	adc	r25, r21
    770a:	c8 17       	cp	r28, r24
    770c:	d9 07       	cpc	r29, r25
    770e:	59 f4       	brne	.+22     	; 0x7726 <free+0x82>
    7710:	88 81       	ld	r24, Y
    7712:	99 81       	ldd	r25, Y+1	; 0x01
    7714:	84 0f       	add	r24, r20
    7716:	95 1f       	adc	r25, r21
    7718:	02 96       	adiw	r24, 0x02	; 2
    771a:	91 83       	std	Z+1, r25	; 0x01
    771c:	80 83       	st	Z, r24
    771e:	8a 81       	ldd	r24, Y+2	; 0x02
    7720:	9b 81       	ldd	r25, Y+3	; 0x03
    7722:	93 83       	std	Z+3, r25	; 0x03
    7724:	82 83       	std	Z+2, r24	; 0x02
    7726:	21 15       	cp	r18, r1
    7728:	31 05       	cpc	r19, r1
    772a:	29 f4       	brne	.+10     	; 0x7736 <free+0x92>
    772c:	f0 93 fe 0a 	sts	0x0AFE, r31	; 0x800afe <__flp+0x1>
    7730:	e0 93 fd 0a 	sts	0x0AFD, r30	; 0x800afd <__flp>
    7734:	3d c0       	rjmp	.+122    	; 0x77b0 <free+0x10c>
    7736:	e9 01       	movw	r28, r18
    7738:	fb 83       	std	Y+3, r31	; 0x03
    773a:	ea 83       	std	Y+2, r30	; 0x02
    773c:	49 91       	ld	r20, Y+
    773e:	59 91       	ld	r21, Y+
    7740:	c4 0f       	add	r28, r20
    7742:	d5 1f       	adc	r29, r21
    7744:	ec 17       	cp	r30, r28
    7746:	fd 07       	cpc	r31, r29
    7748:	61 f4       	brne	.+24     	; 0x7762 <free+0xbe>
    774a:	80 81       	ld	r24, Z
    774c:	91 81       	ldd	r25, Z+1	; 0x01
    774e:	84 0f       	add	r24, r20
    7750:	95 1f       	adc	r25, r21
    7752:	02 96       	adiw	r24, 0x02	; 2
    7754:	e9 01       	movw	r28, r18
    7756:	99 83       	std	Y+1, r25	; 0x01
    7758:	88 83       	st	Y, r24
    775a:	82 81       	ldd	r24, Z+2	; 0x02
    775c:	93 81       	ldd	r25, Z+3	; 0x03
    775e:	9b 83       	std	Y+3, r25	; 0x03
    7760:	8a 83       	std	Y+2, r24	; 0x02
    7762:	e0 e0       	ldi	r30, 0x00	; 0
    7764:	f0 e0       	ldi	r31, 0x00	; 0
    7766:	12 96       	adiw	r26, 0x02	; 2
    7768:	8d 91       	ld	r24, X+
    776a:	9c 91       	ld	r25, X
    776c:	13 97       	sbiw	r26, 0x03	; 3
    776e:	00 97       	sbiw	r24, 0x00	; 0
    7770:	19 f0       	breq	.+6      	; 0x7778 <free+0xd4>
    7772:	fd 01       	movw	r30, r26
    7774:	dc 01       	movw	r26, r24
    7776:	f7 cf       	rjmp	.-18     	; 0x7766 <free+0xc2>
    7778:	8d 91       	ld	r24, X+
    777a:	9c 91       	ld	r25, X
    777c:	11 97       	sbiw	r26, 0x01	; 1
    777e:	9d 01       	movw	r18, r26
    7780:	2e 5f       	subi	r18, 0xFE	; 254
    7782:	3f 4f       	sbci	r19, 0xFF	; 255
    7784:	82 0f       	add	r24, r18
    7786:	93 1f       	adc	r25, r19
    7788:	20 91 fb 0a 	lds	r18, 0x0AFB	; 0x800afb <__brkval>
    778c:	30 91 fc 0a 	lds	r19, 0x0AFC	; 0x800afc <__brkval+0x1>
    7790:	28 17       	cp	r18, r24
    7792:	39 07       	cpc	r19, r25
    7794:	69 f4       	brne	.+26     	; 0x77b0 <free+0x10c>
    7796:	30 97       	sbiw	r30, 0x00	; 0
    7798:	29 f4       	brne	.+10     	; 0x77a4 <free+0x100>
    779a:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__flp+0x1>
    779e:	10 92 fd 0a 	sts	0x0AFD, r1	; 0x800afd <__flp>
    77a2:	02 c0       	rjmp	.+4      	; 0x77a8 <free+0x104>
    77a4:	13 82       	std	Z+3, r1	; 0x03
    77a6:	12 82       	std	Z+2, r1	; 0x02
    77a8:	b0 93 fc 0a 	sts	0x0AFC, r27	; 0x800afc <__brkval+0x1>
    77ac:	a0 93 fb 0a 	sts	0x0AFB, r26	; 0x800afb <__brkval>
    77b0:	df 91       	pop	r29
    77b2:	cf 91       	pop	r28
    77b4:	08 95       	ret

000077b6 <realloc>:
    77b6:	6f 92       	push	r6
    77b8:	7f 92       	push	r7
    77ba:	8f 92       	push	r8
    77bc:	9f 92       	push	r9
    77be:	af 92       	push	r10
    77c0:	bf 92       	push	r11
    77c2:	cf 92       	push	r12
    77c4:	df 92       	push	r13
    77c6:	ef 92       	push	r14
    77c8:	ff 92       	push	r15
    77ca:	0f 93       	push	r16
    77cc:	1f 93       	push	r17
    77ce:	cf 93       	push	r28
    77d0:	df 93       	push	r29
    77d2:	00 97       	sbiw	r24, 0x00	; 0
    77d4:	81 f4       	brne	.+32     	; 0x77f6 <realloc+0x40>
    77d6:	cb 01       	movw	r24, r22
    77d8:	df 91       	pop	r29
    77da:	cf 91       	pop	r28
    77dc:	1f 91       	pop	r17
    77de:	0f 91       	pop	r16
    77e0:	ff 90       	pop	r15
    77e2:	ef 90       	pop	r14
    77e4:	df 90       	pop	r13
    77e6:	cf 90       	pop	r12
    77e8:	bf 90       	pop	r11
    77ea:	af 90       	pop	r10
    77ec:	9f 90       	pop	r9
    77ee:	8f 90       	pop	r8
    77f0:	7f 90       	pop	r7
    77f2:	6f 90       	pop	r6
    77f4:	bf ce       	rjmp	.-642    	; 0x7574 <malloc>
    77f6:	fc 01       	movw	r30, r24
    77f8:	e6 0f       	add	r30, r22
    77fa:	f7 1f       	adc	r31, r23
    77fc:	9c 01       	movw	r18, r24
    77fe:	22 50       	subi	r18, 0x02	; 2
    7800:	31 09       	sbc	r19, r1
    7802:	e2 17       	cp	r30, r18
    7804:	f3 07       	cpc	r31, r19
    7806:	08 f4       	brcc	.+2      	; 0x780a <realloc+0x54>
    7808:	a5 c0       	rjmp	.+330    	; 0x7954 <realloc+0x19e>
    780a:	ec 01       	movw	r28, r24
    780c:	d9 01       	movw	r26, r18
    780e:	0d 91       	ld	r16, X+
    7810:	1c 91       	ld	r17, X
    7812:	11 97       	sbiw	r26, 0x01	; 1
    7814:	06 17       	cp	r16, r22
    7816:	17 07       	cpc	r17, r23
    7818:	a8 f0       	brcs	.+42     	; 0x7844 <realloc+0x8e>
    781a:	05 30       	cpi	r16, 0x05	; 5
    781c:	11 05       	cpc	r17, r1
    781e:	08 f4       	brcc	.+2      	; 0x7822 <realloc+0x6c>
    7820:	97 c0       	rjmp	.+302    	; 0x7950 <realloc+0x19a>
    7822:	c8 01       	movw	r24, r16
    7824:	04 97       	sbiw	r24, 0x04	; 4
    7826:	86 17       	cp	r24, r22
    7828:	97 07       	cpc	r25, r23
    782a:	08 f4       	brcc	.+2      	; 0x782e <realloc+0x78>
    782c:	91 c0       	rjmp	.+290    	; 0x7950 <realloc+0x19a>
    782e:	02 50       	subi	r16, 0x02	; 2
    7830:	11 09       	sbc	r17, r1
    7832:	06 1b       	sub	r16, r22
    7834:	17 0b       	sbc	r17, r23
    7836:	01 93       	st	Z+, r16
    7838:	11 93       	st	Z+, r17
    783a:	6d 93       	st	X+, r22
    783c:	7c 93       	st	X, r23
    783e:	cf 01       	movw	r24, r30
    7840:	31 df       	rcall	.-414    	; 0x76a4 <free>
    7842:	86 c0       	rjmp	.+268    	; 0x7950 <realloc+0x19a>
    7844:	5b 01       	movw	r10, r22
    7846:	a0 1a       	sub	r10, r16
    7848:	b1 0a       	sbc	r11, r17
    784a:	4c 01       	movw	r8, r24
    784c:	80 0e       	add	r8, r16
    784e:	91 1e       	adc	r9, r17
    7850:	a0 91 fd 0a 	lds	r26, 0x0AFD	; 0x800afd <__flp>
    7854:	b0 91 fe 0a 	lds	r27, 0x0AFE	; 0x800afe <__flp+0x1>
    7858:	61 2c       	mov	r6, r1
    785a:	71 2c       	mov	r7, r1
    785c:	e1 2c       	mov	r14, r1
    785e:	f1 2c       	mov	r15, r1
    7860:	10 97       	sbiw	r26, 0x00	; 0
    7862:	09 f4       	brne	.+2      	; 0x7866 <realloc+0xb0>
    7864:	46 c0       	rjmp	.+140    	; 0x78f2 <realloc+0x13c>
    7866:	8d 91       	ld	r24, X+
    7868:	9c 91       	ld	r25, X
    786a:	11 97       	sbiw	r26, 0x01	; 1
    786c:	a8 15       	cp	r26, r8
    786e:	b9 05       	cpc	r27, r9
    7870:	b1 f5       	brne	.+108    	; 0x78de <realloc+0x128>
    7872:	6c 01       	movw	r12, r24
    7874:	42 e0       	ldi	r20, 0x02	; 2
    7876:	c4 0e       	add	r12, r20
    7878:	d1 1c       	adc	r13, r1
    787a:	ca 14       	cp	r12, r10
    787c:	db 04       	cpc	r13, r11
    787e:	78 f1       	brcs	.+94     	; 0x78de <realloc+0x128>
    7880:	4c 01       	movw	r8, r24
    7882:	8a 18       	sub	r8, r10
    7884:	9b 08       	sbc	r9, r11
    7886:	64 01       	movw	r12, r8
    7888:	42 e0       	ldi	r20, 0x02	; 2
    788a:	c4 0e       	add	r12, r20
    788c:	d1 1c       	adc	r13, r1
    788e:	12 96       	adiw	r26, 0x02	; 2
    7890:	bc 90       	ld	r11, X
    7892:	12 97       	sbiw	r26, 0x02	; 2
    7894:	13 96       	adiw	r26, 0x03	; 3
    7896:	ac 91       	ld	r26, X
    7898:	b5 e0       	ldi	r27, 0x05	; 5
    789a:	cb 16       	cp	r12, r27
    789c:	d1 04       	cpc	r13, r1
    789e:	40 f0       	brcs	.+16     	; 0x78b0 <realloc+0xfa>
    78a0:	b2 82       	std	Z+2, r11	; 0x02
    78a2:	a3 83       	std	Z+3, r26	; 0x03
    78a4:	91 82       	std	Z+1, r9	; 0x01
    78a6:	80 82       	st	Z, r8
    78a8:	d9 01       	movw	r26, r18
    78aa:	6d 93       	st	X+, r22
    78ac:	7c 93       	st	X, r23
    78ae:	09 c0       	rjmp	.+18     	; 0x78c2 <realloc+0x10c>
    78b0:	0e 5f       	subi	r16, 0xFE	; 254
    78b2:	1f 4f       	sbci	r17, 0xFF	; 255
    78b4:	80 0f       	add	r24, r16
    78b6:	91 1f       	adc	r25, r17
    78b8:	f9 01       	movw	r30, r18
    78ba:	91 83       	std	Z+1, r25	; 0x01
    78bc:	80 83       	st	Z, r24
    78be:	eb 2d       	mov	r30, r11
    78c0:	fa 2f       	mov	r31, r26
    78c2:	e1 14       	cp	r14, r1
    78c4:	f1 04       	cpc	r15, r1
    78c6:	31 f0       	breq	.+12     	; 0x78d4 <realloc+0x11e>
    78c8:	d7 01       	movw	r26, r14
    78ca:	13 96       	adiw	r26, 0x03	; 3
    78cc:	fc 93       	st	X, r31
    78ce:	ee 93       	st	-X, r30
    78d0:	12 97       	sbiw	r26, 0x02	; 2
    78d2:	3e c0       	rjmp	.+124    	; 0x7950 <realloc+0x19a>
    78d4:	f0 93 fe 0a 	sts	0x0AFE, r31	; 0x800afe <__flp+0x1>
    78d8:	e0 93 fd 0a 	sts	0x0AFD, r30	; 0x800afd <__flp>
    78dc:	39 c0       	rjmp	.+114    	; 0x7950 <realloc+0x19a>
    78de:	68 16       	cp	r6, r24
    78e0:	79 06       	cpc	r7, r25
    78e2:	08 f4       	brcc	.+2      	; 0x78e6 <realloc+0x130>
    78e4:	3c 01       	movw	r6, r24
    78e6:	7d 01       	movw	r14, r26
    78e8:	12 96       	adiw	r26, 0x02	; 2
    78ea:	0d 90       	ld	r0, X+
    78ec:	bc 91       	ld	r27, X
    78ee:	a0 2d       	mov	r26, r0
    78f0:	b7 cf       	rjmp	.-146    	; 0x7860 <realloc+0xaa>
    78f2:	80 91 fb 0a 	lds	r24, 0x0AFB	; 0x800afb <__brkval>
    78f6:	90 91 fc 0a 	lds	r25, 0x0AFC	; 0x800afc <__brkval+0x1>
    78fa:	88 16       	cp	r8, r24
    78fc:	99 06       	cpc	r9, r25
    78fe:	e1 f4       	brne	.+56     	; 0x7938 <realloc+0x182>
    7900:	66 16       	cp	r6, r22
    7902:	77 06       	cpc	r7, r23
    7904:	c8 f4       	brcc	.+50     	; 0x7938 <realloc+0x182>
    7906:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    790a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    790e:	00 97       	sbiw	r24, 0x00	; 0
    7910:	41 f4       	brne	.+16     	; 0x7922 <realloc+0x16c>
    7912:	8d b7       	in	r24, 0x3d	; 61
    7914:	9e b7       	in	r25, 0x3e	; 62
    7916:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    791a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    791e:	84 1b       	sub	r24, r20
    7920:	95 0b       	sbc	r25, r21
    7922:	e8 17       	cp	r30, r24
    7924:	f9 07       	cpc	r31, r25
    7926:	b0 f4       	brcc	.+44     	; 0x7954 <realloc+0x19e>
    7928:	f0 93 fc 0a 	sts	0x0AFC, r31	; 0x800afc <__brkval+0x1>
    792c:	e0 93 fb 0a 	sts	0x0AFB, r30	; 0x800afb <__brkval>
    7930:	f9 01       	movw	r30, r18
    7932:	71 83       	std	Z+1, r23	; 0x01
    7934:	60 83       	st	Z, r22
    7936:	0c c0       	rjmp	.+24     	; 0x7950 <realloc+0x19a>
    7938:	cb 01       	movw	r24, r22
    793a:	1c de       	rcall	.-968    	; 0x7574 <malloc>
    793c:	7c 01       	movw	r14, r24
    793e:	00 97       	sbiw	r24, 0x00	; 0
    7940:	49 f0       	breq	.+18     	; 0x7954 <realloc+0x19e>
    7942:	a8 01       	movw	r20, r16
    7944:	be 01       	movw	r22, r28
    7946:	1b d0       	rcall	.+54     	; 0x797e <memcpy>
    7948:	ce 01       	movw	r24, r28
    794a:	ac de       	rcall	.-680    	; 0x76a4 <free>
    794c:	c7 01       	movw	r24, r14
    794e:	04 c0       	rjmp	.+8      	; 0x7958 <realloc+0x1a2>
    7950:	ce 01       	movw	r24, r28
    7952:	02 c0       	rjmp	.+4      	; 0x7958 <realloc+0x1a2>
    7954:	80 e0       	ldi	r24, 0x00	; 0
    7956:	90 e0       	ldi	r25, 0x00	; 0
    7958:	df 91       	pop	r29
    795a:	cf 91       	pop	r28
    795c:	1f 91       	pop	r17
    795e:	0f 91       	pop	r16
    7960:	ff 90       	pop	r15
    7962:	ef 90       	pop	r14
    7964:	df 90       	pop	r13
    7966:	cf 90       	pop	r12
    7968:	bf 90       	pop	r11
    796a:	af 90       	pop	r10
    796c:	9f 90       	pop	r9
    796e:	8f 90       	pop	r8
    7970:	7f 90       	pop	r7
    7972:	6f 90       	pop	r6
    7974:	08 95       	ret

00007976 <abort>:
    7976:	81 e0       	ldi	r24, 0x01	; 1
    7978:	90 e0       	ldi	r25, 0x00	; 0
    797a:	f8 94       	cli
    797c:	c7 c2       	rjmp	.+1422   	; 0x7f0c <__do_global_dtors>

0000797e <memcpy>:
    797e:	fb 01       	movw	r30, r22
    7980:	dc 01       	movw	r26, r24
    7982:	02 c0       	rjmp	.+4      	; 0x7988 <memcpy+0xa>
    7984:	01 90       	ld	r0, Z+
    7986:	0d 92       	st	X+, r0
    7988:	41 50       	subi	r20, 0x01	; 1
    798a:	50 40       	sbci	r21, 0x00	; 0
    798c:	d8 f7       	brcc	.-10     	; 0x7984 <memcpy+0x6>
    798e:	08 95       	ret

00007990 <memset>:
    7990:	dc 01       	movw	r26, r24
    7992:	01 c0       	rjmp	.+2      	; 0x7996 <memset+0x6>
    7994:	6d 93       	st	X+, r22
    7996:	41 50       	subi	r20, 0x01	; 1
    7998:	50 40       	sbci	r21, 0x00	; 0
    799a:	e0 f7       	brcc	.-8      	; 0x7994 <memset+0x4>
    799c:	08 95       	ret

0000799e <strcpy>:
    799e:	fb 01       	movw	r30, r22
    79a0:	dc 01       	movw	r26, r24
    79a2:	01 90       	ld	r0, Z+
    79a4:	0d 92       	st	X+, r0
    79a6:	00 20       	and	r0, r0
    79a8:	e1 f7       	brne	.-8      	; 0x79a2 <strcpy+0x4>
    79aa:	08 95       	ret

000079ac <__itoa_ncheck>:
    79ac:	bb 27       	eor	r27, r27
    79ae:	4a 30       	cpi	r20, 0x0A	; 10
    79b0:	31 f4       	brne	.+12     	; 0x79be <__itoa_ncheck+0x12>
    79b2:	99 23       	and	r25, r25
    79b4:	22 f4       	brpl	.+8      	; 0x79be <__itoa_ncheck+0x12>
    79b6:	bd e2       	ldi	r27, 0x2D	; 45
    79b8:	90 95       	com	r25
    79ba:	81 95       	neg	r24
    79bc:	9f 4f       	sbci	r25, 0xFF	; 255
    79be:	30 c0       	rjmp	.+96     	; 0x7a20 <__utoa_common>

000079c0 <__ltoa_ncheck>:
    79c0:	bb 27       	eor	r27, r27
    79c2:	2a 30       	cpi	r18, 0x0A	; 10
    79c4:	51 f4       	brne	.+20     	; 0x79da <__ltoa_ncheck+0x1a>
    79c6:	99 23       	and	r25, r25
    79c8:	42 f4       	brpl	.+16     	; 0x79da <__ltoa_ncheck+0x1a>
    79ca:	bd e2       	ldi	r27, 0x2D	; 45
    79cc:	90 95       	com	r25
    79ce:	80 95       	com	r24
    79d0:	70 95       	com	r23
    79d2:	61 95       	neg	r22
    79d4:	7f 4f       	sbci	r23, 0xFF	; 255
    79d6:	8f 4f       	sbci	r24, 0xFF	; 255
    79d8:	9f 4f       	sbci	r25, 0xFF	; 255
    79da:	01 c0       	rjmp	.+2      	; 0x79de <__ultoa_common>

000079dc <__ultoa_ncheck>:
    79dc:	bb 27       	eor	r27, r27

000079de <__ultoa_common>:
    79de:	fa 01       	movw	r30, r20
    79e0:	a6 2f       	mov	r26, r22
    79e2:	62 17       	cp	r22, r18
    79e4:	71 05       	cpc	r23, r1
    79e6:	81 05       	cpc	r24, r1
    79e8:	91 05       	cpc	r25, r1
    79ea:	33 0b       	sbc	r19, r19
    79ec:	30 fb       	bst	r19, 0
    79ee:	66 f0       	brts	.+24     	; 0x7a08 <__ultoa_common+0x2a>
    79f0:	aa 27       	eor	r26, r26
    79f2:	66 0f       	add	r22, r22
    79f4:	77 1f       	adc	r23, r23
    79f6:	88 1f       	adc	r24, r24
    79f8:	99 1f       	adc	r25, r25
    79fa:	aa 1f       	adc	r26, r26
    79fc:	a2 17       	cp	r26, r18
    79fe:	10 f0       	brcs	.+4      	; 0x7a04 <__ultoa_common+0x26>
    7a00:	a2 1b       	sub	r26, r18
    7a02:	63 95       	inc	r22
    7a04:	38 50       	subi	r19, 0x08	; 8
    7a06:	a9 f7       	brne	.-22     	; 0x79f2 <__ultoa_common+0x14>
    7a08:	a0 5d       	subi	r26, 0xD0	; 208
    7a0a:	aa 33       	cpi	r26, 0x3A	; 58
    7a0c:	08 f0       	brcs	.+2      	; 0x7a10 <__ultoa_common+0x32>
    7a0e:	a9 5d       	subi	r26, 0xD9	; 217
    7a10:	a1 93       	st	Z+, r26
    7a12:	36 f7       	brtc	.-52     	; 0x79e0 <__ultoa_common+0x2>
    7a14:	b1 11       	cpse	r27, r1
    7a16:	b1 93       	st	Z+, r27
    7a18:	10 82       	st	Z, r1
    7a1a:	ca 01       	movw	r24, r20
    7a1c:	67 c2       	rjmp	.+1230   	; 0x7eec <strrev>

00007a1e <__utoa_ncheck>:
    7a1e:	bb 27       	eor	r27, r27

00007a20 <__utoa_common>:
    7a20:	fb 01       	movw	r30, r22
    7a22:	55 27       	eor	r21, r21
    7a24:	aa 27       	eor	r26, r26
    7a26:	88 0f       	add	r24, r24
    7a28:	99 1f       	adc	r25, r25
    7a2a:	aa 1f       	adc	r26, r26
    7a2c:	a4 17       	cp	r26, r20
    7a2e:	10 f0       	brcs	.+4      	; 0x7a34 <__utoa_common+0x14>
    7a30:	a4 1b       	sub	r26, r20
    7a32:	83 95       	inc	r24
    7a34:	50 51       	subi	r21, 0x10	; 16
    7a36:	b9 f7       	brne	.-18     	; 0x7a26 <__utoa_common+0x6>
    7a38:	a0 5d       	subi	r26, 0xD0	; 208
    7a3a:	aa 33       	cpi	r26, 0x3A	; 58
    7a3c:	08 f0       	brcs	.+2      	; 0x7a40 <__utoa_common+0x20>
    7a3e:	a9 5d       	subi	r26, 0xD9	; 217
    7a40:	a1 93       	st	Z+, r26
    7a42:	00 97       	sbiw	r24, 0x00	; 0
    7a44:	79 f7       	brne	.-34     	; 0x7a24 <__utoa_common+0x4>
    7a46:	b1 11       	cpse	r27, r1
    7a48:	b1 93       	st	Z+, r27
    7a4a:	11 92       	st	Z+, r1
    7a4c:	cb 01       	movw	r24, r22
    7a4e:	4e c2       	rjmp	.+1180   	; 0x7eec <strrev>

00007a50 <dtoa_prf>:
    7a50:	8f 92       	push	r8
    7a52:	9f 92       	push	r9
    7a54:	af 92       	push	r10
    7a56:	bf 92       	push	r11
    7a58:	cf 92       	push	r12
    7a5a:	df 92       	push	r13
    7a5c:	ef 92       	push	r14
    7a5e:	ff 92       	push	r15
    7a60:	0f 93       	push	r16
    7a62:	1f 93       	push	r17
    7a64:	cf 93       	push	r28
    7a66:	df 93       	push	r29
    7a68:	cd b7       	in	r28, 0x3d	; 61
    7a6a:	de b7       	in	r29, 0x3e	; 62
    7a6c:	29 97       	sbiw	r28, 0x09	; 9
    7a6e:	0f b6       	in	r0, 0x3f	; 63
    7a70:	f8 94       	cli
    7a72:	de bf       	out	0x3e, r29	; 62
    7a74:	0f be       	out	0x3f, r0	; 63
    7a76:	cd bf       	out	0x3d, r28	; 61
    7a78:	6a 01       	movw	r12, r20
    7a7a:	12 2f       	mov	r17, r18
    7a7c:	b0 2e       	mov	r11, r16
    7a7e:	2b e3       	ldi	r18, 0x3B	; 59
    7a80:	20 17       	cp	r18, r16
    7a82:	20 f0       	brcs	.+8      	; 0x7a8c <dtoa_prf+0x3c>
    7a84:	ff 24       	eor	r15, r15
    7a86:	f3 94       	inc	r15
    7a88:	f0 0e       	add	r15, r16
    7a8a:	02 c0       	rjmp	.+4      	; 0x7a90 <dtoa_prf+0x40>
    7a8c:	2c e3       	ldi	r18, 0x3C	; 60
    7a8e:	f2 2e       	mov	r15, r18
    7a90:	0f 2d       	mov	r16, r15
    7a92:	27 e0       	ldi	r18, 0x07	; 7
    7a94:	ae 01       	movw	r20, r28
    7a96:	4f 5f       	subi	r20, 0xFF	; 255
    7a98:	5f 4f       	sbci	r21, 0xFF	; 255
    7a9a:	50 d1       	rcall	.+672    	; 0x7d3c <__ftoa_engine>
    7a9c:	bc 01       	movw	r22, r24
    7a9e:	49 81       	ldd	r20, Y+1	; 0x01
    7aa0:	84 2f       	mov	r24, r20
    7aa2:	89 70       	andi	r24, 0x09	; 9
    7aa4:	81 30       	cpi	r24, 0x01	; 1
    7aa6:	31 f0       	breq	.+12     	; 0x7ab4 <dtoa_prf+0x64>
    7aa8:	e1 fc       	sbrc	r14, 1
    7aaa:	06 c0       	rjmp	.+12     	; 0x7ab8 <dtoa_prf+0x68>
    7aac:	e0 fe       	sbrs	r14, 0
    7aae:	06 c0       	rjmp	.+12     	; 0x7abc <dtoa_prf+0x6c>
    7ab0:	90 e2       	ldi	r25, 0x20	; 32
    7ab2:	05 c0       	rjmp	.+10     	; 0x7abe <dtoa_prf+0x6e>
    7ab4:	9d e2       	ldi	r25, 0x2D	; 45
    7ab6:	03 c0       	rjmp	.+6      	; 0x7abe <dtoa_prf+0x6e>
    7ab8:	9b e2       	ldi	r25, 0x2B	; 43
    7aba:	01 c0       	rjmp	.+2      	; 0x7abe <dtoa_prf+0x6e>
    7abc:	90 e0       	ldi	r25, 0x00	; 0
    7abe:	5e 2d       	mov	r21, r14
    7ac0:	50 71       	andi	r21, 0x10	; 16
    7ac2:	43 ff       	sbrs	r20, 3
    7ac4:	3c c0       	rjmp	.+120    	; 0x7b3e <dtoa_prf+0xee>
    7ac6:	91 11       	cpse	r25, r1
    7ac8:	02 c0       	rjmp	.+4      	; 0x7ace <dtoa_prf+0x7e>
    7aca:	83 e0       	ldi	r24, 0x03	; 3
    7acc:	01 c0       	rjmp	.+2      	; 0x7ad0 <dtoa_prf+0x80>
    7ace:	84 e0       	ldi	r24, 0x04	; 4
    7ad0:	81 17       	cp	r24, r17
    7ad2:	18 f4       	brcc	.+6      	; 0x7ada <dtoa_prf+0x8a>
    7ad4:	21 2f       	mov	r18, r17
    7ad6:	28 1b       	sub	r18, r24
    7ad8:	01 c0       	rjmp	.+2      	; 0x7adc <dtoa_prf+0x8c>
    7ada:	20 e0       	ldi	r18, 0x00	; 0
    7adc:	51 11       	cpse	r21, r1
    7ade:	0b c0       	rjmp	.+22     	; 0x7af6 <dtoa_prf+0xa6>
    7ae0:	f6 01       	movw	r30, r12
    7ae2:	82 2f       	mov	r24, r18
    7ae4:	30 e2       	ldi	r19, 0x20	; 32
    7ae6:	88 23       	and	r24, r24
    7ae8:	19 f0       	breq	.+6      	; 0x7af0 <dtoa_prf+0xa0>
    7aea:	31 93       	st	Z+, r19
    7aec:	81 50       	subi	r24, 0x01	; 1
    7aee:	fb cf       	rjmp	.-10     	; 0x7ae6 <dtoa_prf+0x96>
    7af0:	c2 0e       	add	r12, r18
    7af2:	d1 1c       	adc	r13, r1
    7af4:	20 e0       	ldi	r18, 0x00	; 0
    7af6:	99 23       	and	r25, r25
    7af8:	29 f0       	breq	.+10     	; 0x7b04 <dtoa_prf+0xb4>
    7afa:	d6 01       	movw	r26, r12
    7afc:	9c 93       	st	X, r25
    7afe:	f6 01       	movw	r30, r12
    7b00:	31 96       	adiw	r30, 0x01	; 1
    7b02:	6f 01       	movw	r12, r30
    7b04:	c6 01       	movw	r24, r12
    7b06:	03 96       	adiw	r24, 0x03	; 3
    7b08:	e2 fe       	sbrs	r14, 2
    7b0a:	0a c0       	rjmp	.+20     	; 0x7b20 <dtoa_prf+0xd0>
    7b0c:	3e e4       	ldi	r19, 0x4E	; 78
    7b0e:	d6 01       	movw	r26, r12
    7b10:	3c 93       	st	X, r19
    7b12:	41 e4       	ldi	r20, 0x41	; 65
    7b14:	11 96       	adiw	r26, 0x01	; 1
    7b16:	4c 93       	st	X, r20
    7b18:	11 97       	sbiw	r26, 0x01	; 1
    7b1a:	12 96       	adiw	r26, 0x02	; 2
    7b1c:	3c 93       	st	X, r19
    7b1e:	06 c0       	rjmp	.+12     	; 0x7b2c <dtoa_prf+0xdc>
    7b20:	3e e6       	ldi	r19, 0x6E	; 110
    7b22:	f6 01       	movw	r30, r12
    7b24:	30 83       	st	Z, r19
    7b26:	41 e6       	ldi	r20, 0x61	; 97
    7b28:	41 83       	std	Z+1, r20	; 0x01
    7b2a:	32 83       	std	Z+2, r19	; 0x02
    7b2c:	fc 01       	movw	r30, r24
    7b2e:	32 2f       	mov	r19, r18
    7b30:	40 e2       	ldi	r20, 0x20	; 32
    7b32:	33 23       	and	r19, r19
    7b34:	09 f4       	brne	.+2      	; 0x7b38 <dtoa_prf+0xe8>
    7b36:	42 c0       	rjmp	.+132    	; 0x7bbc <dtoa_prf+0x16c>
    7b38:	41 93       	st	Z+, r20
    7b3a:	31 50       	subi	r19, 0x01	; 1
    7b3c:	fa cf       	rjmp	.-12     	; 0x7b32 <dtoa_prf+0xe2>
    7b3e:	42 ff       	sbrs	r20, 2
    7b40:	44 c0       	rjmp	.+136    	; 0x7bca <dtoa_prf+0x17a>
    7b42:	91 11       	cpse	r25, r1
    7b44:	02 c0       	rjmp	.+4      	; 0x7b4a <dtoa_prf+0xfa>
    7b46:	83 e0       	ldi	r24, 0x03	; 3
    7b48:	01 c0       	rjmp	.+2      	; 0x7b4c <dtoa_prf+0xfc>
    7b4a:	84 e0       	ldi	r24, 0x04	; 4
    7b4c:	81 17       	cp	r24, r17
    7b4e:	18 f4       	brcc	.+6      	; 0x7b56 <dtoa_prf+0x106>
    7b50:	21 2f       	mov	r18, r17
    7b52:	28 1b       	sub	r18, r24
    7b54:	01 c0       	rjmp	.+2      	; 0x7b58 <dtoa_prf+0x108>
    7b56:	20 e0       	ldi	r18, 0x00	; 0
    7b58:	51 11       	cpse	r21, r1
    7b5a:	0b c0       	rjmp	.+22     	; 0x7b72 <dtoa_prf+0x122>
    7b5c:	f6 01       	movw	r30, r12
    7b5e:	82 2f       	mov	r24, r18
    7b60:	30 e2       	ldi	r19, 0x20	; 32
    7b62:	88 23       	and	r24, r24
    7b64:	19 f0       	breq	.+6      	; 0x7b6c <dtoa_prf+0x11c>
    7b66:	31 93       	st	Z+, r19
    7b68:	81 50       	subi	r24, 0x01	; 1
    7b6a:	fb cf       	rjmp	.-10     	; 0x7b62 <dtoa_prf+0x112>
    7b6c:	c2 0e       	add	r12, r18
    7b6e:	d1 1c       	adc	r13, r1
    7b70:	20 e0       	ldi	r18, 0x00	; 0
    7b72:	99 23       	and	r25, r25
    7b74:	29 f0       	breq	.+10     	; 0x7b80 <dtoa_prf+0x130>
    7b76:	d6 01       	movw	r26, r12
    7b78:	9c 93       	st	X, r25
    7b7a:	f6 01       	movw	r30, r12
    7b7c:	31 96       	adiw	r30, 0x01	; 1
    7b7e:	6f 01       	movw	r12, r30
    7b80:	c6 01       	movw	r24, r12
    7b82:	03 96       	adiw	r24, 0x03	; 3
    7b84:	e2 fe       	sbrs	r14, 2
    7b86:	0b c0       	rjmp	.+22     	; 0x7b9e <dtoa_prf+0x14e>
    7b88:	39 e4       	ldi	r19, 0x49	; 73
    7b8a:	d6 01       	movw	r26, r12
    7b8c:	3c 93       	st	X, r19
    7b8e:	3e e4       	ldi	r19, 0x4E	; 78
    7b90:	11 96       	adiw	r26, 0x01	; 1
    7b92:	3c 93       	st	X, r19
    7b94:	11 97       	sbiw	r26, 0x01	; 1
    7b96:	36 e4       	ldi	r19, 0x46	; 70
    7b98:	12 96       	adiw	r26, 0x02	; 2
    7b9a:	3c 93       	st	X, r19
    7b9c:	07 c0       	rjmp	.+14     	; 0x7bac <dtoa_prf+0x15c>
    7b9e:	39 e6       	ldi	r19, 0x69	; 105
    7ba0:	f6 01       	movw	r30, r12
    7ba2:	30 83       	st	Z, r19
    7ba4:	3e e6       	ldi	r19, 0x6E	; 110
    7ba6:	31 83       	std	Z+1, r19	; 0x01
    7ba8:	36 e6       	ldi	r19, 0x66	; 102
    7baa:	32 83       	std	Z+2, r19	; 0x02
    7bac:	fc 01       	movw	r30, r24
    7bae:	32 2f       	mov	r19, r18
    7bb0:	40 e2       	ldi	r20, 0x20	; 32
    7bb2:	33 23       	and	r19, r19
    7bb4:	19 f0       	breq	.+6      	; 0x7bbc <dtoa_prf+0x16c>
    7bb6:	41 93       	st	Z+, r20
    7bb8:	31 50       	subi	r19, 0x01	; 1
    7bba:	fb cf       	rjmp	.-10     	; 0x7bb2 <dtoa_prf+0x162>
    7bbc:	fc 01       	movw	r30, r24
    7bbe:	e2 0f       	add	r30, r18
    7bc0:	f1 1d       	adc	r31, r1
    7bc2:	10 82       	st	Z, r1
    7bc4:	8e ef       	ldi	r24, 0xFE	; 254
    7bc6:	9f ef       	ldi	r25, 0xFF	; 255
    7bc8:	a6 c0       	rjmp	.+332    	; 0x7d16 <dtoa_prf+0x2c6>
    7bca:	21 e0       	ldi	r18, 0x01	; 1
    7bcc:	30 e0       	ldi	r19, 0x00	; 0
    7bce:	91 11       	cpse	r25, r1
    7bd0:	02 c0       	rjmp	.+4      	; 0x7bd6 <dtoa_prf+0x186>
    7bd2:	20 e0       	ldi	r18, 0x00	; 0
    7bd4:	30 e0       	ldi	r19, 0x00	; 0
    7bd6:	16 16       	cp	r1, r22
    7bd8:	17 06       	cpc	r1, r23
    7bda:	1c f4       	brge	.+6      	; 0x7be2 <dtoa_prf+0x192>
    7bdc:	fb 01       	movw	r30, r22
    7bde:	31 96       	adiw	r30, 0x01	; 1
    7be0:	02 c0       	rjmp	.+4      	; 0x7be6 <dtoa_prf+0x196>
    7be2:	e1 e0       	ldi	r30, 0x01	; 1
    7be4:	f0 e0       	ldi	r31, 0x00	; 0
    7be6:	2e 0f       	add	r18, r30
    7be8:	3f 1f       	adc	r19, r31
    7bea:	bb 20       	and	r11, r11
    7bec:	21 f0       	breq	.+8      	; 0x7bf6 <dtoa_prf+0x1a6>
    7bee:	eb 2d       	mov	r30, r11
    7bf0:	f0 e0       	ldi	r31, 0x00	; 0
    7bf2:	31 96       	adiw	r30, 0x01	; 1
    7bf4:	02 c0       	rjmp	.+4      	; 0x7bfa <dtoa_prf+0x1aa>
    7bf6:	e0 e0       	ldi	r30, 0x00	; 0
    7bf8:	f0 e0       	ldi	r31, 0x00	; 0
    7bfa:	2e 0f       	add	r18, r30
    7bfc:	3f 1f       	adc	r19, r31
    7bfe:	e1 2f       	mov	r30, r17
    7c00:	f0 e0       	ldi	r31, 0x00	; 0
    7c02:	2e 17       	cp	r18, r30
    7c04:	3f 07       	cpc	r19, r31
    7c06:	1c f4       	brge	.+6      	; 0x7c0e <dtoa_prf+0x1be>
    7c08:	12 1b       	sub	r17, r18
    7c0a:	21 2f       	mov	r18, r17
    7c0c:	01 c0       	rjmp	.+2      	; 0x7c10 <dtoa_prf+0x1c0>
    7c0e:	20 e0       	ldi	r18, 0x00	; 0
    7c10:	8e 2d       	mov	r24, r14
    7c12:	88 71       	andi	r24, 0x18	; 24
    7c14:	59 f4       	brne	.+22     	; 0x7c2c <dtoa_prf+0x1dc>
    7c16:	f6 01       	movw	r30, r12
    7c18:	82 2f       	mov	r24, r18
    7c1a:	30 e2       	ldi	r19, 0x20	; 32
    7c1c:	88 23       	and	r24, r24
    7c1e:	19 f0       	breq	.+6      	; 0x7c26 <dtoa_prf+0x1d6>
    7c20:	31 93       	st	Z+, r19
    7c22:	81 50       	subi	r24, 0x01	; 1
    7c24:	fb cf       	rjmp	.-10     	; 0x7c1c <dtoa_prf+0x1cc>
    7c26:	c2 0e       	add	r12, r18
    7c28:	d1 1c       	adc	r13, r1
    7c2a:	20 e0       	ldi	r18, 0x00	; 0
    7c2c:	99 23       	and	r25, r25
    7c2e:	29 f0       	breq	.+10     	; 0x7c3a <dtoa_prf+0x1ea>
    7c30:	d6 01       	movw	r26, r12
    7c32:	9c 93       	st	X, r25
    7c34:	f6 01       	movw	r30, r12
    7c36:	31 96       	adiw	r30, 0x01	; 1
    7c38:	6f 01       	movw	r12, r30
    7c3a:	51 11       	cpse	r21, r1
    7c3c:	0b c0       	rjmp	.+22     	; 0x7c54 <dtoa_prf+0x204>
    7c3e:	f6 01       	movw	r30, r12
    7c40:	82 2f       	mov	r24, r18
    7c42:	90 e3       	ldi	r25, 0x30	; 48
    7c44:	88 23       	and	r24, r24
    7c46:	19 f0       	breq	.+6      	; 0x7c4e <dtoa_prf+0x1fe>
    7c48:	91 93       	st	Z+, r25
    7c4a:	81 50       	subi	r24, 0x01	; 1
    7c4c:	fb cf       	rjmp	.-10     	; 0x7c44 <dtoa_prf+0x1f4>
    7c4e:	c2 0e       	add	r12, r18
    7c50:	d1 1c       	adc	r13, r1
    7c52:	20 e0       	ldi	r18, 0x00	; 0
    7c54:	0f 2d       	mov	r16, r15
    7c56:	06 0f       	add	r16, r22
    7c58:	9a 81       	ldd	r25, Y+2	; 0x02
    7c5a:	34 2f       	mov	r19, r20
    7c5c:	30 71       	andi	r19, 0x10	; 16
    7c5e:	44 ff       	sbrs	r20, 4
    7c60:	03 c0       	rjmp	.+6      	; 0x7c68 <dtoa_prf+0x218>
    7c62:	91 33       	cpi	r25, 0x31	; 49
    7c64:	09 f4       	brne	.+2      	; 0x7c68 <dtoa_prf+0x218>
    7c66:	01 50       	subi	r16, 0x01	; 1
    7c68:	10 16       	cp	r1, r16
    7c6a:	24 f4       	brge	.+8      	; 0x7c74 <dtoa_prf+0x224>
    7c6c:	09 30       	cpi	r16, 0x09	; 9
    7c6e:	18 f0       	brcs	.+6      	; 0x7c76 <dtoa_prf+0x226>
    7c70:	08 e0       	ldi	r16, 0x08	; 8
    7c72:	01 c0       	rjmp	.+2      	; 0x7c76 <dtoa_prf+0x226>
    7c74:	01 e0       	ldi	r16, 0x01	; 1
    7c76:	ab 01       	movw	r20, r22
    7c78:	77 ff       	sbrs	r23, 7
    7c7a:	02 c0       	rjmp	.+4      	; 0x7c80 <dtoa_prf+0x230>
    7c7c:	40 e0       	ldi	r20, 0x00	; 0
    7c7e:	50 e0       	ldi	r21, 0x00	; 0
    7c80:	fb 01       	movw	r30, r22
    7c82:	e4 1b       	sub	r30, r20
    7c84:	f5 0b       	sbc	r31, r21
    7c86:	a1 e0       	ldi	r26, 0x01	; 1
    7c88:	b0 e0       	ldi	r27, 0x00	; 0
    7c8a:	ac 0f       	add	r26, r28
    7c8c:	bd 1f       	adc	r27, r29
    7c8e:	ea 0f       	add	r30, r26
    7c90:	fb 1f       	adc	r31, r27
    7c92:	8e e2       	ldi	r24, 0x2E	; 46
    7c94:	a8 2e       	mov	r10, r24
    7c96:	4b 01       	movw	r8, r22
    7c98:	80 1a       	sub	r8, r16
    7c9a:	91 08       	sbc	r9, r1
    7c9c:	0b 2d       	mov	r16, r11
    7c9e:	10 e0       	ldi	r17, 0x00	; 0
    7ca0:	11 95       	neg	r17
    7ca2:	01 95       	neg	r16
    7ca4:	11 09       	sbc	r17, r1
    7ca6:	4f 3f       	cpi	r20, 0xFF	; 255
    7ca8:	bf ef       	ldi	r27, 0xFF	; 255
    7caa:	5b 07       	cpc	r21, r27
    7cac:	21 f4       	brne	.+8      	; 0x7cb6 <dtoa_prf+0x266>
    7cae:	d6 01       	movw	r26, r12
    7cb0:	ac 92       	st	X, r10
    7cb2:	11 96       	adiw	r26, 0x01	; 1
    7cb4:	6d 01       	movw	r12, r26
    7cb6:	64 17       	cp	r22, r20
    7cb8:	75 07       	cpc	r23, r21
    7cba:	2c f0       	brlt	.+10     	; 0x7cc6 <dtoa_prf+0x276>
    7cbc:	84 16       	cp	r8, r20
    7cbe:	95 06       	cpc	r9, r21
    7cc0:	14 f4       	brge	.+4      	; 0x7cc6 <dtoa_prf+0x276>
    7cc2:	81 81       	ldd	r24, Z+1	; 0x01
    7cc4:	01 c0       	rjmp	.+2      	; 0x7cc8 <dtoa_prf+0x278>
    7cc6:	80 e3       	ldi	r24, 0x30	; 48
    7cc8:	41 50       	subi	r20, 0x01	; 1
    7cca:	51 09       	sbc	r21, r1
    7ccc:	31 96       	adiw	r30, 0x01	; 1
    7cce:	d6 01       	movw	r26, r12
    7cd0:	11 96       	adiw	r26, 0x01	; 1
    7cd2:	7d 01       	movw	r14, r26
    7cd4:	40 17       	cp	r20, r16
    7cd6:	51 07       	cpc	r21, r17
    7cd8:	24 f0       	brlt	.+8      	; 0x7ce2 <dtoa_prf+0x292>
    7cda:	d6 01       	movw	r26, r12
    7cdc:	8c 93       	st	X, r24
    7cde:	67 01       	movw	r12, r14
    7ce0:	e2 cf       	rjmp	.-60     	; 0x7ca6 <dtoa_prf+0x256>
    7ce2:	64 17       	cp	r22, r20
    7ce4:	75 07       	cpc	r23, r21
    7ce6:	39 f4       	brne	.+14     	; 0x7cf6 <dtoa_prf+0x2a6>
    7ce8:	96 33       	cpi	r25, 0x36	; 54
    7cea:	20 f4       	brcc	.+8      	; 0x7cf4 <dtoa_prf+0x2a4>
    7cec:	95 33       	cpi	r25, 0x35	; 53
    7cee:	19 f4       	brne	.+6      	; 0x7cf6 <dtoa_prf+0x2a6>
    7cf0:	31 11       	cpse	r19, r1
    7cf2:	01 c0       	rjmp	.+2      	; 0x7cf6 <dtoa_prf+0x2a6>
    7cf4:	81 e3       	ldi	r24, 0x31	; 49
    7cf6:	f6 01       	movw	r30, r12
    7cf8:	80 83       	st	Z, r24
    7cfa:	f7 01       	movw	r30, r14
    7cfc:	82 2f       	mov	r24, r18
    7cfe:	90 e2       	ldi	r25, 0x20	; 32
    7d00:	88 23       	and	r24, r24
    7d02:	19 f0       	breq	.+6      	; 0x7d0a <dtoa_prf+0x2ba>
    7d04:	91 93       	st	Z+, r25
    7d06:	81 50       	subi	r24, 0x01	; 1
    7d08:	fb cf       	rjmp	.-10     	; 0x7d00 <dtoa_prf+0x2b0>
    7d0a:	f7 01       	movw	r30, r14
    7d0c:	e2 0f       	add	r30, r18
    7d0e:	f1 1d       	adc	r31, r1
    7d10:	10 82       	st	Z, r1
    7d12:	80 e0       	ldi	r24, 0x00	; 0
    7d14:	90 e0       	ldi	r25, 0x00	; 0
    7d16:	29 96       	adiw	r28, 0x09	; 9
    7d18:	0f b6       	in	r0, 0x3f	; 63
    7d1a:	f8 94       	cli
    7d1c:	de bf       	out	0x3e, r29	; 62
    7d1e:	0f be       	out	0x3f, r0	; 63
    7d20:	cd bf       	out	0x3d, r28	; 61
    7d22:	df 91       	pop	r29
    7d24:	cf 91       	pop	r28
    7d26:	1f 91       	pop	r17
    7d28:	0f 91       	pop	r16
    7d2a:	ff 90       	pop	r15
    7d2c:	ef 90       	pop	r14
    7d2e:	df 90       	pop	r13
    7d30:	cf 90       	pop	r12
    7d32:	bf 90       	pop	r11
    7d34:	af 90       	pop	r10
    7d36:	9f 90       	pop	r9
    7d38:	8f 90       	pop	r8
    7d3a:	08 95       	ret

00007d3c <__ftoa_engine>:
    7d3c:	28 30       	cpi	r18, 0x08	; 8
    7d3e:	08 f0       	brcs	.+2      	; 0x7d42 <__ftoa_engine+0x6>
    7d40:	27 e0       	ldi	r18, 0x07	; 7
    7d42:	33 27       	eor	r19, r19
    7d44:	da 01       	movw	r26, r20
    7d46:	99 0f       	add	r25, r25
    7d48:	31 1d       	adc	r19, r1
    7d4a:	87 fd       	sbrc	r24, 7
    7d4c:	91 60       	ori	r25, 0x01	; 1
    7d4e:	00 96       	adiw	r24, 0x00	; 0
    7d50:	61 05       	cpc	r22, r1
    7d52:	71 05       	cpc	r23, r1
    7d54:	39 f4       	brne	.+14     	; 0x7d64 <__ftoa_engine+0x28>
    7d56:	32 60       	ori	r19, 0x02	; 2
    7d58:	2e 5f       	subi	r18, 0xFE	; 254
    7d5a:	3d 93       	st	X+, r19
    7d5c:	30 e3       	ldi	r19, 0x30	; 48
    7d5e:	2a 95       	dec	r18
    7d60:	e1 f7       	brne	.-8      	; 0x7d5a <__ftoa_engine+0x1e>
    7d62:	08 95       	ret
    7d64:	9f 3f       	cpi	r25, 0xFF	; 255
    7d66:	30 f0       	brcs	.+12     	; 0x7d74 <__ftoa_engine+0x38>
    7d68:	80 38       	cpi	r24, 0x80	; 128
    7d6a:	71 05       	cpc	r23, r1
    7d6c:	61 05       	cpc	r22, r1
    7d6e:	09 f0       	breq	.+2      	; 0x7d72 <__ftoa_engine+0x36>
    7d70:	3c 5f       	subi	r19, 0xFC	; 252
    7d72:	3c 5f       	subi	r19, 0xFC	; 252
    7d74:	3d 93       	st	X+, r19
    7d76:	91 30       	cpi	r25, 0x01	; 1
    7d78:	08 f0       	brcs	.+2      	; 0x7d7c <__ftoa_engine+0x40>
    7d7a:	80 68       	ori	r24, 0x80	; 128
    7d7c:	91 1d       	adc	r25, r1
    7d7e:	df 93       	push	r29
    7d80:	cf 93       	push	r28
    7d82:	1f 93       	push	r17
    7d84:	0f 93       	push	r16
    7d86:	ff 92       	push	r15
    7d88:	ef 92       	push	r14
    7d8a:	19 2f       	mov	r17, r25
    7d8c:	98 7f       	andi	r25, 0xF8	; 248
    7d8e:	96 95       	lsr	r25
    7d90:	e9 2f       	mov	r30, r25
    7d92:	96 95       	lsr	r25
    7d94:	96 95       	lsr	r25
    7d96:	e9 0f       	add	r30, r25
    7d98:	ff 27       	eor	r31, r31
    7d9a:	e2 50       	subi	r30, 0x02	; 2
    7d9c:	fe 4f       	sbci	r31, 0xFE	; 254
    7d9e:	99 27       	eor	r25, r25
    7da0:	33 27       	eor	r19, r19
    7da2:	ee 24       	eor	r14, r14
    7da4:	ff 24       	eor	r15, r15
    7da6:	a7 01       	movw	r20, r14
    7da8:	e7 01       	movw	r28, r14
    7daa:	05 90       	lpm	r0, Z+
    7dac:	08 94       	sec
    7dae:	07 94       	ror	r0
    7db0:	28 f4       	brcc	.+10     	; 0x7dbc <__ftoa_engine+0x80>
    7db2:	36 0f       	add	r19, r22
    7db4:	e7 1e       	adc	r14, r23
    7db6:	f8 1e       	adc	r15, r24
    7db8:	49 1f       	adc	r20, r25
    7dba:	51 1d       	adc	r21, r1
    7dbc:	66 0f       	add	r22, r22
    7dbe:	77 1f       	adc	r23, r23
    7dc0:	88 1f       	adc	r24, r24
    7dc2:	99 1f       	adc	r25, r25
    7dc4:	06 94       	lsr	r0
    7dc6:	a1 f7       	brne	.-24     	; 0x7db0 <__ftoa_engine+0x74>
    7dc8:	05 90       	lpm	r0, Z+
    7dca:	07 94       	ror	r0
    7dcc:	28 f4       	brcc	.+10     	; 0x7dd8 <__ftoa_engine+0x9c>
    7dce:	e7 0e       	add	r14, r23
    7dd0:	f8 1e       	adc	r15, r24
    7dd2:	49 1f       	adc	r20, r25
    7dd4:	56 1f       	adc	r21, r22
    7dd6:	c1 1d       	adc	r28, r1
    7dd8:	77 0f       	add	r23, r23
    7dda:	88 1f       	adc	r24, r24
    7ddc:	99 1f       	adc	r25, r25
    7dde:	66 1f       	adc	r22, r22
    7de0:	06 94       	lsr	r0
    7de2:	a1 f7       	brne	.-24     	; 0x7dcc <__ftoa_engine+0x90>
    7de4:	05 90       	lpm	r0, Z+
    7de6:	07 94       	ror	r0
    7de8:	28 f4       	brcc	.+10     	; 0x7df4 <__ftoa_engine+0xb8>
    7dea:	f8 0e       	add	r15, r24
    7dec:	49 1f       	adc	r20, r25
    7dee:	56 1f       	adc	r21, r22
    7df0:	c7 1f       	adc	r28, r23
    7df2:	d1 1d       	adc	r29, r1
    7df4:	88 0f       	add	r24, r24
    7df6:	99 1f       	adc	r25, r25
    7df8:	66 1f       	adc	r22, r22
    7dfa:	77 1f       	adc	r23, r23
    7dfc:	06 94       	lsr	r0
    7dfe:	a1 f7       	brne	.-24     	; 0x7de8 <__ftoa_engine+0xac>
    7e00:	05 90       	lpm	r0, Z+
    7e02:	07 94       	ror	r0
    7e04:	20 f4       	brcc	.+8      	; 0x7e0e <__ftoa_engine+0xd2>
    7e06:	49 0f       	add	r20, r25
    7e08:	56 1f       	adc	r21, r22
    7e0a:	c7 1f       	adc	r28, r23
    7e0c:	d8 1f       	adc	r29, r24
    7e0e:	99 0f       	add	r25, r25
    7e10:	66 1f       	adc	r22, r22
    7e12:	77 1f       	adc	r23, r23
    7e14:	88 1f       	adc	r24, r24
    7e16:	06 94       	lsr	r0
    7e18:	a9 f7       	brne	.-22     	; 0x7e04 <__ftoa_engine+0xc8>
    7e1a:	84 91       	lpm	r24, Z
    7e1c:	10 95       	com	r17
    7e1e:	17 70       	andi	r17, 0x07	; 7
    7e20:	41 f0       	breq	.+16     	; 0x7e32 <__ftoa_engine+0xf6>
    7e22:	d6 95       	lsr	r29
    7e24:	c7 95       	ror	r28
    7e26:	57 95       	ror	r21
    7e28:	47 95       	ror	r20
    7e2a:	f7 94       	ror	r15
    7e2c:	e7 94       	ror	r14
    7e2e:	1a 95       	dec	r17
    7e30:	c1 f7       	brne	.-16     	; 0x7e22 <__ftoa_engine+0xe6>
    7e32:	e4 ea       	ldi	r30, 0xA4	; 164
    7e34:	f1 e0       	ldi	r31, 0x01	; 1
    7e36:	68 94       	set
    7e38:	15 90       	lpm	r1, Z+
    7e3a:	15 91       	lpm	r17, Z+
    7e3c:	35 91       	lpm	r19, Z+
    7e3e:	65 91       	lpm	r22, Z+
    7e40:	95 91       	lpm	r25, Z+
    7e42:	05 90       	lpm	r0, Z+
    7e44:	7f e2       	ldi	r23, 0x2F	; 47
    7e46:	73 95       	inc	r23
    7e48:	e1 18       	sub	r14, r1
    7e4a:	f1 0a       	sbc	r15, r17
    7e4c:	43 0b       	sbc	r20, r19
    7e4e:	56 0b       	sbc	r21, r22
    7e50:	c9 0b       	sbc	r28, r25
    7e52:	d0 09       	sbc	r29, r0
    7e54:	c0 f7       	brcc	.-16     	; 0x7e46 <__ftoa_engine+0x10a>
    7e56:	e1 0c       	add	r14, r1
    7e58:	f1 1e       	adc	r15, r17
    7e5a:	43 1f       	adc	r20, r19
    7e5c:	56 1f       	adc	r21, r22
    7e5e:	c9 1f       	adc	r28, r25
    7e60:	d0 1d       	adc	r29, r0
    7e62:	7e f4       	brtc	.+30     	; 0x7e82 <__ftoa_engine+0x146>
    7e64:	70 33       	cpi	r23, 0x30	; 48
    7e66:	11 f4       	brne	.+4      	; 0x7e6c <__ftoa_engine+0x130>
    7e68:	8a 95       	dec	r24
    7e6a:	e6 cf       	rjmp	.-52     	; 0x7e38 <__ftoa_engine+0xfc>
    7e6c:	e8 94       	clt
    7e6e:	01 50       	subi	r16, 0x01	; 1
    7e70:	30 f0       	brcs	.+12     	; 0x7e7e <__ftoa_engine+0x142>
    7e72:	08 0f       	add	r16, r24
    7e74:	0a f4       	brpl	.+2      	; 0x7e78 <__ftoa_engine+0x13c>
    7e76:	00 27       	eor	r16, r16
    7e78:	02 17       	cp	r16, r18
    7e7a:	08 f4       	brcc	.+2      	; 0x7e7e <__ftoa_engine+0x142>
    7e7c:	20 2f       	mov	r18, r16
    7e7e:	23 95       	inc	r18
    7e80:	02 2f       	mov	r16, r18
    7e82:	7a 33       	cpi	r23, 0x3A	; 58
    7e84:	28 f0       	brcs	.+10     	; 0x7e90 <__ftoa_engine+0x154>
    7e86:	79 e3       	ldi	r23, 0x39	; 57
    7e88:	7d 93       	st	X+, r23
    7e8a:	2a 95       	dec	r18
    7e8c:	e9 f7       	brne	.-6      	; 0x7e88 <__ftoa_engine+0x14c>
    7e8e:	10 c0       	rjmp	.+32     	; 0x7eb0 <__ftoa_engine+0x174>
    7e90:	7d 93       	st	X+, r23
    7e92:	2a 95       	dec	r18
    7e94:	89 f6       	brne	.-94     	; 0x7e38 <__ftoa_engine+0xfc>
    7e96:	06 94       	lsr	r0
    7e98:	97 95       	ror	r25
    7e9a:	67 95       	ror	r22
    7e9c:	37 95       	ror	r19
    7e9e:	17 95       	ror	r17
    7ea0:	17 94       	ror	r1
    7ea2:	e1 18       	sub	r14, r1
    7ea4:	f1 0a       	sbc	r15, r17
    7ea6:	43 0b       	sbc	r20, r19
    7ea8:	56 0b       	sbc	r21, r22
    7eaa:	c9 0b       	sbc	r28, r25
    7eac:	d0 09       	sbc	r29, r0
    7eae:	98 f0       	brcs	.+38     	; 0x7ed6 <__ftoa_engine+0x19a>
    7eb0:	23 95       	inc	r18
    7eb2:	7e 91       	ld	r23, -X
    7eb4:	73 95       	inc	r23
    7eb6:	7a 33       	cpi	r23, 0x3A	; 58
    7eb8:	08 f0       	brcs	.+2      	; 0x7ebc <__ftoa_engine+0x180>
    7eba:	70 e3       	ldi	r23, 0x30	; 48
    7ebc:	7c 93       	st	X, r23
    7ebe:	20 13       	cpse	r18, r16
    7ec0:	b8 f7       	brcc	.-18     	; 0x7eb0 <__ftoa_engine+0x174>
    7ec2:	7e 91       	ld	r23, -X
    7ec4:	70 61       	ori	r23, 0x10	; 16
    7ec6:	7d 93       	st	X+, r23
    7ec8:	30 f0       	brcs	.+12     	; 0x7ed6 <__ftoa_engine+0x19a>
    7eca:	83 95       	inc	r24
    7ecc:	71 e3       	ldi	r23, 0x31	; 49
    7ece:	7d 93       	st	X+, r23
    7ed0:	70 e3       	ldi	r23, 0x30	; 48
    7ed2:	2a 95       	dec	r18
    7ed4:	e1 f7       	brne	.-8      	; 0x7ece <__ftoa_engine+0x192>
    7ed6:	11 24       	eor	r1, r1
    7ed8:	ef 90       	pop	r14
    7eda:	ff 90       	pop	r15
    7edc:	0f 91       	pop	r16
    7ede:	1f 91       	pop	r17
    7ee0:	cf 91       	pop	r28
    7ee2:	df 91       	pop	r29
    7ee4:	99 27       	eor	r25, r25
    7ee6:	87 fd       	sbrc	r24, 7
    7ee8:	90 95       	com	r25
    7eea:	08 95       	ret

00007eec <strrev>:
    7eec:	dc 01       	movw	r26, r24
    7eee:	fc 01       	movw	r30, r24
    7ef0:	67 2f       	mov	r22, r23
    7ef2:	71 91       	ld	r23, Z+
    7ef4:	77 23       	and	r23, r23
    7ef6:	e1 f7       	brne	.-8      	; 0x7ef0 <strrev+0x4>
    7ef8:	32 97       	sbiw	r30, 0x02	; 2
    7efa:	04 c0       	rjmp	.+8      	; 0x7f04 <strrev+0x18>
    7efc:	7c 91       	ld	r23, X
    7efe:	6d 93       	st	X+, r22
    7f00:	70 83       	st	Z, r23
    7f02:	62 91       	ld	r22, -Z
    7f04:	ae 17       	cp	r26, r30
    7f06:	bf 07       	cpc	r27, r31
    7f08:	c8 f3       	brcs	.-14     	; 0x7efc <strrev+0x10>
    7f0a:	08 95       	ret

00007f0c <__do_global_dtors>:
    7f0c:	12 e0       	ldi	r17, 0x02	; 2
    7f0e:	c1 e6       	ldi	r28, 0x61	; 97
    7f10:	d2 e0       	ldi	r29, 0x02	; 2
    7f12:	00 e0       	ldi	r16, 0x00	; 0
    7f14:	05 c0       	rjmp	.+10     	; 0x7f20 <__do_global_dtors+0x14>
    7f16:	80 2f       	mov	r24, r16
    7f18:	fe 01       	movw	r30, r28
    7f1a:	05 db       	rcall	.-2550   	; 0x7526 <__tablejump2__>
    7f1c:	21 96       	adiw	r28, 0x01	; 1
    7f1e:	01 1d       	adc	r16, r1
    7f20:	c2 36       	cpi	r28, 0x62	; 98
    7f22:	d1 07       	cpc	r29, r17
    7f24:	80 e0       	ldi	r24, 0x00	; 0
    7f26:	08 07       	cpc	r16, r24
    7f28:	b1 f7       	brne	.-20     	; 0x7f16 <__do_global_dtors+0xa>
    7f2a:	f8 94       	cli

00007f2c <__stop_program>:
    7f2c:	ff cf       	rjmp	.-2      	; 0x7f2c <__stop_program>
