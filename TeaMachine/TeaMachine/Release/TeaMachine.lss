
TeaMachine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000806  00800200  00006ae0  00006b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  00800a06  00800a06  0000737a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000737a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000073ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000012a8  00000000  00000000  000073ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002adb3  00000000  00000000  00008694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000785a  00000000  00000000  00033447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a5da  00000000  00000000  0003aca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000395c  00000000  00000000  0004527c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008052  00000000  00000000  00048bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012906  00000000  00000000  00050c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001170  00000000  00000000  00063530  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	db c1       	rjmp	.+950    	; 0x3b8 <__dtors_end>
       2:	00 00       	nop
       4:	0a c2       	rjmp	.+1044   	; 0x41a <__bad_interrupt>
       6:	00 00       	nop
       8:	08 c2       	rjmp	.+1040   	; 0x41a <__bad_interrupt>
       a:	00 00       	nop
       c:	06 c2       	rjmp	.+1036   	; 0x41a <__bad_interrupt>
       e:	00 00       	nop
      10:	04 c2       	rjmp	.+1032   	; 0x41a <__bad_interrupt>
      12:	00 00       	nop
      14:	02 c2       	rjmp	.+1028   	; 0x41a <__bad_interrupt>
      16:	00 00       	nop
      18:	00 c2       	rjmp	.+1024   	; 0x41a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	fe c1       	rjmp	.+1020   	; 0x41a <__bad_interrupt>
      1e:	00 00       	nop
      20:	fc c1       	rjmp	.+1016   	; 0x41a <__bad_interrupt>
      22:	00 00       	nop
      24:	fa c1       	rjmp	.+1012   	; 0x41a <__bad_interrupt>
      26:	00 00       	nop
      28:	f8 c1       	rjmp	.+1008   	; 0x41a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f6 c1       	rjmp	.+1004   	; 0x41a <__bad_interrupt>
      2e:	00 00       	nop
      30:	f4 c1       	rjmp	.+1000   	; 0x41a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__vector_13>
      38:	f0 c1       	rjmp	.+992    	; 0x41a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	ee c1       	rjmp	.+988    	; 0x41a <__bad_interrupt>
      3e:	00 00       	nop
      40:	ec c1       	rjmp	.+984    	; 0x41a <__bad_interrupt>
      42:	00 00       	nop
      44:	ea c1       	rjmp	.+980    	; 0x41a <__bad_interrupt>
      46:	00 00       	nop
      48:	e8 c1       	rjmp	.+976    	; 0x41a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e6 c1       	rjmp	.+972    	; 0x41a <__bad_interrupt>
      4e:	00 00       	nop
      50:	e4 c1       	rjmp	.+968    	; 0x41a <__bad_interrupt>
      52:	00 00       	nop
      54:	e2 c1       	rjmp	.+964    	; 0x41a <__bad_interrupt>
      56:	00 00       	nop
      58:	e0 c1       	rjmp	.+960    	; 0x41a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 44 2f 	jmp	0x5e88	; 0x5e88 <__vector_23>
      60:	dc c1       	rjmp	.+952    	; 0x41a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a6 2c 	jmp	0x594c	; 0x594c <__vector_25>
      68:	0c 94 dc 2c 	jmp	0x59b8	; 0x59b8 <__vector_26>
      6c:	d6 c1       	rjmp	.+940    	; 0x41a <__bad_interrupt>
      6e:	00 00       	nop
      70:	d4 c1       	rjmp	.+936    	; 0x41a <__bad_interrupt>
      72:	00 00       	nop
      74:	d2 c1       	rjmp	.+932    	; 0x41a <__bad_interrupt>
      76:	00 00       	nop
      78:	d0 c1       	rjmp	.+928    	; 0x41a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ce c1       	rjmp	.+924    	; 0x41a <__bad_interrupt>
      7e:	00 00       	nop
      80:	cc c1       	rjmp	.+920    	; 0x41a <__bad_interrupt>
      82:	00 00       	nop
      84:	ca c1       	rjmp	.+916    	; 0x41a <__bad_interrupt>
      86:	00 00       	nop
      88:	c8 c1       	rjmp	.+912    	; 0x41a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c6 c1       	rjmp	.+908    	; 0x41a <__bad_interrupt>
      8e:	00 00       	nop
      90:	c4 c1       	rjmp	.+904    	; 0x41a <__bad_interrupt>
      92:	00 00       	nop
      94:	c2 c1       	rjmp	.+900    	; 0x41a <__bad_interrupt>
      96:	00 00       	nop
      98:	c0 c1       	rjmp	.+896    	; 0x41a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	be c1       	rjmp	.+892    	; 0x41a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	bc c1       	rjmp	.+888    	; 0x41a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ba c1       	rjmp	.+884    	; 0x41a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b8 c1       	rjmp	.+880    	; 0x41a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b6 c1       	rjmp	.+876    	; 0x41a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	b4 c1       	rjmp	.+872    	; 0x41a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	b2 c1       	rjmp	.+868    	; 0x41a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	b0 c1       	rjmp	.+864    	; 0x41a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ae c1       	rjmp	.+860    	; 0x41a <__bad_interrupt>
      be:	00 00       	nop
      c0:	ac c1       	rjmp	.+856    	; 0x41a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	aa c1       	rjmp	.+852    	; 0x41a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a8 c1       	rjmp	.+848    	; 0x41a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	a6 c1       	rjmp	.+844    	; 0x41a <__bad_interrupt>
      ce:	00 00       	nop
      d0:	a4 c1       	rjmp	.+840    	; 0x41a <__bad_interrupt>
      d2:	00 00       	nop
      d4:	a2 c1       	rjmp	.+836    	; 0x41a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	a0 c1       	rjmp	.+832    	; 0x41a <__bad_interrupt>
      da:	00 00       	nop
      dc:	9e c1       	rjmp	.+828    	; 0x41a <__bad_interrupt>
      de:	00 00       	nop
      e0:	9c c1       	rjmp	.+824    	; 0x41a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5b 04       	cpc	r5, r11
      e6:	7e 04       	cpc	r7, r14
      e8:	9c 04       	cpc	r9, r12
      ea:	ad 04       	cpc	r10, r13
      ec:	cd 04       	cpc	r12, r13
      ee:	ea 04       	cpc	r14, r10
      f0:	65 06       	cpc	r6, r21
      f2:	03 05       	cpc	r16, r3
      f4:	87 05       	cpc	r24, r7
      f6:	ac 05       	cpc	r26, r12
      f8:	b5 05       	cpc	r27, r5
      fa:	0f 06       	cpc	r0, r31
      fc:	32 06       	cpc	r3, r18
      fe:	50 06       	cpc	r5, r16
     100:	6d 0d       	add	r22, r13
     102:	af 0d       	add	r26, r15
     104:	73 0d       	add	r23, r3
     106:	76 0d       	add	r23, r6
     108:	79 0d       	add	r23, r9
     10a:	7f 0d       	add	r23, r15
     10c:	af 0d       	add	r26, r15
     10e:	af 0d       	add	r26, r15
     110:	84 0d       	add	r24, r4
     112:	af 0d       	add	r26, r15
     114:	87 0d       	add	r24, r7
     116:	8c 0d       	add	r24, r12
     118:	af 0d       	add	r26, r15
     11a:	91 0d       	add	r25, r1
     11c:	96 0d       	add	r25, r6
     11e:	af 0d       	add	r26, r15
     120:	af 0d       	add	r26, r15
     122:	9b 0d       	add	r25, r11
     124:	a0 0d       	add	r26, r0
     126:	a5 0d       	add	r26, r5
     128:	af 0d       	add	r26, r15
     12a:	af 0d       	add	r26, r15
     12c:	aa 0d       	add	r26, r10
     12e:	2a 1b       	sub	r18, r26
     130:	33 1b       	sub	r19, r19
     132:	3e 1b       	sub	r19, r30
     134:	47 1b       	sub	r20, r23
     136:	53 1b       	sub	r21, r19
     138:	69 1b       	sub	r22, r25
     13a:	72 1b       	sub	r23, r18
     13c:	7e 1b       	sub	r23, r30
     13e:	96 1b       	sub	r25, r22
     140:	a2 1b       	sub	r26, r18
     142:	ae 1b       	sub	r26, r30
     144:	ba 1b       	sub	r27, r26
     146:	5e 22       	and	r5, r30
     148:	6e 22       	and	r6, r30
     14a:	71 22       	and	r7, r17
     14c:	73 22       	and	r7, r19
     14e:	76 22       	and	r7, r22
     150:	79 22       	and	r7, r25
     152:	98 22       	and	r9, r24
     154:	87 22       	and	r8, r23
     156:	15 28       	or	r1, r5
     158:	17 28       	or	r1, r7
     15a:	30 28       	or	r3, r0
     15c:	33 28       	or	r3, r3
     15e:	19 28       	or	r1, r9
     160:	1b 28       	or	r1, r11
     162:	1d 28       	or	r1, r13
     164:	21 28       	or	r2, r1
     166:	26 28       	or	r2, r6
     168:	2b 28       	or	r2, r11
     16a:	37 28       	or	r3, r7
     16c:	3c 28       	or	r3, r12
     16e:	7f 30       	cpi	r23, 0x0F	; 15
     170:	82 30       	cpi	r24, 0x02	; 2
     172:	71 30       	cpi	r23, 0x01	; 1
     174:	75 30       	cpi	r23, 0x05	; 5
     176:	7b 30       	cpi	r23, 0x0B	; 11
     178:	b9 30       	cpi	r27, 0x09	; 9
     17a:	86 30       	cpi	r24, 0x06	; 6
     17c:	8a 30       	cpi	r24, 0x0A	; 10
     17e:	90 30       	cpi	r25, 0x00	; 0
     180:	94 30       	cpi	r25, 0x04	; 4
     182:	98 30       	cpi	r25, 0x08	; 8
     184:	9e 30       	cpi	r25, 0x0E	; 14
     186:	a2 30       	cpi	r26, 0x02	; 2
     188:	a6 30       	cpi	r26, 0x06	; 6
     18a:	b9 30       	cpi	r27, 0x09	; 9
     18c:	ac 30       	cpi	r26, 0x0C	; 12
     18e:	b0 30       	cpi	r27, 0x00	; 0
     190:	b4 30       	cpi	r27, 0x04	; 4

00000192 <__trampolines_end>:
     192:	00 5e       	subi	r16, 0xE0	; 224
     194:	bc e2       	ldi	r27, 0x2C	; 44
     196:	61 3f       	cpi	r22, 0xF1	; 241
     198:	dd 83       	std	Y+5, r29	; 0x05
     19a:	c2 9c       	mul	r12, r2
     19c:	7e 20       	and	r7, r14
     19e:	a3 fd       	sbrc	r26, 3
     1a0:	1f 41       	sbci	r17, 0x1F	; 31
     1a2:	9d c3       	rjmp	.+1850   	; 0x8de <_ZN11BrewManager19AdvanceStateMachineEv+0x56>
     1a4:	21 7f       	andi	r18, 0xF1	; 241
     1a6:	fc a2       	std	Y+36, r15	; 0x24
     1a8:	40 1e       	adc	r4, r16
     1aa:	5f 01       	movw	r10, r30
     1ac:	e3 bd       	out	0x23, r30	; 35
     1ae:	3e 60       	ori	r19, 0x0E	; 14
     1b0:	82 dc       	rcall	.-1788   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     1b2:	23 7d       	andi	r18, 0xD3	; 211
     1b4:	9f c1       	rjmp	.+830    	; 0x4f4 <_ZN11BagConveyor4StopEv>
     1b6:	42 1c       	adc	r4, r2
     1b8:	fe a0       	ldd	r15, Y+38	; 0x26
     1ba:	e1 bf       	out	0x31, r30	; 49
     1bc:	5d 03       	fmul	r21, r21
     1be:	80 de       	rcall	.-768    	; 0xfffffec0 <__eeprom_end+0xff7efec0>
     1c0:	3c 62       	ori	r19, 0x2C	; 44
     1c2:	be e0       	ldi	r27, 0x0E	; 14
     1c4:	02 5c       	subi	r16, 0xC2	; 194
     1c6:	df 81       	ldd	r29, Y+7	; 0x07
     1c8:	63 3d       	cpi	r22, 0xD3	; 211
     1ca:	7c 22       	and	r7, r28
     1cc:	c0 9e       	mul	r12, r16
     1ce:	1d 43       	sbci	r17, 0x3D	; 61
     1d0:	a1 ff       	sbrs	r26, 1
     1d2:	46 18       	sub	r4, r6
     1d4:	fa a4       	ldd	r15, Y+42	; 0x2a
     1d6:	27 79       	andi	r18, 0x97	; 151
     1d8:	9b c5       	rjmp	.+2870   	; 0xd10 <_ZN11BrewManager8ContinueEv+0x32>
     1da:	84 da       	rcall	.-2808   	; 0xfffff6e4 <__eeprom_end+0xff7ef6e4>
     1dc:	38 66       	ori	r19, 0x68	; 104
     1de:	e5 bb       	out	0x15, r30	; 21
     1e0:	59 07       	cpc	r21, r25
     1e2:	db 85       	ldd	r29, Y+11	; 0x0b
     1e4:	67 39       	cpi	r22, 0x97	; 151
     1e6:	ba e4       	ldi	r27, 0x4A	; 74
     1e8:	06 58       	subi	r16, 0x86	; 134
     1ea:	19 47       	sbci	r17, 0x79	; 121
     1ec:	a5 fb       	bst	r26, 5
     1ee:	78 26       	eor	r7, r24
     1f0:	c4 9a       	sbi	0x18, 4	; 24
     1f2:	65 3b       	cpi	r22, 0xB5	; 181
     1f4:	d9 87       	std	Y+9, r29	; 0x09
     1f6:	04 5a       	subi	r16, 0xA4	; 164
     1f8:	b8 e6       	ldi	r27, 0x68	; 104
     1fa:	a7 f9       	bld	r26, 7
     1fc:	1b 45       	sbci	r17, 0x5B	; 91
     1fe:	c6 98       	cbi	0x18, 6	; 24
     200:	7a 24       	eor	r7, r10
     202:	f8 a6       	std	Y+40, r15	; 0x28
     204:	44 1a       	sub	r4, r20
     206:	99 c7       	rjmp	.+3890   	; 0x113a <_ZN11CupDetector6UpdateEv+0x86>
     208:	25 7b       	andi	r18, 0xB5	; 181
     20a:	3a 64       	ori	r19, 0x4A	; 74
     20c:	86 d8       	rcall	.-3828   	; 0xfffff31a <__eeprom_end+0xff7ef31a>
     20e:	5b 05       	cpc	r21, r11
     210:	e7 b9       	out	0x07, r30	; 7
     212:	8c d2       	rcall	.+1304   	; 0x72c <_ZN11BrewManager12BeginProcessEv+0x56>
     214:	30 6e       	ori	r19, 0xE0	; 224
     216:	ed b3       	in	r30, 0x1d	; 29
     218:	51 0f       	add	r21, r17
     21a:	4e 10       	cpse	r4, r14
     21c:	f2 ac       	ldd	r15, Z+58	; 0x3a
     21e:	2f 71       	andi	r18, 0x1F	; 31
     220:	93 cd       	rjmp	.-1242   	; 0xfffffd48 <__eeprom_end+0xff7efd48>
     222:	11 4f       	sbci	r17, 0xF1	; 241
     224:	ad f3       	brhs	.-22     	; 0x210 <__trampolines_end+0x7e>
     226:	70 2e       	mov	r7, r16
     228:	cc 92       	st	X, r12
     22a:	d3 8d       	ldd	r29, Z+27	; 0x1b
     22c:	6f 31       	cpi	r22, 0x1F	; 31
     22e:	b2 ec       	ldi	r27, 0xC2	; 194
     230:	0e 50       	subi	r16, 0x0E	; 14
     232:	af f1       	brie	.+106    	; 0x29e <digital_pin_to_timer_PGM+0xc>
     234:	13 4d       	sbci	r17, 0xD3	; 211
     236:	ce 90       	ld	r12, -X
     238:	72 2c       	mov	r7, r2
     23a:	6d 33       	cpi	r22, 0x3D	; 61
     23c:	d1 8f       	std	Z+25, r29	; 0x19
     23e:	0c 52       	subi	r16, 0x2C	; 44
     240:	b0 ee       	ldi	r27, 0xE0	; 224
     242:	32 6c       	ori	r19, 0xC2	; 194
     244:	8e d0       	rcall	.+284    	; 0x362 <digital_pin_to_port_PGM+0x44>
     246:	53 0d       	add	r21, r3
     248:	ef b1       	in	r30, 0x0f	; 15
     24a:	f0 ae       	std	Z+56, r15	; 0x38
     24c:	4c 12       	cpse	r4, r28
     24e:	91 cf       	rjmp	.-222    	; 0x172 <__SREG__+0x133>
     250:	2d 73       	andi	r18, 0x3D	; 61
     252:	ca 94       	dec	r12
     254:	76 28       	or	r7, r6
     256:	ab f5       	brvc	.+106    	; 0x2c2 <digital_pin_to_timer_PGM+0x30>
     258:	17 49       	sbci	r17, 0x97	; 151
     25a:	08 56       	subi	r16, 0x68	; 104
     25c:	b4 ea       	ldi	r27, 0xA4	; 164
     25e:	69 37       	cpi	r22, 0x79	; 121
     260:	d5 8b       	std	Z+21, r29	; 0x15
     262:	57 09       	sbc	r21, r7
     264:	eb b5       	in	r30, 0x2b	; 43
     266:	36 68       	ori	r19, 0x86	; 134
     268:	8a d4       	rcall	.+2324   	; 0xb7e <_ZN11BrewManager19AdvanceStateMachineEv+0x2f6>
     26a:	95 cb       	rjmp	.-2262   	; 0xfffff996 <__eeprom_end+0xff7ef996>
     26c:	29 77       	andi	r18, 0x79	; 121
     26e:	f4 aa       	std	Z+52, r15	; 0x34
     270:	48 16       	cp	r4, r24
     272:	e9 b7       	in	r30, 0x39	; 57
     274:	55 0b       	sbc	r21, r21
     276:	88 d6       	rcall	.+3344   	; 0xf88 <_ZN15ConveyorManager8ContinueEv+0x12>
     278:	34 6a       	ori	r19, 0xA4	; 164
     27a:	2b 75       	andi	r18, 0x5B	; 91
     27c:	97 c9       	rjmp	.-3282   	; 0xfffff5ac <__eeprom_end+0xff7ef5ac>
     27e:	4a 14       	cp	r4, r10
     280:	f6 a8       	ldd	r15, Z+54	; 0x36
     282:	74 2a       	or	r7, r20
     284:	c8 96       	adiw	r24, 0x38	; 56
     286:	15 4b       	sbci	r17, 0xB5	; 181
     288:	a9 f7       	brne	.-22     	; 0x274 <__trampolines_end+0xe2>
     28a:	b6 e8       	ldi	r27, 0x86	; 134
     28c:	0a 54       	subi	r16, 0x4A	; 74
     28e:	d7 89       	ldd	r29, Z+23	; 0x17
     290:	6b 35       	cpi	r22, 0x5B	; 91

00000292 <digital_pin_to_timer_PGM>:
     292:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     2be:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

000002d8 <digital_pin_to_bit_mask_PGM>:
     2d8:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     2e8:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     2f8:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     308:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     318:	04 08 10 20 40 80                                   ... @.

0000031e <digital_pin_to_port_PGM>:
     31e:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     32e:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     33e:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     34e:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     35e:	0b 0b 0b 0b 0b 0b                                   ......

00000364 <port_to_input_PGM>:
     364:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     374:	00 01 00 00 03 01 06 01 09 01                       ..........

0000037e <port_to_output_PGM>:
     37e:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     38e:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000398 <port_to_mode_PGM>:
     398:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     3a8:	01 01 00 00 04 01 07 01 0a 01                       ..........

000003b2 <__ctors_start>:
     3b2:	56 11       	cpse	r21, r6
     3b4:	0e 2d       	mov	r16, r14

000003b6 <__ctors_end>:
     3b6:	5a 11       	cpse	r21, r10

000003b8 <__dtors_end>:
     3b8:	11 24       	eor	r1, r1
     3ba:	1f be       	out	0x3f, r1	; 63
     3bc:	cf ef       	ldi	r28, 0xFF	; 255
     3be:	d1 e2       	ldi	r29, 0x21	; 33
     3c0:	de bf       	out	0x3e, r29	; 62
     3c2:	cd bf       	out	0x3d, r28	; 61
     3c4:	00 e0       	ldi	r16, 0x00	; 0
     3c6:	0c bf       	out	0x3c, r16	; 60

000003c8 <__do_copy_data>:
     3c8:	1a e0       	ldi	r17, 0x0A	; 10
     3ca:	a0 e0       	ldi	r26, 0x00	; 0
     3cc:	b2 e0       	ldi	r27, 0x02	; 2
     3ce:	e0 ee       	ldi	r30, 0xE0	; 224
     3d0:	fa e6       	ldi	r31, 0x6A	; 106
     3d2:	00 e0       	ldi	r16, 0x00	; 0
     3d4:	0b bf       	out	0x3b, r16	; 59
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__do_copy_data+0x14>
     3d8:	07 90       	elpm	r0, Z+
     3da:	0d 92       	st	X+, r0
     3dc:	a6 30       	cpi	r26, 0x06	; 6
     3de:	b1 07       	cpc	r27, r17
     3e0:	d9 f7       	brne	.-10     	; 0x3d8 <__do_copy_data+0x10>

000003e2 <__do_clear_bss>:
     3e2:	2a e0       	ldi	r18, 0x0A	; 10
     3e4:	a6 e0       	ldi	r26, 0x06	; 6
     3e6:	ba e0       	ldi	r27, 0x0A	; 10
     3e8:	01 c0       	rjmp	.+2      	; 0x3ec <.do_clear_bss_start>

000003ea <.do_clear_bss_loop>:
     3ea:	1d 92       	st	X+, r1

000003ec <.do_clear_bss_start>:
     3ec:	ab 3b       	cpi	r26, 0xBB	; 187
     3ee:	b2 07       	cpc	r27, r18
     3f0:	e1 f7       	brne	.-8      	; 0x3ea <.do_clear_bss_loop>

000003f2 <__do_global_ctors>:
     3f2:	11 e0       	ldi	r17, 0x01	; 1
     3f4:	cb ed       	ldi	r28, 0xDB	; 219
     3f6:	d1 e0       	ldi	r29, 0x01	; 1
     3f8:	00 e0       	ldi	r16, 0x00	; 0
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     3fc:	21 97       	sbiw	r28, 0x01	; 1
     3fe:	01 09       	sbc	r16, r1
     400:	80 2f       	mov	r24, r16
     402:	fe 01       	movw	r30, r28
     404:	0e 94 3b 33 	call	0x6676	; 0x6676 <__tablejump2__>
     408:	c9 3d       	cpi	r28, 0xD9	; 217
     40a:	d1 07       	cpc	r29, r17
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	08 07       	cpc	r16, r24
     410:	a9 f7       	brne	.-22     	; 0x3fc <__do_global_ctors+0xa>
     412:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <main>
     416:	0c 94 5f 35 	jmp	0x6abe	; 0x6abe <__do_global_dtors>

0000041a <__bad_interrupt>:
     41a:	f2 cd       	rjmp	.-1052   	; 0x0 <__vectors>

0000041c <_ZN21ATMegaApplicationBase10InitialiseEv>:
//	Initialise system
//
bool ATMegaApplicationBase::Initialise()
{
	return true;
}
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	08 95       	ret

00000420 <_ZN21ATMegaApplicationBaseC1Ev>:
//#include "System.h"

//
//	Default constructor
//
ATMegaApplicationBase::ATMegaApplicationBase()
     420:	22 e2       	ldi	r18, 0x22	; 34
     422:	32 e0       	ldi	r19, 0x02	; 2
     424:	fc 01       	movw	r30, r24
     426:	31 83       	std	Z+1, r19	; 0x01
     428:	20 83       	st	Z, r18
{
	m_pTheSystem = NULL;
     42a:	13 82       	std	Z+3, r1	; 0x03
     42c:	12 82       	std	Z+2, r1	; 0x02
     42e:	08 95       	ret

00000430 <_ZN21ATMegaApplicationBaseD1Ev>:
}

//
//	Default destructor
//
ATMegaApplicationBase::~ATMegaApplicationBase()
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	22 e2       	ldi	r18, 0x22	; 34
     436:	32 e0       	ldi	r19, 0x02	; 2
     438:	fc 01       	movw	r30, r24
     43a:	31 83       	std	Z+1, r19	; 0x01
     43c:	20 83       	st	Z, r18
{
	delete m_pTheSystem;
     43e:	c2 81       	ldd	r28, Z+2	; 0x02
     440:	d3 81       	ldd	r29, Z+3	; 0x03
     442:	20 97       	sbiw	r28, 0x00	; 0
     444:	41 f0       	breq	.+16     	; 0x456 <_ZN21ATMegaApplicationBaseD1Ev+0x26>
     446:	ce 01       	movw	r24, r28
     448:	0e 94 74 18 	call	0x30e8	; 0x30e8 <_ZN6SystemD1Ev>
     44c:	ce 01       	movw	r24, r28
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
//
//	Default destructor
//
ATMegaApplicationBase::~ATMegaApplicationBase()
{
	delete m_pTheSystem;
     452:	0c 94 49 2d 	jmp	0x5a92	; 0x5a92 <_ZdlPv>
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <_ZN21ATMegaApplicationBase9GetSystemEv>:

System *ATMegaApplicationBase::GetSystem()
{
     45c:	0f 93       	push	r16
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ec 01       	movw	r28, r24
	if( m_pTheSystem == NULL )
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	9b 81       	ldd	r25, Y+3	; 0x03
     46a:	89 2b       	or	r24, r25
     46c:	49 f4       	brne	.+18     	; 0x480 <_ZN21ATMegaApplicationBase9GetSystemEv+0x24>
	{
		m_pTheSystem = new System();
     46e:	86 e0       	ldi	r24, 0x06	; 6
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     476:	8c 01       	movw	r16, r24
     478:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <_ZN6SystemC1Ev>
     47c:	1b 83       	std	Y+3, r17	; 0x03
     47e:	0a 83       	std	Y+2, r16	; 0x02
	}
	
	return m_pTheSystem;
}
     480:	8a 81       	ldd	r24, Y+2	; 0x02
     482:	9b 81       	ldd	r25, Y+3	; 0x03
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	0f 91       	pop	r16
     48c:	08 95       	ret

0000048e <_ZN11BagConveyorC1EP10TeaMachine>:
} //BagConveyor

//
//	Default destructor
//
BagConveyor::~BagConveyor()
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	ec 01       	movw	r28, r24
     494:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
     498:	8a e2       	ldi	r24, 0x2A	; 42
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	99 83       	std	Y+1, r25	; 0x01
     49e:	88 83       	st	Y, r24
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <_ZN11BagConveyor12BeginAdvanceEv>:
//	BeginAdvance
//
//	Advance the conveyor
//
bool BagConveyor::BeginAdvance()
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_BAGCON_ADVANCE);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	8c 81       	ldd	r24, Y+4	; 0x04
     4b2:	9d 81       	ldd	r25, Y+5	; 0x05
     4b4:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	delay(500);
     4b8:	64 ef       	ldi	r22, 0xF4	; 244
     4ba:	71 e0       	ldi	r23, 0x01	; 1
     4bc:	80 e0       	ldi	r24, 0x00	; 0
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
	m_pSystem->ClearOutputRegisterBit(OUTREG_BAGCON_ADVANCE);
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	8c 81       	ldd	r24, Y+4	; 0x04
     4ca:	9d 81       	ldd	r25, Y+5	; 0x05
     4cc:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
	
	return true;
}
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <_ZN11BagConveyor4TestEv>:
//
//	Perform hardware tests
//
bool BagConveyor::Test()
{
	BeginAdvance();
     4d8:	e6 df       	rcall	.-52     	; 0x4a6 <_ZN11BagConveyor12BeginAdvanceEv>
     4da:	ff cf       	rjmp	.-2      	; 0x4da <_ZN11BagConveyor4TestEv+0x2>

000004dc <_ZN11BagConveyor12IsStationaryEv>:
//
//	Returns true if the conveyor motor has stopped
//
bool BagConveyor::IsStationary()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
     4dc:	fc 01       	movw	r30, r24
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	95 81       	ldd	r25, Z+5	; 0x05
     4e2:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>

	return ((wInputRegister & INREGMASK_BAGCON_STATIONARY) != 0);
     4e6:	26 e0       	ldi	r18, 0x06	; 6
     4e8:	96 95       	lsr	r25
     4ea:	87 95       	ror	r24
     4ec:	2a 95       	dec	r18
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <_ZN11BagConveyor12IsStationaryEv+0xc>
}
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	08 95       	ret

000004f4 <_ZN11BagConveyor4StopEv>:
//	Stop
//
//	Stop the conveyor
//
void BagConveyor::Stop()
{
     4f4:	08 95       	ret

000004f6 <_ZN6Boiler10InitialiseEv>:
//
Boiler::Boiler()
{
	m_pOneWire = NULL;
	m_pSensors = NULL;
} //Masher
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	8c 01       	movw	r16, r24
     500:	8e e0       	ldi	r24, 0x0E	; 14
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     508:	ec 01       	movw	r28, r24
     50a:	68 e0       	ldi	r22, 0x08	; 8
     50c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_ZN7OneWireC1Eh>
     510:	f8 01       	movw	r30, r16
     512:	d7 83       	std	Z+7, r29	; 0x07
     514:	c6 83       	std	Z+6, r28	; 0x06
     516:	83 e1       	ldi	r24, 0x13	; 19
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     51e:	ec 01       	movw	r28, r24
     520:	f8 01       	movw	r30, r16
     522:	66 81       	ldd	r22, Z+6	; 0x06
     524:	77 81       	ldd	r23, Z+7	; 0x07
     526:	5d d7       	rcall	.+3770   	; 0x13e2 <_ZN17DallasTemperatureC1EP7OneWire>
     528:	f8 01       	movw	r30, r16
     52a:	d1 87       	std	Z+9, r29	; 0x09
     52c:	c0 87       	std	Z+8, r28	; 0x08
     52e:	ce 01       	movw	r24, r28
     530:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_ZN17DallasTemperature5beginEv>
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	08 95       	ret

00000540 <_ZN6BoilerC1EP10TeaMachine>:

//
//	Default constructor
//
Boiler::Boiler(TeaMachine *pTeaMachine) : TeaMachineComponent( pTeaMachine )
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	ec 01       	movw	r28, r24
     546:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
     54a:	8a e4       	ldi	r24, 0x4A	; 74
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	99 83       	std	Y+1, r25	; 0x01
     550:	88 83       	st	Y, r24
{
	m_pOneWire = NULL;
     552:	1f 82       	std	Y+7, r1	; 0x07
     554:	1e 82       	std	Y+6, r1	; 0x06
	m_pSensors = NULL;
     556:	19 86       	std	Y+9, r1	; 0x09
     558:	18 86       	std	Y+8, r1	; 0x08
} //Boiler
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <_ZN6BoilerD1Ev>:

//
//	Default destructor
//
Boiler::~Boiler()
     560:	2a e4       	ldi	r18, 0x4A	; 74
     562:	32 e0       	ldi	r19, 0x02	; 2
     564:	fc 01       	movw	r30, r24
     566:	31 83       	std	Z+1, r19	; 0x01
     568:	20 83       	st	Z, r18
     56a:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <_ZN19TeaMachineComponentD1Ev>

0000056e <_ZN6Boiler18MonitorTemperatureEv>:
		
	return true;	
}

void Boiler::MonitorTemperature()
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
		// call sensors.requestTemperatures() to issue a global temperature
		// request to all devices on the bus
		//Serial.print(" Requesting boiler temperature...");
		//		  sensors.requestTemperatures(); // Send the command to get temperatures
		m_pSensors->requestTemperatures(); // Send the command to get temperatures
     574:	88 85       	ldd	r24, Y+8	; 0x08
     576:	99 85       	ldd	r25, Y+9	; 0x09
     578:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN17DallasTemperature19requestTemperaturesEv>
		//Serial.println("DONE");

		Serial.print("Boiler temperature is: ");
     57c:	6e e2       	ldi	r22, 0x2E	; 46
     57e:	72 e0       	ldi	r23, 0x02	; 2
     580:	81 e1       	ldi	r24, 0x11	; 17
     582:	9a e0       	ldi	r25, 0x0A	; 10
     584:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
		//		  Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"?
		Serial.print(m_pSensors->getTempCByIndex(0)); // Why "byIndex"?
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	88 85       	ldd	r24, Y+8	; 0x08
     58c:	99 85       	ldd	r25, Y+9	; 0x09
     58e:	0e 94 28 0c 	call	0x1850	; 0x1850 <_ZN17DallasTemperature15getTempCByIndexEh>
     592:	ab 01       	movw	r20, r22
     594:	bc 01       	movw	r22, r24
     596:	22 e0       	ldi	r18, 0x02	; 2
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	81 e1       	ldi	r24, 0x11	; 17
     59c:	9a e0       	ldi	r25, 0x0A	; 10
     59e:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <_ZN5Print5printEdi>
        Serial.print("\n");
     5a2:	65 ef       	ldi	r22, 0xF5	; 245
     5a4:	79 e0       	ldi	r23, 0x09	; 9
     5a6:	81 e1       	ldi	r24, 0x11	; 17
     5a8:	9a e0       	ldi	r25, 0x0A	; 10
		// You can have more than one IC on the same bus.
		// 0 refers to the first IC on the wire
		//delay(1000);
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
		//Serial.println("DONE");

		Serial.print("Boiler temperature is: ");
		//		  Serial.print(sensors.getTempCByIndex(0)); // Why "byIndex"?
		Serial.print(m_pSensors->getTempCByIndex(0)); // Why "byIndex"?
        Serial.print("\n");
     5ae:	0c 94 97 2d 	jmp	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>

000005b2 <_ZN6Boiler12EnableHeaterEb>:
	
	return true;
}

bool Boiler::EnableHeater(bool bSwitchOn)
{
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ba:	9d 81       	ldd	r25, Y+5	; 0x05
	if( bSwitchOn )
     5bc:	66 23       	and	r22, r22
     5be:	39 f0       	breq	.+14     	; 0x5ce <_ZN6Boiler12EnableHeaterEb+0x1c>
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_BOILERCTRL);	
     5c0:	61 e0       	ldi	r22, 0x01	; 1
     5c2:	70 e0       	ldi	r23, 0x00	; 0
     5c4:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
		MonitorTemperature();	
     5c8:	ce 01       	movw	r24, r28
     5ca:	d1 df       	rcall	.-94     	; 0x56e <_ZN6Boiler18MonitorTemperatureEv>
     5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <_ZN6Boiler12EnableHeaterEb+0x24>
	}
	else
	{
		m_pSystem->ClearOutputRegisterBit(OUTREG_BOILERCTRL);
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
	}
		
	return true;	
}
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <_ZN6Boiler4TestEv>:
    m_pSensors->requestTemperatures();
	return m_pSensors->getTempCByIndex(0);
}

bool Boiler::Test()
{   
     5de:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch action switch setting
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
     5e0:	8c 81       	ldd	r24, Y+4	; 0x04
     5e2:	9d 81       	ldd	r25, Y+5	; 0x05
     5e4:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     5e8:	93 ff       	sbrs	r25, 3
     5ea:	0f c0       	rjmp	.+30     	; 0x60a <_ZN6Boiler4TestEv+0x2c>

bool Boiler::EnableHeater(bool bSwitchOn)
{
	if( bSwitchOn )
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_BOILERCTRL);	
     5ec:	61 e0       	ldi	r22, 0x01	; 1
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	8c 81       	ldd	r24, Y+4	; 0x04
     5f2:	9d 81       	ldd	r25, Y+5	; 0x05
     5f4:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
		MonitorTemperature();	
     5f8:	ce 01       	movw	r24, r28
     5fa:	b9 df       	rcall	.-142    	; 0x56e <_ZN6Boiler18MonitorTemperatureEv>
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
		{
			// Switch boiler on
			EnableHeater(true);
				
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
     5fc:	8c 81       	ldd	r24, Y+4	; 0x04
     5fe:	9d 81       	ldd	r25, Y+5	; 0x05
     600:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     604:	93 fd       	sbrc	r25, 3
     606:	fa cf       	rjmp	.-12     	; 0x5fc <_ZN6Boiler4TestEv+0x1e>
     608:	eb cf       	rjmp	.-42     	; 0x5e0 <_ZN6Boiler4TestEv+0x2>
		}
		else
		{
			// Switch boiler off
			EnableHeater(false);
     60a:	60 e0       	ldi	r22, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	d1 df       	rcall	.-94     	; 0x5b2 <_ZN6Boiler12EnableHeaterEb>
						
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
     610:	8c 81       	ldd	r24, Y+4	; 0x04
     612:	9d 81       	ldd	r25, Y+5	; 0x05
     614:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     618:	93 ff       	sbrs	r25, 3
     61a:	fa cf       	rjmp	.-12     	; 0x610 <_ZN6Boiler4TestEv+0x32>
     61c:	e1 cf       	rjmp	.-62     	; 0x5e0 <_ZN6Boiler4TestEv+0x2>

0000061e <_ZN6Boiler15EnableExitValveEb>:
		// 0 refers to the first IC on the wire
		//delay(1000);
}

bool Boiler::EnableExitValve(bool bOpen)
{
     61e:	fc 01       	movw	r30, r24
     620:	84 81       	ldd	r24, Z+4	; 0x04
     622:	95 81       	ldd	r25, Z+5	; 0x05
	if( bOpen )
     624:	66 23       	and	r22, r22
     626:	29 f0       	breq	.+10     	; 0x632 <_ZN6Boiler15EnableExitValveEb+0x14>
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_VALVECTRL);
     628:	62 e0       	ldi	r22, 0x02	; 2
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
     630:	04 c0       	rjmp	.+8      	; 0x63a <_ZN6Boiler15EnableExitValveEb+0x1c>
	}
	else
	{
		m_pSystem->ClearOutputRegisterBit(OUTREG_VALVECTRL);
     632:	62 e0       	ldi	r22, 0x02	; 2
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
	}
	
	return true;
}
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	08 95       	ret

0000063e <_ZN6Boiler19GetWaterTemperatureEv>:

float Boiler::GetWaterTemperature()
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	ec 01       	movw	r28, r24
    m_pSensors->requestTemperatures();
     644:	88 85       	ldd	r24, Y+8	; 0x08
     646:	99 85       	ldd	r25, Y+9	; 0x09
     648:	0e 94 9c 0b 	call	0x1738	; 0x1738 <_ZN17DallasTemperature19requestTemperaturesEv>
	return m_pSensors->getTempCByIndex(0);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	88 85       	ldd	r24, Y+8	; 0x08
     650:	99 85       	ldd	r25, Y+9	; 0x09
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
}

float Boiler::GetWaterTemperature()
{
    m_pSensors->requestTemperatures();
	return m_pSensors->getTempCByIndex(0);
     656:	0c 94 28 0c 	jmp	0x1850	; 0x1850 <_ZN17DallasTemperature15getTempCByIndexEh>

0000065a <_ZN6Boiler13TestExitValveEv>:
	
	return true;
}

bool Boiler::TestExitValve()
{
     65a:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch action switch setting
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	9d 81       	ldd	r25, Y+5	; 0x05
     660:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     664:	93 ff       	sbrs	r25, 3
     666:	0d c0       	rjmp	.+26     	; 0x682 <_ZN6Boiler13TestExitValveEv+0x28>

bool Boiler::EnableExitValve(bool bOpen)
{
	if( bOpen )
	{
		m_pSystem->SetOutputRegisterBit(OUTREG_VALVECTRL);
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	8c 81       	ldd	r24, Y+4	; 0x04
     66e:	9d 81       	ldd	r25, Y+5	; 0x05
     670:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
		{
			// Open valve
			EnableExitValve(true);
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	9d 81       	ldd	r25, Y+5	; 0x05
     678:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     67c:	93 fd       	sbrc	r25, 3
     67e:	fa cf       	rjmp	.-12     	; 0x674 <_ZN6Boiler13TestExitValveEv+0x1a>
     680:	ed cf       	rjmp	.-38     	; 0x65c <_ZN6Boiler13TestExitValveEv+0x2>
		}
		else
		{
			// Close valve
			EnableExitValve(false);
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	cb df       	rcall	.-106    	; 0x61e <_ZN6Boiler15EnableExitValveEb>
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
     688:	8c 81       	ldd	r24, Y+4	; 0x04
     68a:	9d 81       	ldd	r25, Y+5	; 0x05
     68c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     690:	93 ff       	sbrs	r25, 3
     692:	fa cf       	rjmp	.-12     	; 0x688 <_ZN6Boiler13TestExitValveEv+0x2e>
     694:	e3 cf       	rjmp	.-58     	; 0x65c <_ZN6Boiler13TestExitValveEv+0x2>

00000696 <_ZN11BrewManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     696:	fc 01       	movw	r30, r24
     698:	13 a2       	std	Z+35, r1	; 0x23
     69a:	16 8a       	std	Z+22, r1	; 0x16
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret

000006a0 <_ZN11BrewManager4StopEv>:
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	ec 01       	movw	r28, r24
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	8f 89       	ldd	r24, Y+23	; 0x17
     6aa:	98 8d       	ldd	r25, Y+24	; 0x18
     6ac:	82 df       	rcall	.-252    	; 0x5b2 <_ZN6Boiler12EnableHeaterEb>
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	8f 89       	ldd	r24, Y+23	; 0x17
     6b2:	98 8d       	ldd	r25, Y+24	; 0x18
     6b4:	b4 df       	rcall	.-152    	; 0x61e <_ZN6Boiler15EnableExitValveEb>
     6b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     6b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6ba:	0e 94 25 11 	call	0x224a	; 0x224a <_ZN9Extractor4StopEv>
     6be:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6c0:	98 a1       	ldd	r25, Y+32	; 0x20
     6c2:	0e 94 a1 11 	call	0x2342	; 0x2342 <_ZN6Masher4StopEv>
     6c6:	89 8d       	ldd	r24, Y+25	; 0x19
     6c8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6ca:	14 df       	rcall	.-472    	; 0x4f4 <_ZN11BagConveyor4StopEv>
     6cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     6ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	20 c6       	rjmp	.+3136   	; 0x1316 <_ZN13CupLevelProbe4StopEv>

000006d6 <_ZN11BrewManager12BeginProcessEv>:
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	ec 01       	movw	r28, r24
     6dc:	8f 89       	ldd	r24, Y+23	; 0x17
     6de:	98 8d       	ldd	r25, Y+24	; 0x18
     6e0:	ae df       	rcall	.-164    	; 0x63e <_ZN6Boiler19GetWaterTemperatureEv>
     6e2:	68 af       	std	Y+56, r22	; 0x38
     6e4:	79 af       	std	Y+57, r23	; 0x39
     6e6:	8a af       	std	Y+58, r24	; 0x3a
     6e8:	9b af       	std	Y+59, r25	; 0x3b
     6ea:	1c a6       	std	Y+44, r1	; 0x2c
     6ec:	1d a6       	std	Y+45, r1	; 0x2d
     6ee:	1e a6       	std	Y+46, r1	; 0x2e
     6f0:	1f a6       	std	Y+47, r1	; 0x2f
     6f2:	88 a5       	ldd	r24, Y+40	; 0x28
     6f4:	99 a5       	ldd	r25, Y+41	; 0x29
     6f6:	aa a5       	ldd	r26, Y+42	; 0x2a
     6f8:	bb a5       	ldd	r27, Y+43	; 0x2b
     6fa:	88 0f       	add	r24, r24
     6fc:	99 1f       	adc	r25, r25
     6fe:	aa 1f       	adc	r26, r26
     700:	bb 1f       	adc	r27, r27
     702:	88 ab       	std	Y+48, r24	; 0x30
     704:	99 ab       	std	Y+49, r25	; 0x31
     706:	aa ab       	std	Y+50, r26	; 0x32
     708:	bb ab       	std	Y+51, r27	; 0x33
     70a:	1c aa       	std	Y+52, r1	; 0x34
     70c:	1d aa       	std	Y+53, r1	; 0x35
     70e:	1e aa       	std	Y+54, r1	; 0x36
     710:	1f aa       	std	Y+55, r1	; 0x37
     712:	6e e4       	ldi	r22, 0x4E	; 78
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	81 e1       	ldi	r24, 0x11	; 17
     718:	9a e0       	ldi	r25, 0x0A	; 10
     71a:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     71e:	48 a9       	ldd	r20, Y+48	; 0x30
     720:	59 a9       	ldd	r21, Y+49	; 0x31
     722:	6a a9       	ldd	r22, Y+50	; 0x32
     724:	7b a9       	ldd	r23, Y+51	; 0x33
     726:	2a e0       	ldi	r18, 0x0A	; 10
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	81 e1       	ldi	r24, 0x11	; 17
     72c:	9a e0       	ldi	r25, 0x0A	; 10
     72e:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <_ZN5Print5printEli>
     732:	65 ef       	ldi	r22, 0xF5	; 245
     734:	79 e0       	ldi	r23, 0x09	; 9
     736:	81 e1       	ldi	r24, 0x11	; 17
     738:	9a e0       	ldi	r25, 0x0A	; 10
     73a:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	8b a3       	std	Y+35, r24	; 0x23
     742:	1e 8a       	std	Y+22, r1	; 0x16
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <_ZN11BrewManager4TestEv>:
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ff 92       	push	r15
     752:	0f 93       	push	r16
     754:	1f 93       	push	r17
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	63 97       	sbiw	r28, 0x13	; 19
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	8c 01       	movw	r16, r24
     76c:	ce 01       	movw	r24, r28
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	6c 01       	movw	r12, r24
     772:	0e 94 cc 10 	call	0x2198	; 0x2198 <_ZN5DrinkC1Ev>
     776:	d8 01       	movw	r26, r16
     778:	92 96       	adiw	r26, 0x22	; 34
     77a:	dc 92       	st	X, r13
     77c:	ce 92       	st	-X, r12
     77e:	91 97       	sbiw	r26, 0x21	; 33
     780:	8c 85       	ldd	r24, Y+12	; 0x0c
     782:	9d 85       	ldd	r25, Y+13	; 0x0d
     784:	09 2e       	mov	r0, r25
     786:	00 0c       	add	r0, r0
     788:	aa 0b       	sbc	r26, r26
     78a:	bb 0b       	sbc	r27, r27
     78c:	f8 01       	movw	r30, r16
     78e:	80 a7       	std	Z+40, r24	; 0x28
     790:	91 a7       	std	Z+41, r25	; 0x29
     792:	a2 a7       	std	Z+42, r26	; 0x2a
     794:	b3 a7       	std	Z+43, r27	; 0x2b
     796:	d8 01       	movw	r26, r16
     798:	12 96       	adiw	r26, 0x02	; 2
     79a:	8d 91       	ld	r24, X+
     79c:	9c 91       	ld	r25, X
     79e:	13 97       	sbiw	r26, 0x03	; 3
     7a0:	5d de       	rcall	.-838    	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
     7a2:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     7a6:	93 ff       	sbrs	r25, 3
     7a8:	f6 cf       	rjmp	.-20     	; 0x796 <_ZN11BrewManager4TestEv+0x4a>
     7aa:	d8 01       	movw	r26, r16
     7ac:	ed 91       	ld	r30, X+
     7ae:	fc 91       	ld	r31, X
     7b0:	02 80       	ldd	r0, Z+2	; 0x02
     7b2:	f3 81       	ldd	r31, Z+3	; 0x03
     7b4:	e0 2d       	mov	r30, r0
     7b6:	c8 01       	movw	r24, r16
     7b8:	19 95       	eicall
     7ba:	f8 2e       	mov	r15, r24
     7bc:	81 11       	cpse	r24, r1
     7be:	07 c0       	rjmp	.+14     	; 0x7ce <_ZN11BrewManager4TestEv+0x82>
     7c0:	d8 01       	movw	r26, r16
     7c2:	ed 91       	ld	r30, X+
     7c4:	fc 91       	ld	r31, X
     7c6:	04 80       	ldd	r0, Z+4	; 0x04
     7c8:	f5 81       	ldd	r31, Z+5	; 0x05
     7ca:	e0 2d       	mov	r30, r0
     7cc:	f4 cf       	rjmp	.-24     	; 0x7b6 <_ZN11BrewManager4TestEv+0x6a>
     7ce:	c6 01       	movw	r24, r12
     7d0:	0e 94 97 10 	call	0x212e	; 0x212e <_ZN5DrinkD1Ev>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	b2 e0       	ldi	r27, 0x02	; 2
     7d8:	fb 12       	cpse	r15, r27
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	63 96       	adiw	r28, 0x13	; 19
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	ff 90       	pop	r15
     7f2:	df 90       	pop	r13
     7f4:	cf 90       	pop	r12
     7f6:	08 95       	ret

000007f8 <_ZN11BrewManager12ClearMembersEv>:
     7f8:	fc 01       	movw	r30, r24
     7fa:	10 8e       	std	Z+24, r1	; 0x18
     7fc:	17 8a       	std	Z+23, r1	; 0x17
     7fe:	12 8e       	std	Z+26, r1	; 0x1a
     800:	11 8e       	std	Z+25, r1	; 0x19
     802:	14 8e       	std	Z+28, r1	; 0x1c
     804:	13 8e       	std	Z+27, r1	; 0x1b
     806:	16 8e       	std	Z+30, r1	; 0x1e
     808:	15 8e       	std	Z+29, r1	; 0x1d
     80a:	10 a2       	std	Z+32, r1	; 0x20
     80c:	17 8e       	std	Z+31, r1	; 0x1f
     80e:	12 a2       	std	Z+34, r1	; 0x22
     810:	11 a2       	std	Z+33, r1	; 0x21
     812:	13 a2       	std	Z+35, r1	; 0x23
     814:	14 a6       	std	Z+44, r1	; 0x2c
     816:	15 a6       	std	Z+45, r1	; 0x2d
     818:	16 a6       	std	Z+46, r1	; 0x2e
     81a:	17 a6       	std	Z+47, r1	; 0x2f
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	a0 e0       	ldi	r26, 0x00	; 0
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	80 a7       	std	Z+40, r24	; 0x28
     826:	91 a7       	std	Z+41, r25	; 0x29
     828:	a2 a7       	std	Z+42, r26	; 0x2a
     82a:	b3 a7       	std	Z+43, r27	; 0x2b
     82c:	10 aa       	std	Z+48, r1	; 0x30
     82e:	11 aa       	std	Z+49, r1	; 0x31
     830:	12 aa       	std	Z+50, r1	; 0x32
     832:	13 aa       	std	Z+51, r1	; 0x33
     834:	14 a2       	std	Z+36, r1	; 0x24
     836:	15 a2       	std	Z+37, r1	; 0x25
     838:	16 a2       	std	Z+38, r1	; 0x26
     83a:	17 a2       	std	Z+39, r1	; 0x27
     83c:	10 ae       	std	Z+56, r1	; 0x38
     83e:	11 ae       	std	Z+57, r1	; 0x39
     840:	12 ae       	std	Z+58, r1	; 0x3a
     842:	13 ae       	std	Z+59, r1	; 0x3b
     844:	14 aa       	std	Z+52, r1	; 0x34
     846:	15 aa       	std	Z+53, r1	; 0x35
     848:	16 aa       	std	Z+54, r1	; 0x36
     84a:	17 aa       	std	Z+55, r1	; 0x37
     84c:	08 95       	ret

0000084e <_ZN11BrewManagerC1EP20TeaMachineController>:
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	ec 01       	movw	r28, r24
     854:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
     858:	8f e0       	ldi	r24, 0x0F	; 15
     85a:	94 e0       	ldi	r25, 0x04	; 4
     85c:	99 83       	std	Y+1, r25	; 0x01
     85e:	88 83       	st	Y, r24
     860:	ce 01       	movw	r24, r28
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	c8 cf       	rjmp	.-112    	; 0x7f8 <_ZN11BrewManager12ClearMembersEv>

00000868 <_ZN11BrewManager8SetDrinkEP5Drink>:
//
//  Set the drink that in process
//
void BrewManager::SetDrink( Drink *pDrink )
{
	m_pDrink = pDrink;
     868:	fc 01       	movw	r30, r24
     86a:	72 a3       	std	Z+34, r23	; 0x22
     86c:	61 a3       	std	Z+33, r22	; 0x21
    m_lStrengthLevel = pDrink->GetStrength();
     86e:	fb 01       	movw	r30, r22
     870:	43 85       	ldd	r20, Z+11	; 0x0b
     872:	54 85       	ldd	r21, Z+12	; 0x0c
     874:	05 2e       	mov	r0, r21
     876:	00 0c       	add	r0, r0
     878:	66 0b       	sbc	r22, r22
     87a:	77 0b       	sbc	r23, r23
     87c:	fc 01       	movw	r30, r24
     87e:	40 a7       	std	Z+40, r20	; 0x28
     880:	51 a7       	std	Z+41, r21	; 0x29
     882:	62 a7       	std	Z+42, r22	; 0x2a
     884:	73 a7       	std	Z+43, r23	; 0x2b
     886:	08 95       	ret

00000888 <_ZN11BrewManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse BrewManager::AdvanceStateMachine()
{
     888:	cf 92       	push	r12
     88a:	df 92       	push	r13
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
     898:	fc 01       	movw	r30, r24
     89a:	43 a1       	ldd	r20, Z+35	; 0x23
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	4e 30       	cpi	r20, 0x0E	; 14
     8a0:	51 05       	cpc	r21, r1
     8a2:	08 f0       	brcs	.+2      	; 0x8a6 <_ZN11BrewManager19AdvanceStateMachineEv+0x1e>
     8a4:	12 c2       	rjmp	.+1060   	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     8a6:	ec 01       	movw	r28, r24
     8a8:	fa 01       	movw	r30, r20
     8aa:	88 27       	eor	r24, r24
     8ac:	ee 58       	subi	r30, 0x8E	; 142
     8ae:	ff 4f       	sbci	r31, 0xFF	; 255
     8b0:	8f 4f       	sbci	r24, 0xFF	; 255
     8b2:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__tablejump2__>
    {
        // Reset step 1: Raise extractor and cup level probe, switch off boiler and close exit vale
        case ResetRaiseMasher:
            Serial.print("State: ResetRaiseMasher\n");
     8b6:	60 e6       	ldi	r22, 0x60	; 96
     8b8:	72 e0       	ldi	r23, 0x02	; 2
     8ba:	81 e1       	ldi	r24, 0x11	; 17
     8bc:	9a e0       	ldi	r25, 0x0A	; 10
     8be:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            m_pCupLevelProbe->Raise();
     8c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     8c6:	01 d5       	rcall	.+2562   	; 0x12ca <_ZN13CupLevelProbe5RaiseEv>
            m_pBoiler->EnableHeater(false);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	8f 89       	ldd	r24, Y+23	; 0x17
     8cc:	98 8d       	ldd	r25, Y+24	; 0x18
     8ce:	71 de       	rcall	.-798    	; 0x5b2 <_ZN6Boiler12EnableHeaterEb>
            m_pBoiler->EnableExitValve(false);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	8f 89       	ldd	r24, Y+23	; 0x17
     8d4:	98 8d       	ldd	r25, Y+24	; 0x18
     8d6:	a3 de       	rcall	.-698    	; 0x61e <_ZN6Boiler15EnableExitValveEb>
            m_pMasher->Raise();
     8d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8da:	98 a1       	ldd	r25, Y+32	; 0x20
     8dc:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6Masher5RaiseEv>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	8b a3       	std	Y+35, r24	; 0x23
            m_pBoiler->EnableExitValve(false);
            m_pMasher->Raise();
          
            // Set next phase and timeout
            SetNextState(ResetRaiseExtractor);
            SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
     8e4:	00 e1       	ldi	r16, 0x10	; 16
     8e6:	10 e0       	ldi	r17, 0x00	; 0
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	48 e8       	ldi	r20, 0x88	; 136
     8ee:	53 e1       	ldi	r21, 0x13	; 19
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	70 e0       	ldi	r23, 0x00	; 0
     8f4:	ce 01       	movw	r24, r28
     8f6:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
     8fa:	e7 c1       	rjmp	.+974    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
            break;
            
        // Reset step 2: If the masher is raised, raise the extractor 
        case ResetRaiseExtractor:
            if(m_pMasher->IsRaised())
     8fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8fe:	98 a1       	ldd	r25, Y+32	; 0x20
     900:	0e 94 a7 11 	call	0x234e	; 0x234e <_ZN6Masher8IsRaisedEv>
     904:	88 23       	and	r24, r24
     906:	09 f4       	brne	.+2      	; 0x90a <_ZN11BrewManager19AdvanceStateMachineEv+0x82>
     908:	e0 c1       	rjmp	.+960    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
            {
                Serial.print("State: ResetRaiseExtractor\n");
     90a:	69 e7       	ldi	r22, 0x79	; 121
     90c:	72 e0       	ldi	r23, 0x02	; 2
     90e:	81 e1       	ldi	r24, 0x11	; 17
     910:	9a e0       	ldi	r25, 0x0A	; 10
     912:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
                m_pExtractor->Raise();
     916:	8d 8d       	ldd	r24, Y+29	; 0x1d
     918:	9e 8d       	ldd	r25, Y+30	; 0x1e
     91a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN9Extractor5RaiseEv>
                SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
     91e:	01 e1       	ldi	r16, 0x11	; 17
     920:	10 e0       	ldi	r17, 0x00	; 0
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	48 ef       	ldi	r20, 0xF8	; 248
     928:	5a e2       	ldi	r21, 0x2A	; 42
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	ce 01       	movw	r24, r28
     930:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     934:	82 e0       	ldi	r24, 0x02	; 2
     936:	b2 c1       	rjmp	.+868    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
            }                    
            break;
            
        // Reset step 3: If the extractor is raised, reset is complete
        case ResetComplete:
            if(m_pExtractor->IsRaised())
     938:	8d 8d       	ldd	r24, Y+29	; 0x1d
     93a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     93c:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN9Extractor8IsRaisedEv>
     940:	88 23       	and	r24, r24
     942:	09 f4       	brne	.+2      	; 0x946 <_ZN11BrewManager19AdvanceStateMachineEv+0xbe>
     944:	c2 c1       	rjmp	.+900    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
            {
                Serial.print("State: ResetComplete\n");
     946:	65 e9       	ldi	r22, 0x95	; 149
     948:	72 e0       	ldi	r23, 0x02	; 2
     94a:	81 e1       	ldi	r24, 0x11	; 17
     94c:	9a e0       	ldi	r25, 0x0A	; 10
     94e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
                // Process step complete - reset has finished
                ClearTimeout();
     952:	ce 01       	movw	r24, r28
     954:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
     958:	b6 c1       	rjmp	.+876    	; 0xcc6 <_ZN11BrewManager19AdvanceStateMachineEv+0x43e>
            }
            break;
        
        // Brew step 1: Lower the extractor and switch on the boiler
        case BrewDispenseLowerExtractor:
            Serial.print("State: BrewDispenseLowerExtractor\n");
     95a:	6b ea       	ldi	r22, 0xAB	; 171
     95c:	72 e0       	ldi	r23, 0x02	; 2
     95e:	81 e1       	ldi	r24, 0x11	; 17
     960:	9a e0       	ldi	r25, 0x0A	; 10
     962:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     966:	e9 a1       	ldd	r30, Y+33	; 0x21
     968:	fa a1       	ldd	r31, Y+34	; 0x22
			if( m_pDrink->GetType() == Tea )
     96a:	80 81       	ld	r24, Z
     96c:	81 11       	cpse	r24, r1
     96e:	04 c0       	rjmp	.+8      	; 0x978 <_ZN11BrewManager19AdvanceStateMachineEv+0xf0>
			{
				m_pExtractor->Lower();
     970:	8d 8d       	ldd	r24, Y+29	; 0x1d
     972:	9e 8d       	ldd	r25, Y+30	; 0x1e
     974:	0e 94 12 11 	call	0x2224	; 0x2224 <_ZN9Extractor5LowerEv>
			}
            m_pBoiler->EnableHeater(true);
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	8f 89       	ldd	r24, Y+23	; 0x17
     97c:	98 8d       	ldd	r25, Y+24	; 0x18
     97e:	19 de       	rcall	.-974    	; 0x5b2 <_ZN6Boiler12EnableHeaterEb>
            SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
     980:	01 e1       	ldi	r16, 0x11	; 17
     982:	10 e0       	ldi	r17, 0x00	; 0
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	48 ef       	ldi	r20, 0xF8	; 248
     98a:	5a e2       	ldi	r21, 0x2A	; 42
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	ce 01       	movw	r24, r28
     992:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	81 c1       	rjmp	.+770    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
            SetNextState(BrewDispenseTeabag);
            break;
        
        // Brew step 2: If extractor is lowered, dispense teabag from bag conveyor    
        case BrewDispenseTeabag:
            if( m_pExtractor->IsLowered() )
     99a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     99c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     99e:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN9Extractor9IsLoweredEv>
     9a2:	88 23       	and	r24, r24
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <_ZN11BrewManager19AdvanceStateMachineEv+0x120>
     9a6:	91 c1       	rjmp	.+802    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
            {
                Serial.print("State: BrewDispenseTeabag\n");
     9a8:	6e ec       	ldi	r22, 0xCE	; 206
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	81 e1       	ldi	r24, 0x11	; 17
     9ae:	9a e0       	ldi	r25, 0x0A	; 10
     9b0:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
                m_pBagConveyor->BeginAdvance();
     9b4:	89 8d       	ldd	r24, Y+25	; 0x19
     9b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9b8:	76 dd       	rcall	.-1300   	; 0x4a6 <_ZN11BagConveyor12BeginAdvanceEv>
                SetTimeout(BREW_TIMEOUT_CONVEYOR, BREW_ERR_TIMEOUT_CONVEYOR);
     9ba:	02 e1       	ldi	r16, 0x12	; 18
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	48 eb       	ldi	r20, 0xB8	; 184
     9c4:	5b e0       	ldi	r21, 0x0B	; 11
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	ce 01       	movw	r24, r28
     9cc:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     9d0:	85 e0       	ldi	r24, 0x05	; 5
            }
            break;
			
        // Brew step 3: If teabag is dispensed, await a rise in water temperature
        case BrewAwaitBoil:
            if( m_pBagConveyor->IsStationary() )
     9d2:	64 c1       	rjmp	.+712    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
     9d4:	89 8d       	ldd	r24, Y+25	; 0x19
     9d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     9d8:	81 dd       	rcall	.-1278   	; 0x4dc <_ZN11BagConveyor12IsStationaryEv>
     9da:	88 23       	and	r24, r24
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <_ZN11BrewManager19AdvanceStateMachineEv+0x158>
     9de:	75 c1       	rjmp	.+746    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
            {
				Serial.print("State: BrewAwaitBoil\n");
     9e0:	69 ee       	ldi	r22, 0xE9	; 233
     9e2:	72 e0       	ldi	r23, 0x02	; 2
     9e4:	81 e1       	ldi	r24, 0x11	; 17
     9e6:	9a e0       	ldi	r25, 0x0A	; 10
     9e8:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
				SetTimeout(BREW_TIMEOUT_HEAT, BREW_ERR_TIMEOUT_HEAT);
     9ec:	03 e1       	ldi	r16, 0x13	; 19
     9ee:	10 e0       	ldi	r17, 0x00	; 0
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e4       	ldi	r20, 0x40	; 64
     9f6:	5d e0       	ldi	r21, 0x0D	; 13
     9f8:	63 e0       	ldi	r22, 0x03	; 3
     9fa:	70 e0       	ldi	r23, 0x00	; 0
     9fc:	ce 01       	movw	r24, r28
     9fe:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     a02:	87 e0       	ldi	r24, 0x07	; 7
			break;
        
        // Brew step 4: If water is up to temperature, deploy level probe and open the exit valve
        case BrewReleaseWater:
			{
				float waterTemperature = m_pBoiler->GetWaterTemperature();
     a04:	4b c1       	rjmp	.+662    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
     a06:	8f 89       	ldd	r24, Y+23	; 0x17
     a08:	98 8d       	ldd	r25, Y+24	; 0x18
     a0a:	19 de       	rcall	.-974    	; 0x63e <_ZN6Boiler19GetWaterTemperatureEv>
     a0c:	6b 01       	movw	r12, r22
     a0e:	7c 01       	movw	r14, r24
				if( millis() > (m_lLastTemperatureSent + 5000) )
     a10:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
     a14:	0c a9       	ldd	r16, Y+52	; 0x34
     a16:	1d a9       	ldd	r17, Y+53	; 0x35
     a18:	2e a9       	ldd	r18, Y+54	; 0x36
     a1a:	3f a9       	ldd	r19, Y+55	; 0x37
     a1c:	08 57       	subi	r16, 0x78	; 120
     a1e:	1c 4e       	sbci	r17, 0xEC	; 236
     a20:	2f 4f       	sbci	r18, 0xFF	; 255
     a22:	3f 4f       	sbci	r19, 0xFF	; 255
     a24:	06 17       	cp	r16, r22
     a26:	17 07       	cpc	r17, r23
     a28:	28 07       	cpc	r18, r24
     a2a:	39 07       	cpc	r19, r25
     a2c:	d0 f4       	brcc	.+52     	; 0xa62 <_ZN11BrewManager19AdvanceStateMachineEv+0x1da>
				{
					// Send water temperature to host every five seconds
					Serial.print("Water temperature: ");
     a2e:	6f ef       	ldi	r22, 0xFF	; 255
     a30:	72 e0       	ldi	r23, 0x02	; 2
     a32:	81 e1       	ldi	r24, 0x11	; 17
     a34:	9a e0       	ldi	r25, 0x0A	; 10
     a36:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
					Serial.print(waterTemperature);
     a3a:	22 e0       	ldi	r18, 0x02	; 2
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	b7 01       	movw	r22, r14
     a40:	a6 01       	movw	r20, r12
     a42:	81 e1       	ldi	r24, 0x11	; 17
     a44:	9a e0       	ldi	r25, 0x0A	; 10
     a46:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <_ZN5Print5printEdi>
					Serial.print("\n");
     a4a:	65 ef       	ldi	r22, 0xF5	; 245
     a4c:	79 e0       	ldi	r23, 0x09	; 9
     a4e:	81 e1       	ldi	r24, 0x11	; 17
     a50:	9a e0       	ldi	r25, 0x0A	; 10
     a52:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
					m_lLastTemperatureSent = millis();
     a56:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
     a5a:	6c ab       	std	Y+52, r22	; 0x34
     a5c:	7d ab       	std	Y+53, r23	; 0x35
     a5e:	8e ab       	std	Y+54, r24	; 0x36
     a60:	9f ab       	std	Y+55, r25	; 0x37
				}
                
				if( (waterTemperature > (m_fInitialWaterTemp + 5)) || (waterTemperature > (BREW_WATERTEMPERATURE_MIN - 5)) )
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 ea       	ldi	r20, 0xA0	; 160
     a68:	50 e4       	ldi	r21, 0x40	; 64
     a6a:	68 ad       	ldd	r22, Y+56	; 0x38
     a6c:	79 ad       	ldd	r23, Y+57	; 0x39
     a6e:	8a ad       	ldd	r24, Y+58	; 0x3a
     a70:	9b ad       	ldd	r25, Y+59	; 0x3b
     a72:	0e 94 b0 29 	call	0x5360	; 0x5360 <__addsf3>
     a76:	9b 01       	movw	r18, r22
     a78:	ac 01       	movw	r20, r24
     a7a:	c7 01       	movw	r24, r14
     a7c:	b6 01       	movw	r22, r12
     a7e:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__gesf2>
     a82:	18 16       	cp	r1, r24
     a84:	54 f0       	brlt	.+20     	; 0xa9a <_ZN11BrewManager19AdvanceStateMachineEv+0x212>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	46 e9       	ldi	r20, 0x96	; 150
     a8c:	52 e4       	ldi	r21, 0x42	; 66
     a8e:	c7 01       	movw	r24, r14
     a90:	b6 01       	movw	r22, r12
     a92:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__gesf2>
     a96:	18 16       	cp	r1, r24
     a98:	5c f4       	brge	.+22     	; 0xab0 <_ZN11BrewManager19AdvanceStateMachineEv+0x228>
				{
					// Water temperature is rising, so heater is probably OK
					// Only need to time out if water doesn't boil   
					SetTimeout(BREW_TIMEOUT_BOIL, BREW_ERR_TIMEOUT_BOIL);
     a9a:	04 e1       	ldi	r16, 0x14	; 20
     a9c:	10 e0       	ldi	r17, 0x00	; 0
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 ee       	ldi	r20, 0xE0	; 224
     aa4:	53 e9       	ldi	r21, 0x93	; 147
     aa6:	64 e0       	ldi	r22, 0x04	; 4
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	ce 01       	movw	r24, r28
     aac:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
				}                    
                
				if( waterTemperature > BREW_WATERTEMPERATURE_MIN)
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 ea       	ldi	r20, 0xA0	; 160
     ab6:	52 e4       	ldi	r21, 0x42	; 66
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__gesf2>
     ac0:	18 16       	cp	r1, r24
     ac2:	0c f0       	brlt	.+2      	; 0xac6 <_ZN11BrewManager19AdvanceStateMachineEv+0x23e>
     ac4:	02 c1       	rjmp	.+516    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
				{
					// Water has attained correct temperature for brewing
					Serial.print("State: BrewReleaseWater\n");
     ac6:	63 e1       	ldi	r22, 0x13	; 19
     ac8:	73 e0       	ldi	r23, 0x03	; 3
     aca:	81 e1       	ldi	r24, 0x11	; 17
     acc:	9a e0       	ldi	r25, 0x0A	; 10
     ace:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
					m_pBoiler->EnableHeater(false);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	8f 89       	ldd	r24, Y+23	; 0x17
     ad6:	98 8d       	ldd	r25, Y+24	; 0x18
     ad8:	6c dd       	rcall	.-1320   	; 0x5b2 <_ZN6Boiler12EnableHeaterEb>
					m_pCupLevelProbe->Lower();
     ada:	8b 8d       	ldd	r24, Y+27	; 0x1b
     adc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ade:	08 d4       	rcall	.+2064   	; 0x12f0 <_ZN13CupLevelProbe5LowerEv>
     ae0:	68 ee       	ldi	r22, 0xE8	; 232
					delay(1000);    // Avoids big EMI pulse
     ae2:	73 e0       	ldi	r23, 0x03	; 3
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
					m_pBoiler->EnableExitValve(true);
     aec:	61 e0       	ldi	r22, 0x01	; 1
     aee:	8f 89       	ldd	r24, Y+23	; 0x17
     af0:	98 8d       	ldd	r25, Y+24	; 0x18
     af2:	95 dd       	rcall	.-1238   	; 0x61e <_ZN6Boiler15EnableExitValveEb>
     af4:	05 e1       	ldi	r16, 0x15	; 21
					SetTimeout(BREW_TIMEOUT_CUPFILL, BREW_ERR_TIMEOUT_CUPFILL);
     af6:	10 e0       	ldi	r17, 0x00	; 0
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e3       	ldi	r20, 0x30	; 48
     afe:	55 e7       	ldi	r21, 0x75	; 117
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     b0a:	88 e0       	ldi	r24, 0x08	; 8
     b0c:	c7 c0       	rjmp	.+398    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
			}
            break;
        
        // Brew step 5: If cup is full, raise probe, close valve and switch off boiler
        case BrewRaiseProbe:
            if( m_pCupLevelProbe->CupIsFull() )
     b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b12:	14 d4       	rcall	.+2088   	; 0x133c <_ZN13CupLevelProbe9CupIsFullEv>
     b14:	88 23       	and	r24, r24
     b16:	09 f4       	brne	.+2      	; 0xb1a <_ZN11BrewManager19AdvanceStateMachineEv+0x292>
     b18:	d8 c0       	rjmp	.+432    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
            {
                Serial.print("State: BrewRaiseProbe\n");
     b1a:	6c e2       	ldi	r22, 0x2C	; 44
     b1c:	73 e0       	ldi	r23, 0x03	; 3
     b1e:	81 e1       	ldi	r24, 0x11	; 17
     b20:	9a e0       	ldi	r25, 0x0A	; 10
     b22:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
                m_pCupLevelProbe->Raise();
     b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b2a:	cf d3       	rcall	.+1950   	; 0x12ca <_ZN13CupLevelProbe5RaiseEv>
                m_pBoiler->EnableExitValve(false);
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	8f 89       	ldd	r24, Y+23	; 0x17
     b30:	98 8d       	ldd	r25, Y+24	; 0x18
     b32:	75 dd       	rcall	.-1302   	; 0x61e <_ZN6Boiler15EnableExitValveEb>
     b34:	06 e1       	ldi	r16, 0x16	; 22
                SetTimeout(BREW_TIMEOUT_PROBE, BREW_ERR_TIMEOUT_PROBE);
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	48 e8       	ldi	r20, 0x88	; 136
     b3e:	53 e1       	ldi	r21, 0x13	; 19
     b40:	60 e0       	ldi	r22, 0x00	; 0
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
     b4a:	e9 a1       	ldd	r30, Y+33	; 0x21
     b4c:	fa a1       	ldd	r31, Y+34	; 0x22
				if( m_pDrink->GetType() == Tea )
     b4e:	80 81       	ld	r24, Z
     b50:	81 11       	cpse	r24, r1
     b52:	a3 c0       	rjmp	.+326    	; 0xc9a <_ZN11BrewManager19AdvanceStateMachineEv+0x412>
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     b54:	89 e0       	ldi	r24, 0x09	; 9
     b56:	a2 c0       	rjmp	.+324    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
            break;
        
        // Brew step 5A: If probe is in raised position, lower the masher
        case BrewMashTeabag:
            {
                if(m_pCupLevelProbe->IsRaised())
     b58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b5c:	e3 d3       	rcall	.+1990   	; 0x1324 <_ZN13CupLevelProbe8IsRaisedEv>
     b5e:	88 23       	and	r24, r24
     b60:	09 f4       	brne	.+2      	; 0xb64 <_ZN11BrewManager19AdvanceStateMachineEv+0x2dc>
     b62:	b3 c0       	rjmp	.+358    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     b64:	63 e4       	ldi	r22, 0x43	; 67
                {
                    Serial.print("State: BrewMashTeabag\n");
     b66:	73 e0       	ldi	r23, 0x03	; 3
     b68:	68 c0       	rjmp	.+208    	; 0xc3a <_ZN11BrewManager19AdvanceStateMachineEv+0x3b2>
     b6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
            }
            break;
        
        // Brew step 6: If masher is lowered, raise it
        case BrewRaiseMasher:
            if(m_pMasher->IsLowered() )
     b6c:	98 a1       	ldd	r25, Y+32	; 0x20
     b6e:	0e 94 b7 11 	call	0x236e	; 0x236e <_ZN6Masher9IsLoweredEv>
     b72:	88 23       	and	r24, r24
     b74:	09 f4       	brne	.+2      	; 0xb78 <_ZN11BrewManager19AdvanceStateMachineEv+0x2f0>
     b76:	a9 c0       	rjmp	.+338    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     b78:	6a e5       	ldi	r22, 0x5A	; 90
            {
                Serial.print("State: BrewRaiseMasher\n");
     b7a:	73 e0       	ldi	r23, 0x03	; 3
     b7c:	81 e1       	ldi	r24, 0x11	; 17
     b7e:	9a e0       	ldi	r25, 0x0A	; 10
     b80:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     b84:	8f 8d       	ldd	r24, Y+31	; 0x1f
                m_pMasher->Raise();
     b86:	98 a1       	ldd	r25, Y+32	; 0x20
     b88:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <_ZN6Masher5RaiseEv>
     b8c:	8c a5       	ldd	r24, Y+44	; 0x2c
                m_lMashCount++;
     b8e:	9d a5       	ldd	r25, Y+45	; 0x2d
     b90:	ae a5       	ldd	r26, Y+46	; 0x2e
     b92:	bf a5       	ldd	r27, Y+47	; 0x2f
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	a1 1d       	adc	r26, r1
     b98:	b1 1d       	adc	r27, r1
     b9a:	8c a7       	std	Y+44, r24	; 0x2c
     b9c:	9d a7       	std	Y+45, r25	; 0x2d
     b9e:	ae a7       	std	Y+46, r26	; 0x2e
     ba0:	bf a7       	std	Y+47, r27	; 0x2f
     ba2:	62 e7       	ldi	r22, 0x72	; 114
                Serial.print( "Mash cycle: ");
     ba4:	73 e0       	ldi	r23, 0x03	; 3
     ba6:	81 e1       	ldi	r24, 0x11	; 17
     ba8:	9a e0       	ldi	r25, 0x0A	; 10
     baa:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     bae:	4c a5       	ldd	r20, Y+44	; 0x2c
                Serial.print(m_lMashCount);
     bb0:	5d a5       	ldd	r21, Y+45	; 0x2d
     bb2:	6e a5       	ldd	r22, Y+46	; 0x2e
     bb4:	7f a5       	ldd	r23, Y+47	; 0x2f
     bb6:	2a e0       	ldi	r18, 0x0A	; 10
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e1       	ldi	r24, 0x11	; 17
     bbc:	9a e0       	ldi	r25, 0x0A	; 10
     bbe:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <_ZN5Print5printEli>
     bc2:	65 ef       	ldi	r22, 0xF5	; 245
                Serial.print("\n");
     bc4:	79 e0       	ldi	r23, 0x09	; 9
     bc6:	81 e1       	ldi	r24, 0x11	; 17
     bc8:	9a e0       	ldi	r25, 0x0A	; 10
     bca:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     bce:	00 e1       	ldi	r16, 0x10	; 16
                SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
     bd0:	10 e0       	ldi	r17, 0x00	; 0
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	48 e8       	ldi	r20, 0x88	; 136
     bd8:	53 e1       	ldi	r21, 0x13	; 19
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	ce 01       	movw	r24, r28
     be0:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
     be4:	4c a5       	ldd	r20, Y+44	; 0x2c
                if( m_lMashCount < m_lMashesRequired )
     be6:	5d a5       	ldd	r21, Y+45	; 0x2d
     be8:	6e a5       	ldd	r22, Y+46	; 0x2e
     bea:	7f a5       	ldd	r23, Y+47	; 0x2f
     bec:	88 a9       	ldd	r24, Y+48	; 0x30
     bee:	99 a9       	ldd	r25, Y+49	; 0x31
     bf0:	aa a9       	ldd	r26, Y+50	; 0x32
     bf2:	bb a9       	ldd	r27, Y+51	; 0x33
     bf4:	48 17       	cp	r20, r24
     bf6:	59 07       	cpc	r21, r25
     bf8:	6a 07       	cpc	r22, r26
     bfa:	7b 07       	cpc	r23, r27
     bfc:	74 f4       	brge	.+28     	; 0xc1a <_ZN11BrewManager19AdvanceStateMachineEv+0x392>
     bfe:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
                {
                   // Keep mashing, using partial mashes
                    m_lTimeRaiseMustStop = millis() + BREW_PARTIALRAISEDELAY;
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	8c 50       	subi	r24, 0x0C	; 12
     c08:	9e 4f       	sbci	r25, 0xFE	; 254
     c0a:	af 4f       	sbci	r26, 0xFF	; 255
     c0c:	bf 4f       	sbci	r27, 0xFF	; 255
     c0e:	8c a3       	std	Y+36, r24	; 0x24
     c10:	9d a3       	std	Y+37, r25	; 0x25
     c12:	ae a3       	std	Y+38, r26	; 0x26
     c14:	bf a3       	std	Y+39, r27	; 0x27
     c16:	8b e0       	ldi	r24, 0x0B	; 11
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     c18:	41 c0       	rjmp	.+130    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
     c1a:	8c e0       	ldi	r24, 0x0C	; 12
     c1c:	3f c0       	rjmp	.+126    	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
     c1e:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
            }
            break;
        
        // Brew step 6a: If masher is partially raised, lower it again
        case BrewLowerMasherAgain:
            if( millis() > m_lTimeRaiseMustStop )
     c22:	cc a0       	ldd	r12, Y+36	; 0x24
     c24:	dd a0       	ldd	r13, Y+37	; 0x25
     c26:	ee a0       	ldd	r14, Y+38	; 0x26
     c28:	ff a0       	ldd	r15, Y+39	; 0x27
     c2a:	c6 16       	cp	r12, r22
     c2c:	d7 06       	cpc	r13, r23
     c2e:	e8 06       	cpc	r14, r24
     c30:	f9 06       	cpc	r15, r25
     c32:	08 f0       	brcs	.+2      	; 0xc36 <_ZN11BrewManager19AdvanceStateMachineEv+0x3ae>
     c34:	4a c0       	rjmp	.+148    	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     c36:	6f e7       	ldi	r22, 0x7F	; 127
            {
                Serial.print("State: BrewLowerMasherAgain\n");
     c38:	73 e0       	ldi	r23, 0x03	; 3
     c3a:	81 e1       	ldi	r24, 0x11	; 17
     c3c:	9a e0       	ldi	r25, 0x0A	; 10
     c3e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
                m_pMasher->Lower();
     c44:	98 a1       	ldd	r25, Y+32	; 0x20
     c46:	0e 94 8e 11 	call	0x231c	; 0x231c <_ZN6Masher5LowerEv>
     c4a:	00 e1       	ldi	r16, 0x10	; 16
                SetTimeout(BREW_TIMEOUT_MASHER, BREW_ERR_TIMEOUT_MASHER);
     c4c:	10 e0       	ldi	r17, 0x00	; 0
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	48 e8       	ldi	r20, 0x88	; 136
     c54:	53 e1       	ldi	r21, 0x13	; 19
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	ce 01       	movw	r24, r28
     c5c:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
     c60:	8a e0       	ldi	r24, 0x0A	; 10
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     c62:	1c c0       	rjmp	.+56     	; 0xc9c <_ZN11BrewManager19AdvanceStateMachineEv+0x414>
     c64:	8f 8d       	ldd	r24, Y+31	; 0x1f
                
            break;
        
        // Brew step 7: If masher is raised, raise the extractor
        case BrewRaiseExtractor:
            if(m_pMasher->IsRaised() )
     c66:	98 a1       	ldd	r25, Y+32	; 0x20
     c68:	0e 94 a7 11 	call	0x234e	; 0x234e <_ZN6Masher8IsRaisedEv>
     c6c:	88 23       	and	r24, r24
     c6e:	69 f1       	breq	.+90     	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     c70:	6c e9       	ldi	r22, 0x9C	; 156
            {
                Serial.print("State: BrewRaiseExtractor\n");
     c72:	73 e0       	ldi	r23, 0x03	; 3
     c74:	81 e1       	ldi	r24, 0x11	; 17
     c76:	9a e0       	ldi	r25, 0x0A	; 10
     c78:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
                m_pExtractor->Raise();
     c7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c80:	0e 94 ff 10 	call	0x21fe	; 0x21fe <_ZN9Extractor5RaiseEv>
     c84:	01 e1       	ldi	r16, 0x11	; 17
                SetTimeout(BREW_TIMEOUT_EXTRACTOR, BREW_ERR_TIMEOUT_EXTRACTOR);
     c86:	10 e0       	ldi	r17, 0x00	; 0
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	48 ef       	ldi	r20, 0xF8	; 248
     c8e:	5a e2       	ldi	r21, 0x2A	; 42
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
     c9a:	8d e0       	ldi	r24, 0x0D	; 13
//
//  Set the next state in the process sequence
//
void BrewManager::SetNextState( BrewState nextState )
{
    m_State = nextState;
     c9c:	8b a3       	std	Y+35, r24	; 0x23
     c9e:	15 c0       	rjmp	.+42     	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     ca0:	8d 8d       	ldd	r24, Y+29	; 0x1d
            }
            break;
        
        // Brew step 8: If teabag recovery is complete, the process has successfully completed
        case BrewComplete:
        if(m_pExtractor->IsRaised())
     ca2:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ca4:	0e 94 2c 11 	call	0x2258	; 0x2258 <_ZN9Extractor8IsRaisedEv>
     ca8:	88 23       	and	r24, r24
     caa:	79 f0       	breq	.+30     	; 0xcca <_ZN11BrewManager19AdvanceStateMachineEv+0x442>
     cac:	67 eb       	ldi	r22, 0xB7	; 183
        {
            Serial.print("State: BrewComplete\n");
     cae:	73 e0       	ldi	r23, 0x03	; 3
     cb0:	81 e1       	ldi	r24, 0x11	; 17
     cb2:	9a e0       	ldi	r25, 0x0A	; 10
     cb4:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
     cb8:	ce 01       	movw	r24, r28

            // Brew process is complete
            response = ProcessComplete;
            ClearTimeout();
     cba:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
     cbe:	e9 a1       	ldd	r30, Y+33	; 0x21
    bool        SelectionIsConfirmed() { return m_bSelectionIsConfirmed; }

    int         GetID() { return m_nDrinkID; }
    
    DrinkState  GetState() { return m_State; }
    void        SetState( DrinkState state ){ m_State = state; }
     cc0:	fa a1       	ldd	r31, Y+34	; 0x22
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	81 83       	std	Z+1, r24	; 0x01
     cc6:	82 e0       	ldi	r24, 0x02	; 2
        if(m_pExtractor->IsRaised())
        {
            Serial.print("State: BrewComplete\n");

            // Brew process is complete
            response = ProcessComplete;
     cc8:	01 c0       	rjmp	.+2      	; 0xccc <_ZN11BrewManager19AdvanceStateMachineEv+0x444>
     cca:	80 e0       	ldi	r24, 0x00	; 0
//
//  Initiate the next step of the process
//
ProcessManagerResponse BrewManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
     ccc:	df 91       	pop	r29
        }
        break;
    } // switch            
            
	return response;
}
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	ff 90       	pop	r15
     cd6:	ef 90       	pop	r14
     cd8:	df 90       	pop	r13
     cda:	cf 90       	pop	r12
     cdc:	08 95       	ret

00000cde <_ZN11BrewManager8ContinueEv>:
     cde:	cf 93       	push	r28
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse BrewManager::Continue()
{
     ce0:	df 93       	push	r29
     ce2:	ec 01       	movw	r28, r24
     ce4:	8e 89       	ldd	r24, Y+22	; 0x16
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	59 f1       	breq	.+86     	; 0xd40 <_ZN11BrewManager8ContinueEv+0x62>
     cea:	82 30       	cpi	r24, 0x02	; 2
     cec:	49 f1       	breq	.+82     	; 0xd40 <_ZN11BrewManager8ContinueEv+0x62>
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
     cee:	ce 01       	movw	r24, r28
     cf0:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
     cf4:	81 11       	cpse	r24, r1
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <_ZN11BrewManager8ContinueEv+0x24>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
     cf8:	ce 01       	movw	r24, r28
     cfa:	c6 dd       	rcall	.-1140   	; 0x888 <_ZN11BrewManager19AdvanceStateMachineEv>
            Serial.print("TIMEOUT code: ");
            Serial.print(GetLastError());
            Serial.print("\n");
        }
    
        if( response == ProcessFailed)
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	f9 f4       	brne	.+62     	; 0xd3e <_ZN11BrewManager8ContinueEv+0x60>
     d00:	16 c0       	rjmp	.+44     	; 0xd2e <_ZN11BrewManager8ContinueEv+0x50>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
     d02:	6c ec       	ldi	r22, 0xCC	; 204
     d04:	73 e0       	ldi	r23, 0x03	; 3
     d06:	81 e1       	ldi	r24, 0x11	; 17
     d08:	9a e0       	ldi	r25, 0x0A	; 10
     d0a:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
     d0e:	4e 85       	ldd	r20, Y+14	; 0x0e
     d10:	5f 85       	ldd	r21, Y+15	; 0x0f
     d12:	68 89       	ldd	r22, Y+16	; 0x10
     d14:	79 89       	ldd	r23, Y+17	; 0x11
     d16:	2a e0       	ldi	r18, 0x0A	; 10
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e1       	ldi	r24, 0x11	; 17
     d1c:	9a e0       	ldi	r25, 0x0A	; 10
     d1e:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <_ZN5Print5printEmi>
            Serial.print("\n");
     d22:	65 ef       	ldi	r22, 0xF5	; 245
     d24:	79 e0       	ldi	r23, 0x09	; 9
     d26:	81 e1       	ldi	r24, 0x11	; 17
     d28:	9a e0       	ldi	r25, 0x0A	; 10
     d2a:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
        }
    
        if( response == ProcessFailed)
        {
            // Brewing process has failed, so make sure everything is switched off
            Stop();
     d2e:	e8 81       	ld	r30, Y
     d30:	f9 81       	ldd	r31, Y+1	; 0x01
     d32:	06 80       	ldd	r0, Z+6	; 0x06
     d34:	f7 81       	ldd	r31, Z+7	; 0x07
     d36:	e0 2d       	mov	r30, r0
     d38:	ce 01       	movw	r24, r28
     d3a:	19 95       	eicall
     d3c:	81 e0       	ldi	r24, 0x01	; 1
	void SetTimeout(unsigned long lTimeout, long lApplicableErrorCode );
    void ClearTimeout();                            // Remove the timeout
	bool CheckTimeoutExpired();						// Check timeout
	void SetErrorCode(long lErrorCode);	            // Set process error code

    void SetResponse( ProcessManagerResponse response ) { m_LastResponse = response; }
     d3e:	8e 8b       	std	Y+22, r24	; 0x16
    
        SetResponse(response);        
    }
    
    return response;
}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <_ZN11BrewManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the brew manager to begin a new brewing process
//
bool BrewManager::Initialise()
{
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	ec 01       	movw	r28, r24
if(m_pTeaMachine == NULL)
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	9b 81       	ldd	r25, Y+3	; 0x03
     d54:	89 2b       	or	r24, r25
     d56:	31 f4       	brne	.+12     	; 0xd64 <_ZN11BrewManager10InitialiseEv+0x1e>
{
    Serial.println("BrewManager::Initialise() m_pTeaMachine == NULL");
     d58:	6b ed       	ldi	r22, 0xDB	; 219
     d5a:	73 e0       	ldi	r23, 0x03	; 3
     d5c:	81 e1       	ldi	r24, 0x11	; 17
     d5e:	9a e0       	ldi	r25, 0x0A	; 10
     d60:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
}
    // Call the base class
    ProcessManagerBase::Initialise();
     d64:	ce 01       	movw	r24, r28
     d66:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZN18ProcessManagerBase10InitialiseEv>
 
 	// Create instances of all Tea Machine components required by the brewing process
	m_pBoiler = new Boiler(m_pTeaMachine);
     d6a:	8a e0       	ldi	r24, 0x0A	; 10
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     d72:	8c 01       	movw	r16, r24
     d74:	6a 81       	ldd	r22, Y+2	; 0x02
     d76:	7b 81       	ldd	r23, Y+3	; 0x03
     d78:	e3 db       	rcall	.-2106   	; 0x540 <_ZN6BoilerC1EP10TeaMachine>
     d7a:	18 8f       	std	Y+24, r17	; 0x18
     d7c:	0f 8b       	std	Y+23, r16	; 0x17
	m_pBagConveyor = new BagConveyor(m_pTeaMachine);
     d7e:	86 e0       	ldi	r24, 0x06	; 6
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     d86:	8c 01       	movw	r16, r24
     d88:	6a 81       	ldd	r22, Y+2	; 0x02
     d8a:	7b 81       	ldd	r23, Y+3	; 0x03
     d8c:	80 db       	rcall	.-2304   	; 0x48e <_ZN11BagConveyorC1EP10TeaMachine>
     d8e:	1a 8f       	std	Y+26, r17	; 0x1a
     d90:	09 8f       	std	Y+25, r16	; 0x19
	m_pCupLevelProbe = new CupLevelProbe(m_pTeaMachine);
     d92:	86 e0       	ldi	r24, 0x06	; 6
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     d9a:	8c 01       	movw	r16, r24
     d9c:	6a 81       	ldd	r22, Y+2	; 0x02
     d9e:	7b 81       	ldd	r23, Y+3	; 0x03
     da0:	88 d2       	rcall	.+1296   	; 0x12b2 <_ZN13CupLevelProbeC1EP10TeaMachine>
     da2:	1c 8f       	std	Y+28, r17	; 0x1c
     da4:	0b 8f       	std	Y+27, r16	; 0x1b
	m_pExtractor = new Extractor(m_pTeaMachine);
     da6:	86 e0       	ldi	r24, 0x06	; 6
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     dae:	8c 01       	movw	r16, r24
     db0:	6a 81       	ldd	r22, Y+2	; 0x02
     db2:	7b 81       	ldd	r23, Y+3	; 0x03
     db4:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN9ExtractorC1EP10TeaMachine>
     db8:	1e 8f       	std	Y+30, r17	; 0x1e
     dba:	0d 8f       	std	Y+29, r16	; 0x1d
	m_pMasher = new Masher(m_pTeaMachine);
     dbc:	87 e0       	ldi	r24, 0x07	; 7
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     dc4:	8c 01       	movw	r16, r24
     dc6:	6a 81       	ldd	r22, Y+2	; 0x02
     dc8:	7b 81       	ldd	r23, Y+3	; 0x03
     dca:	0e 94 6f 11 	call	0x22de	; 0x22de <_ZN6MasherC1EP10TeaMachine>
     dce:	18 a3       	std	Y+32, r17	; 0x20
     dd0:	0f 8f       	std	Y+31, r16	; 0x1f
	
	// Initialise all components
	m_pBoiler->Initialise();
     dd2:	8f 89       	ldd	r24, Y+23	; 0x17
     dd4:	98 8d       	ldd	r25, Y+24	; 0x18
     dd6:	dc 01       	movw	r26, r24
     dd8:	ed 91       	ld	r30, X+
     dda:	fc 91       	ld	r31, X
     ddc:	01 90       	ld	r0, Z+
     dde:	f0 81       	ld	r31, Z
     de0:	e0 2d       	mov	r30, r0
     de2:	19 95       	eicall
	m_pBagConveyor->Initialise();
     de4:	89 8d       	ldd	r24, Y+25	; 0x19
     de6:	9a 8d       	ldd	r25, Y+26	; 0x1a
     de8:	dc 01       	movw	r26, r24
     dea:	ed 91       	ld	r30, X+
     dec:	fc 91       	ld	r31, X
     dee:	01 90       	ld	r0, Z+
     df0:	f0 81       	ld	r31, Z
     df2:	e0 2d       	mov	r30, r0
     df4:	19 95       	eicall
	m_pCupLevelProbe->Initialise();
     df6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dfa:	dc 01       	movw	r26, r24
     dfc:	ed 91       	ld	r30, X+
     dfe:	fc 91       	ld	r31, X
     e00:	01 90       	ld	r0, Z+
     e02:	f0 81       	ld	r31, Z
     e04:	e0 2d       	mov	r30, r0
     e06:	19 95       	eicall
	m_pExtractor->Initialise();
     e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e0c:	dc 01       	movw	r26, r24
     e0e:	ed 91       	ld	r30, X+
     e10:	fc 91       	ld	r31, X
     e12:	01 90       	ld	r0, Z+
     e14:	f0 81       	ld	r31, Z
     e16:	e0 2d       	mov	r30, r0
     e18:	19 95       	eicall
	m_pMasher->Initialise();
     e1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e1c:	98 a1       	ldd	r25, Y+32	; 0x20
     e1e:	dc 01       	movw	r26, r24
     e20:	ed 91       	ld	r30, X+
     e22:	fc 91       	ld	r31, X
     e24:	01 90       	ld	r0, Z+
     e26:	f0 81       	ld	r31, Z
     e28:	e0 2d       	mov	r30, r0
     e2a:	19 95       	eicall

    return true;
}
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	1f 91       	pop	r17
     e34:	0f 91       	pop	r16
     e36:	08 95       	ret

00000e38 <_ZN15ConveyorManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void ConveyorManager::SetNextState( ConveyorState nextState )
{
    m_State = nextState;
     e38:	fc 01       	movw	r30, r24
     e3a:	11 8e       	std	Z+25, r1	; 0x19
     e3c:	16 8a       	std	Z+22, r1	; 0x16
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	08 95       	ret

00000e42 <_ZN15ConveyorManager4StopEv>:
     e42:	fc 01       	movw	r30, r24
     e44:	87 89       	ldd	r24, Z+23	; 0x17
     e46:	90 8d       	ldd	r25, Z+24	; 0x18
     e48:	0d c1       	rjmp	.+538    	; 0x1064 <_ZN11CupConveyor4StopEv>

00000e4a <_ZN15ConveyorManager12BeginProcessEv>:
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
     e54:	00 e2       	ldi	r16, 0x20	; 32
     e56:	10 e0       	ldi	r17, 0x00	; 0
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e1       	ldi	r20, 0x10	; 16
     e5e:	57 e2       	ldi	r21, 0x27	; 39
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	70 e0       	ldi	r23, 0x00	; 0
     e64:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	89 8f       	std	Y+25, r24	; 0x19
     e6c:	1e 8a       	std	Y+22, r1	; 0x16
     e6e:	80 e0       	ldi	r24, 0x00	; 0
     e70:	df 91       	pop	r29
     e72:	cf 91       	pop	r28
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <_ZN15ConveyorManager4TestEv>:
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	ec 01       	movw	r28, r24
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	eb da       	rcall	.-2602   	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
     e86:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
     e8a:	93 ff       	sbrs	r25, 3
     e8c:	f9 cf       	rjmp	.-14     	; 0xe80 <_ZN15ConveyorManager4TestEv+0x6>
     e8e:	e8 81       	ld	r30, Y
     e90:	f9 81       	ldd	r31, Y+1	; 0x01
     e92:	01 90       	ld	r0, Z+
     e94:	f0 81       	ld	r31, Z
     e96:	e0 2d       	mov	r30, r0
     e98:	ce 01       	movw	r24, r28
     e9a:	19 95       	eicall
     e9c:	81 11       	cpse	r24, r1
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <_ZN15ConveyorManager4TestEv+0x32>
     ea0:	e8 81       	ld	r30, Y
     ea2:	f9 81       	ldd	r31, Y+1	; 0x01
     ea4:	04 80       	ldd	r0, Z+4	; 0x04
     ea6:	f5 81       	ldd	r31, Z+5	; 0x05
     ea8:	e0 2d       	mov	r30, r0
     eaa:	f6 cf       	rjmp	.-20     	; 0xe98 <_ZN15ConveyorManager4TestEv+0x1e>
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	82 30       	cpi	r24, 0x02	; 2
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <_ZN15ConveyorManager4TestEv+0x3a>
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	89 2f       	mov	r24, r25
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	08 95       	ret

00000ebc <_ZN15ConveyorManagerC1EP20TeaMachineController>:
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	ec 01       	movw	r28, r24
     ec2:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
     ec6:	8d e7       	ldi	r24, 0x7D	; 125
     ec8:	94 e0       	ldi	r25, 0x04	; 4
     eca:	99 83       	std	Y+1, r25	; 0x01
     ecc:	88 83       	st	Y, r24
     ece:	18 8e       	std	Y+24, r1	; 0x18
     ed0:	1f 8a       	std	Y+23, r1	; 0x17
     ed2:	19 8e       	std	Y+25, r1	; 0x19
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <_ZN15ConveyorManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse ConveyorManager::AdvanceStateMachine()
{
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
     ee4:	89 8d       	ldd	r24, Y+25	; 0x19
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	b1 f0       	breq	.+44     	; 0xf16 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x3c>
     eea:	28 f0       	brcs	.+10     	; 0xef6 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x1c>
     eec:	82 30       	cpi	r24, 0x02	; 2
     eee:	49 f1       	breq	.+82     	; 0xf42 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x68>
     ef0:	83 30       	cpi	r24, 0x03	; 3
     ef2:	d9 f5       	brne	.+118    	; 0xf6a <_ZN15ConveyorManager19AdvanceStateMachineEv+0x90>
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x38>
    {
        // Reset step
        case ResetSynchroniseConveyor:
            Serial.print("State: ResetSynchroniseConveyor\n");
     ef6:	6b e1       	ldi	r22, 0x1B	; 27
     ef8:	74 e0       	ldi	r23, 0x04	; 4
     efa:	81 e1       	ldi	r24, 0x11	; 17
     efc:	9a e0       	ldi	r25, 0x0A	; 10
     efe:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            if( m_pCupConveyor->IsStationary() )
     f02:	8f 89       	ldd	r24, Y+23	; 0x17
     f04:	98 8d       	ldd	r25, Y+24	; 0x18
     f06:	a5 d0       	rcall	.+330    	; 0x1052 <_ZN11CupConveyor12IsStationaryEv>
     f08:	88 23       	and	r24, r24
     f0a:	79 f1       	breq	.+94     	; 0xf6a <_ZN15ConveyorManager19AdvanceStateMachineEv+0x90>
            {
                // Process step complete - reset has finished
                ClearTimeout();
     f0c:	ce 01       	movw	r24, r28
     f0e:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
                response = ProcessComplete;
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	2b c0       	rjmp	.+86     	; 0xf6c <_ZN15ConveyorManager19AdvanceStateMachineEv+0x92>
            
            break;
                    
        // Process step: Request conveyor advance
        case ConveyorBeginAdvance:
            Serial.print("State: ConveyorBeginAdvance\n");
     f16:	6c e3       	ldi	r22, 0x3C	; 60
     f18:	74 e0       	ldi	r23, 0x04	; 4
     f1a:	81 e1       	ldi	r24, 0x11	; 17
     f1c:	9a e0       	ldi	r25, 0x0A	; 10
     f1e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            m_pCupConveyor->BeginAdvance();
     f22:	8f 89       	ldd	r24, Y+23	; 0x17
     f24:	98 8d       	ldd	r25, Y+24	; 0x18
     f26:	7a d0       	rcall	.+244    	; 0x101c <_ZN11CupConveyor12BeginAdvanceEv>
            SetTimeout(CONVEYOR_TIMEOUT_ADVANCE, CONVEYOR_ERR_TIMEOUT_ADVANCE);
     f28:	00 e2       	ldi	r16, 0x20	; 32
     f2a:	10 e0       	ldi	r17, 0x00	; 0
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e1       	ldi	r20, 0x10	; 16
     f32:	57 e2       	ldi	r21, 0x27	; 39
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	ce 01       	movw	r24, r28
     f3a:	0e 94 1e 17 	call	0x2e3c	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Set the next state in the process sequence
//
void ConveyorManager::SetNextState( ConveyorState nextState )
{
    m_State = nextState;
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	13 c0       	rjmp	.+38     	; 0xf68 <_ZN15ConveyorManager19AdvanceStateMachineEv+0x8e>
            SetNextState(ConveyorAdvancing);
            break;
                   
        // Process step: Conveyor advance is in process
        case ConveyorAdvancing:
			if( m_pCupConveyor->IsStationary())
     f42:	8f 89       	ldd	r24, Y+23	; 0x17
     f44:	98 8d       	ldd	r25, Y+24	; 0x18
     f46:	85 d0       	rcall	.+266    	; 0x1052 <_ZN11CupConveyor12IsStationaryEv>
     f48:	88 23       	and	r24, r24
     f4a:	79 f0       	breq	.+30     	; 0xf6a <_ZN15ConveyorManager19AdvanceStateMachineEv+0x90>
			{
				Serial.print("State: ConveyorAdvanceComplete\n");
     f4c:	69 e5       	ldi	r22, 0x59	; 89
     f4e:	74 e0       	ldi	r23, 0x04	; 4
     f50:	81 e1       	ldi	r24, 0x11	; 17
     f52:	9a e0       	ldi	r25, 0x0A	; 10
     f54:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
				ClearTimeout();
     f58:	ce 01       	movw	r24, r28
     f5a:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
				m_pController->NotifyConveyorAdvanceComplete();
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	9d 81       	ldd	r25, Y+5	; 0x05
     f62:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <_ZN20TeaMachineController29NotifyConveyorAdvanceCompleteEv>
//
//  Set the next state in the process sequence
//
void ConveyorManager::SetNextState( ConveyorState nextState )
{
    m_State = nextState;
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	89 8f       	std	Y+25, r24	; 0x19
//
//  Initiate the next step of the process
//
ProcessManagerResponse ConveyorManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
			response = ProcessComplete;
			break;
    } // switch            
            
	return response;
}
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	08 95       	ret

00000f76 <_ZN15ConveyorManager8ContinueEv>:
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse ConveyorManager::Continue()
{
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	ec 01       	movw	r28, r24
     f7c:	8e 89       	ldd	r24, Y+22	; 0x16
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	11 f1       	breq	.+68     	; 0xfc6 <_ZN15ConveyorManager8ContinueEv+0x50>
     f82:	82 30       	cpi	r24, 0x02	; 2
     f84:	01 f1       	breq	.+64     	; 0xfc6 <_ZN15ConveyorManager8ContinueEv+0x50>
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
     f86:	ce 01       	movw	r24, r28
     f88:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
     f8c:	81 11       	cpse	r24, r1
     f8e:	03 c0       	rjmp	.+6      	; 0xf96 <_ZN15ConveyorManager8ContinueEv+0x20>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
     f90:	ce 01       	movw	r24, r28
     f92:	a3 df       	rcall	.-186    	; 0xeda <_ZN15ConveyorManager19AdvanceStateMachineEv>
     f94:	17 c0       	rjmp	.+46     	; 0xfc4 <_ZN15ConveyorManager8ContinueEv+0x4e>
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
     f96:	6c ec       	ldi	r22, 0xCC	; 204
     f98:	73 e0       	ldi	r23, 0x03	; 3
     f9a:	81 e1       	ldi	r24, 0x11	; 17
     f9c:	9a e0       	ldi	r25, 0x0A	; 10
     f9e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
     fa2:	4e 85       	ldd	r20, Y+14	; 0x0e
     fa4:	5f 85       	ldd	r21, Y+15	; 0x0f
     fa6:	68 89       	ldd	r22, Y+16	; 0x10
     fa8:	79 89       	ldd	r23, Y+17	; 0x11
     faa:	2a e0       	ldi	r18, 0x0A	; 10
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e1       	ldi	r24, 0x11	; 17
     fb0:	9a e0       	ldi	r25, 0x0A	; 10
     fb2:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <_ZN5Print5printEmi>
            Serial.print("\n");
     fb6:	65 ef       	ldi	r22, 0xF5	; 245
     fb8:	79 e0       	ldi	r23, 0x09	; 9
     fba:	81 e1       	ldi	r24, 0x11	; 17
     fbc:	9a e0       	ldi	r25, 0x0A	; 10
     fbe:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
{
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	8e 8b       	std	Y+22, r24	; 0x16
        
        SetResponse(response);
    }
    
    return response;
}    
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	08 95       	ret

00000fcc <_ZN15ConveyorManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the conveyor manager
//
bool ConveyorManager::Initialise()
{
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	cf 93       	push	r28
     fd2:	df 93       	push	r29
     fd4:	8c 01       	movw	r16, r24
    // Call the base class
    ProcessManagerBase::Initialise();
     fd6:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZN18ProcessManagerBase10InitialiseEv>

    // Create and initialise a cup conveyor object
	m_pCupConveyor = new CupConveyor(m_pTeaMachine);
     fda:	86 e0       	ldi	r24, 0x06	; 6
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
     fe2:	ec 01       	movw	r28, r24
     fe4:	f8 01       	movw	r30, r16
     fe6:	62 81       	ldd	r22, Z+2	; 0x02
     fe8:	73 81       	ldd	r23, Z+3	; 0x03
     fea:	0c d0       	rcall	.+24     	; 0x1004 <_ZN11CupConveyorC1EP10TeaMachine>
     fec:	f8 01       	movw	r30, r16
     fee:	d0 8f       	std	Z+24, r29	; 0x18
     ff0:	c7 8b       	std	Z+23, r28	; 0x17
	m_pCupConveyor->Initialise();
     ff2:	ce 01       	movw	r24, r28
     ff4:	0e 94 30 1c 	call	0x3860	; 0x3860 <_ZN19TeaMachineComponent10InitialiseEv>
	} // while

	return (response == ProcessComplete);
    */
return true;
}
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	08 95       	ret

00001004 <_ZN11CupConveyorC1EP10TeaMachine>:
} //CupConveyor

//
//	Default destructor
//
CupConveyor::~CupConveyor()
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	ec 01       	movw	r28, r24
    100a:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    100e:	8d e8       	ldi	r24, 0x8D	; 141
    1010:	94 e0       	ldi	r25, 0x04	; 4
    1012:	99 83       	std	Y+1, r25	; 0x01
    1014:	88 83       	st	Y, r24
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <_ZN11CupConveyor12BeginAdvanceEv>:
//	BeginAdvance
//
//	Advance the conveyor
//
bool CupConveyor::BeginAdvance()
{
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_CUPCON_ADVANCE);
    1022:	63 e0       	ldi	r22, 0x03	; 3
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	9d 81       	ldd	r25, Y+5	; 0x05
    102a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	delay(500);
    102e:	64 ef       	ldi	r22, 0xF4	; 244
    1030:	71 e0       	ldi	r23, 0x01	; 1
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
	m_pSystem->ClearOutputRegisterBit(OUTREG_CUPCON_ADVANCE);
    103a:	63 e0       	ldi	r22, 0x03	; 3
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
	
	return true;
}
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	08 95       	ret

0000104e <_ZN11CupConveyor4TestEv>:
//
//	Perform hardware tests
//
bool CupConveyor::Test()
{
	BeginAdvance();
    104e:	e6 df       	rcall	.-52     	; 0x101c <_ZN11CupConveyor12BeginAdvanceEv>
    1050:	ff cf       	rjmp	.-2      	; 0x1050 <_ZN11CupConveyor4TestEv+0x2>

00001052 <_ZN11CupConveyor12IsStationaryEv>:
//
//	Returns true if the conveyor motor has stopped
//
bool CupConveyor::IsStationary()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    1052:	fc 01       	movw	r30, r24
    1054:	84 81       	ldd	r24, Z+4	; 0x04
    1056:	95 81       	ldd	r25, Z+5	; 0x05
    1058:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>

	return ((wInputRegister & INREGMASK_CUPCON_STATIONARY) != 0);
}
    105c:	92 fb       	bst	r25, 2
    105e:	88 27       	eor	r24, r24
    1060:	80 f9       	bld	r24, 0
    1062:	08 95       	ret

00001064 <_ZN11CupConveyor4StopEv>:
//	Stop
//
//	Stop the conveyor
//
void CupConveyor::Stop()
{
    1064:	08 95       	ret

00001066 <_ZN11CupDetector12ClearMembersEv>:
    unsigned int distance = sonar.ping() / US_ROUNDTRIP_CM;
    
    m_bStationStates[nStation] = (distance > 0 );
    
    return m_bStationStates[nStation];
}
    1066:	fc 01       	movw	r30, r24
    1068:	36 96       	adiw	r30, 0x06	; 6
    106a:	40 96       	adiw	r24, 0x10	; 16
    106c:	11 92       	st	Z+, r1
    106e:	11 86       	std	Z+9, r1	; 0x09
    1070:	e8 17       	cp	r30, r24
    1072:	f9 07       	cpc	r31, r25
    1074:	d9 f7       	brne	.-10     	; 0x106c <_ZN11CupDetector12ClearMembersEv+0x6>
    1076:	08 95       	ret

00001078 <_ZN11CupDetectorC1EP10TeaMachine>:
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	ec 01       	movw	r28, r24
    107e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    1082:	8b ea       	ldi	r24, 0xAB	; 171
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	99 83       	std	Y+1, r25	; 0x01
    1088:	88 83       	st	Y, r24
    108a:	ce 01       	movw	r24, r28
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	ea cf       	rjmp	.-44     	; 0x1066 <_ZN11CupDetector12ClearMembersEv>

00001092 <_ZN11CupDetector10InitialiseEv>:
    1092:	cf 93       	push	r28
    1094:	df 93       	push	r29
    1096:	ec 01       	movw	r28, r24
    1098:	60 e0       	ldi	r22, 0x00	; 0
    109a:	8d e0       	ldi	r24, 0x0D	; 13
    109c:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	89 e0       	ldi	r24, 0x09	; 9
    10a4:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
    10a8:	ce 01       	movw	r24, r28
    10aa:	dd df       	rcall	.-70     	; 0x1066 <_ZN11CupDetector12ClearMembersEv>
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	08 95       	ret

000010b4 <_ZN11CupDetector6UpdateEv>:
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	cf 93       	push	r28
    10c6:	df 93       	push	r29
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	62 97       	sbiw	r28, 0x12	; 18
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	6c 01       	movw	r12, r24
    10da:	23 e0       	ldi	r18, 0x03	; 3
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	4d e0       	ldi	r20, 0x0D	; 13
    10e0:	69 e0       	ldi	r22, 0x09	; 9
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 02 14 	call	0x2804	; 0x2804 <_ZN7NewPingC1Ehhi>
    10ea:	85 e9       	ldi	r24, 0x95	; 149
    10ec:	e8 2e       	mov	r14, r24
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	f8 2e       	mov	r15, r24
    10f2:	92 e0       	ldi	r25, 0x02	; 2
    10f4:	a9 2e       	mov	r10, r25
    10f6:	bb 24       	eor	r11, r11
    10f8:	b3 94       	inc	r11
    10fa:	f7 01       	movw	r30, r14
    10fc:	01 91       	ld	r16, Z+
    10fe:	11 91       	ld	r17, Z+
    1100:	7f 01       	movw	r14, r30
    1102:	a8 01       	movw	r20, r16
    1104:	41 50       	subi	r20, 0x01	; 1
    1106:	51 09       	sbc	r21, r1
    1108:	6c e0       	ldi	r22, 0x0C	; 12
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	f6 01       	movw	r30, r12
    110e:	84 81       	ldd	r24, Z+4	; 0x04
    1110:	95 81       	ldd	r25, Z+5	; 0x05
    1112:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN6System22SetOutRegisterBitGroupEji>
    1116:	6e e1       	ldi	r22, 0x1E	; 30
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
    1122:	ce 01       	movw	r24, r28
    1124:	01 96       	adiw	r24, 0x01	; 1
    1126:	0e 94 c5 14 	call	0x298a	; 0x298a <_ZN7NewPing4pingEv>
    112a:	f6 01       	movw	r30, r12
    112c:	e0 0f       	add	r30, r16
    112e:	f1 1f       	adc	r31, r17
    1130:	10 8a       	std	Z+16, r1	; 0x10
    1132:	c9 97       	sbiw	r24, 0x39	; 57
    1134:	30 f0       	brcs	.+12     	; 0x1142 <_ZN11CupDetector6UpdateEv+0x8e>
    1136:	86 81       	ldd	r24, Z+6	; 0x06
    1138:	81 11       	cpse	r24, r1
    113a:	08 c0       	rjmp	.+16     	; 0x114c <_ZN11CupDetector6UpdateEv+0x98>
    113c:	b6 82       	std	Z+6, r11	; 0x06
    113e:	b0 8a       	std	Z+16, r11	; 0x10
    1140:	05 c0       	rjmp	.+10     	; 0x114c <_ZN11CupDetector6UpdateEv+0x98>
    1142:	86 81       	ldd	r24, Z+6	; 0x06
    1144:	88 23       	and	r24, r24
    1146:	11 f0       	breq	.+4      	; 0x114c <_ZN11CupDetector6UpdateEv+0x98>
    1148:	16 82       	std	Z+6, r1	; 0x06
    114a:	a0 8a       	std	Z+16, r10	; 0x10
    114c:	f7 ea       	ldi	r31, 0xA7	; 167
    114e:	ef 16       	cp	r14, r31
    1150:	f4 e0       	ldi	r31, 0x04	; 4
    1152:	ff 06       	cpc	r15, r31
    1154:	91 f6       	brne	.-92     	; 0x10fa <_ZN11CupDetector6UpdateEv+0x46>
    1156:	62 96       	adiw	r28, 0x12	; 18
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	de bf       	out	0x3e, r29	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	cd bf       	out	0x3d, r28	; 61
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	08 95       	ret

00001178 <_ZN11CupDetector20NotifyStationAdvanceEv>:
//  Called when the station positions advance by one (as a result
//  of the conveyor moving by one position). This allows the Cup Detector to
//	maintain correct station states and recognise subsequent station events correctly.
//
void CupDetector::NotifyStationAdvance()
{
    1178:	fc 01       	movw	r30, r24
    // Shift the station states by one position
    m_bStationStates[ST_COLLECTION_A] = m_bStationStates[ST_COLLECTION_B];
    117a:	86 85       	ldd	r24, Z+14	; 0x0e
    117c:	87 87       	std	Z+15, r24	; 0x0f
    m_bStationStates[ST_COLLECTION_B] = m_bStationStates[ST_COLLECTION_C];
    117e:	85 85       	ldd	r24, Z+13	; 0x0d
    1180:	86 87       	std	Z+14, r24	; 0x0e
    m_bStationStates[ST_COLLECTION_C] = m_bStationStates[ST_STIR];
    1182:	84 85       	ldd	r24, Z+12	; 0x0c
    1184:	85 87       	std	Z+13, r24	; 0x0d
    m_bStationStates[ST_STIR] = m_bStationStates[ST_MILK];
    1186:	83 85       	ldd	r24, Z+11	; 0x0b
    1188:	84 87       	std	Z+12, r24	; 0x0c
    m_bStationStates[ST_MILK] = m_bStationStates[ST_BREW];
    118a:	82 85       	ldd	r24, Z+10	; 0x0a
    118c:	83 87       	std	Z+11, r24	; 0x0b
    m_bStationStates[ST_BREW] = m_bStationStates[ST_RECEPTION_A];
    118e:	81 85       	ldd	r24, Z+9	; 0x09
    1190:	82 87       	std	Z+10, r24	; 0x0a
    m_bStationStates[ST_RECEPTION_A] = m_bStationStates[ST_RECEPTION_B];
    1192:	80 85       	ldd	r24, Z+8	; 0x08
    1194:	81 87       	std	Z+9, r24	; 0x09
    m_bStationStates[ST_RECEPTION_B] = m_bStationStates[ST_RECEPTION_C];
    1196:	87 81       	ldd	r24, Z+7	; 0x07
    1198:	80 87       	std	Z+8, r24	; 0x08
    m_bStationStates[ST_RECEPTION_C] = false;
    119a:	17 82       	std	Z+7, r1	; 0x07
    119c:	df 01       	movw	r26, r30
    119e:	50 96       	adiw	r26, 0x10	; 16
    11a0:	7a 96       	adiw	r30, 0x1a	; 26
  
	// Clear station events
    for( int nStation = 0; nStation <= STATIONS; nStation++ )
    {
	    m_StationEvents[nStation] = StationEventNoChange;
    11a2:	1d 92       	st	X+, r1
    m_bStationStates[ST_RECEPTION_A] = m_bStationStates[ST_RECEPTION_B];
    m_bStationStates[ST_RECEPTION_B] = m_bStationStates[ST_RECEPTION_C];
    m_bStationStates[ST_RECEPTION_C] = false;
  
	// Clear station events
    for( int nStation = 0; nStation <= STATIONS; nStation++ )
    11a4:	ae 17       	cp	r26, r30
    11a6:	bf 07       	cpc	r27, r31
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <_ZN11CupDetector20NotifyStationAdvanceEv+0x2a>
    {
	    m_StationEvents[nStation] = StationEventNoChange;
    }
}
    11aa:	08 95       	ret

000011ac <_ZN11CupDetector4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool CupDetector::Test()
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	c2 54       	subi	r28, 0x42	; 66
    11b6:	d1 09       	sbc	r29, r1
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	7c 01       	movw	r14, r24
    ClearMembers();
    11c4:	50 df       	rcall	.-352    	; 0x1066 <_ZN11CupDetector12ClearMembersEv>
    Display testDisplay;
    11c6:	ce 01       	movw	r24, r28
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	6b d3       	rcall	.+1750   	; 0x18a2 <_ZN7DisplayC1Ev>
    testDisplay.Initialise();
    11cc:	ce 01       	movw	r24, r28
    11ce:	01 96       	adiw	r24, 0x01	; 1

	while( true )
	{
		Update();
    11d0:	74 d7       	rcall	.+3816   	; 0x20ba <_ZN7Display10InitialiseEv>
    11d2:	c7 01       	movw	r24, r14
    11d4:	6f df       	rcall	.-290    	; 0x10b4 <_ZN11CupDetector6UpdateEv>
		bool bCupFound = false;
        String strStationStates;
    11d6:	66 ef       	ldi	r22, 0xF6	; 246
    11d8:	79 e0       	ldi	r23, 0x09	; 9
    11da:	ce 01       	movw	r24, r28
    11dc:	cd 96       	adiw	r24, 0x3d	; 61
    11de:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <_ZN6StringC1EPKc>
    11e2:	57 01       	movw	r10, r14
    11e4:	87 e0       	ldi	r24, 0x07	; 7
    11e6:	a8 0e       	add	r10, r24
    11e8:	b1 1c       	adc	r11, r1
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
    11ea:	01 e0       	ldi	r16, 0x01	; 1
    11ec:	10 e0       	ldi	r17, 0x00	; 0
    testDisplay.Initialise();

	while( true )
	{
		Update();
		bool bCupFound = false;
    11ee:	d1 2c       	mov	r13, r1
        String strStationStates;
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
		{
           if( m_bStationStates[nStation] )
    11f0:	f5 01       	movw	r30, r10
    11f2:	81 91       	ld	r24, Z+
    11f4:	5f 01       	movw	r10, r30
            {
	            // Cup is present
	            bCupFound = true;
	            testDisplay.Set( nStation, nStation );
    11f6:	20 e0       	ldi	r18, 0x00	; 0
		Update();
		bool bCupFound = false;
        String strStationStates;
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
		{
           if( m_bStationStates[nStation] )
    11f8:	88 23       	and	r24, r24
    11fa:	f1 f0       	breq	.+60     	; 0x1238 <_ZN11CupDetector4TestEv+0x8c>
            {
	            // Cup is present
	            bCupFound = true;
	            testDisplay.Set( nStation, nStation );
    11fc:	a8 01       	movw	r20, r16
    11fe:	b8 01       	movw	r22, r16
    1200:	ce 01       	movw	r24, r28
    1202:	01 96       	adiw	r24, 0x01	; 1
    1204:	a0 d3       	rcall	.+1856   	; 0x1946 <_ZN7Display3SetEiib>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1206:	61 e9       	ldi	r22, 0x91	; 145
    1208:	74 e0       	ldi	r23, 0x04	; 4
    120a:	ce 01       	movw	r24, r28
    120c:	c7 96       	adiw	r24, 0x37	; 55
    120e:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <_ZN6StringC1EPKc>
	            strStationStates = "X" + strStationStates;
    1212:	be 01       	movw	r22, r28
    1214:	63 5c       	subi	r22, 0xC3	; 195
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	ce 01       	movw	r24, r28
    121a:	c7 96       	adiw	r24, 0x37	; 55
    121c:	0e 94 3e 32 	call	0x647c	; 0x647c <_ZplRK15StringSumHelperRK6String>
    1220:	bc 01       	movw	r22, r24
    1222:	ce 01       	movw	r24, r28
    1224:	cd 96       	adiw	r24, 0x3d	; 61
    1226:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    122a:	ce 01       	movw	r24, r28
    122c:	c7 96       	adiw	r24, 0x37	; 55
    122e:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZN6StringD1Ev>
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
		{
           if( m_bStationStates[nStation] )
            {
	            // Cup is present
	            bCupFound = true;
    1232:	dd 24       	eor	r13, r13
    1234:	d3 94       	inc	r13
    1236:	1c c0       	rjmp	.+56     	; 0x1270 <_ZN11CupDetector4TestEv+0xc4>
	            strStationStates = "X" + strStationStates;
            }
            else
            {
		        // Cup is not present
		        testDisplay.Set( nStation, BLANK );
    1238:	4f ef       	ldi	r20, 0xFF	; 255
    123a:	5f ef       	ldi	r21, 0xFF	; 255
    123c:	b8 01       	movw	r22, r16
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	81 d3       	rcall	.+1794   	; 0x1946 <_ZN7Display3SetEiib>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    1244:	63 e9       	ldi	r22, 0x93	; 147
    1246:	74 e0       	ldi	r23, 0x04	; 4
    1248:	ce 01       	movw	r24, r28
    124a:	c7 96       	adiw	r24, 0x37	; 55
    124c:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <_ZN6StringC1EPKc>
		        strStationStates = "-" + strStationStates;
    1250:	be 01       	movw	r22, r28
    1252:	63 5c       	subi	r22, 0xC3	; 195
    1254:	7f 4f       	sbci	r23, 0xFF	; 255
    1256:	ce 01       	movw	r24, r28
    1258:	c7 96       	adiw	r24, 0x37	; 55
    125a:	0e 94 3e 32 	call	0x647c	; 0x647c <_ZplRK15StringSumHelperRK6String>
    125e:	bc 01       	movw	r22, r24
    1260:	ce 01       	movw	r24, r28
    1262:	cd 96       	adiw	r24, 0x3d	; 61
    1264:	0e 94 fd 31 	call	0x63fa	; 0x63fa <_ZN6StringaSERKS_>
       #if __cplusplus >= 201103L || defined(__GXX_EXPERIMENTAL_CXX0X__)
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    1268:	ce 01       	movw	r24, r28
    126a:	c7 96       	adiw	r24, 0x37	; 55
    126c:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZN6StringD1Ev>
	while( true )
	{
		Update();
		bool bCupFound = false;
        String strStationStates;
		for( int nStation = 1; nStation <= STATIONS; nStation++ )
    1270:	0f 5f       	subi	r16, 0xFF	; 255
    1272:	1f 4f       	sbci	r17, 0xFF	; 255
    1274:	0a 30       	cpi	r16, 0x0A	; 10
    1276:	11 05       	cpc	r17, r1
    1278:	09 f0       	breq	.+2      	; 0x127c <_ZN11CupDetector4TestEv+0xd0>
		        // Cup is not present
		        testDisplay.Set( nStation, BLANK );
		        strStationStates = "-" + strStationStates;
            }
		} // for
		testDisplay.Set( IndicatorLED_StatusGreen, bCupFound );
    127a:	ba cf       	rjmp	.-140    	; 0x11f0 <_ZN11CupDetector4TestEv+0x44>
    127c:	4d 2d       	mov	r20, r13
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	ce 01       	movw	r24, r28
    1282:	01 96       	adiw	r24, 0x01	; 1
		testDisplay.Update();
    1284:	97 d3       	rcall	.+1838   	; 0x19b4 <_ZN7Display3SetE12IndicatorLEDb>
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0b d7       	rcall	.+3606   	; 0x20a2 <_ZN7Display6UpdateEv>
		Serial.println(strStationStates);
    128c:	be 01       	movw	r22, r28
    128e:	63 5c       	subi	r22, 0xC3	; 195
    1290:	7f 4f       	sbci	r23, 0xFF	; 255
    1292:	81 e1       	ldi	r24, 0x11	; 17
    1294:	9a e0       	ldi	r25, 0x0A	; 10
    1296:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <_ZN5Print7printlnERK6String>
		delay(1000);
    129a:	68 ee       	ldi	r22, 0xE8	; 232
    129c:	73 e0       	ldi	r23, 0x03	; 3
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>

	while( true )
	{
		Update();
		bool bCupFound = false;
        String strStationStates;
    12a6:	ce 01       	movw	r24, r28
    12a8:	cd 96       	adiw	r24, 0x3d	; 61
    12aa:	0e 94 82 31 	call	0x6304	; 0x6304 <_ZN6StringD1Ev>
{
    ClearMembers();
    Display testDisplay;
    testDisplay.Initialise();

	while( true )
    12ae:	91 cf       	rjmp	.-222    	; 0x11d2 <_ZN11CupDetector4TestEv+0x26>

000012b0 <_ZN13CupLevelProbe10InitialiseEv>:
} //CupLevelProbe

//
//	Default constructor
//
CupLevelProbe::~CupLevelProbe()
    12b0:	08 95       	ret

000012b2 <_ZN13CupLevelProbeC1EP10TeaMachine>:
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ec 01       	movw	r28, r24
    12b8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    12bc:	84 ef       	ldi	r24, 0xF4	; 244
    12be:	94 e0       	ldi	r25, 0x04	; 4
    12c0:	99 83       	std	Y+1, r25	; 0x01
    12c2:	88 83       	st	Y, r24
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	08 95       	ret

000012ca <_ZN13CupLevelProbe5RaiseEv>:
//	Raise
//
//	Raise the probe arm
//
bool CupLevelProbe::Raise()
{
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ec 01       	movw	r28, r24
    m_pSystem->ClearOutputRegisterBit(OUTREG_CUPPROBE_UPDOWN);
    12d0:	61 e1       	ldi	r22, 0x11	; 17
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
    m_pSystem->SetOutputRegisterBit(OUTREG_CUPPROBE_EN);
    12dc:	60 e1       	ldi	r22, 0x10	; 16
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	9d 81       	ldd	r25, Y+5	; 0x05
    12e4:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <_ZN13CupLevelProbe5LowerEv>:
//	Lower
//
//	Lower the probe arm
//
bool CupLevelProbe::Lower()
{
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_CUPPROBE_UPDOWN);
    12f6:	61 e1       	ldi	r22, 0x11	; 17
    12f8:	70 e0       	ldi	r23, 0x00	; 0
    12fa:	8c 81       	ldd	r24, Y+4	; 0x04
    12fc:	9d 81       	ldd	r25, Y+5	; 0x05
    12fe:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_CUPPROBE_EN);
    1302:	60 e1       	ldi	r22, 0x10	; 16
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	08 95       	ret

00001316 <_ZN13CupLevelProbe4StopEv>:
//
//	Stop the motor
//
void CupLevelProbe::Stop()
{
	m_pSystem->ClearOutputRegisterBit(OUTREG_CUPPROBE_EN);
    1316:	60 e1       	ldi	r22, 0x10	; 16
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	fc 01       	movw	r30, r24
    131c:	84 81       	ldd	r24, Z+4	; 0x04
    131e:	95 81       	ldd	r25, Z+5	; 0x05
    1320:	0c 94 3e 19 	jmp	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>

00001324 <_ZN13CupLevelProbe8IsRaisedEv>:
//
// Determine whether or not probe arm is raised
//
bool CupLevelProbe::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    1324:	fc 01       	movw	r30, r24
    1326:	84 81       	ldd	r24, Z+4	; 0x04
    1328:	95 81       	ldd	r25, Z+5	; 0x05
    132a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_CUPPROBE_RETRACTED) != 0;   
    132e:	84 e0       	ldi	r24, 0x04	; 4
    1330:	98 9f       	mul	r25, r24
    1332:	81 2d       	mov	r24, r1
    1334:	99 27       	eor	r25, r25
    1336:	11 24       	eor	r1, r1
}    
    1338:	81 70       	andi	r24, 0x01	; 1
    133a:	08 95       	ret

0000133c <_ZN13CupLevelProbe9CupIsFullEv>:
//
//	Returns true if the cup level float switch indicates a full cup
//
bool CupLevelProbe::CupIsFull()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    133c:	fc 01       	movw	r30, r24
    133e:	84 81       	ldd	r24, Z+4	; 0x04
    1340:	95 81       	ldd	r25, Z+5	; 0x05
    1342:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>

	return ((wInputRegister & INREGMASK_CUPLEVEL_HILIMIT) != 0);
}
    1346:	91 fb       	bst	r25, 1
    1348:	88 27       	eor	r24, r24
    134a:	80 f9       	bld	r24, 0
    134c:	08 95       	ret

0000134e <_ZN13CupLevelProbe4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool CupLevelProbe::Test()
{
    134e:	ec 01       	movw	r28, r24
		else
		{
			// Lower the probe arm
			Lower();
			
			bool bIsFull = !CupIsFull();
    1350:	01 e0       	ldi	r16, 0x01	; 1
bool CupLevelProbe::Test()
{
	while(true)
	{
		// Fetch mode
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    135a:	93 ff       	sbrs	r25, 3
    135c:	09 c0       	rjmp	.+18     	; 0x1370 <_ZN13CupLevelProbe4TestEv+0x22>
		{
			// Raise the probe arm
			Raise();
    135e:	ce 01       	movw	r24, r28
    1360:	b4 df       	rcall	.-152    	; 0x12ca <_ZN13CupLevelProbe5RaiseEv>
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    136a:	93 fd       	sbrc	r25, 3
    136c:	fa cf       	rjmp	.-12     	; 0x1362 <_ZN13CupLevelProbe4TestEv+0x14>
    136e:	24 c0       	rjmp	.+72     	; 0x13b8 <_ZN13CupLevelProbe4TestEv+0x6a>
		}
		else
		{
			// Lower the probe arm
			Lower();
    1370:	ce 01       	movw	r24, r28
    1372:	be df       	rcall	.-132    	; 0x12f0 <_ZN13CupLevelProbe5LowerEv>
			
			bool bIsFull = !CupIsFull();
    1374:	ce 01       	movw	r24, r28
    1376:	e2 df       	rcall	.-60     	; 0x133c <_ZN13CupLevelProbe9CupIsFullEv>
    1378:	18 2f       	mov	r17, r24
    137a:	10 27       	eor	r17, r16
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0)
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    1384:	93 fd       	sbrc	r25, 3
    1386:	18 c0       	rjmp	.+48     	; 0x13b8 <_ZN13CupLevelProbe4TestEv+0x6a>
			{
				if(CupIsFull())
    1388:	ce 01       	movw	r24, r28
    138a:	d8 df       	rcall	.-80     	; 0x133c <_ZN13CupLevelProbe9CupIsFullEv>
    138c:	88 23       	and	r24, r24
    138e:	51 f0       	breq	.+20     	; 0x13a4 <_ZN13CupLevelProbe4TestEv+0x56>
    1390:	11 11       	cpse	r17, r1
				{
					// Cup is full
					if(!bIsFull)
    1392:	f4 cf       	rjmp	.-24     	; 0x137c <_ZN13CupLevelProbe4TestEv+0x2e>
    1394:	6f ea       	ldi	r22, 0xAF	; 175
					{
						bIsFull = true;
						Serial.print("Cup is FULL\n");
    1396:	74 e0       	ldi	r23, 0x04	; 4
    1398:	81 e1       	ldi	r24, 0x11	; 17
    139a:	9a e0       	ldi	r25, 0x0A	; 10
    139c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    13a0:	11 e0       	ldi	r17, 0x01	; 1
				if(CupIsFull())
				{
					// Cup is full
					if(!bIsFull)
					{
						bIsFull = true;
    13a2:	ec cf       	rjmp	.-40     	; 0x137c <_ZN13CupLevelProbe4TestEv+0x2e>
    13a4:	11 23       	and	r17, r17
					}
				}	
				else	
				{
					// Cup is not full
					if(bIsFull)
    13a6:	51 f3       	breq	.-44     	; 0x137c <_ZN13CupLevelProbe4TestEv+0x2e>
    13a8:	6c eb       	ldi	r22, 0xBC	; 188
					{
						bIsFull = false;
						Serial.print("Cup is NOT FULL\n");
    13aa:	74 e0       	ldi	r23, 0x04	; 4
    13ac:	81 e1       	ldi	r24, 0x11	; 17
    13ae:	9a e0       	ldi	r25, 0x0A	; 10
    13b0:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
				else	
				{
					// Cup is not full
					if(bIsFull)
					{
						bIsFull = false;
    13b4:	10 e0       	ldi	r17, 0x00	; 0
    13b6:	e2 cf       	rjmp	.-60     	; 0x137c <_ZN13CupLevelProbe4TestEv+0x2e>
						Serial.print("Cup is NOT FULL\n");
					}
				}		
			}
		}
        if(IsRaised())
    13b8:	ce 01       	movw	r24, r28
    13ba:	b4 df       	rcall	.-152    	; 0x1324 <_ZN13CupLevelProbe8IsRaisedEv>
    13bc:	88 23       	and	r24, r24
    13be:	19 f0       	breq	.+6      	; 0x13c6 <_ZN13CupLevelProbe4TestEv+0x78>
    13c0:	6d ec       	ldi	r22, 0xCD	; 205
        {
            Serial.print("Probe is RAISED\n");
    13c2:	74 e0       	ldi	r23, 0x04	; 4
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <_ZN13CupLevelProbe4TestEv+0x7c>
    13c6:	6e ed       	ldi	r22, 0xDE	; 222
        }
        else
        {
            Serial.print("Probe is LOWERED\n");
    13c8:	74 e0       	ldi	r23, 0x04	; 4
    13ca:	81 e1       	ldi	r24, 0x11	; 17
    13cc:	9a e0       	ldi	r25, 0x0A	; 10
    13ce:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    13d2:	68 ee       	ldi	r22, 0xE8	; 232
        }
        delay(1000);
    13d4:	73 e0       	ldi	r23, 0x03	; 3
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
    13de:	b9 cf       	rjmp	.-142    	; 0x1352 <_ZN13CupLevelProbe4TestEv+0x4>

000013e0 <_ZN17DallasTemperature19defaultAlarmHandlerEPKh>:
//
//	Perform hardware tests
//
bool CupLevelProbe::Test()
{
	while(true)
    13e0:	08 95       	ret

000013e2 <_ZN17DallasTemperatureC1EP7OneWire>:
    DeviceAddress deviceAddress;
    getAddress(deviceAddress, deviceIndex);

    return requestTemperaturesByAddress(deviceAddress);

}
    13e2:	fc 01       	movw	r30, r24
    13e4:	80 ef       	ldi	r24, 0xF0	; 240
    13e6:	99 e0       	ldi	r25, 0x09	; 9
    13e8:	92 8b       	std	Z+18, r25	; 0x12
    13ea:	81 8b       	std	Z+17, r24	; 0x11
    13ec:	76 83       	std	Z+6, r23	; 0x06
    13ee:	65 83       	std	Z+5, r22	; 0x05
    13f0:	14 82       	std	Z+4, r1	; 0x04
    13f2:	10 82       	st	Z, r1
    13f4:	89 e0       	ldi	r24, 0x09	; 9
    13f6:	81 83       	std	Z+1, r24	; 0x01
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	82 83       	std	Z+2, r24	; 0x02
    13fc:	83 83       	std	Z+3, r24	; 0x03
    13fe:	08 95       	ret

00001400 <_ZN17DallasTemperature12validAddressEPKh>:
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	eb 01       	movw	r28, r22
    1406:	67 e0       	ldi	r22, 0x07	; 7
    1408:	ce 01       	movw	r24, r28
    140a:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN7OneWire4crc8EPKhh>
    140e:	91 e0       	ldi	r25, 0x01	; 1
    1410:	2f 81       	ldd	r18, Y+7	; 0x07
    1412:	28 13       	cpse	r18, r24
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	89 2f       	mov	r24, r25
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	08 95       	ret

0000141e <_ZN17DallasTemperature10getAddressEPhh>:
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	8c 01       	movw	r16, r24
    142c:	7b 01       	movw	r14, r22
    142e:	d4 2f       	mov	r29, r20
    1430:	fc 01       	movw	r30, r24
    1432:	85 81       	ldd	r24, Z+5	; 0x05
    1434:	96 81       	ldd	r25, Z+6	; 0x06
    1436:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN7OneWire12reset_searchEv>
    143a:	c0 e0       	ldi	r28, 0x00	; 0
    143c:	b7 01       	movw	r22, r14
    143e:	f8 01       	movw	r30, r16
    1440:	85 81       	ldd	r24, Z+5	; 0x05
    1442:	96 81       	ldd	r25, Z+6	; 0x06
    1444:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN7OneWire6searchEPh>
    1448:	88 23       	and	r24, r24
    144a:	51 f0       	breq	.+20     	; 0x1460 <_ZN17DallasTemperature10getAddressEPhh+0x42>
    144c:	dc 13       	cpse	r29, r28
    144e:	05 c0       	rjmp	.+10     	; 0x145a <_ZN17DallasTemperature10getAddressEPhh+0x3c>
    1450:	b7 01       	movw	r22, r14
    1452:	c8 01       	movw	r24, r16
    1454:	d5 df       	rcall	.-86     	; 0x1400 <_ZN17DallasTemperature12validAddressEPKh>
    1456:	81 11       	cpse	r24, r1
    1458:	04 c0       	rjmp	.+8      	; 0x1462 <_ZN17DallasTemperature10getAddressEPhh+0x44>
    145a:	cf 5f       	subi	r28, 0xFF	; 255
    145c:	dc 17       	cp	r29, r28
    145e:	70 f7       	brcc	.-36     	; 0x143c <_ZN17DallasTemperature10getAddressEPhh+0x1e>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	08 95       	ret

00001470 <_ZN17DallasTemperature14readScratchPadEPKhPh>:
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	8c 01       	movw	r16, r24
    147e:	eb 01       	movw	r28, r22
    1480:	7a 01       	movw	r14, r20
    1482:	fc 01       	movw	r30, r24
    1484:	85 81       	ldd	r24, Z+5	; 0x05
    1486:	96 81       	ldd	r25, Z+6	; 0x06
    1488:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZN7OneWire5resetEv>
    148c:	88 23       	and	r24, r24
    148e:	11 f1       	breq	.+68     	; 0x14d4 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x64>
    1490:	be 01       	movw	r22, r28
    1492:	f8 01       	movw	r30, r16
    1494:	85 81       	ldd	r24, Z+5	; 0x05
    1496:	96 81       	ldd	r25, Z+6	; 0x06
    1498:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN7OneWire6selectEPKh>
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	6e eb       	ldi	r22, 0xBE	; 190
    14a0:	f8 01       	movw	r30, r16
    14a2:	85 81       	ldd	r24, Z+5	; 0x05
    14a4:	96 81       	ldd	r25, Z+6	; 0x06
    14a6:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN7OneWire5writeEhh>
    14aa:	e7 01       	movw	r28, r14
    14ac:	f9 e0       	ldi	r31, 0x09	; 9
    14ae:	ef 0e       	add	r14, r31
    14b0:	f1 1c       	adc	r15, r1
    14b2:	f8 01       	movw	r30, r16
    14b4:	85 81       	ldd	r24, Z+5	; 0x05
    14b6:	96 81       	ldd	r25, Z+6	; 0x06
    14b8:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <_ZN7OneWire4readEv>
    14bc:	89 93       	st	Y+, r24
    14be:	ce 15       	cp	r28, r14
    14c0:	df 05       	cpc	r29, r15
    14c2:	b9 f7       	brne	.-18     	; 0x14b2 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x42>
    14c4:	f8 01       	movw	r30, r16
    14c6:	85 81       	ldd	r24, Z+5	; 0x05
    14c8:	96 81       	ldd	r25, Z+6	; 0x06
    14ca:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZN7OneWire5resetEv>
    14ce:	91 e0       	ldi	r25, 0x01	; 1
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <_ZN17DallasTemperature14readScratchPadEPKhPh+0x66>
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	89 2f       	mov	r24, r25
    14d8:	df 91       	pop	r29
    14da:	cf 91       	pop	r28
    14dc:	1f 91       	pop	r17
    14de:	0f 91       	pop	r16
    14e0:	ff 90       	pop	r15
    14e2:	ef 90       	pop	r14
    14e4:	08 95       	ret

000014e6 <_ZN17DallasTemperature11isConnectedEPKhPh>:
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	ea 01       	movw	r28, r20
    14ec:	c1 df       	rcall	.-126    	; 0x1470 <_ZN17DallasTemperature14readScratchPadEPKhPh>
    14ee:	88 23       	and	r24, r24
    14f0:	39 f0       	breq	.+14     	; 0x1500 <_ZN17DallasTemperature11isConnectedEPKhPh+0x1a>
    14f2:	68 e0       	ldi	r22, 0x08	; 8
    14f4:	ce 01       	movw	r24, r28
    14f6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZN7OneWire4crc8EPKhh>
    14fa:	91 e0       	ldi	r25, 0x01	; 1
    14fc:	28 85       	ldd	r18, Y+8	; 0x08
    14fe:	28 13       	cpse	r18, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	89 2f       	mov	r24, r25
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <_ZN17DallasTemperature15readPowerSupplyEPKh>:
    150a:	0f 93       	push	r16
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	ec 01       	movw	r28, r24
    1514:	8b 01       	movw	r16, r22
    1516:	8d 81       	ldd	r24, Y+5	; 0x05
    1518:	9e 81       	ldd	r25, Y+6	; 0x06
    151a:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZN7OneWire5resetEv>
    151e:	b8 01       	movw	r22, r16
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <_ZN7OneWire6selectEPKh>
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	64 eb       	ldi	r22, 0xB4	; 180
    152c:	8d 81       	ldd	r24, Y+5	; 0x05
    152e:	9e 81       	ldd	r25, Y+6	; 0x06
    1530:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN7OneWire5writeEhh>
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	0e 94 94 15 	call	0x2b28	; 0x2b28 <_ZN7OneWire8read_bitEv>
    153c:	18 2f       	mov	r17, r24
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZN7OneWire5resetEv>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	11 11       	cpse	r17, r1
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	08 95       	ret

00001556 <_ZN17DallasTemperature13getResolutionEPKh>:
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	29 97       	sbiw	r28, 0x09	; 9
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	fb 01       	movw	r30, r22
    156c:	20 81       	ld	r18, Z
    156e:	20 31       	cpi	r18, 0x10	; 16
    1570:	c9 f0       	breq	.+50     	; 0x15a4 <_ZN17DallasTemperature13getResolutionEPKh+0x4e>
    1572:	ae 01       	movw	r20, r28
    1574:	4f 5f       	subi	r20, 0xFF	; 255
    1576:	5f 4f       	sbci	r21, 0xFF	; 255
    1578:	b6 df       	rcall	.-148    	; 0x14e6 <_ZN17DallasTemperature11isConnectedEPKhPh>
    157a:	88 23       	and	r24, r24
    157c:	89 f0       	breq	.+34     	; 0x15a0 <_ZN17DallasTemperature13getResolutionEPKh+0x4a>
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	8f 33       	cpi	r24, 0x3F	; 63
    1582:	61 f0       	breq	.+24     	; 0x159c <_ZN17DallasTemperature13getResolutionEPKh+0x46>
    1584:	20 f4       	brcc	.+8      	; 0x158e <_ZN17DallasTemperature13getResolutionEPKh+0x38>
    1586:	8f 31       	cpi	r24, 0x1F	; 31
    1588:	59 f4       	brne	.+22     	; 0x15a0 <_ZN17DallasTemperature13getResolutionEPKh+0x4a>
    158a:	89 e0       	ldi	r24, 0x09	; 9
    158c:	0c c0       	rjmp	.+24     	; 0x15a6 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    158e:	8f 35       	cpi	r24, 0x5F	; 95
    1590:	19 f0       	breq	.+6      	; 0x1598 <_ZN17DallasTemperature13getResolutionEPKh+0x42>
    1592:	8f 37       	cpi	r24, 0x7F	; 127
    1594:	39 f0       	breq	.+14     	; 0x15a4 <_ZN17DallasTemperature13getResolutionEPKh+0x4e>
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <_ZN17DallasTemperature13getResolutionEPKh+0x4a>
    1598:	8b e0       	ldi	r24, 0x0B	; 11
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    159c:	8a e0       	ldi	r24, 0x0A	; 10
    159e:	03 c0       	rjmp	.+6      	; 0x15a6 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	01 c0       	rjmp	.+2      	; 0x15a6 <_ZN17DallasTemperature13getResolutionEPKh+0x50>
    15a4:	8c e0       	ldi	r24, 0x0C	; 12
    15a6:	29 96       	adiw	r28, 0x09	; 9
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	08 95       	ret

000015b8 <_ZN17DallasTemperature5beginEv>:
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	28 97       	sbiw	r28, 0x08	; 8
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	8c 01       	movw	r16, r24
    15d6:	fc 01       	movw	r30, r24
    15d8:	85 81       	ldd	r24, Z+5	; 0x05
    15da:	96 81       	ldd	r25, Z+6	; 0x06
    15dc:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <_ZN7OneWire12reset_searchEv>
    15e0:	f8 01       	movw	r30, r16
    15e2:	14 82       	std	Z+4, r1	; 0x04
    15e4:	ff 24       	eor	r15, r15
    15e6:	f3 94       	inc	r15
    15e8:	be 01       	movw	r22, r28
    15ea:	6f 5f       	subi	r22, 0xFF	; 255
    15ec:	7f 4f       	sbci	r23, 0xFF	; 255
    15ee:	f8 01       	movw	r30, r16
    15f0:	85 81       	ldd	r24, Z+5	; 0x05
    15f2:	96 81       	ldd	r25, Z+6	; 0x06
    15f4:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <_ZN7OneWire6searchEPh>
    15f8:	88 23       	and	r24, r24
    15fa:	61 f1       	breq	.+88     	; 0x1654 <_ZN17DallasTemperature5beginEv+0x9c>
    15fc:	be 01       	movw	r22, r28
    15fe:	6f 5f       	subi	r22, 0xFF	; 255
    1600:	7f 4f       	sbci	r23, 0xFF	; 255
    1602:	c8 01       	movw	r24, r16
    1604:	fd de       	rcall	.-518    	; 0x1400 <_ZN17DallasTemperature12validAddressEPKh>
    1606:	88 23       	and	r24, r24
    1608:	79 f3       	breq	.-34     	; 0x15e8 <_ZN17DallasTemperature5beginEv+0x30>
    160a:	f8 01       	movw	r30, r16
    160c:	80 81       	ld	r24, Z
    160e:	81 11       	cpse	r24, r1
    1610:	07 c0       	rjmp	.+14     	; 0x1620 <_ZN17DallasTemperature5beginEv+0x68>
    1612:	be 01       	movw	r22, r28
    1614:	6f 5f       	subi	r22, 0xFF	; 255
    1616:	7f 4f       	sbci	r23, 0xFF	; 255
    1618:	c8 01       	movw	r24, r16
    161a:	77 df       	rcall	.-274    	; 0x150a <_ZN17DallasTemperature15readPowerSupplyEPKh>
    161c:	81 11       	cpse	r24, r1
    161e:	17 c0       	rjmp	.+46     	; 0x164e <_ZN17DallasTemperature5beginEv+0x96>
    1620:	f8 01       	movw	r30, r16
    1622:	e1 80       	ldd	r14, Z+1	; 0x01
    1624:	be 01       	movw	r22, r28
    1626:	6f 5f       	subi	r22, 0xFF	; 255
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	c8 01       	movw	r24, r16
    162c:	94 df       	rcall	.-216    	; 0x1556 <_ZN17DallasTemperature13getResolutionEPKh>
    162e:	8e 15       	cp	r24, r14
    1630:	18 f4       	brcc	.+6      	; 0x1638 <_ZN17DallasTemperature5beginEv+0x80>
    1632:	f8 01       	movw	r30, r16
    1634:	81 81       	ldd	r24, Z+1	; 0x01
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <_ZN17DallasTemperature5beginEv+0x8a>
    1638:	be 01       	movw	r22, r28
    163a:	6f 5f       	subi	r22, 0xFF	; 255
    163c:	7f 4f       	sbci	r23, 0xFF	; 255
    163e:	c8 01       	movw	r24, r16
    1640:	8a df       	rcall	.-236    	; 0x1556 <_ZN17DallasTemperature13getResolutionEPKh>
    1642:	f8 01       	movw	r30, r16
    1644:	81 83       	std	Z+1, r24	; 0x01
    1646:	84 81       	ldd	r24, Z+4	; 0x04
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	84 83       	std	Z+4, r24	; 0x04
    164c:	cd cf       	rjmp	.-102    	; 0x15e8 <_ZN17DallasTemperature5beginEv+0x30>
    164e:	f8 01       	movw	r30, r16
    1650:	f0 82       	st	Z, r15
    1652:	e6 cf       	rjmp	.-52     	; 0x1620 <_ZN17DallasTemperature5beginEv+0x68>
    1654:	28 96       	adiw	r28, 0x08	; 8
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	1f 91       	pop	r17
    1666:	0f 91       	pop	r16
    1668:	ff 90       	pop	r15
    166a:	ef 90       	pop	r14
    166c:	08 95       	ret

0000166e <_ZN17DallasTemperature20isConversionCompleteEv>:
    166e:	fc 01       	movw	r30, r24
    1670:	85 81       	ldd	r24, Z+5	; 0x05
    1672:	96 81       	ldd	r25, Z+6	; 0x06
    1674:	0e 94 94 15 	call	0x2b28	; 0x2b28 <_ZN7OneWire8read_bitEv>
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	09 f0       	breq	.+2      	; 0x1680 <_ZN17DallasTemperature20isConversionCompleteEv+0x12>
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	89 2f       	mov	r24, r25
    1682:	08 95       	ret

00001684 <_ZN17DallasTemperature27blockTillConversionCompleteEh>:
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	ec 01       	movw	r28, r24
    169e:	69 50       	subi	r22, 0x09	; 9
    16a0:	63 30       	cpi	r22, 0x03	; 3
    16a2:	48 f4       	brcc	.+18     	; 0x16b6 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x32>
    16a4:	e6 2f       	mov	r30, r22
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	ee 0f       	add	r30, r30
    16aa:	ff 1f       	adc	r31, r31
    16ac:	e8 50       	subi	r30, 0x08	; 8
    16ae:	fb 4f       	sbci	r31, 0xFB	; 251
    16b0:	00 81       	ld	r16, Z
    16b2:	11 81       	ldd	r17, Z+1	; 0x01
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x36>
    16b6:	0e ee       	ldi	r16, 0xEE	; 238
    16b8:	12 e0       	ldi	r17, 0x02	; 2
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	88 23       	and	r24, r24
    16be:	e9 f0       	breq	.+58     	; 0x16fa <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x76>
    16c0:	88 81       	ld	r24, Y
    16c2:	81 11       	cpse	r24, r1
    16c4:	1a c0       	rjmp	.+52     	; 0x16fa <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x76>
    16c6:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    16ca:	4b 01       	movw	r8, r22
    16cc:	5c 01       	movw	r10, r24
    16ce:	68 01       	movw	r12, r16
    16d0:	11 0f       	add	r17, r17
    16d2:	ee 08       	sbc	r14, r14
    16d4:	ff 08       	sbc	r15, r15
    16d6:	ce 01       	movw	r24, r28
    16d8:	ca df       	rcall	.-108    	; 0x166e <_ZN17DallasTemperature20isConversionCompleteEv>
    16da:	81 11       	cpse	r24, r1
    16dc:	20 c0       	rjmp	.+64     	; 0x171e <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x9a>
    16de:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	8c 19       	sub	r24, r12
    16e8:	9d 09       	sbc	r25, r13
    16ea:	ae 09       	sbc	r26, r14
    16ec:	bf 09       	sbc	r27, r15
    16ee:	88 15       	cp	r24, r8
    16f0:	99 05       	cpc	r25, r9
    16f2:	aa 05       	cpc	r26, r10
    16f4:	bb 05       	cpc	r27, r11
    16f6:	78 f3       	brcs	.-34     	; 0x16d6 <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x52>
    16f8:	12 c0       	rjmp	.+36     	; 0x171e <_ZN17DallasTemperature27blockTillConversionCompleteEh+0x9a>
    16fa:	b8 01       	movw	r22, r16
    16fc:	11 0f       	add	r17, r17
    16fe:	88 0b       	sbc	r24, r24
    1700:	99 0b       	sbc	r25, r25
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	ef 90       	pop	r14
    170e:	df 90       	pop	r13
    1710:	cf 90       	pop	r12
    1712:	bf 90       	pop	r11
    1714:	af 90       	pop	r10
    1716:	9f 90       	pop	r9
    1718:	8f 90       	pop	r8
    171a:	0c 94 bf 2f 	jmp	0x5f7e	; 0x5f7e <delay>
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	08 95       	ret

00001738 <_ZN17DallasTemperature19requestTemperaturesEv>:
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	ec 01       	movw	r28, r24
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	0e 94 22 15 	call	0x2a44	; 0x2a44 <_ZN7OneWire5resetEv>
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <_ZN7OneWire4skipEv>
    174e:	48 81       	ld	r20, Y
    1750:	64 e4       	ldi	r22, 0x44	; 68
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <_ZN7OneWire5writeEhh>
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	88 23       	and	r24, r24
    175e:	29 f0       	breq	.+10     	; 0x176a <_ZN17DallasTemperature19requestTemperaturesEv+0x32>
    1760:	69 81       	ldd	r22, Y+1	; 0x01
    1762:	ce 01       	movw	r24, r28
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	8d cf       	rjmp	.-230    	; 0x1684 <_ZN17DallasTemperature27blockTillConversionCompleteEh>
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>:
    return getTempF((uint8_t*)deviceAddress);

}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DallasTemperature::calculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad){
    1770:	fa 01       	movw	r30, r20

    int16_t fpTemperature =
    (((int16_t) scratchPad[TEMP_MSB]) << 11) |
    (((int16_t) scratchPad[TEMP_LSB]) << 3);
    1772:	21 81       	ldd	r18, Z+1	; 0x01
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	c9 01       	movw	r24, r18
    1778:	98 2f       	mov	r25, r24
    177a:	88 27       	eor	r24, r24
    177c:	99 0f       	add	r25, r25
    177e:	99 0f       	add	r25, r25
    1780:	99 0f       	add	r25, r25
    1782:	20 81       	ld	r18, Z
    1784:	48 e0       	ldi	r20, 0x08	; 8
    1786:	24 9f       	mul	r18, r20
    1788:	90 01       	movw	r18, r0
    178a:	11 24       	eor	r1, r1
    178c:	28 2b       	or	r18, r24
    178e:	39 2b       	or	r19, r25
    value for a DS18S20, and James Cameron added legacy DS1820 support.

    See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
    */

    if (deviceAddress[0] == DS18S20MODEL){
    1790:	db 01       	movw	r26, r22
    1792:	8c 91       	ld	r24, X
    1794:	80 31       	cpi	r24, 0x10	; 16
    1796:	c1 f4       	brne	.+48     	; 0x17c8 <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x58>
        fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 +
            (
                ((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) /
    1798:	67 81       	ldd	r22, Z+7	; 0x07
    179a:	70 e0       	ldi	r23, 0x00	; 0

    See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
    */

    if (deviceAddress[0] == DS18S20MODEL){
        fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 +
    179c:	86 81       	ldd	r24, Z+6	; 0x06
    179e:	ab 01       	movw	r20, r22
    17a0:	48 1b       	sub	r20, r24
    17a2:	51 09       	sbc	r21, r1
    17a4:	ca 01       	movw	r24, r20
    17a6:	96 95       	lsr	r25
    17a8:	98 2f       	mov	r25, r24
    17aa:	88 27       	eor	r24, r24
    17ac:	97 95       	ror	r25
    17ae:	87 95       	ror	r24
    17b0:	0e 94 06 33 	call	0x660c	; 0x660c <__divmodhi4>
    17b4:	60 51       	subi	r22, 0x10	; 16
    17b6:	71 09       	sbc	r23, r1
    17b8:	20 7f       	andi	r18, 0xF0	; 240
    17ba:	53 e0       	ldi	r21, 0x03	; 3
    17bc:	22 0f       	add	r18, r18
    17be:	33 1f       	adc	r19, r19
    17c0:	5a 95       	dec	r21
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <_ZN17DallasTemperature20calculateTemperatureEPKhPh+0x4c>
    17c4:	26 0f       	add	r18, r22
    17c6:	37 1f       	adc	r19, r23
                  scratchPad[COUNT_PER_C]
            );
    }

    return fpTemperature;
}
    17c8:	c9 01       	movw	r24, r18
    17ca:	08 95       	ret

000017cc <_ZN17DallasTemperature7getTempEPKh>:
// returns temperature in 1/128 degrees C or DEVICE_DISCONNECTED_RAW if the
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DallasTemperature::getTemp(const uint8_t* deviceAddress){
    17cc:	ef 92       	push	r14
    17ce:	ff 92       	push	r15
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	8c 01       	movw	r16, r24
    17ea:	7b 01       	movw	r14, r22

    ScratchPad scratchPad;
    if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    17ec:	ae 01       	movw	r20, r28
    17ee:	4f 5f       	subi	r20, 0xFF	; 255
    17f0:	5f 4f       	sbci	r21, 0xFF	; 255
    17f2:	79 de       	rcall	.-782    	; 0x14e6 <_ZN17DallasTemperature11isConnectedEPKhPh>
    17f4:	88 23       	and	r24, r24
    17f6:	39 f0       	breq	.+14     	; 0x1806 <_ZN17DallasTemperature7getTempEPKh+0x3a>
    17f8:	ae 01       	movw	r20, r28
    17fa:	4f 5f       	subi	r20, 0xFF	; 255
    17fc:	5f 4f       	sbci	r21, 0xFF	; 255
    17fe:	b7 01       	movw	r22, r14
    1800:	c8 01       	movw	r24, r16
    1802:	b6 df       	rcall	.-148    	; 0x1770 <_ZN17DallasTemperature20calculateTemperatureEPKhPh>
    1804:	02 c0       	rjmp	.+4      	; 0x180a <_ZN17DallasTemperature7getTempEPKh+0x3e>
    return DEVICE_DISCONNECTED_RAW;
    1806:	80 e8       	ldi	r24, 0x80	; 128
    1808:	94 ee       	ldi	r25, 0xE4	; 228

}
    180a:	29 96       	adiw	r28, 0x09	; 9
    180c:	0f b6       	in	r0, 0x3f	; 63
    180e:	f8 94       	cli
    1810:	de bf       	out	0x3e, r29	; 62
    1812:	0f be       	out	0x3f, r0	; 63
    1814:	cd bf       	out	0x3d, r28	; 61
    1816:	df 91       	pop	r29
    1818:	cf 91       	pop	r28
    181a:	1f 91       	pop	r17
    181c:	0f 91       	pop	r16
    181e:	ff 90       	pop	r15
    1820:	ef 90       	pop	r14
    1822:	08 95       	ret

00001824 <_ZN17DallasTemperature8getTempCEPKh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress){
    return rawToCelsius(getTemp(deviceAddress));
    1824:	d3 df       	rcall	.-90     	; 0x17cc <_ZN17DallasTemperature7getTempEPKh>
}

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw){

    if (raw <= DEVICE_DISCONNECTED_RAW)
    1826:	81 38       	cpi	r24, 0x81	; 129
    1828:	24 ee       	ldi	r18, 0xE4	; 228
    182a:	92 07       	cpc	r25, r18
    182c:	64 f0       	brlt	.+24     	; 0x1846 <_ZN17DallasTemperature8getTempCEPKh+0x22>
    return DEVICE_DISCONNECTED_C;
    // C = RAW/128
    return (float)raw * 0.0078125;
    182e:	bc 01       	movw	r22, r24
    1830:	99 0f       	add	r25, r25
    1832:	88 0b       	sbc	r24, r24
    1834:	99 0b       	sbc	r25, r25
    1836:	0e 94 16 2a 	call	0x542c	; 0x542c <__floatsisf>
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	5c e3       	ldi	r21, 0x3C	; 60
    1842:	0c 94 a6 2a 	jmp	0x554c	; 0x554c <__mulsf3>

// convert from raw to Celsius
float DallasTemperature::rawToCelsius(int16_t raw){

    if (raw <= DEVICE_DISCONNECTED_RAW)
    return DEVICE_DISCONNECTED_C;
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	70 e0       	ldi	r23, 0x00	; 0
    184a:	8e ef       	ldi	r24, 0xFE	; 254
    184c:	92 ec       	ldi	r25, 0xC2	; 194
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(const uint8_t* deviceAddress){
    return rawToCelsius(getTemp(deviceAddress));
}
    184e:	08 95       	ret

00001850 <_ZN17DallasTemperature15getTempCByIndexEh>:
    return requestTemperaturesByAddress(deviceAddress);

}

// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex){
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	cd b7       	in	r28, 0x3d	; 61
    185a:	de b7       	in	r29, 0x3e	; 62
    185c:	28 97       	sbiw	r28, 0x08	; 8
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	8c 01       	movw	r16, r24
    186a:	46 2f       	mov	r20, r22

    DeviceAddress deviceAddress;
    if (!getAddress(deviceAddress, deviceIndex)){
    186c:	be 01       	movw	r22, r28
    186e:	6f 5f       	subi	r22, 0xFF	; 255
    1870:	7f 4f       	sbci	r23, 0xFF	; 255
    1872:	d5 dd       	rcall	.-1110   	; 0x141e <_ZN17DallasTemperature10getAddressEPhh>
    1874:	88 23       	and	r24, r24
    1876:	31 f0       	breq	.+12     	; 0x1884 <_ZN17DallasTemperature15getTempCByIndexEh+0x34>
        return DEVICE_DISCONNECTED_C;
    }

    return getTempC((uint8_t*)deviceAddress);
    1878:	be 01       	movw	r22, r28
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	c8 01       	movw	r24, r16
    1880:	d1 df       	rcall	.-94     	; 0x1824 <_ZN17DallasTemperature8getTempCEPKh>
    1882:	04 c0       	rjmp	.+8      	; 0x188c <_ZN17DallasTemperature15getTempCByIndexEh+0x3c>
// Fetch temperature for device index
float DallasTemperature::getTempCByIndex(uint8_t deviceIndex){

    DeviceAddress deviceAddress;
    if (!getAddress(deviceAddress, deviceIndex)){
        return DEVICE_DISCONNECTED_C;
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	8e ef       	ldi	r24, 0xFE	; 254
    188a:	92 ec       	ldi	r25, 0xC2	; 194
    }

    return getTempC((uint8_t*)deviceAddress);

}
    188c:	28 96       	adiw	r28, 0x08	; 8
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	08 95       	ret

000018a2 <_ZN7DisplayC1Ev>:
//
//  Clear the display
//
void Display::Clear()
{
	ClearMembers();
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	ec 01       	movw	r28, r24
    18a8:	0e 94 32 1c 	call	0x3864	; 0x3864 <_ZN19TeaMachineComponentC1Ev>
    18ac:	8f e7       	ldi	r24, 0x7F	; 127
    18ae:	95 e0       	ldi	r25, 0x05	; 5
    18b0:	99 83       	std	Y+1, r25	; 0x01
    18b2:	88 83       	st	Y, r24
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	08 95       	ret

000018ba <_ZN7Display12ClearMembersEv>:
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	ec 01       	movw	r28, r24
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	9f 83       	std	Y+7, r25	; 0x07
    18c6:	8e 83       	std	Y+6, r24	; 0x06
    18c8:	99 87       	std	Y+9, r25	; 0x09
    18ca:	88 87       	std	Y+8, r24	; 0x08
    18cc:	9b 87       	std	Y+11, r25	; 0x0b
    18ce:	8a 87       	std	Y+10, r24	; 0x0a
    18d0:	9d 87       	std	Y+13, r25	; 0x0d
    18d2:	8c 87       	std	Y+12, r24	; 0x0c
    18d4:	45 e0       	ldi	r20, 0x05	; 5
    18d6:	50 e0       	ldi	r21, 0x00	; 0
    18d8:	60 e2       	ldi	r22, 0x20	; 32
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	ce 01       	movw	r24, r28
    18de:	0e 96       	adiw	r24, 0x0e	; 14
    18e0:	0e 94 51 35 	call	0x6aa2	; 0x6aa2 <memset>
    18e4:	1f a2       	std	Y+39, r1	; 0x27
    18e6:	19 a6       	std	Y+41, r1	; 0x29
    18e8:	18 a6       	std	Y+40, r1	; 0x28
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	8a a7       	std	Y+42, r24	; 0x2a
    18ee:	1d aa       	std	Y+53, r1	; 0x35
    18f0:	fe 01       	movw	r30, r28
    18f2:	73 96       	adiw	r30, 0x13	; 19
    18f4:	de 01       	movw	r26, r28
    18f6:	9b 96       	adiw	r26, 0x2b	; 43
    18f8:	a7 96       	adiw	r28, 0x27	; 39
    18fa:	8f ef       	ldi	r24, 0xFF	; 255
    18fc:	9f ef       	ldi	r25, 0xFF	; 255
    18fe:	81 93       	st	Z+, r24
    1900:	91 93       	st	Z+, r25
    1902:	1d 92       	st	X+, r1
    1904:	ec 17       	cp	r30, r28
    1906:	fd 07       	cpc	r31, r29
    1908:	d1 f7       	brne	.-12     	; 0x18fe <_ZN7Display12ClearMembersEv+0x44>
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <_ZN7DisplayC1EP10TeaMachine>:
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
    1916:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    191a:	8f e7       	ldi	r24, 0x7F	; 127
    191c:	95 e0       	ldi	r25, 0x05	; 5
    191e:	99 83       	std	Y+1, r25	; 0x01
    1920:	88 83       	st	Y, r24
    1922:	ce 01       	movw	r24, r28
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	c8 cf       	rjmp	.-112    	; 0x18ba <_ZN7Display12ClearMembersEv>

0000192a <_ZN7DisplayD1Ev>:
    192a:	cf 93       	push	r28
    192c:	df 93       	push	r29
    192e:	ec 01       	movw	r28, r24
    1930:	8f e7       	ldi	r24, 0x7F	; 127
    1932:	95 e0       	ldi	r25, 0x05	; 5
    1934:	99 83       	std	Y+1, r25	; 0x01
    1936:	88 83       	st	Y, r24
    1938:	ce 01       	movw	r24, r28
    193a:	bf df       	rcall	.-130    	; 0x18ba <_ZN7Display12ClearMembersEv>
    193c:	ce 01       	movw	r24, r28
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <_ZN19TeaMachineComponentD1Ev>

00001946 <_ZN7Display3SetEiib>:
    1946:	fb 01       	movw	r30, r22
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	e8 0f       	add	r30, r24
    194e:	f9 1f       	adc	r31, r25
    1950:	54 8b       	std	Z+20, r21	; 0x14
    1952:	43 8b       	std	Z+19, r20	; 0x13
    1954:	fc 01       	movw	r30, r24
    1956:	e6 0f       	add	r30, r22
    1958:	f7 1f       	adc	r31, r23
    195a:	23 a7       	std	Z+43, r18	; 0x2b
    195c:	21 e0       	ldi	r18, 0x01	; 1
    195e:	fc 01       	movw	r30, r24
    1960:	22 a7       	std	Z+42, r18	; 0x2a
    1962:	08 95       	ret

00001964 <_ZN7Display3SetE16IndicatorNumerici>:
    1964:	fc 01       	movw	r30, r24
    1966:	61 30       	cpi	r22, 0x01	; 1
    1968:	71 f0       	breq	.+28     	; 0x1986 <_ZN7Display3SetE16IndicatorNumerici+0x22>
    196a:	38 f0       	brcs	.+14     	; 0x197a <_ZN7Display3SetE16IndicatorNumerici+0x16>
    196c:	62 30       	cpi	r22, 0x02	; 2
    196e:	41 f0       	breq	.+16     	; 0x1980 <_ZN7Display3SetE16IndicatorNumerici+0x1c>
    1970:	63 30       	cpi	r22, 0x03	; 3
    1972:	59 f4       	brne	.+22     	; 0x198a <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1974:	55 87       	std	Z+13, r21	; 0x0d
    1976:	44 87       	std	Z+12, r20	; 0x0c
    1978:	08 c0       	rjmp	.+16     	; 0x198a <_ZN7Display3SetE16IndicatorNumerici+0x26>
    197a:	57 83       	std	Z+7, r21	; 0x07
    197c:	46 83       	std	Z+6, r20	; 0x06
    197e:	05 c0       	rjmp	.+10     	; 0x198a <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1980:	53 87       	std	Z+11, r21	; 0x0b
    1982:	42 87       	std	Z+10, r20	; 0x0a
    1984:	02 c0       	rjmp	.+4      	; 0x198a <_ZN7Display3SetE16IndicatorNumerici+0x26>
    1986:	51 87       	std	Z+9, r21	; 0x09
    1988:	40 87       	std	Z+8, r20	; 0x08
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	82 a7       	std	Z+42, r24	; 0x2a
    198e:	08 95       	ret

00001990 <_ZN7Display3SetE14IndicatorAlphac>:
    1990:	fc 01       	movw	r30, r24
    1992:	61 30       	cpi	r22, 0x01	; 1
    1994:	49 f0       	breq	.+18     	; 0x19a8 <_ZN7Display3SetE14IndicatorAlphac+0x18>
    1996:	30 f0       	brcs	.+12     	; 0x19a4 <_ZN7Display3SetE14IndicatorAlphac+0x14>
    1998:	62 30       	cpi	r22, 0x02	; 2
    199a:	41 f0       	breq	.+16     	; 0x19ac <_ZN7Display3SetE14IndicatorAlphac+0x1c>
    199c:	63 30       	cpi	r22, 0x03	; 3
    199e:	39 f4       	brne	.+14     	; 0x19ae <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    19a0:	41 8b       	std	Z+17, r20	; 0x11
    19a2:	05 c0       	rjmp	.+10     	; 0x19ae <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    19a4:	46 87       	std	Z+14, r20	; 0x0e
    19a6:	03 c0       	rjmp	.+6      	; 0x19ae <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    19a8:	47 87       	std	Z+15, r20	; 0x0f
    19aa:	01 c0       	rjmp	.+2      	; 0x19ae <_ZN7Display3SetE14IndicatorAlphac+0x1e>
    19ac:	40 8b       	std	Z+16, r20	; 0x10
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	82 a7       	std	Z+42, r24	; 0x2a
    19b2:	08 95       	ret

000019b4 <_ZN7Display3SetE12IndicatorLEDb>:
    19b4:	fc 01       	movw	r30, r24
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	82 a7       	std	Z+42, r24	; 0x2a
    19ba:	61 30       	cpi	r22, 0x01	; 1
    19bc:	41 f0       	breq	.+16     	; 0x19ce <_ZN7Display3SetE12IndicatorLEDb+0x1a>
    19be:	20 f0       	brcs	.+8      	; 0x19c8 <_ZN7Display3SetE12IndicatorLEDb+0x14>
    19c0:	62 30       	cpi	r22, 0x02	; 2
    19c2:	41 f4       	brne	.+16     	; 0x19d4 <_ZN7Display3SetE12IndicatorLEDb+0x20>
    19c4:	47 a3       	std	Z+39, r20	; 0x27
    19c6:	08 95       	ret
    19c8:	41 a7       	std	Z+41, r20	; 0x29
    19ca:	10 a6       	std	Z+40, r1	; 0x28
    19cc:	08 95       	ret
    19ce:	40 a7       	std	Z+40, r20	; 0x28
    19d0:	11 a6       	std	Z+41, r1	; 0x29
    19d2:	08 95       	ret
    19d4:	12 a6       	std	Z+42, r1	; 0x2a
    19d6:	08 95       	ret

000019d8 <_ZN7Display14GetSegmentCodeEjb>:
    19d8:	fc 01       	movw	r30, r24
    19da:	69 30       	cpi	r22, 0x09	; 9
    19dc:	71 05       	cpc	r23, r1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <_ZN7Display14GetSegmentCodeEjb+0xa>
    19e0:	4a c0       	rjmp	.+148    	; 0x1a76 <_ZN7Display14GetSegmentCodeEjb+0x9e>
    19e2:	d0 f4       	brcc	.+52     	; 0x1a18 <_ZN7Display14GetSegmentCodeEjb+0x40>
    19e4:	64 30       	cpi	r22, 0x04	; 4
    19e6:	71 05       	cpc	r23, r1
    19e8:	f1 f1       	breq	.+124    	; 0x1a66 <_ZN7Display14GetSegmentCodeEjb+0x8e>
    19ea:	50 f4       	brcc	.+20     	; 0x1a00 <_ZN7Display14GetSegmentCodeEjb+0x28>
    19ec:	62 30       	cpi	r22, 0x02	; 2
    19ee:	71 05       	cpc	r23, r1
    19f0:	b1 f1       	breq	.+108    	; 0x1a5e <_ZN7Display14GetSegmentCodeEjb+0x86>
    19f2:	b8 f5       	brcc	.+110    	; 0x1a62 <_ZN7Display14GetSegmentCodeEjb+0x8a>
    19f4:	61 30       	cpi	r22, 0x01	; 1
    19f6:	71 05       	cpc	r23, r1
    19f8:	09 f0       	breq	.+2      	; 0x19fc <_ZN7Display14GetSegmentCodeEjb+0x24>
    19fa:	49 c0       	rjmp	.+146    	; 0x1a8e <_ZN7Display14GetSegmentCodeEjb+0xb6>
    19fc:	2d ee       	ldi	r18, 0xED	; 237
    19fe:	48 c0       	rjmp	.+144    	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a00:	66 30       	cpi	r22, 0x06	; 6
    1a02:	71 05       	cpc	r23, r1
    1a04:	a1 f1       	breq	.+104    	; 0x1a6e <_ZN7Display14GetSegmentCodeEjb+0x96>
    1a06:	88 f1       	brcs	.+98     	; 0x1a6a <_ZN7Display14GetSegmentCodeEjb+0x92>
    1a08:	67 30       	cpi	r22, 0x07	; 7
    1a0a:	71 05       	cpc	r23, r1
    1a0c:	91 f1       	breq	.+100    	; 0x1a72 <_ZN7Display14GetSegmentCodeEjb+0x9a>
    1a0e:	68 30       	cpi	r22, 0x08	; 8
    1a10:	71 05       	cpc	r23, r1
    1a12:	e9 f5       	brne	.+122    	; 0x1a8e <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1a14:	21 e0       	ldi	r18, 0x01	; 1
    1a16:	3c c0       	rjmp	.+120    	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a18:	6e 30       	cpi	r22, 0x0E	; 14
    1a1a:	71 05       	cpc	r23, r1
    1a1c:	a1 f1       	breq	.+104    	; 0x1a86 <_ZN7Display14GetSegmentCodeEjb+0xae>
    1a1e:	60 f4       	brcc	.+24     	; 0x1a38 <_ZN7Display14GetSegmentCodeEjb+0x60>
    1a20:	6b 30       	cpi	r22, 0x0B	; 11
    1a22:	71 05       	cpc	r23, r1
    1a24:	61 f1       	breq	.+88     	; 0x1a7e <_ZN7Display14GetSegmentCodeEjb+0xa6>
    1a26:	48 f1       	brcs	.+82     	; 0x1a7a <_ZN7Display14GetSegmentCodeEjb+0xa2>
    1a28:	6c 30       	cpi	r22, 0x0C	; 12
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	51 f1       	breq	.+84     	; 0x1a82 <_ZN7Display14GetSegmentCodeEjb+0xaa>
    1a2e:	6d 30       	cpi	r22, 0x0D	; 13
    1a30:	71 05       	cpc	r23, r1
    1a32:	69 f5       	brne	.+90     	; 0x1a8e <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1a34:	21 e6       	ldi	r18, 0x61	; 97
    1a36:	2c c0       	rjmp	.+88     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a38:	6d 3f       	cpi	r22, 0xFD	; 253
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	78 07       	cpc	r23, r24
    1a3e:	29 f1       	breq	.+74     	; 0x1a8a <_ZN7Display14GetSegmentCodeEjb+0xb2>
    1a40:	28 f4       	brcc	.+10     	; 0x1a4c <_ZN7Display14GetSegmentCodeEjb+0x74>
    1a42:	6f 30       	cpi	r22, 0x0F	; 15
    1a44:	71 05       	cpc	r23, r1
    1a46:	19 f5       	brne	.+70     	; 0x1a8e <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1a48:	27 e1       	ldi	r18, 0x17	; 23
    1a4a:	22 c0       	rjmp	.+68     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a4c:	6e 3f       	cpi	r22, 0xFE	; 254
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	78 07       	cpc	r23, r24
    1a52:	c9 f0       	breq	.+50     	; 0x1a86 <_ZN7Display14GetSegmentCodeEjb+0xae>
    1a54:	6f 3f       	cpi	r22, 0xFF	; 255
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	d1 f4       	brne	.+52     	; 0x1a8e <_ZN7Display14GetSegmentCodeEjb+0xb6>
    1a5a:	2f ef       	ldi	r18, 0xFF	; 255
    1a5c:	19 c0       	rjmp	.+50     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a5e:	23 e4       	ldi	r18, 0x43	; 67
    1a60:	17 c0       	rjmp	.+46     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a62:	29 e4       	ldi	r18, 0x49	; 73
    1a64:	15 c0       	rjmp	.+42     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a66:	2d e2       	ldi	r18, 0x2D	; 45
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a6a:	29 e1       	ldi	r18, 0x19	; 25
    1a6c:	11 c0       	rjmp	.+34     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a6e:	21 e1       	ldi	r18, 0x11	; 17
    1a70:	0f c0       	rjmp	.+30     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a72:	2d ec       	ldi	r18, 0xCD	; 205
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a76:	29 e0       	ldi	r18, 0x09	; 9
    1a78:	0b c0       	rjmp	.+22     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a7a:	25 e0       	ldi	r18, 0x05	; 5
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a7e:	21 e3       	ldi	r18, 0x31	; 49
    1a80:	07 c0       	rjmp	.+14     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a82:	23 e9       	ldi	r18, 0x93	; 147
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a86:	23 e1       	ldi	r18, 0x13	; 19
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a8a:	2f e7       	ldi	r18, 0x7F	; 127
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <_ZN7Display14GetSegmentCodeEjb+0xb8>
    1a8e:	21 e8       	ldi	r18, 0x81	; 129
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	44 23       	and	r20, r20
    1a94:	19 f0       	breq	.+6      	; 0x1a9c <_ZN7Display14GetSegmentCodeEjb+0xc4>
    1a96:	85 a9       	ldd	r24, Z+53	; 0x35
    1a98:	88 23       	and	r24, r24
    1a9a:	11 f0       	breq	.+4      	; 0x1aa0 <_ZN7Display14GetSegmentCodeEjb+0xc8>
    1a9c:	82 2f       	mov	r24, r18
    1a9e:	08 95       	ret
    1aa0:	8f ef       	ldi	r24, 0xFF	; 255
    1aa2:	9f ef       	ldi	r25, 0xFF	; 255
    1aa4:	08 95       	ret

00001aa6 <_ZN7Display14GetSegmentCodeEjbb>:
    1aa6:	cf 93       	push	r28
    1aa8:	c2 2f       	mov	r28, r18
    1aaa:	96 df       	rcall	.-212    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1aac:	cc 23       	and	r28, r28
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <_ZN7Display14GetSegmentCodeEjbb+0xe>
    1ab0:	81 60       	ori	r24, 0x01	; 1
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <_ZN7Display14GetSegmentCodeEjbb+0x12>
    1ab4:	8e 7f       	andi	r24, 0xFE	; 254
    1ab6:	99 27       	eor	r25, r25
    1ab8:	cf 91       	pop	r28
    1aba:	08 95       	ret

00001abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>:
    1abc:	86 2f       	mov	r24, r22
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	e1 54       	subi	r30, 0x41	; 65
    1ac4:	f1 09       	sbc	r31, r1
    1ac6:	e7 31       	cpi	r30, 0x17	; 23
    1ac8:	f1 05       	cpc	r31, r1
    1aca:	08 f0       	brcs	.+2      	; 0x1ace <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x12>
    1acc:	48 c0       	rjmp	.+144    	; 0x1b5e <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xa2>
    1ace:	88 27       	eor	r24, r24
    1ad0:	e0 58       	subi	r30, 0x80	; 128
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ad6:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__tablejump2__>
    1ada:	44 23       	and	r20, r20
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x24>
    1ade:	4e c0       	rjmp	.+156    	; 0x1b7c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1ae0:	82 ed       	ldi	r24, 0xD2	; 210
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	08 95       	ret
    1ae6:	41 11       	cpse	r20, r1
    1ae8:	3d c0       	rjmp	.+122    	; 0x1b64 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xa8>
    1aea:	22 c0       	rjmp	.+68     	; 0x1b30 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x74>
    1aec:	41 11       	cpse	r20, r1
    1aee:	43 c0       	rjmp	.+134    	; 0x1b76 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xba>
    1af0:	4b c0       	rjmp	.+150    	; 0x1b88 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xcc>
    1af2:	44 23       	and	r20, r20
    1af4:	09 f4       	brne	.+2      	; 0x1af8 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0x3c>
    1af6:	42 c0       	rjmp	.+132    	; 0x1b7c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1af8:	86 e3       	ldi	r24, 0x36	; 54
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	08 95       	ret
    1afe:	44 23       	and	r20, r20
    1b00:	e9 f1       	breq	.+122    	; 0x1b7c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1b02:	86 ef       	ldi	r24, 0xF6	; 246
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	08 95       	ret
    1b08:	41 11       	cpse	r20, r1
    1b0a:	2c c0       	rjmp	.+88     	; 0x1b64 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xa8>
    1b0c:	3d c0       	rjmp	.+122    	; 0x1b88 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xcc>
    1b0e:	44 23       	and	r20, r20
    1b10:	61 f1       	breq	.+88     	; 0x1b6a <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xae>
    1b12:	8d ee       	ldi	r24, 0xED	; 237
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	08 95       	ret
    1b18:	44 23       	and	r20, r20
    1b1a:	51 f1       	breq	.+84     	; 0x1b70 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xb4>
    1b1c:	8f e3       	ldi	r24, 0x3F	; 63
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	08 95       	ret
    1b22:	41 11       	cpse	r20, r1
    1b24:	34 c0       	rjmp	.+104    	; 0x1b8e <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xd2>
    1b26:	83 e7       	ldi	r24, 0x73	; 115
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	08 95       	ret
    1b2c:	41 11       	cpse	r20, r1
    1b2e:	23 c0       	rjmp	.+70     	; 0x1b76 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xba>
    1b30:	86 e7       	ldi	r24, 0x76	; 118
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	08 95       	ret
    1b36:	44 23       	and	r20, r20
    1b38:	09 f1       	breq	.+66     	; 0x1b7c <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc0>
    1b3a:	82 ee       	ldi	r24, 0xE2	; 226
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	08 95       	ret
    1b40:	44 23       	and	r20, r20
    1b42:	f9 f0       	breq	.+62     	; 0x1b82 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xc6>
    1b44:	86 e1       	ldi	r24, 0x16	; 22
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	08 95       	ret
    1b4a:	44 23       	and	r20, r20
    1b4c:	e9 f0       	breq	.+58     	; 0x1b88 <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xcc>
    1b4e:	8e ef       	ldi	r24, 0xFE	; 254
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	08 95       	ret
    1b54:	41 11       	cpse	r20, r1
    1b56:	1b c0       	rjmp	.+54     	; 0x1b8e <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion+0xd2>
    1b58:	87 e3       	ldi	r24, 0x37	; 55
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	08 95       	ret
    1b5e:	8f ef       	ldi	r24, 0xFF	; 255
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	08 95       	ret
    1b64:	8e e3       	ldi	r24, 0x3E	; 62
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	08 95       	ret
    1b6a:	87 e6       	ldi	r24, 0x67	; 103
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	08 95       	ret
    1b70:	87 e7       	ldi	r24, 0x77	; 119
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	08 95       	ret
    1b76:	8a e1       	ldi	r24, 0x1A	; 26
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	08 95       	ret
    1b7c:	86 e6       	ldi	r24, 0x66	; 102
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	08 95       	ret
    1b82:	86 ee       	ldi	r24, 0xE6	; 230
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	08 95       	ret
    1b88:	8c ed       	ldi	r24, 0xDC	; 220
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	08 95       	ret
    1b8e:	8b ec       	ldi	r24, 0xCB	; 203
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	08 95       	ret

00001b94 <_ZN7Display16WriteDisplayDataEv>:
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	ec 01       	movw	r28, r24
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	8b e0       	ldi	r24, 0x0B	; 11
    1b9e:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
    1ba2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba6:	4c a5       	ldd	r20, Y+44	; 0x2c
    1ba8:	ce 01       	movw	r24, r28
    1baa:	16 df       	rcall	.-468    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1bac:	28 2f       	mov	r18, r24
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	6a e0       	ldi	r22, 0x0A	; 10
    1bb2:	8c e0       	ldi	r24, 0x0C	; 12
    1bb4:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1bb8:	6f 89       	ldd	r22, Y+23	; 0x17
    1bba:	78 8d       	ldd	r23, Y+24	; 0x18
    1bbc:	4d a5       	ldd	r20, Y+45	; 0x2d
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	0b df       	rcall	.-490    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	41 e0       	ldi	r20, 0x01	; 1
    1bc6:	6a e0       	ldi	r22, 0x0A	; 10
    1bc8:	8c e0       	ldi	r24, 0x0C	; 12
    1bca:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1bce:	69 8d       	ldd	r22, Y+25	; 0x19
    1bd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bd2:	4e a5       	ldd	r20, Y+46	; 0x2e
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	00 df       	rcall	.-512    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1bd8:	28 2f       	mov	r18, r24
    1bda:	41 e0       	ldi	r20, 0x01	; 1
    1bdc:	6a e0       	ldi	r22, 0x0A	; 10
    1bde:	8c e0       	ldi	r24, 0x0C	; 12
    1be0:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1be4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1be6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1be8:	4f a5       	ldd	r20, Y+47	; 0x2f
    1bea:	ce 01       	movw	r24, r28
    1bec:	f5 de       	rcall	.-534    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1bee:	28 2f       	mov	r18, r24
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	6a e0       	ldi	r22, 0x0A	; 10
    1bf4:	8c e0       	ldi	r24, 0x0C	; 12
    1bf6:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1bfa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bfc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1bfe:	48 a9       	ldd	r20, Y+48	; 0x30
    1c00:	ce 01       	movw	r24, r28
    1c02:	ea de       	rcall	.-556    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1c04:	28 2f       	mov	r18, r24
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	6a e0       	ldi	r22, 0x0A	; 10
    1c0a:	8c e0       	ldi	r24, 0x0C	; 12
    1c0c:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c10:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c12:	78 a1       	ldd	r23, Y+32	; 0x20
    1c14:	49 a9       	ldd	r20, Y+49	; 0x31
    1c16:	ce 01       	movw	r24, r28
    1c18:	df de       	rcall	.-578    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	41 e0       	ldi	r20, 0x01	; 1
    1c1e:	6a e0       	ldi	r22, 0x0A	; 10
    1c20:	8c e0       	ldi	r24, 0x0C	; 12
    1c22:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c26:	69 a1       	ldd	r22, Y+33	; 0x21
    1c28:	7a a1       	ldd	r23, Y+34	; 0x22
    1c2a:	4a a9       	ldd	r20, Y+50	; 0x32
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	d4 de       	rcall	.-600    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1c30:	28 2f       	mov	r18, r24
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	6a e0       	ldi	r22, 0x0A	; 10
    1c36:	8c e0       	ldi	r24, 0x0C	; 12
    1c38:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c3c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c40:	4b a9       	ldd	r20, Y+51	; 0x33
    1c42:	ce 01       	movw	r24, r28
    1c44:	c9 de       	rcall	.-622    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1c46:	28 2f       	mov	r18, r24
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	6a e0       	ldi	r22, 0x0A	; 10
    1c4c:	8c e0       	ldi	r24, 0x0C	; 12
    1c4e:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c52:	6d a1       	ldd	r22, Y+37	; 0x25
    1c54:	7e a1       	ldd	r23, Y+38	; 0x26
    1c56:	4c a9       	ldd	r20, Y+52	; 0x34
    1c58:	ce 01       	movw	r24, r28
    1c5a:	be de       	rcall	.-644    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	41 e0       	ldi	r20, 0x01	; 1
    1c60:	6a e0       	ldi	r22, 0x0A	; 10
    1c62:	8c e0       	ldi	r24, 0x0C	; 12
    1c64:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c68:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c6a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c6c:	29 a5       	ldd	r18, Y+41	; 0x29
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	ce 01       	movw	r24, r28
    1c72:	19 df       	rcall	.-462    	; 0x1aa6 <_ZN7Display14GetSegmentCodeEjbb>
    1c74:	28 2f       	mov	r18, r24
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	6a e0       	ldi	r22, 0x0A	; 10
    1c7a:	8c e0       	ldi	r24, 0x0C	; 12
    1c7c:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c80:	6a 85       	ldd	r22, Y+10	; 0x0a
    1c82:	7b 85       	ldd	r23, Y+11	; 0x0b
    1c84:	28 a5       	ldd	r18, Y+40	; 0x28
    1c86:	40 e0       	ldi	r20, 0x00	; 0
    1c88:	ce 01       	movw	r24, r28
    1c8a:	0d df       	rcall	.-486    	; 0x1aa6 <_ZN7Display14GetSegmentCodeEjbb>
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	41 e0       	ldi	r20, 0x01	; 1
    1c90:	6a e0       	ldi	r22, 0x0A	; 10
    1c92:	8c e0       	ldi	r24, 0x0C	; 12
    1c94:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1c98:	2f a1       	ldd	r18, Y+39	; 0x27
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	28 27       	eor	r18, r24
    1c9e:	68 85       	ldd	r22, Y+8	; 0x08
    1ca0:	79 85       	ldd	r23, Y+9	; 0x09
    1ca2:	40 e0       	ldi	r20, 0x00	; 0
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	ff de       	rcall	.-514    	; 0x1aa6 <_ZN7Display14GetSegmentCodeEjbb>
    1ca8:	28 2f       	mov	r18, r24
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	6a e0       	ldi	r22, 0x0A	; 10
    1cae:	8c e0       	ldi	r24, 0x0C	; 12
    1cb0:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1cb4:	41 e0       	ldi	r20, 0x01	; 1
    1cb6:	69 89       	ldd	r22, Y+17	; 0x11
    1cb8:	ce 01       	movw	r24, r28
    1cba:	00 df       	rcall	.-512    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1cbc:	28 2f       	mov	r18, r24
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	6a e0       	ldi	r22, 0x0A	; 10
    1cc2:	8c e0       	ldi	r24, 0x0C	; 12
    1cc4:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1cc8:	40 e0       	ldi	r20, 0x00	; 0
    1cca:	69 89       	ldd	r22, Y+17	; 0x11
    1ccc:	ce 01       	movw	r24, r28
    1cce:	f6 de       	rcall	.-532    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	6a e0       	ldi	r22, 0x0A	; 10
    1cd6:	8c e0       	ldi	r24, 0x0C	; 12
    1cd8:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	68 89       	ldd	r22, Y+16	; 0x10
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	ec de       	rcall	.-552    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	6a e0       	ldi	r22, 0x0A	; 10
    1cea:	8c e0       	ldi	r24, 0x0C	; 12
    1cec:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1cf0:	40 e0       	ldi	r20, 0x00	; 0
    1cf2:	68 89       	ldd	r22, Y+16	; 0x10
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	e2 de       	rcall	.-572    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	41 e0       	ldi	r20, 0x01	; 1
    1cfc:	6a e0       	ldi	r22, 0x0A	; 10
    1cfe:	8c e0       	ldi	r24, 0x0C	; 12
    1d00:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d08:	ce 01       	movw	r24, r28
    1d0a:	d8 de       	rcall	.-592    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	6a e0       	ldi	r22, 0x0A	; 10
    1d12:	8c e0       	ldi	r24, 0x0C	; 12
    1d14:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	ce de       	rcall	.-612    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1d20:	28 2f       	mov	r18, r24
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	6a e0       	ldi	r22, 0x0A	; 10
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1d2c:	41 e0       	ldi	r20, 0x01	; 1
    1d2e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1d30:	ce 01       	movw	r24, r28
    1d32:	c4 de       	rcall	.-632    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1d34:	28 2f       	mov	r18, r24
    1d36:	41 e0       	ldi	r20, 0x01	; 1
    1d38:	6a e0       	ldi	r22, 0x0A	; 10
    1d3a:	8c e0       	ldi	r24, 0x0C	; 12
    1d3c:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	6e 85       	ldd	r22, Y+14	; 0x0e
    1d44:	ce 01       	movw	r24, r28
    1d46:	ba de       	rcall	.-652    	; 0x1abc <_ZN7Display14GetSegmentCodeEc23AlphaSegmentCodePortion>
    1d48:	28 2f       	mov	r18, r24
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	6a e0       	ldi	r22, 0x0A	; 10
    1d4e:	8c e0       	ldi	r24, 0x0C	; 12
    1d50:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1d54:	6e 81       	ldd	r22, Y+6	; 0x06
    1d56:	7f 81       	ldd	r23, Y+7	; 0x07
    1d58:	40 e0       	ldi	r20, 0x00	; 0
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	3d de       	rcall	.-902    	; 0x19d8 <_ZN7Display14GetSegmentCodeEjb>
    1d5e:	28 2f       	mov	r18, r24
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	6a e0       	ldi	r22, 0x0A	; 10
    1d64:	8c e0       	ldi	r24, 0x0C	; 12
    1d66:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
    1d6a:	61 e0       	ldi	r22, 0x01	; 1
    1d6c:	8b e0       	ldi	r24, 0x0B	; 11
    1d6e:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
    1d72:	1a a6       	std	Y+42, r1	; 0x2a
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	08 95       	ret

00001d7a <_ZN7Display4TestEv>:
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	2f 97       	sbiw	r28, 0x0f	; 15
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	f8 94       	cli
    1d88:	de bf       	out	0x3e, r29	; 62
    1d8a:	0f be       	out	0x3f, r0	; 63
    1d8c:	cd bf       	out	0x3d, r28	; 61
    1d8e:	8c 01       	movw	r16, r24
    1d90:	8d e0       	ldi	r24, 0x0D	; 13
    1d92:	ee e6       	ldi	r30, 0x6E	; 110
    1d94:	f5 e0       	ldi	r31, 0x05	; 5
    1d96:	9e 01       	movw	r18, r28
    1d98:	2f 5f       	subi	r18, 0xFF	; 255
    1d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d9c:	69 01       	movw	r12, r18
    1d9e:	d9 01       	movw	r26, r18
    1da0:	01 90       	ld	r0, Z+
    1da2:	0d 92       	st	X+, r0
    1da4:	8a 95       	dec	r24
    1da6:	e1 f7       	brne	.-8      	; 0x1da0 <_ZN7Display4TestEv+0x26>
    1da8:	1f 86       	std	Y+15, r1	; 0x0f
    1daa:	1e 86       	std	Y+14, r1	; 0x0e
    1dac:	d8 01       	movw	r26, r16
    1dae:	97 96       	adiw	r26, 0x27	; 39
    1db0:	1c 92       	st	X, r1
    1db2:	97 97       	sbiw	r26, 0x27	; 39
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	99 96       	adiw	r26, 0x29	; 41
    1db8:	8c 93       	st	X, r24
    1dba:	99 97       	sbiw	r26, 0x29	; 41
    1dbc:	98 96       	adiw	r26, 0x28	; 40
    1dbe:	1c 92       	st	X, r1
    1dc0:	8a e0       	ldi	r24, 0x0A	; 10
    1dc2:	e8 2e       	mov	r14, r24
    1dc4:	f1 2c       	mov	r15, r1
    1dc6:	97 e0       	ldi	r25, 0x07	; 7
    1dc8:	29 2e       	mov	r2, r25
    1dca:	31 2c       	mov	r3, r1
    1dcc:	26 e0       	ldi	r18, 0x06	; 6
    1dce:	42 2e       	mov	r4, r18
    1dd0:	51 2c       	mov	r5, r1
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	17 82       	std	Z+7, r1	; 0x07
    1dd6:	16 82       	std	Z+6, r1	; 0x06
    1dd8:	77 24       	eor	r7, r7
    1dda:	73 94       	inc	r7
    1ddc:	d8 01       	movw	r26, r16
    1dde:	16 96       	adiw	r26, 0x06	; 6
    1de0:	2d 91       	ld	r18, X+
    1de2:	3c 91       	ld	r19, X
    1de4:	17 97       	sbiw	r26, 0x07	; 7
    1de6:	2a 30       	cpi	r18, 0x0A	; 10
    1de8:	31 05       	cpc	r19, r1
    1dea:	98 f7       	brcc	.-26     	; 0x1dd2 <_ZN7Display4TestEv+0x58>
    1dec:	f6 01       	movw	r30, r12
    1dee:	e2 0f       	add	r30, r18
    1df0:	f3 1f       	adc	r31, r19
    1df2:	80 81       	ld	r24, Z
    1df4:	1e 96       	adiw	r26, 0x0e	; 14
    1df6:	8c 93       	st	X, r24
    1df8:	49 01       	movw	r8, r18
    1dfa:	bf ef       	ldi	r27, 0xFF	; 255
    1dfc:	8b 1a       	sub	r8, r27
    1dfe:	9b 0a       	sbc	r9, r27
    1e00:	f6 01       	movw	r30, r12
    1e02:	01 90       	ld	r0, Z+
    1e04:	00 20       	and	r0, r0
    1e06:	e9 f7       	brne	.-6      	; 0x1e02 <_ZN7Display4TestEv+0x88>
    1e08:	31 97       	sbiw	r30, 0x01	; 1
    1e0a:	bf 01       	movw	r22, r30
    1e0c:	6c 19       	sub	r22, r12
    1e0e:	7d 09       	sbc	r23, r13
    1e10:	c4 01       	movw	r24, r8
    1e12:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1e16:	f6 01       	movw	r30, r12
    1e18:	e8 0f       	add	r30, r24
    1e1a:	f9 1f       	adc	r31, r25
    1e1c:	80 81       	ld	r24, Z
    1e1e:	f8 01       	movw	r30, r16
    1e20:	87 87       	std	Z+15, r24	; 0x0f
    1e22:	59 01       	movw	r10, r18
    1e24:	f2 e0       	ldi	r31, 0x02	; 2
    1e26:	af 0e       	add	r10, r31
    1e28:	b1 1c       	adc	r11, r1
    1e2a:	f6 01       	movw	r30, r12
    1e2c:	01 90       	ld	r0, Z+
    1e2e:	00 20       	and	r0, r0
    1e30:	e9 f7       	brne	.-6      	; 0x1e2c <_ZN7Display4TestEv+0xb2>
    1e32:	31 97       	sbiw	r30, 0x01	; 1
    1e34:	bf 01       	movw	r22, r30
    1e36:	6c 19       	sub	r22, r12
    1e38:	7d 09       	sbc	r23, r13
    1e3a:	c5 01       	movw	r24, r10
    1e3c:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1e40:	f6 01       	movw	r30, r12
    1e42:	e8 0f       	add	r30, r24
    1e44:	f9 1f       	adc	r31, r25
    1e46:	80 81       	ld	r24, Z
    1e48:	d8 01       	movw	r26, r16
    1e4a:	50 96       	adiw	r26, 0x10	; 16
    1e4c:	8c 93       	st	X, r24
    1e4e:	f9 01       	movw	r30, r18
    1e50:	33 96       	adiw	r30, 0x03	; 3
    1e52:	d6 01       	movw	r26, r12
    1e54:	0d 90       	ld	r0, X+
    1e56:	00 20       	and	r0, r0
    1e58:	e9 f7       	brne	.-6      	; 0x1e54 <_ZN7Display4TestEv+0xda>
    1e5a:	11 97       	sbiw	r26, 0x01	; 1
    1e5c:	bd 01       	movw	r22, r26
    1e5e:	6c 19       	sub	r22, r12
    1e60:	7d 09       	sbc	r23, r13
    1e62:	cf 01       	movw	r24, r30
    1e64:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1e68:	d6 01       	movw	r26, r12
    1e6a:	a8 0f       	add	r26, r24
    1e6c:	b9 1f       	adc	r27, r25
    1e6e:	8c 91       	ld	r24, X
    1e70:	d8 01       	movw	r26, r16
    1e72:	51 96       	adiw	r26, 0x11	; 17
    1e74:	8c 93       	st	X, r24
    1e76:	c7 01       	movw	r24, r14
    1e78:	82 1b       	sub	r24, r18
    1e7a:	93 0b       	sbc	r25, r19
    1e7c:	b7 01       	movw	r22, r14
    1e7e:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1e82:	d8 01       	movw	r26, r16
    1e84:	19 96       	adiw	r26, 0x09	; 9
    1e86:	9c 93       	st	X, r25
    1e88:	8e 93       	st	-X, r24
    1e8a:	18 97       	sbiw	r26, 0x08	; 8
    1e8c:	c4 01       	movw	r24, r8
    1e8e:	b7 01       	movw	r22, r14
    1e90:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1e94:	d8 01       	movw	r26, r16
    1e96:	1b 96       	adiw	r26, 0x0b	; 11
    1e98:	9c 93       	st	X, r25
    1e9a:	8e 93       	st	-X, r24
    1e9c:	1a 97       	sbiw	r26, 0x0a	; 10
    1e9e:	89 e0       	ldi	r24, 0x09	; 9
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	82 1b       	sub	r24, r18
    1ea4:	93 0b       	sbc	r25, r19
    1ea6:	1d 96       	adiw	r26, 0x0d	; 13
    1ea8:	9c 93       	st	X, r25
    1eaa:	8e 93       	st	-X, r24
    1eac:	1c 97       	sbiw	r26, 0x0c	; 12
    1eae:	88 e0       	ldi	r24, 0x08	; 8
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	82 1b       	sub	r24, r18
    1eb4:	93 0b       	sbc	r25, r19
    1eb6:	b7 01       	movw	r22, r14
    1eb8:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1ebc:	d8 01       	movw	r26, r16
    1ebe:	96 96       	adiw	r26, 0x26	; 38
    1ec0:	9c 93       	st	X, r25
    1ec2:	8e 93       	st	-X, r24
    1ec4:	95 97       	sbiw	r26, 0x25	; 37
    1ec6:	c5 01       	movw	r24, r10
    1ec8:	b7 01       	movw	r22, r14
    1eca:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1ece:	d8 01       	movw	r26, r16
    1ed0:	94 96       	adiw	r26, 0x24	; 36
    1ed2:	9c 93       	st	X, r25
    1ed4:	8e 93       	st	-X, r24
    1ed6:	93 97       	sbiw	r26, 0x23	; 35
    1ed8:	c1 01       	movw	r24, r2
    1eda:	82 1b       	sub	r24, r18
    1edc:	93 0b       	sbc	r25, r19
    1ede:	b7 01       	movw	r22, r14
    1ee0:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1ee4:	d8 01       	movw	r26, r16
    1ee6:	92 96       	adiw	r26, 0x22	; 34
    1ee8:	9c 93       	st	X, r25
    1eea:	8e 93       	st	-X, r24
    1eec:	91 97       	sbiw	r26, 0x21	; 33
    1eee:	cf 01       	movw	r24, r30
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1ef6:	f8 01       	movw	r30, r16
    1ef8:	90 a3       	std	Z+32, r25	; 0x20
    1efa:	87 8f       	std	Z+31, r24	; 0x1f
    1efc:	c2 01       	movw	r24, r4
    1efe:	82 1b       	sub	r24, r18
    1f00:	93 0b       	sbc	r25, r19
    1f02:	b7 01       	movw	r22, r14
    1f04:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1f08:	96 8f       	std	Z+30, r25	; 0x1e
    1f0a:	85 8f       	std	Z+29, r24	; 0x1d
    1f0c:	c9 01       	movw	r24, r18
    1f0e:	04 96       	adiw	r24, 0x04	; 4
    1f10:	b7 01       	movw	r22, r14
    1f12:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1f16:	94 8f       	std	Z+28, r25	; 0x1c
    1f18:	83 8f       	std	Z+27, r24	; 0x1b
    1f1a:	85 e0       	ldi	r24, 0x05	; 5
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	82 1b       	sub	r24, r18
    1f20:	93 0b       	sbc	r25, r19
    1f22:	b7 01       	movw	r22, r14
    1f24:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1f28:	92 8f       	std	Z+26, r25	; 0x1a
    1f2a:	81 8f       	std	Z+25, r24	; 0x19
    1f2c:	c9 01       	movw	r24, r18
    1f2e:	05 96       	adiw	r24, 0x05	; 5
    1f30:	b7 01       	movw	r22, r14
    1f32:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1f36:	90 8f       	std	Z+24, r25	; 0x18
    1f38:	87 8b       	std	Z+23, r24	; 0x17
    1f3a:	84 e0       	ldi	r24, 0x04	; 4
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	82 1b       	sub	r24, r18
    1f40:	93 0b       	sbc	r25, r19
    1f42:	b7 01       	movw	r22, r14
    1f44:	0e 94 f2 32 	call	0x65e4	; 0x65e4 <__udivmodhi4>
    1f48:	96 8b       	std	Z+22, r25	; 0x16
    1f4a:	85 8b       	std	Z+21, r24	; 0x15
    1f4c:	87 a1       	ldd	r24, Z+39	; 0x27
    1f4e:	87 25       	eor	r24, r7
    1f50:	87 a3       	std	Z+39, r24	; 0x27
    1f52:	81 a5       	ldd	r24, Z+41	; 0x29
    1f54:	87 25       	eor	r24, r7
    1f56:	81 a7       	std	Z+41, r24	; 0x29
    1f58:	80 a5       	ldd	r24, Z+40	; 0x28
    1f5a:	87 25       	eor	r24, r7
    1f5c:	80 a7       	std	Z+40, r24	; 0x28
    1f5e:	c8 01       	movw	r24, r16
    1f60:	19 de       	rcall	.-974    	; 0x1b94 <_ZN7Display16WriteDisplayDataEv>
    1f62:	68 ee       	ldi	r22, 0xE8	; 232
    1f64:	73 e0       	ldi	r23, 0x03	; 3
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
    1f6e:	ae 01       	movw	r20, r28
    1f70:	42 5f       	subi	r20, 0xF2	; 242
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255
    1f74:	be 01       	movw	r22, r28
    1f76:	61 5f       	subi	r22, 0xF1	; 241
    1f78:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7a:	d8 01       	movw	r26, r16
    1f7c:	14 96       	adiw	r26, 0x04	; 4
    1f7e:	8d 91       	ld	r24, X+
    1f80:	9c 91       	ld	r25, X
    1f82:	15 97       	sbiw	r26, 0x05	; 5
    1f84:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6System21ReadInputRegisterDataEPhS0_>
    1f88:	40 e1       	ldi	r20, 0x10	; 16
    1f8a:	50 e0       	ldi	r21, 0x00	; 0
    1f8c:	6e 85       	ldd	r22, Y+14	; 0x0e
    1f8e:	81 e1       	ldi	r24, 0x11	; 17
    1f90:	9a e0       	ldi	r25, 0x0A	; 10
    1f92:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <_ZN5Print5printEhi>
    1f96:	6e ef       	ldi	r22, 0xFE	; 254
    1f98:	74 e0       	ldi	r23, 0x04	; 4
    1f9a:	81 e1       	ldi	r24, 0x11	; 17
    1f9c:	9a e0       	ldi	r25, 0x0A	; 10
    1f9e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    1fa2:	40 e1       	ldi	r20, 0x10	; 16
    1fa4:	50 e0       	ldi	r21, 0x00	; 0
    1fa6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fa8:	81 e1       	ldi	r24, 0x11	; 17
    1faa:	9a e0       	ldi	r25, 0x0A	; 10
    1fac:	0e 94 15 2e 	call	0x5c2a	; 0x5c2a <_ZN5Print5printEhi>
    1fb0:	65 ef       	ldi	r22, 0xF5	; 245
    1fb2:	79 e0       	ldi	r23, 0x09	; 9
    1fb4:	81 e1       	ldi	r24, 0x11	; 17
    1fb6:	9a e0       	ldi	r25, 0x0A	; 10
    1fb8:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    1fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fbe:	80 fd       	sbrc	r24, 0
    1fc0:	06 c0       	rjmp	.+12     	; 0x1fce <_ZN7Display4TestEv+0x254>
    1fc2:	60 e0       	ldi	r22, 0x00	; 0
    1fc4:	75 e0       	ldi	r23, 0x05	; 5
    1fc6:	81 e1       	ldi	r24, 0x11	; 17
    1fc8:	9a e0       	ldi	r25, 0x0A	; 10
    1fca:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    1fce:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd0:	81 fd       	sbrc	r24, 1
    1fd2:	06 c0       	rjmp	.+12     	; 0x1fe0 <_ZN7Display4TestEv+0x266>
    1fd4:	67 e0       	ldi	r22, 0x07	; 7
    1fd6:	75 e0       	ldi	r23, 0x05	; 5
    1fd8:	81 e1       	ldi	r24, 0x11	; 17
    1fda:	9a e0       	ldi	r25, 0x0A	; 10
    1fdc:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    1fe0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fe2:	82 fd       	sbrc	r24, 2
    1fe4:	06 c0       	rjmp	.+12     	; 0x1ff2 <_ZN7Display4TestEv+0x278>
    1fe6:	60 e1       	ldi	r22, 0x10	; 16
    1fe8:	75 e0       	ldi	r23, 0x05	; 5
    1fea:	81 e1       	ldi	r24, 0x11	; 17
    1fec:	9a e0       	ldi	r25, 0x0A	; 10
    1fee:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    1ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff4:	83 fd       	sbrc	r24, 3
    1ff6:	06 c0       	rjmp	.+12     	; 0x2004 <_ZN7Display4TestEv+0x28a>
    1ff8:	68 e1       	ldi	r22, 0x18	; 24
    1ffa:	75 e0       	ldi	r23, 0x05	; 5
    1ffc:	81 e1       	ldi	r24, 0x11	; 17
    1ffe:	9a e0       	ldi	r25, 0x0A	; 10
    2000:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    2004:	8f 85       	ldd	r24, Y+15	; 0x0f
    2006:	84 fd       	sbrc	r24, 4
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <_ZN7Display4TestEv+0x29c>
    200a:	62 e2       	ldi	r22, 0x22	; 34
    200c:	75 e0       	ldi	r23, 0x05	; 5
    200e:	81 e1       	ldi	r24, 0x11	; 17
    2010:	9a e0       	ldi	r25, 0x0A	; 10
    2012:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    2016:	8f 85       	ldd	r24, Y+15	; 0x0f
    2018:	85 fd       	sbrc	r24, 5
    201a:	06 c0       	rjmp	.+12     	; 0x2028 <_ZN7Display4TestEv+0x2ae>
    201c:	6b e2       	ldi	r22, 0x2B	; 43
    201e:	75 e0       	ldi	r23, 0x05	; 5
    2020:	81 e1       	ldi	r24, 0x11	; 17
    2022:	9a e0       	ldi	r25, 0x0A	; 10
    2024:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    2028:	8f 85       	ldd	r24, Y+15	; 0x0f
    202a:	86 fd       	sbrc	r24, 6
    202c:	06 c0       	rjmp	.+12     	; 0x203a <_ZN7Display4TestEv+0x2c0>
    202e:	66 e3       	ldi	r22, 0x36	; 54
    2030:	75 e0       	ldi	r23, 0x05	; 5
    2032:	81 e1       	ldi	r24, 0x11	; 17
    2034:	9a e0       	ldi	r25, 0x0A	; 10
    2036:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    203a:	8f 85       	ldd	r24, Y+15	; 0x0f
    203c:	87 fd       	sbrc	r24, 7
    203e:	06 c0       	rjmp	.+12     	; 0x204c <_ZN7Display4TestEv+0x2d2>
    2040:	62 e4       	ldi	r22, 0x42	; 66
    2042:	75 e0       	ldi	r23, 0x05	; 5
    2044:	81 e1       	ldi	r24, 0x11	; 17
    2046:	9a e0       	ldi	r25, 0x0A	; 10
    2048:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    204c:	8e 85       	ldd	r24, Y+14	; 0x0e
    204e:	80 fd       	sbrc	r24, 0
    2050:	06 c0       	rjmp	.+12     	; 0x205e <_ZN7Display4TestEv+0x2e4>
    2052:	60 e5       	ldi	r22, 0x50	; 80
    2054:	75 e0       	ldi	r23, 0x05	; 5
    2056:	81 e1       	ldi	r24, 0x11	; 17
    2058:	9a e0       	ldi	r25, 0x0A	; 10
    205a:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    205e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2060:	81 fd       	sbrc	r24, 1
    2062:	06 c0       	rjmp	.+12     	; 0x2070 <_ZN7Display4TestEv+0x2f6>
    2064:	69 e5       	ldi	r22, 0x59	; 89
    2066:	75 e0       	ldi	r23, 0x05	; 5
    2068:	81 e1       	ldi	r24, 0x11	; 17
    206a:	9a e0       	ldi	r25, 0x0A	; 10
    206c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    2070:	8e 85       	ldd	r24, Y+14	; 0x0e
    2072:	82 fd       	sbrc	r24, 2
    2074:	06 c0       	rjmp	.+12     	; 0x2082 <_ZN7Display4TestEv+0x308>
    2076:	64 e6       	ldi	r22, 0x64	; 100
    2078:	75 e0       	ldi	r23, 0x05	; 5
    207a:	81 e1       	ldi	r24, 0x11	; 17
    207c:	9a e0       	ldi	r25, 0x0A	; 10
    207e:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    2082:	8e 85       	ldd	r24, Y+14	; 0x0e
    2084:	83 fd       	sbrc	r24, 3
    2086:	06 c0       	rjmp	.+12     	; 0x2094 <_ZN7Display4TestEv+0x31a>
    2088:	67 e6       	ldi	r22, 0x67	; 103
    208a:	75 e0       	ldi	r23, 0x05	; 5
    208c:	81 e1       	ldi	r24, 0x11	; 17
    208e:	9a e0       	ldi	r25, 0x0A	; 10
    2090:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    2094:	f8 01       	movw	r30, r16
    2096:	86 81       	ldd	r24, Z+6	; 0x06
    2098:	97 81       	ldd	r25, Z+7	; 0x07
    209a:	01 96       	adiw	r24, 0x01	; 1
    209c:	97 83       	std	Z+7, r25	; 0x07
    209e:	86 83       	std	Z+6, r24	; 0x06
    20a0:	9d ce       	rjmp	.-710    	; 0x1ddc <_ZN7Display4TestEv+0x62>

000020a2 <_ZN7Display6UpdateEv>:
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	fc 01       	movw	r30, r24
    20a8:	22 a5       	ldd	r18, Z+42	; 0x2a
    20aa:	22 23       	and	r18, r18
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <_ZN7Display6UpdateEv+0x12>
    20ae:	ec 01       	movw	r28, r24
    20b0:	71 dd       	rcall	.-1310   	; 0x1b94 <_ZN7Display16WriteDisplayDataEv>
    20b2:	1a a6       	std	Y+42, r1	; 0x2a
    20b4:	df 91       	pop	r29
    20b6:	cf 91       	pop	r28
    20b8:	08 95       	ret

000020ba <_ZN7Display10InitialiseEv>:
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	ec 01       	movw	r28, r24
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	8a e0       	ldi	r24, 0x0A	; 10
    20c4:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
    20c8:	61 e0       	ldi	r22, 0x01	; 1
    20ca:	8b e0       	ldi	r24, 0x0B	; 11
    20cc:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
    20d0:	61 e0       	ldi	r22, 0x01	; 1
    20d2:	8c e0       	ldi	r24, 0x0C	; 12
    20d4:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
    20d8:	ce 01       	movw	r24, r28
    20da:	ef db       	rcall	.-2082   	; 0x18ba <_ZN7Display12ClearMembersEv>
    20dc:	ce 01       	movw	r24, r28
    20de:	e1 df       	rcall	.-62     	; 0x20a2 <_ZN7Display6UpdateEv>
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	08 95       	ret

000020e8 <_ZN7Display7DoFlashEv>:
//
//  Flash indicators on or off as appropriate
//  Return time that next flash action is required
//
unsigned long Display::DoFlash()
{
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	ec 01       	movw	r28, r24
	// Determine whether flashing digits should be on or off
	m_bFlashingIndicatorsAreOn = !m_bFlashingIndicatorsAreOn;
    20f2:	8d a9       	ldd	r24, Y+53	; 0x35
    20f4:	91 e0       	ldi	r25, 0x01	; 1
    20f6:	89 27       	eor	r24, r25
    20f8:	8d ab       	std	Y+53, r24	; 0x35
	
	// Show or blank the digit as appropriate
	m_bNeedsUpdating = true;
    20fa:	9a a7       	std	Y+42, r25	; 0x2a
	Update();
    20fc:	ce 01       	movw	r24, r28
    20fe:	d1 df       	rcall	.-94     	; 0x20a2 <_ZN7Display6UpdateEv>
	
	// Return time that next flash action is required
	return millis() + (m_bFlashingIndicatorsAreOn ? FLASH_INTERVAL_ON : FLASH_INTERVAL_OFF);
    2100:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    2104:	2d a9       	ldd	r18, Y+53	; 0x35
    2106:	21 11       	cpse	r18, r1
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <_ZN7Display7DoFlashEv+0x2c>
    210a:	0e e5       	ldi	r16, 0x5E	; 94
    210c:	11 e0       	ldi	r17, 0x01	; 1
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	04 c0       	rjmp	.+8      	; 0x211c <_ZN7Display7DoFlashEv+0x34>
    2114:	0c eb       	ldi	r16, 0xBC	; 188
    2116:	12 e0       	ldi	r17, 0x02	; 2
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	60 0f       	add	r22, r16
    211e:	71 1f       	adc	r23, r17
    2120:	82 1f       	adc	r24, r18
    2122:	93 1f       	adc	r25, r19
}
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	08 95       	ret

0000212e <_ZN5DrinkD1Ev>:
} //Drink

//
//  Class destructor
//
Drink::~Drink()
    212e:	08 95       	ret

00002130 <_ZN5Drink15InitialiseDrinkEv>:
//  InitialiseDrink
//
//  Initialise members from the static initialisation array
//
void Drink::InitialiseDrink()
{
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	ec 01       	movw	r28, r24
    m_Type = defaultDrinkDefinitions[m_nTypeIndex].type;
    2138:	89 89       	ldd	r24, Y+17	; 0x11
    213a:	9a 89       	ldd	r25, Y+18	; 0x12
    213c:	1c e0       	ldi	r17, 0x0C	; 12
    213e:	18 9f       	mul	r17, r24
    2140:	b0 01       	movw	r22, r0
    2142:	19 9f       	mul	r17, r25
    2144:	70 0d       	add	r23, r0
    2146:	11 24       	eor	r1, r1
    2148:	fb 01       	movw	r30, r22
    214a:	ea 5f       	subi	r30, 0xFA	; 250
    214c:	fd 4f       	sbci	r31, 0xFD	; 253
    214e:	80 81       	ld	r24, Z
    2150:	88 83       	st	Y, r24
    strcpy(m_szName, defaultDrinkDefinitions[m_nTypeIndex].name);
    2152:	69 5f       	subi	r22, 0xF9	; 249
    2154:	7d 4f       	sbci	r23, 0xFD	; 253
    2156:	ce 01       	movw	r24, r28
    2158:	02 96       	adiw	r24, 0x02	; 2
    215a:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <strcpy>
    m_nSugar = defaultDrinkDefinitions[m_nTypeIndex].sugar;
    215e:	89 89       	ldd	r24, Y+17	; 0x11
    2160:	9a 89       	ldd	r25, Y+18	; 0x12
    2162:	18 9f       	mul	r17, r24
    2164:	f0 01       	movw	r30, r0
    2166:	19 9f       	mul	r17, r25
    2168:	f0 0d       	add	r31, r0
    216a:	11 24       	eor	r1, r1
    216c:	ea 5f       	subi	r30, 0xFA	; 250
    216e:	fd 4f       	sbci	r31, 0xFD	; 253
    2170:	80 85       	ldd	r24, Z+8	; 0x08
    2172:	91 85       	ldd	r25, Z+9	; 0x09
    2174:	9a 87       	std	Y+10, r25	; 0x0a
    2176:	89 87       	std	Y+9, r24	; 0x09
    m_nMilk = defaultDrinkDefinitions[m_nTypeIndex].milk;
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	97 81       	ldd	r25, Z+7	; 0x07
    217c:	98 87       	std	Y+8, r25	; 0x08
    217e:	8f 83       	std	Y+7, r24	; 0x07
    m_nStrength = defaultDrinkDefinitions[m_nTypeIndex].strength;
    2180:	82 85       	ldd	r24, Z+10	; 0x0a
    2182:	93 85       	ldd	r25, Z+11	; 0x0b
    2184:	9c 87       	std	Y+12, r25	; 0x0c
    2186:	8b 87       	std	Y+11, r24	; 0x0b
    m_bCupIsPresent = true;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	88 8b       	std	Y+16, r24	; 0x10
    m_bSelectionIsConfirmed = false;
    218c:	1f 86       	std	Y+15, r1	; 0x0f
    m_State = Empty;
    218e:	19 82       	std	Y+1, r1	; 0x01
}
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	08 95       	ret

00002198 <_ZN5DrinkC1Ev>:
//
//  Class constructor
//
Drink::Drink()
{
    m_nTypeIndex = 0;
    2198:	fc 01       	movw	r30, r24
    219a:	12 8a       	std	Z+18, r1	; 0x12
    219c:	11 8a       	std	Z+17, r1	; 0x11
    m_nDrinkID = 0;
    219e:	16 86       	std	Z+14, r1	; 0x0e
    21a0:	15 86       	std	Z+13, r1	; 0x0d
    InitialiseDrink();
    21a2:	c6 cf       	rjmp	.-116    	; 0x2130 <_ZN5Drink15InitialiseDrinkEv>

000021a4 <_ZN5DrinkC1Ej>:
//
//  Class constructor
//
Drink::Drink( unsigned int nID )
{
    m_nTypeIndex = 0;
    21a4:	fc 01       	movw	r30, r24
    21a6:	12 8a       	std	Z+18, r1	; 0x12
    21a8:	11 8a       	std	Z+17, r1	; 0x11
    m_nDrinkID = nID;
    21aa:	76 87       	std	Z+14, r23	; 0x0e
    21ac:	65 87       	std	Z+13, r22	; 0x0d
    InitialiseDrink();
    21ae:	c0 cf       	rjmp	.-128    	; 0x2130 <_ZN5Drink15InitialiseDrinkEv>

000021b0 <_ZN5Drink11SetNextTypeEv>:
//
//  Set the next type in the list of available drink types
//
void Drink::SetNextType()
{
    m_nTypeIndex = (m_nTypeIndex < DRINK_TYPES-1) ? m_nTypeIndex + 1 : m_nTypeIndex;
    21b0:	fc 01       	movw	r30, r24
    21b2:	21 89       	ldd	r18, Z+17	; 0x11
    21b4:	32 89       	ldd	r19, Z+18	; 0x12
    21b6:	12 16       	cp	r1, r18
    21b8:	13 06       	cpc	r1, r19
    21ba:	14 f0       	brlt	.+4      	; 0x21c0 <_ZN5Drink11SetNextTypeEv+0x10>
    21bc:	2f 5f       	subi	r18, 0xFF	; 255
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	fc 01       	movw	r30, r24
    21c2:	32 8b       	std	Z+18, r19	; 0x12
    21c4:	21 8b       	std	Z+17, r18	; 0x11
    InitialiseDrink();
    21c6:	b4 cf       	rjmp	.-152    	; 0x2130 <_ZN5Drink15InitialiseDrinkEv>

000021c8 <_ZN5Drink15SetPreviousTypeEv>:
//
//  Set the previous type in the list of available drink types
//
void Drink::SetPreviousType()
{
    m_nTypeIndex = (m_nTypeIndex > 0) ? m_nTypeIndex - 1 : 0;
    21c8:	fc 01       	movw	r30, r24
    21ca:	21 89       	ldd	r18, Z+17	; 0x11
    21cc:	32 89       	ldd	r19, Z+18	; 0x12
    21ce:	12 16       	cp	r1, r18
    21d0:	13 06       	cpc	r1, r19
    21d2:	1c f4       	brge	.+6      	; 0x21da <_ZN5Drink15SetPreviousTypeEv+0x12>
    21d4:	21 50       	subi	r18, 0x01	; 1
    21d6:	31 09       	sbc	r19, r1
    21d8:	02 c0       	rjmp	.+4      	; 0x21de <_ZN5Drink15SetPreviousTypeEv+0x16>
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	fc 01       	movw	r30, r24
    21e0:	32 8b       	std	Z+18, r19	; 0x12
    21e2:	21 8b       	std	Z+17, r18	; 0x11
    InitialiseDrink();
    21e4:	a5 cf       	rjmp	.-182    	; 0x2130 <_ZN5Drink15InitialiseDrinkEv>

000021e6 <_ZN9ExtractorC1EP10TeaMachine>:
} //Extractor

//
//	Default destructor
//
Extractor::~Extractor()
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	ec 01       	movw	r28, r24
    21ec:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    21f0:	87 e8       	ldi	r24, 0x87	; 135
    21f2:	95 e0       	ldi	r25, 0x05	; 5
    21f4:	99 83       	std	Y+1, r25	; 0x01
    21f6:	88 83       	st	Y, r24
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	08 95       	ret

000021fe <_ZN9Extractor5RaiseEv>:
//	Raise()
//
//	Raise the extractor
//
bool Extractor::Raise()
{
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_EXTRACTOR_UPDOWN);
    2204:	66 e0       	ldi	r22, 0x06	; 6
    2206:	70 e0       	ldi	r23, 0x00	; 0
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	9d 81       	ldd	r25, Y+5	; 0x05
    220c:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_EXTRACTOR_EN);
    2210:	67 e0       	ldi	r22, 0x07	; 7
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	08 95       	ret

00002224 <_ZN9Extractor5LowerEv>:
//	Lower()
//
//	Lower the extractor
//
bool Extractor::Lower()
{
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	ec 01       	movw	r28, r24
    m_pSystem->ClearOutputRegisterBit(OUTREG_EXTRACTOR_UPDOWN);
    222a:	66 e0       	ldi	r22, 0x06	; 6
    222c:	70 e0       	ldi	r23, 0x00	; 0
    222e:	8c 81       	ldd	r24, Y+4	; 0x04
    2230:	9d 81       	ldd	r25, Y+5	; 0x05
    2232:	0e 94 3e 19 	call	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
    m_pSystem->SetOutputRegisterBit(OUTREG_EXTRACTOR_EN);
    2236:	67 e0       	ldi	r22, 0x07	; 7
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	9d 81       	ldd	r25, Y+5	; 0x05
    223e:	0e 94 69 19 	call	0x32d2	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
    
    return true;
}
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret

0000224a <_ZN9Extractor4StopEv>:
//
//	Switch off the extractor motor
//
void Extractor::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_EXTRACTOR_EN);
    224a:	67 e0       	ldi	r22, 0x07	; 7
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	fc 01       	movw	r30, r24
    2250:	84 81       	ldd	r24, Z+4	; 0x04
    2252:	95 81       	ldd	r25, Z+5	; 0x05
    2254:	0c 94 3e 19 	jmp	0x327c	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>

00002258 <_ZN9Extractor8IsRaisedEv>:
//
//	Returns true if the extractor is currently in the raised position
//
bool Extractor::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2258:	fc 01       	movw	r30, r24
    225a:	84 81       	ldd	r24, Z+4	; 0x04
    225c:	95 81       	ldd	r25, Z+5	; 0x05
    225e:	a1 d7       	rcall	.+3906   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_EXTRACTOR_HILIMITSW) != 0;
    2260:	24 e0       	ldi	r18, 0x04	; 4
    2262:	96 95       	lsr	r25
    2264:	87 95       	ror	r24
    2266:	2a 95       	dec	r18
    2268:	e1 f7       	brne	.-8      	; 0x2262 <_ZN9Extractor8IsRaisedEv+0xa>
}
    226a:	81 70       	andi	r24, 0x01	; 1
    226c:	08 95       	ret

0000226e <_ZN9Extractor9IsLoweredEv>:
//
//	Returns true if the extractor is currently in the lowered position
//
bool Extractor::IsLowered()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    226e:	fc 01       	movw	r30, r24
    2270:	84 81       	ldd	r24, Z+4	; 0x04
    2272:	95 81       	ldd	r25, Z+5	; 0x05
    2274:	96 d7       	rcall	.+3884   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_EXTRACTOR_LOLIMITSW) != 0;
    2276:	25 e0       	ldi	r18, 0x05	; 5
    2278:	96 95       	lsr	r25
    227a:	87 95       	ror	r24
    227c:	2a 95       	dec	r18
    227e:	e1 f7       	brne	.-8      	; 0x2278 <_ZN9Extractor9IsLoweredEv+0xa>
}
    2280:	81 70       	andi	r24, 0x01	; 1
    2282:	08 95       	ret

00002284 <_ZN9Extractor4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool Extractor::Test()
{
    2284:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch action switch setting
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    2286:	8c 81       	ldd	r24, Y+4	; 0x04
    2288:	9d 81       	ldd	r25, Y+5	; 0x05
    228a:	8b d7       	rcall	.+3862   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    228c:	93 ff       	sbrs	r25, 3
    228e:	07 c0       	rjmp	.+14     	; 0x229e <_ZN9Extractor4TestEv+0x1a>
{
	Serial.println("Extractor is NOT LOWERED");
}
delay(1000);
*/
			if(!IsRaised())
    2290:	ce 01       	movw	r24, r28
    2292:	e2 df       	rcall	.-60     	; 0x2258 <_ZN9Extractor8IsRaisedEv>
    2294:	81 11       	cpse	r24, r1
    2296:	f7 cf       	rjmp	.-18     	; 0x2286 <_ZN9Extractor4TestEv+0x2>
			{
				// Raise the extractor
				Raise();
    2298:	ce 01       	movw	r24, r28
    229a:	b1 df       	rcall	.-158    	; 0x21fe <_ZN9Extractor5RaiseEv>
    229c:	f4 cf       	rjmp	.-24     	; 0x2286 <_ZN9Extractor4TestEv+0x2>
	Serial.println("Extractor is NOT LOWERED");
}
delay(1000);
*/
			
			if(!IsLowered())
    229e:	ce 01       	movw	r24, r28
    22a0:	e6 df       	rcall	.-52     	; 0x226e <_ZN9Extractor9IsLoweredEv>
    22a2:	81 11       	cpse	r24, r1
    22a4:	f0 cf       	rjmp	.-32     	; 0x2286 <_ZN9Extractor4TestEv+0x2>
			{
				// Lower the extractor
				Lower();
    22a6:	ce 01       	movw	r24, r28
    22a8:	bd df       	rcall	.-134    	; 0x2224 <_ZN9Extractor5LowerEv>
    22aa:	ed cf       	rjmp	.-38     	; 0x2286 <_ZN9Extractor4TestEv+0x2>

000022ac <_GLOBAL__sub_I_gApplication>:
//	Main.cpp
//
#include <Arduino.h>
#include "TeaMachineApp.h"

TeaMachine gApplication;
    22ac:	87 e0       	ldi	r24, 0x07	; 7
    22ae:	9a e0       	ldi	r25, 0x0A	; 10
    22b0:	0c 94 25 1a 	jmp	0x344a	; 0x344a <_ZN10TeaMachineC1Ev>

000022b4 <_GLOBAL__sub_D_gApplication>:
    22b4:	87 e0       	ldi	r24, 0x07	; 7
    22b6:	9a e0       	ldi	r25, 0x0A	; 10
    22b8:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <_ZN10TeaMachineD1Ev>

000022bc <setup>:
bool g_bInitialised;	

void setup() 
{
	g_bInitialised = gApplication.Initialise();
    22bc:	87 e0       	ldi	r24, 0x07	; 7
    22be:	9a e0       	ldi	r25, 0x0A	; 10
    22c0:	0e 94 e6 19 	call	0x33cc	; 0x33cc <_ZN10TeaMachine10InitialiseEv>
    22c4:	80 93 06 0a 	sts	0x0A06, r24	; 0x800a06 <__data_end>
    22c8:	08 95       	ret

000022ca <loop>:
}

void loop() 
{
	while(g_bInitialised)
    22ca:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <__data_end>
    22ce:	88 23       	and	r24, r24
    22d0:	29 f0       	breq	.+10     	; 0x22dc <loop+0x12>
	{
		gApplication.Process();
    22d2:	87 e0       	ldi	r24, 0x07	; 7
    22d4:	9a e0       	ldi	r25, 0x0A	; 10
    22d6:	0e 94 cd 1b 	call	0x379a	; 0x379a <_ZN10TeaMachine7ProcessEv>
	g_bInitialised = gApplication.Initialise();
}

void loop() 
{
	while(g_bInitialised)
    22da:	f7 cf       	rjmp	.-18     	; 0x22ca <loop>
    22dc:	08 95       	ret

000022de <_ZN6MasherC1EP10TeaMachine>:
} //Masher

//
//	Default destructor
//
Masher::~Masher()
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	ec 01       	movw	r28, r24
    22e4:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    22e8:	8f e8       	ldi	r24, 0x8F	; 143
    22ea:	95 e0       	ldi	r25, 0x05	; 5
    22ec:	99 83       	std	Y+1, r25	; 0x01
    22ee:	88 83       	st	Y, r24
    22f0:	1e 82       	std	Y+6, r1	; 0x06
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	08 95       	ret

000022f8 <_ZN6Masher5RaiseEv>:
//	Raise()
//
//	Raise the masher
//
bool Masher::Raise()
{
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_MASHER_UPDOWN);
    22fe:	68 e0       	ldi	r22, 0x08	; 8
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	e5 d7       	rcall	.+4042   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_MASHER_EN);
    2308:	69 e0       	ldi	r22, 0x09	; 9
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	9d 81       	ldd	r25, Y+5	; 0x05
    2310:	e0 d7       	rcall	.+4032   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_lastAction = masherActionRaising;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	8e 83       	std	Y+6, r24	; 0x06
    
	return true;
}
    2316:	df 91       	pop	r29
    2318:	cf 91       	pop	r28
    231a:	08 95       	ret

0000231c <_ZN6Masher5LowerEv>:
//	Lower()
//
//	Lower the masher
//
bool Masher::Lower()
{
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	ec 01       	movw	r28, r24
	m_pSystem->ClearOutputRegisterBit(OUTREG_MASHER_UPDOWN);
    2322:	68 e0       	ldi	r22, 0x08	; 8
    2324:	70 e0       	ldi	r23, 0x00	; 0
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	a8 d7       	rcall	.+3920   	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_MASHER_EN);
    232c:	69 e0       	ldi	r22, 0x09	; 9
    232e:	70 e0       	ldi	r23, 0x00	; 0
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	9d 81       	ldd	r25, Y+5	; 0x05
    2334:	ce d7       	rcall	.+3996   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_lastAction = masherActionLowering;
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	8e 83       	std	Y+6, r24	; 0x06
    
	return true;
}
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	df 91       	pop	r29
    233e:	cf 91       	pop	r28
    2340:	08 95       	ret

00002342 <_ZN6Masher4StopEv>:
//
//	Switch off the masher motor
//
void Masher::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_MASHER_EN);
    2342:	69 e0       	ldi	r22, 0x09	; 9
    2344:	70 e0       	ldi	r23, 0x00	; 0
    2346:	fc 01       	movw	r30, r24
    2348:	84 81       	ldd	r24, Z+4	; 0x04
    234a:	95 81       	ldd	r25, Z+5	; 0x05
    234c:	97 c7       	rjmp	.+3886   	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>

0000234e <_ZN6Masher8IsRaisedEv>:
//	IsRaised()
//
//	Returns true if the masher is currently in the raised position
//
bool Masher::IsRaised()
{
    234e:	cf 93       	push	r28
    2350:	df 93       	push	r29
    2352:	ec 01       	movw	r28, r24
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2354:	8c 81       	ldd	r24, Y+4	; 0x04
    2356:	9d 81       	ldd	r25, Y+5	; 0x05
    2358:	24 d7       	rcall	.+3656   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return ((wInputRegister & INREGMASK_MASHER_HILIMITSW) != 0) && (m_lastAction != masherActionLowering);
    235a:	87 ff       	sbrs	r24, 7
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <_ZN6Masher8IsRaisedEv+0x18>
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	92 30       	cpi	r25, 0x02	; 2
    2364:	09 f4       	brne	.+2      	; 0x2368 <_ZN6Masher8IsRaisedEv+0x1a>
    2366:	80 e0       	ldi	r24, 0x00	; 0
}
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	08 95       	ret

0000236e <_ZN6Masher9IsLoweredEv>:
//	IsLowered()
//
//	Returns true if the masher is currently in the lowered position
//
bool Masher::IsLowered()
{
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2374:	8c 81       	ldd	r24, Y+4	; 0x04
    2376:	9d 81       	ldd	r25, Y+5	; 0x05
    2378:	14 d7       	rcall	.+3624   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return ((wInputRegister & INREGMASK_MASHER_LOLIMITSW) != 0) && (m_lastAction != masherActionRaising);
    237a:	90 ff       	sbrs	r25, 0
    237c:	04 c0       	rjmp	.+8      	; 0x2386 <_ZN6Masher9IsLoweredEv+0x18>
    237e:	81 e0       	ldi	r24, 0x01	; 1
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	91 30       	cpi	r25, 0x01	; 1
    2384:	09 f4       	brne	.+2      	; 0x2388 <_ZN6Masher9IsLoweredEv+0x1a>
    2386:	80 e0       	ldi	r24, 0x00	; 0
}
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	08 95       	ret

0000238e <_ZN6Masher4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool Masher::Test()
{
    238e:	ec 01       	movw	r28, r24
	while(true)
	{
		// Fetch mode
		if((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	9d 81       	ldd	r25, Y+5	; 0x05
    2394:	06 d7       	rcall	.+3596   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    2396:	93 ff       	sbrs	r25, 3
    2398:	0c c0       	rjmp	.+24     	; 0x23b2 <_ZN6Masher4TestEv+0x24>
		{
			if(!IsRaised())
    239a:	ce 01       	movw	r24, r28
    239c:	d8 df       	rcall	.-80     	; 0x234e <_ZN6Masher8IsRaisedEv>
    239e:	81 11       	cpse	r24, r1
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <_ZN6Masher4TestEv+0x18>
			{
				// Raise the masher
				Raise();
    23a2:	ce 01       	movw	r24, r28
    23a4:	a9 df       	rcall	.-174    	; 0x22f8 <_ZN6Masher5RaiseEv>
			}
		
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0);
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	9d 81       	ldd	r25, Y+5	; 0x05
    23aa:	fb d6       	rcall	.+3574   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    23ac:	93 fd       	sbrc	r25, 3
    23ae:	fb cf       	rjmp	.-10     	; 0x23a6 <_ZN6Masher4TestEv+0x18>
    23b0:	ef cf       	rjmp	.-34     	; 0x2390 <_ZN6Masher4TestEv+0x2>
		}
		else
		{
			if(!IsLowered())
    23b2:	ce 01       	movw	r24, r28
    23b4:	dc df       	rcall	.-72     	; 0x236e <_ZN6Masher9IsLoweredEv>
    23b6:	81 11       	cpse	r24, r1
    23b8:	02 c0       	rjmp	.+4      	; 0x23be <_ZN6Masher4TestEv+0x30>
			{
				// Lower the masher
				Lower();
    23ba:	ce 01       	movw	r24, r28
    23bc:	af df       	rcall	.-162    	; 0x231c <_ZN6Masher5LowerEv>
    23be:	8c 81       	ldd	r24, Y+4	; 0x04
			}
			
			while((m_pSystem->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
    23c0:	9d 81       	ldd	r25, Y+5	; 0x05
    23c2:	ef d6       	rcall	.+3550   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    23c4:	93 ff       	sbrs	r25, 3
    23c6:	fb cf       	rjmp	.-10     	; 0x23be <_ZN6Masher4TestEv+0x30>
    23c8:	e3 cf       	rjmp	.-58     	; 0x2390 <_ZN6Masher4TestEv+0x2>

000023ca <_ZN13MilkDispenser10InitialiseEv>:
    23ca:	08 95       	ret

000023cc <_ZN13MilkDispenserC1EP10TeaMachine>:
    23cc:	cf 93       	push	r28
} //MilkDispenser

//
//	Default destructor
//
MilkDispenser::~MilkDispenser()
    23ce:	df 93       	push	r29
    23d0:	ec 01       	movw	r28, r24
    23d2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    23d6:	87 e9       	ldi	r24, 0x97	; 151
    23d8:	95 e0       	ldi	r25, 0x05	; 5
    23da:	99 83       	std	Y+1, r25	; 0x01
    23dc:	88 83       	st	Y, r24
    23de:	df 91       	pop	r29
    23e0:	cf 91       	pop	r28
    23e2:	08 95       	ret

000023e4 <_ZN13MilkDispenser5RaiseEv>:
//	Raise()
//
//	Raise the milk dispenser
//
bool MilkDispenser::Raise()
{
    23e4:	cf 93       	push	r28
    23e6:	df 93       	push	r29
    23e8:	ec 01       	movw	r28, r24
	m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_RAISE);
    23ea:	63 e1       	ldi	r22, 0x13	; 19
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	8c 81       	ldd	r24, Y+4	; 0x04
    23f0:	9d 81       	ldd	r25, Y+5	; 0x05
    23f2:	6f d7       	rcall	.+3806   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->ClearOutputRegisterBit(OUTREG_MILKDISP_RAISE);
    23f4:	63 e1       	ldi	r22, 0x13	; 19
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	8c 81       	ldd	r24, Y+4	; 0x04
    23fa:	9d 81       	ldd	r25, Y+5	; 0x05
    23fc:	3f d7       	rcall	.+3710   	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_EN);
    23fe:	62 e1       	ldi	r22, 0x12	; 18
    2400:	70 e0       	ldi	r23, 0x00	; 0
    2402:	8c 81       	ldd	r24, Y+4	; 0x04
    2404:	9d 81       	ldd	r25, Y+5	; 0x05
    2406:	65 d7       	rcall	.+3786   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <_ZN13MilkDispenser8DispenseEv>:
//	Dispense()
//
//	Perform a dispense cycle
//
bool MilkDispenser::Dispense()
{
    2410:	cf 93       	push	r28
    2412:	df 93       	push	r29
    2414:	ec 01       	movw	r28, r24
    m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_LOWER);
    2416:	64 e1       	ldi	r22, 0x14	; 20
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	59 d7       	rcall	.+3762   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
    m_pSystem->ClearOutputRegisterBit(OUTREG_MILKDISP_LOWER);
    2420:	64 e1       	ldi	r22, 0x14	; 20
    2422:	70 e0       	ldi	r23, 0x00	; 0
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	29 d7       	rcall	.+3666   	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
    m_pSystem->SetOutputRegisterBit(OUTREG_MILKDISP_EN);
    242a:	62 e1       	ldi	r22, 0x12	; 18
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	8c 81       	ldd	r24, Y+4	; 0x04
    2430:	9d 81       	ldd	r25, Y+5	; 0x05
    2432:	4f d7       	rcall	.+3742   	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
    
    return true;
}
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	df 91       	pop	r29
    2438:	cf 91       	pop	r28
    243a:	08 95       	ret

0000243c <_ZN13MilkDispenser4TestEv>:
//
//	Perform hardware tests
//
bool MilkDispenser::Test()
{
	Dispense();
    243c:	e9 df       	rcall	.-46     	; 0x2410 <_ZN13MilkDispenser8DispenseEv>
    243e:	ff cf       	rjmp	.-2      	; 0x243e <_ZN13MilkDispenser4TestEv+0x2>

00002440 <_ZN13MilkDispenser4StopEv>:
//
//	Switch off the MilkDispenser motor
//
void MilkDispenser::Stop()
{
    m_pSystem->ClearOutputRegisterBit(OUTREG_MILKDISP_EN);
    2440:	62 e1       	ldi	r22, 0x12	; 18
    2442:	70 e0       	ldi	r23, 0x00	; 0
    2444:	fc 01       	movw	r30, r24
    2446:	84 81       	ldd	r24, Z+4	; 0x04
    2448:	95 81       	ldd	r25, Z+5	; 0x05
    244a:	18 c7       	rjmp	.+3632   	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>

0000244c <_ZN13MilkDispenser8IsRaisedEv>:
//
//	Returns true if the milk dispenser is currently in the raised position
//
bool MilkDispenser::IsRaised()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    244c:	fc 01       	movw	r30, r24
    244e:	84 81       	ldd	r24, Z+4	; 0x04
    2450:	95 81       	ldd	r25, Z+5	; 0x05
    2452:	a7 d6       	rcall	.+3406   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_MILKDISP_HILIMITSW) != 0;
    2454:	89 2f       	mov	r24, r25
    2456:	99 27       	eor	r25, r25
    2458:	82 95       	swap	r24
    245a:	86 95       	lsr	r24
    245c:	87 70       	andi	r24, 0x07	; 7
}
    245e:	81 70       	andi	r24, 0x01	; 1
    2460:	08 95       	ret

00002462 <_ZN13MilkDispenser9IsRaisingEv>:
//
//	Returns true if the milk dispenser is in the process of returning to the raised position
//
bool MilkDispenser::IsRaising()
{
	word wInputRegister = m_pSystem->ReadInputRegisterData();
    2462:	fc 01       	movw	r30, r24
    2464:	84 81       	ldd	r24, Z+4	; 0x04
    2466:	95 81       	ldd	r25, Z+5	; 0x05
    2468:	9c d6       	rcall	.+3384   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
	return (wInputRegister & INREGMASK_MILKDISP_RAISING) != 0;
}
    246a:	94 fb       	bst	r25, 4
    246c:	88 27       	eor	r24, r24
    246e:	80 f9       	bld	r24, 0
    2470:	08 95       	ret

00002472 <_ZN13MilkDispenser15SetLoadPositionEv>:
//	SetLoadPosition()
//
//	Move the milk dispenser into the position required to load/unload the bottle
//
bool MilkDispenser::SetLoadPosition()
{
    2472:	cf 92       	push	r12
    2474:	df 92       	push	r13
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	cf 93       	push	r28
    247c:	df 93       	push	r29
    247e:	ec 01       	movw	r28, r24
	bool bResult = false;
	
	if( !IsRaised() )
    2480:	e5 df       	rcall	.-54     	; 0x244c <_ZN13MilkDispenser8IsRaisedEv>
    2482:	81 11       	cpse	r24, r1
    2484:	16 c0       	rjmp	.+44     	; 0x24b2 <_ZN13MilkDispenser15SetLoadPositionEv+0x40>
	{
		// Dispenser is not in the raised position, so raise it
		unsigned int lTimeout = millis() + MILK_TIMEOUT_RAISE;
    2486:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    248a:	6b 01       	movw	r12, r22
    248c:	28 e7       	ldi	r18, 0x78	; 120
    248e:	c2 1a       	sub	r12, r18
    2490:	2c ee       	ldi	r18, 0xEC	; 236
    2492:	d2 0a       	sbc	r13, r18
		Raise();
    2494:	ce 01       	movw	r24, r28
    2496:	a6 df       	rcall	.-180    	; 0x23e4 <_ZN13MilkDispenser5RaiseEv>
		while( !IsRaised() && (millis() < lTimeout) );
    2498:	e1 2c       	mov	r14, r1
    249a:	f1 2c       	mov	r15, r1
    249c:	ce 01       	movw	r24, r28
    249e:	d6 df       	rcall	.-84     	; 0x244c <_ZN13MilkDispenser8IsRaisedEv>
    24a0:	81 11       	cpse	r24, r1
    24a2:	07 c0       	rjmp	.+14     	; 0x24b2 <_ZN13MilkDispenser15SetLoadPositionEv+0x40>
    24a4:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    24a8:	6c 15       	cp	r22, r12
    24aa:	7d 05       	cpc	r23, r13
    24ac:	8e 05       	cpc	r24, r14
    24ae:	9f 05       	cpc	r25, r15
	}
	
	if( IsRaised() )
    24b0:	a8 f3       	brcs	.-22     	; 0x249c <_ZN13MilkDispenser15SetLoadPositionEv+0x2a>
    24b2:	ce 01       	movw	r24, r28
    24b4:	cb df       	rcall	.-106    	; 0x244c <_ZN13MilkDispenser8IsRaisedEv>
    24b6:	88 23       	and	r24, r24
	{
		// Start moving to the load position
		Dispense();
    24b8:	99 f0       	breq	.+38     	; 0x24e0 <_ZN13MilkDispenser15SetLoadPositionEv+0x6e>
    24ba:	ce 01       	movw	r24, r28
    24bc:	a9 df       	rcall	.-174    	; 0x2410 <_ZN13MilkDispenser8DispenseEv>
			
		unsigned int lTimeToStop = millis() + MILK_LOAD_DELAY;
    24be:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    24c2:	68 51       	subi	r22, 0x18	; 24
    24c4:	7c 4f       	sbci	r23, 0xFC	; 252
	
		while( millis() < lTimeToStop );
    24c6:	6b 01       	movw	r12, r22
    24c8:	e1 2c       	mov	r14, r1
    24ca:	f1 2c       	mov	r15, r1
    24cc:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    24d0:	6c 15       	cp	r22, r12
    24d2:	7d 05       	cpc	r23, r13
    24d4:	8e 05       	cpc	r24, r14
    24d6:	9f 05       	cpc	r25, r15
		
		// Stop the movement
		Stop();
    24d8:	c8 f3       	brcs	.-14     	; 0x24cc <_ZN13MilkDispenser15SetLoadPositionEv+0x5a>
    24da:	ce 01       	movw	r24, r28
    24dc:	b1 df       	rcall	.-158    	; 0x2440 <_ZN13MilkDispenser4StopEv>
		
		bResult = true;
    24de:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return bResult;
}
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	08 95       	ret

000024ee <_ZN11MilkManager10BeginResetEv>:
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    24ee:	fc 01       	movw	r30, r24
    24f0:	17 8a       	std	Z+23, r1	; 0x17
    24f2:	16 8a       	std	Z+22, r1	; 0x16
    24f4:	80 e0       	ldi	r24, 0x00	; 0
    24f6:	08 95       	ret

000024f8 <_ZN11MilkManager4StopEv>:
    24f8:	fc 01       	movw	r30, r24
    24fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    24fc:	93 8d       	ldd	r25, Z+27	; 0x1b
    24fe:	a0 cf       	rjmp	.-192    	; 0x2440 <_ZN13MilkDispenser4StopEv>

00002500 <_ZN11MilkManager4TestEv>:
    2500:	ec 01       	movw	r28, r24
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	9b 81       	ldd	r25, Y+3	; 0x03
    2506:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    250a:	4b d6       	rcall	.+3222   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    250c:	93 ff       	sbrs	r25, 3
    250e:	f9 cf       	rjmp	.-14     	; 0x2502 <_ZN11MilkManager4TestEv+0x2>
    2510:	e8 81       	ld	r30, Y
    2512:	f9 81       	ldd	r31, Y+1	; 0x01
    2514:	01 90       	ld	r0, Z+
    2516:	f0 81       	ld	r31, Z
    2518:	e0 2d       	mov	r30, r0
    251a:	ce 01       	movw	r24, r28
    251c:	19 95       	eicall
    251e:	81 11       	cpse	r24, r1
    2520:	06 c0       	rjmp	.+12     	; 0x252e <_ZN11MilkManager4TestEv+0x2e>
    2522:	e8 81       	ld	r30, Y
    2524:	f9 81       	ldd	r31, Y+1	; 0x01
    2526:	04 80       	ldd	r0, Z+4	; 0x04
    2528:	f5 81       	ldd	r31, Z+5	; 0x05
    252a:	e0 2d       	mov	r30, r0
    252c:	f6 cf       	rjmp	.-20     	; 0x251a <_ZN11MilkManager4TestEv+0x1a>
    252e:	83 e1       	ldi	r24, 0x13	; 19
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    2536:	8c 01       	movw	r16, r24
    2538:	2f de       	rcall	.-930    	; 0x2198 <_ZN5DrinkC1Ev>
    253a:	19 8f       	std	Y+25, r17	; 0x19
    253c:	08 8f       	std	Y+24, r16	; 0x18
    253e:	e8 81       	ld	r30, Y
    2540:	f9 81       	ldd	r31, Y+1	; 0x01
    2542:	02 80       	ldd	r0, Z+2	; 0x02
    2544:	f3 81       	ldd	r31, Z+3	; 0x03
    2546:	e0 2d       	mov	r30, r0
    2548:	ce 01       	movw	r24, r28
    254a:	19 95       	eicall
    254c:	81 11       	cpse	r24, r1
    254e:	06 c0       	rjmp	.+12     	; 0x255c <_ZN11MilkManager4TestEv+0x5c>
    2550:	e8 81       	ld	r30, Y
    2552:	f9 81       	ldd	r31, Y+1	; 0x01
    2554:	04 80       	ldd	r0, Z+4	; 0x04
    2556:	f5 81       	ldd	r31, Z+5	; 0x05
    2558:	e0 2d       	mov	r30, r0
    255a:	f6 cf       	rjmp	.-20     	; 0x2548 <_ZN11MilkManager4TestEv+0x48>
    255c:	ff cf       	rjmp	.-2      	; 0x255c <_ZN11MilkManager4TestEv+0x5c>

0000255e <_ZN11MilkManager12BeginProcessEv>:
    255e:	cf 93       	push	r28
    2560:	df 93       	push	r29
    2562:	ec 01       	movw	r28, r24
    2564:	e8 8d       	ldd	r30, Y+24	; 0x18
    2566:	f9 8d       	ldd	r31, Y+25	; 0x19
    2568:	30 97       	sbiw	r30, 0x00	; 0
    256a:	31 f0       	breq	.+12     	; 0x2578 <_ZN11MilkManager12BeginProcessEv+0x1a>
    256c:	87 81       	ldd	r24, Z+7	; 0x07
    256e:	90 85       	ldd	r25, Z+8	; 0x08
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	9d 8f       	std	Y+29, r25	; 0x1d
    2576:	8c 8f       	std	Y+28, r24	; 0x1c
    2578:	6b e9       	ldi	r22, 0x9B	; 155
    257a:	75 e0       	ldi	r23, 0x05	; 5
    257c:	81 e1       	ldi	r24, 0x11	; 17
    257e:	9a e0       	ldi	r25, 0x0A	; 10
    2580:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    2584:	6c 8d       	ldd	r22, Y+28	; 0x1c
    2586:	7d 8d       	ldd	r23, Y+29	; 0x1d
    2588:	4a e0       	ldi	r20, 0x0A	; 10
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	81 e1       	ldi	r24, 0x11	; 17
    258e:	9a e0       	ldi	r25, 0x0A	; 10
    2590:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    2594:	65 ef       	ldi	r22, 0xF5	; 245
    2596:	79 e0       	ldi	r23, 0x09	; 9
    2598:	81 e1       	ldi	r24, 0x11	; 17
    259a:	9a e0       	ldi	r25, 0x0A	; 10
    259c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    25a0:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    25a4:	6e 8f       	std	Y+30, r22	; 0x1e
    25a6:	7f 8f       	std	Y+31, r23	; 0x1f
    25a8:	88 a3       	std	Y+32, r24	; 0x20
    25aa:	99 a3       	std	Y+33, r25	; 0x21
    25ac:	82 e0       	ldi	r24, 0x02	; 2
    25ae:	8f 8b       	std	Y+23, r24	; 0x17
    25b0:	1e 8a       	std	Y+22, r1	; 0x16
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	df 91       	pop	r29
    25b6:	cf 91       	pop	r28
    25b8:	08 95       	ret

000025ba <_ZN11MilkManager12ClearMembersEv>:
    25ba:	fc 01       	movw	r30, r24
    25bc:	17 8a       	std	Z+23, r1	; 0x17
    25be:	13 8e       	std	Z+27, r1	; 0x1b
    25c0:	12 8e       	std	Z+26, r1	; 0x1a
    25c2:	15 8e       	std	Z+29, r1	; 0x1d
    25c4:	14 8e       	std	Z+28, r1	; 0x1c
    25c6:	16 8e       	std	Z+30, r1	; 0x1e
    25c8:	17 8e       	std	Z+31, r1	; 0x1f
    25ca:	10 a2       	std	Z+32, r1	; 0x20
    25cc:	11 a2       	std	Z+33, r1	; 0x21
    25ce:	08 95       	ret

000025d0 <_ZN11MilkManagerC1EP20TeaMachineController>:
    25d0:	cf 93       	push	r28
    25d2:	df 93       	push	r29
    25d4:	ec 01       	movw	r28, r24
    25d6:	11 d4       	rcall	.+2082   	; 0x2dfa <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    25d8:	80 e4       	ldi	r24, 0x40	; 64
    25da:	96 e0       	ldi	r25, 0x06	; 6
    25dc:	99 83       	std	Y+1, r25	; 0x01
    25de:	88 83       	st	Y, r24
    25e0:	ce 01       	movw	r24, r28
    25e2:	df 91       	pop	r29
    25e4:	cf 91       	pop	r28
    25e6:	e9 cf       	rjmp	.-46     	; 0x25ba <_ZN11MilkManager12ClearMembersEv>

000025e8 <_ZN11MilkManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse MilkManager::AdvanceStateMachine()
{
    25e8:	0f 93       	push	r16
    25ea:	1f 93       	push	r17
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	ec 01       	movw	r28, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    25f2:	1f 89       	ldd	r17, Y+23	; 0x17
    25f4:	11 30       	cpi	r17, 0x01	; 1
    25f6:	01 f1       	breq	.+64     	; 0x2638 <_ZN11MilkManager19AdvanceStateMachineEv+0x50>
    25f8:	30 f0       	brcs	.+12     	; 0x2606 <_ZN11MilkManager19AdvanceStateMachineEv+0x1e>
    25fa:	12 30       	cpi	r17, 0x02	; 2
    25fc:	61 f1       	breq	.+88     	; 0x2656 <_ZN11MilkManager19AdvanceStateMachineEv+0x6e>
    25fe:	13 30       	cpi	r17, 0x03	; 3
    2600:	09 f4       	brne	.+2      	; 0x2604 <_ZN11MilkManager19AdvanceStateMachineEv+0x1c>
    2602:	52 c0       	rjmp	.+164    	; 0x26a8 <_ZN11MilkManager19AdvanceStateMachineEv+0xc0>
    2604:	79 c0       	rjmp	.+242    	; 0x26f8 <_ZN11MilkManager19AdvanceStateMachineEv+0x110>
    {
        // Reset step: Raise milk dispenser
        case ResetMilkDispenser:
			if( !m_pMilkDispenser->IsRaised() )
    2606:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2608:	9b 8d       	ldd	r25, Y+27	; 0x1b
    260a:	20 df       	rcall	.-448    	; 0x244c <_ZN13MilkDispenser8IsRaisedEv>
    260c:	81 11       	cpse	r24, r1
    260e:	09 c0       	rjmp	.+18     	; 0x2622 <_ZN11MilkManager19AdvanceStateMachineEv+0x3a>
			{
				Serial.print("State: ResetMilkDispenser\n");
    2610:	65 eb       	ldi	r22, 0xB5	; 181
    2612:	75 e0       	ldi	r23, 0x05	; 5
    2614:	81 e1       	ldi	r24, 0x11	; 17
    2616:	9a e0       	ldi	r25, 0x0A	; 10
    2618:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
				m_pMilkDispenser->Raise();
    261c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    261e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2620:	e1 de       	rcall	.-574    	; 0x23e4 <_ZN13MilkDispenser5RaiseEv>
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	8f 8b       	std	Y+23, r24	; 0x17
				m_pMilkDispenser->Raise();
			}
			
			// Set next phase and timeout
			SetNextState(ResetCheckComplete);
			SetTimeout(MILK_TIMEOUT_RAISE, MILK_ERR_TIMEOUT_RAISE);
    2626:	00 e3       	ldi	r16, 0x30	; 48
    2628:	10 e0       	ldi	r17, 0x00	; 0
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	48 e8       	ldi	r20, 0x88	; 136
    2630:	53 e1       	ldi	r21, 0x13	; 19
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	5e c0       	rjmp	.+188    	; 0x26f4 <_ZN11MilkManager19AdvanceStateMachineEv+0x10c>

			break;
        
       // Reset step: Check reset complete
       case ResetCheckComplete:
		   if( m_pMilkDispenser->IsRaised() )
    2638:	8a 8d       	ldd	r24, Y+26	; 0x1a
    263a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    263c:	07 df       	rcall	.-498    	; 0x244c <_ZN13MilkDispenser8IsRaisedEv>
    263e:	88 23       	and	r24, r24
    2640:	09 f4       	brne	.+2      	; 0x2644 <_ZN11MilkManager19AdvanceStateMachineEv+0x5c>
    2642:	5a c0       	rjmp	.+180    	; 0x26f8 <_ZN11MilkManager19AdvanceStateMachineEv+0x110>
		   {
			   Serial.print("State: ResetCheckComplete\n");
    2644:	60 ed       	ldi	r22, 0xD0	; 208
    2646:	75 e0       	ldi	r23, 0x05	; 5
    2648:	81 e1       	ldi	r24, 0x11	; 17
    264a:	9a e0       	ldi	r25, 0x0A	; 10
    264c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
			   // Process step complete - reset has finished
			   ClearTimeout();
    2650:	ce 01       	movw	r24, r28
    2652:	16 d4       	rcall	.+2092   	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
    2654:	27 c0       	rjmp	.+78     	; 0x26a4 <_ZN11MilkManager19AdvanceStateMachineEv+0xbc>
		   break;
       
        // Process step: Initiate dispense cycle
        case MilkBeginDispense:
			
			if( m_nMilkDispensesRequired > 0 )
    2656:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2658:	9d 8d       	ldd	r25, Y+29	; 0x1d
    265a:	18 16       	cp	r1, r24
    265c:	19 06       	cpc	r1, r25
    265e:	bc f4       	brge	.+46     	; 0x268e <_ZN11MilkManager19AdvanceStateMachineEv+0xa6>
			{
				// Milk is required so, check to see if the dispenser can be lowered yet
				if( millis() > m_lNextDispenseTime )
    2660:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    2664:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2666:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2668:	28 a1       	ldd	r18, Y+32	; 0x20
    266a:	39 a1       	ldd	r19, Y+33	; 0x21
    266c:	06 17       	cp	r16, r22
    266e:	17 07       	cpc	r17, r23
    2670:	28 07       	cpc	r18, r24
    2672:	39 07       	cpc	r19, r25
    2674:	08 f0       	brcs	.+2      	; 0x2678 <_ZN11MilkManager19AdvanceStateMachineEv+0x90>
    2676:	40 c0       	rjmp	.+128    	; 0x26f8 <_ZN11MilkManager19AdvanceStateMachineEv+0x110>
				{
		            Serial.print("State: MilkBeginDispense\n");
    2678:	6b ee       	ldi	r22, 0xEB	; 235
    267a:	75 e0       	ldi	r23, 0x05	; 5
    267c:	81 e1       	ldi	r24, 0x11	; 17
    267e:	9a e0       	ldi	r25, 0x0A	; 10
    2680:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
					// Initiate dispense cycle
					m_pMilkDispenser->Dispense();
    2684:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2686:	9b 8d       	ldd	r25, Y+27	; 0x1b
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    2688:	c3 de       	rcall	.-634    	; 0x2410 <_ZN13MilkDispenser8DispenseEv>
    268a:	83 e0       	ldi	r24, 0x03	; 3
				}
			}
			else
		    {
			    // Process step complete (no more milk required)
			    ClearTimeout();
    268c:	2a c0       	rjmp	.+84     	; 0x26e2 <_ZN11MilkManager19AdvanceStateMachineEv+0xfa>
    268e:	ce 01       	movw	r24, r28
    2690:	f7 d3       	rcall	.+2030   	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
    2692:	e8 8d       	ldd	r30, Y+24	; 0x18
    2694:	f9 8d       	ldd	r31, Y+25	; 0x19
    2696:	11 83       	std	Z+1, r17	; 0x01
  				m_pDrink->SetState( MilkStageComplete );
				Serial.print("Milk dispense complete\n");
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	76 e0       	ldi	r23, 0x06	; 6
    269c:	81 e1       	ldi	r24, 0x11	; 17
    269e:	9a e0       	ldi	r25, 0x0A	; 10
    26a0:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
			    response = ProcessComplete;
    26a4:	82 e0       	ldi	r24, 0x02	; 2
		    }
            break;

        // Process step: Check for completion of dispense cycle
        case MilkCheckCycleComplete:
       		if( m_pMilkDispenser->IsRaising() )
    26a6:	29 c0       	rjmp	.+82     	; 0x26fa <_ZN11MilkManager19AdvanceStateMachineEv+0x112>
    26a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26ac:	da de       	rcall	.-588    	; 0x2462 <_ZN13MilkDispenser9IsRaisingEv>
    26ae:	88 23       	and	r24, r24
    26b0:	19 f1       	breq	.+70     	; 0x26f8 <_ZN11MilkManager19AdvanceStateMachineEv+0x110>
			{
				Serial.print("State: MilkCheckCycleComplete\n");
    26b2:	6d e1       	ldi	r22, 0x1D	; 29
    26b4:	76 e0       	ldi	r23, 0x06	; 6
    26b6:	81 e1       	ldi	r24, 0x11	; 17
    26b8:	9a e0       	ldi	r25, 0x0A	; 10
    26ba:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
				m_nMilkDispensesRequired--;
    26be:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	9d 8f       	std	Y+29, r25	; 0x1d
    26c6:	8c 8f       	std	Y+28, r24	; 0x1c
				
				// Calculate time at which next dispense may begin
				m_lNextDispenseTime = millis() + MILK_DISPENSE_INTERVAL;
    26c8:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	80 5e       	subi	r24, 0xE0	; 224
    26d2:	9c 4f       	sbci	r25, 0xFC	; 252
    26d4:	af 4f       	sbci	r26, 0xFF	; 255
    26d6:	bf 4f       	sbci	r27, 0xFF	; 255
    26d8:	8e 8f       	std	Y+30, r24	; 0x1e
    26da:	9f 8f       	std	Y+31, r25	; 0x1f
    26dc:	a8 a3       	std	Y+32, r26	; 0x20
    26de:	b9 a3       	std	Y+33, r27	; 0x21
//
//  Set the next state in the process sequence
//
void MilkManager::SetNextState( MilkState nextState )
{
    m_State = nextState;
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	8f 8b       	std	Y+23, r24	; 0x17
				// Calculate time at which next dispense may begin
				m_lNextDispenseTime = millis() + MILK_DISPENSE_INTERVAL;
				
				// Set next phase and timeout
				SetNextState(MilkBeginDispense);
				SetTimeout(MILK_TIMEOUT_FULLCYCLE, MILK_ERR_TIMEOUT_FULLCYCLE);
    26e4:	01 e3       	ldi	r16, 0x31	; 49
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e7       	ldi	r20, 0x70	; 112
    26ee:	57 e1       	ldi	r21, 0x17	; 23
    26f0:	60 e0       	ldi	r22, 0x00	; 0
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	ce 01       	movw	r24, r28
    26f6:	a2 d3       	rcall	.+1860   	; 0x2e3c <_ZN18ProcessManagerBase10SetTimeoutEml>
//
//  Initiate the next step of the process
//
ProcessManagerResponse MilkManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    26f8:	80 e0       	ldi	r24, 0x00	; 0
			}
			break;
    } // switch            
            
	return response;
}
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	08 95       	ret

00002704 <_ZN11MilkManager8ContinueEv>:
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse MilkManager::Continue()
{
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	ec 01       	movw	r28, r24
    270a:	8e 89       	ldd	r24, Y+22	; 0x16
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	31 f1       	breq	.+76     	; 0x275c <_ZN11MilkManager8ContinueEv+0x58>
    2710:	82 30       	cpi	r24, 0x02	; 2
    2712:	21 f1       	breq	.+72     	; 0x275c <_ZN11MilkManager8ContinueEv+0x58>
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    2714:	ce 01       	movw	r24, r28
    2716:	cc d3       	rcall	.+1944   	; 0x2eb0 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    2718:	81 11       	cpse	r24, r1
    271a:	05 c0       	rjmp	.+10     	; 0x2726 <_ZN11MilkManager8ContinueEv+0x22>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    271c:	ce 01       	movw	r24, r28
    271e:	64 df       	rcall	.-312    	; 0x25e8 <_ZN11MilkManager19AdvanceStateMachineEv>
            Serial.print("TIMEOUT code: ");
            Serial.print(GetLastError());
            Serial.print("\n");
        }
        
        if( response == ProcessFailed)
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	d9 f4       	brne	.+54     	; 0x275a <_ZN11MilkManager8ContinueEv+0x56>
    2724:	16 c0       	rjmp	.+44     	; 0x2752 <_ZN11MilkManager8ContinueEv+0x4e>
            response = AdvanceStateMachine();
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
    2726:	6c ec       	ldi	r22, 0xCC	; 204
    2728:	73 e0       	ldi	r23, 0x03	; 3
    272a:	81 e1       	ldi	r24, 0x11	; 17
    272c:	9a e0       	ldi	r25, 0x0A	; 10
    272e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
    2732:	4e 85       	ldd	r20, Y+14	; 0x0e
    2734:	5f 85       	ldd	r21, Y+15	; 0x0f
    2736:	68 89       	ldd	r22, Y+16	; 0x10
    2738:	79 89       	ldd	r23, Y+17	; 0x11
    273a:	2a e0       	ldi	r18, 0x0A	; 10
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	81 e1       	ldi	r24, 0x11	; 17
    2740:	9a e0       	ldi	r25, 0x0A	; 10
    2742:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <_ZN5Print5printEmi>
            Serial.print("\n");
    2746:	65 ef       	ldi	r22, 0xF5	; 245
    2748:	79 e0       	ldi	r23, 0x09	; 9
    274a:	81 e1       	ldi	r24, 0x11	; 17
    274c:	9a e0       	ldi	r25, 0x0A	; 10
    274e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
        }
        
        if( response == ProcessFailed)
        {
            // Process has failed, so make sure milk dispenser is in the raised position
            m_pMilkDispenser->Raise();
    2752:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2754:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2756:	46 de       	rcall	.-884    	; 0x23e4 <_ZN13MilkDispenser5RaiseEv>
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	8e 8b       	std	Y+22, r24	; 0x16
        
        SetResponse(response);
    }
    
    return response;
}    
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	08 95       	ret

00002762 <_ZN11MilkManager15SetLoadPositionEv>:
//	SetLoadPosition()
//
//  Set milk dispenser to load position
//
bool MilkManager::SetLoadPosition()
{
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	ec 01       	movw	r28, r24
	// Wait for action switch high
	while((m_pTeaMachine->GetSystem()->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) == 0);
    276a:	8a 81       	ldd	r24, Y+2	; 0x02
    276c:	9b 81       	ldd	r25, Y+3	; 0x03
    276e:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    2772:	17 d5       	rcall	.+2606   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    2774:	93 ff       	sbrs	r25, 3
    2776:	f9 cf       	rjmp	.-14     	; 0x276a <_ZN11MilkManager15SetLoadPositionEv+0x8>
	
	// Initialise hardware
	ProcessManagerResponse response = BeginReset();
    2778:	e8 81       	ld	r30, Y
    277a:	f9 81       	ldd	r31, Y+1	; 0x01
    277c:	01 90       	ld	r0, Z+
    277e:	f0 81       	ld	r31, Z
    2780:	e0 2d       	mov	r30, r0
    2782:	ce 01       	movw	r24, r28
    2784:	19 95       	eicall
    2786:	18 2f       	mov	r17, r24
	
	while( response == ProcessIncomplete )
    2788:	81 11       	cpse	r24, r1
    278a:	06 c0       	rjmp	.+12     	; 0x2798 <_ZN11MilkManager15SetLoadPositionEv+0x36>
	{
		response = Continue();
    278c:	e8 81       	ld	r30, Y
    278e:	f9 81       	ldd	r31, Y+1	; 0x01
    2790:	04 80       	ldd	r0, Z+4	; 0x04
    2792:	f5 81       	ldd	r31, Z+5	; 0x05
    2794:	e0 2d       	mov	r30, r0
    2796:	f5 cf       	rjmp	.-22     	; 0x2782 <_ZN11MilkManager15SetLoadPositionEv+0x20>
	} // while
	
	// Set milk dispenser to load position
	m_pMilkDispenser->SetLoadPosition();
    2798:	8a 8d       	ldd	r24, Y+26	; 0x1a
    279a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    279c:	6a de       	rcall	.-812    	; 0x2472 <_ZN13MilkDispenser15SetLoadPositionEv>
			
	return (response == ProcessComplete);
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	12 30       	cpi	r17, 0x02	; 2
    27a2:	09 f0       	breq	.+2      	; 0x27a6 <_ZN11MilkManager15SetLoadPositionEv+0x44>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
}
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	1f 91       	pop	r17
    27ac:	08 95       	ret

000027ae <_ZN11MilkManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the UI manager
//
bool MilkManager::Initialise()
{
    27ae:	0f 93       	push	r16
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	ec 01       	movw	r28, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    27b8:	37 d3       	rcall	.+1646   	; 0x2e28 <_ZN18ProcessManagerBase10InitialiseEv>
    
	// Create the Milk Dispenser object
	m_pMilkDispenser = new MilkDispenser( m_pTeaMachine );
    27ba:	86 e0       	ldi	r24, 0x06	; 6
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    27c2:	8c 01       	movw	r16, r24
    27c4:	6a 81       	ldd	r22, Y+2	; 0x02
    27c6:	7b 81       	ldd	r23, Y+3	; 0x03
    27c8:	01 de       	rcall	.-1022   	; 0x23cc <_ZN13MilkDispenserC1EP10TeaMachine>
    27ca:	1b 8f       	std	Y+27, r17	; 0x1b
    27cc:	0a 8f       	std	Y+26, r16	; 0x1a
	m_pMilkDispenser->Initialise();
    27ce:	c8 01       	movw	r24, r16
    27d0:	fc dd       	rcall	.-1032   	; 0x23ca <_ZN13MilkDispenser10InitialiseEv>
    27d2:	e8 81       	ld	r30, Y
	
	// Set the hardware to its initial state
	ProcessManagerResponse response = BeginReset();
    27d4:	f9 81       	ldd	r31, Y+1	; 0x01
    27d6:	01 90       	ld	r0, Z+
    27d8:	f0 81       	ld	r31, Z
    27da:	e0 2d       	mov	r30, r0
    27dc:	ce 01       	movw	r24, r28
    27de:	19 95       	eicall
    27e0:	81 11       	cpse	r24, r1
    
	while( response == ProcessIncomplete )
    27e2:	06 c0       	rjmp	.+12     	; 0x27f0 <_ZN11MilkManager10InitialiseEv+0x42>
    27e4:	e8 81       	ld	r30, Y
	{
		response = Continue();
    27e6:	f9 81       	ldd	r31, Y+1	; 0x01
    27e8:	04 80       	ldd	r0, Z+4	; 0x04
    27ea:	f5 81       	ldd	r31, Z+5	; 0x05
    27ec:	e0 2d       	mov	r30, r0
    27ee:	f6 cf       	rjmp	.-20     	; 0x27dc <_ZN11MilkManager10InitialiseEv+0x2e>
    27f0:	91 e0       	ldi	r25, 0x01	; 1
	} // while

	return (response == ProcessComplete);
    27f2:	82 30       	cpi	r24, 0x02	; 2
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <_ZN11MilkManager10InitialiseEv+0x4a>
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	89 2f       	mov	r24, r25
}
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <_ZN7NewPingC1Ehhi>:
    2804:	dc 01       	movw	r26, r24
	TIMSK4 = (1<<TOIE4); // Enable Timer4 interrupt.
#else
	OCR2A = 249;           // Every count is 4uS, so 1ms = 250 counts - 1.
	TIMSK2 |= (1<<OCIE2A); // Enable Timer2 interrupt.
#endif
}
    2806:	70 e0       	ldi	r23, 0x00	; 0
    2808:	fb 01       	movw	r30, r22
    280a:	e8 52       	subi	r30, 0x28	; 40
    280c:	fd 4f       	sbci	r31, 0xFD	; 253
    280e:	e4 91       	lpm	r30, Z
    2810:	14 96       	adiw	r26, 0x04	; 4
    2812:	ec 93       	st	X, r30
    2814:	14 97       	sbiw	r26, 0x04	; 4
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	fa 01       	movw	r30, r20
    281a:	e8 52       	subi	r30, 0x28	; 40
    281c:	fd 4f       	sbci	r31, 0xFD	; 253
    281e:	e4 91       	lpm	r30, Z
    2820:	15 96       	adiw	r26, 0x05	; 5
    2822:	ec 93       	st	X, r30
    2824:	15 97       	sbiw	r26, 0x05	; 5
    2826:	62 5e       	subi	r22, 0xE2	; 226
    2828:	7c 4f       	sbci	r23, 0xFC	; 252
    282a:	fb 01       	movw	r30, r22
    282c:	84 91       	lpm	r24, Z
    282e:	e8 2f       	mov	r30, r24
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	e2 58       	subi	r30, 0x82	; 130
    2838:	fc 4f       	sbci	r31, 0xFC	; 252
    283a:	85 91       	lpm	r24, Z+
    283c:	94 91       	lpm	r25, Z
    283e:	17 96       	adiw	r26, 0x07	; 7
    2840:	9c 93       	st	X, r25
    2842:	8e 93       	st	-X, r24
    2844:	16 97       	sbiw	r26, 0x06	; 6
    2846:	fa 01       	movw	r30, r20
    2848:	e2 5e       	subi	r30, 0xE2	; 226
    284a:	fc 4f       	sbci	r31, 0xFC	; 252
    284c:	e4 91       	lpm	r30, Z
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	ee 0f       	add	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	ec 59       	subi	r30, 0x9C	; 156
    2856:	fc 4f       	sbci	r31, 0xFC	; 252
    2858:	85 91       	lpm	r24, Z+
    285a:	94 91       	lpm	r25, Z
    285c:	1b 96       	adiw	r26, 0x0b	; 11
    285e:	9c 93       	st	X, r25
    2860:	8e 93       	st	-X, r24
    2862:	1a 97       	sbiw	r26, 0x0a	; 10
    2864:	fb 01       	movw	r30, r22
    2866:	64 91       	lpm	r22, Z
    2868:	e6 2f       	mov	r30, r22
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	e8 56       	subi	r30, 0x68	; 104
    2872:	fc 4f       	sbci	r31, 0xFC	; 252
    2874:	85 91       	lpm	r24, Z+
    2876:	94 91       	lpm	r25, Z
    2878:	19 96       	adiw	r26, 0x09	; 9
    287a:	9c 93       	st	X, r25
    287c:	8e 93       	st	-X, r24
    287e:	18 97       	sbiw	r26, 0x08	; 8
    2880:	c9 01       	movw	r24, r18
    2882:	25 3f       	cpi	r18, 0xF5	; 245
    2884:	31 40       	sbci	r19, 0x01	; 1
    2886:	14 f0       	brlt	.+4      	; 0x288c <_ZN7NewPingC1Ehhi+0x88>
    2888:	84 ef       	ldi	r24, 0xF4	; 244
    288a:	91 e0       	ldi	r25, 0x01	; 1
    288c:	49 e3       	ldi	r20, 0x39	; 57
    288e:	48 9f       	mul	r20, r24
    2890:	90 01       	movw	r18, r0
    2892:	49 9f       	mul	r20, r25
    2894:	30 0d       	add	r19, r0
    2896:	11 24       	eor	r1, r1
    2898:	c9 01       	movw	r24, r18
    289a:	4c 96       	adiw	r24, 0x1c	; 28
    289c:	1d 96       	adiw	r26, 0x0d	; 13
    289e:	9c 93       	st	X, r25
    28a0:	8e 93       	st	-X, r24
    28a2:	1c 97       	sbiw	r26, 0x0c	; 12
    28a4:	08 95       	ret

000028a6 <_ZN7NewPing12ping_triggerEv>:
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	ec 01       	movw	r28, r24
    28b0:	e8 85       	ldd	r30, Y+8	; 0x08
    28b2:	f9 85       	ldd	r31, Y+9	; 0x09
    28b4:	90 81       	ld	r25, Z
    28b6:	8c 81       	ldd	r24, Y+4	; 0x04
    28b8:	89 2b       	or	r24, r25
    28ba:	80 83       	st	Z, r24
    28bc:	ee 81       	ldd	r30, Y+6	; 0x06
    28be:	ff 81       	ldd	r31, Y+7	; 0x07
    28c0:	90 81       	ld	r25, Z
    28c2:	8c 81       	ldd	r24, Y+4	; 0x04
    28c4:	80 95       	com	r24
    28c6:	89 23       	and	r24, r25
    28c8:	80 83       	st	Z, r24
    28ca:	84 e0       	ldi	r24, 0x04	; 4
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    28d2:	ee 81       	ldd	r30, Y+6	; 0x06
    28d4:	ff 81       	ldd	r31, Y+7	; 0x07
    28d6:	90 81       	ld	r25, Z
    28d8:	8c 81       	ldd	r24, Y+4	; 0x04
    28da:	89 2b       	or	r24, r25
    28dc:	80 83       	st	Z, r24
    28de:	8a e0       	ldi	r24, 0x0A	; 10
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    28e6:	ee 81       	ldd	r30, Y+6	; 0x06
    28e8:	ff 81       	ldd	r31, Y+7	; 0x07
    28ea:	90 81       	ld	r25, Z
    28ec:	8c 81       	ldd	r24, Y+4	; 0x04
    28ee:	80 95       	com	r24
    28f0:	89 23       	and	r24, r25
    28f2:	80 83       	st	Z, r24
    28f4:	e8 85       	ldd	r30, Y+8	; 0x08
    28f6:	f9 85       	ldd	r31, Y+9	; 0x09
    28f8:	90 81       	ld	r25, Z
    28fa:	8c 81       	ldd	r24, Y+4	; 0x04
    28fc:	80 95       	com	r24
    28fe:	89 23       	and	r24, r25
    2900:	80 83       	st	Z, r24
    2902:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <micros>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	80 5b       	subi	r24, 0xB0	; 176
    290c:	99 4b       	sbci	r25, 0xB9	; 185
    290e:	af 4f       	sbci	r26, 0xFF	; 255
    2910:	bf 4f       	sbci	r27, 0xFF	; 255
    2912:	8e 87       	std	Y+14, r24	; 0x0e
    2914:	9f 87       	std	Y+15, r25	; 0x0f
    2916:	a8 8b       	std	Y+16, r26	; 0x10
    2918:	b9 8b       	std	Y+17, r27	; 0x11
    291a:	ea 85       	ldd	r30, Y+10	; 0x0a
    291c:	fb 85       	ldd	r31, Y+11	; 0x0b
    291e:	90 81       	ld	r25, Z
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	89 23       	and	r24, r25
    2924:	59 f0       	breq	.+22     	; 0x293c <_ZN7NewPing12ping_triggerEv+0x96>
    2926:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <micros>
    292a:	0e 85       	ldd	r16, Y+14	; 0x0e
    292c:	1f 85       	ldd	r17, Y+15	; 0x0f
    292e:	28 89       	ldd	r18, Y+16	; 0x10
    2930:	39 89       	ldd	r19, Y+17	; 0x11
    2932:	06 17       	cp	r16, r22
    2934:	17 07       	cpc	r17, r23
    2936:	28 07       	cpc	r18, r24
    2938:	39 07       	cpc	r19, r25
    293a:	78 f7       	brcc	.-34     	; 0x291a <_ZN7NewPing12ping_triggerEv+0x74>
    293c:	ea 85       	ldd	r30, Y+10	; 0x0a
    293e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2940:	90 81       	ld	r25, Z
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	89 23       	and	r24, r25
    2946:	69 f4       	brne	.+26     	; 0x2962 <_ZN7NewPing12ping_triggerEv+0xbc>
    2948:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <micros>
    294c:	0e 85       	ldd	r16, Y+14	; 0x0e
    294e:	1f 85       	ldd	r17, Y+15	; 0x0f
    2950:	28 89       	ldd	r18, Y+16	; 0x10
    2952:	39 89       	ldd	r19, Y+17	; 0x11
    2954:	06 17       	cp	r16, r22
    2956:	17 07       	cpc	r17, r23
    2958:	28 07       	cpc	r18, r24
    295a:	39 07       	cpc	r19, r25
    295c:	78 f7       	brcc	.-34     	; 0x293c <_ZN7NewPing12ping_triggerEv+0x96>
    295e:	80 e0       	ldi	r24, 0x00	; 0
    2960:	0f c0       	rjmp	.+30     	; 0x2980 <_ZN7NewPing12ping_triggerEv+0xda>
    2962:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <micros>
    2966:	2c 85       	ldd	r18, Y+12	; 0x0c
    2968:	3d 85       	ldd	r19, Y+13	; 0x0d
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	82 0f       	add	r24, r18
    2970:	93 1f       	adc	r25, r19
    2972:	a1 1d       	adc	r26, r1
    2974:	b1 1d       	adc	r27, r1
    2976:	8e 87       	std	Y+14, r24	; 0x0e
    2978:	9f 87       	std	Y+15, r25	; 0x0f
    297a:	a8 8b       	std	Y+16, r26	; 0x10
    297c:	b9 8b       	std	Y+17, r27	; 0x11
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	1f 91       	pop	r17
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <_ZN7NewPing4pingEv>:
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	ec 01       	movw	r28, r24
    2994:	88 df       	rcall	.-240    	; 0x28a6 <_ZN7NewPing12ping_triggerEv>
    2996:	81 11       	cpse	r24, r1
    2998:	0e c0       	rjmp	.+28     	; 0x29b6 <_ZN7NewPing4pingEv+0x2c>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	20 c0       	rjmp	.+64     	; 0x29e0 <_ZN7NewPing4pingEv+0x56>
    29a0:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <micros>
    29a4:	0e 85       	ldd	r16, Y+14	; 0x0e
    29a6:	1f 85       	ldd	r17, Y+15	; 0x0f
    29a8:	28 89       	ldd	r18, Y+16	; 0x10
    29aa:	39 89       	ldd	r19, Y+17	; 0x11
    29ac:	06 17       	cp	r16, r22
    29ae:	17 07       	cpc	r17, r23
    29b0:	28 07       	cpc	r18, r24
    29b2:	39 07       	cpc	r19, r25
    29b4:	90 f3       	brcs	.-28     	; 0x299a <_ZN7NewPing4pingEv+0x10>
    29b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    29b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    29ba:	90 81       	ld	r25, Z
    29bc:	8d 81       	ldd	r24, Y+5	; 0x05
    29be:	89 23       	and	r24, r25
    29c0:	79 f7       	brne	.-34     	; 0x29a0 <_ZN7NewPing4pingEv+0x16>
    29c2:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <micros>
    29c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    29c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    29ca:	a9 01       	movw	r20, r18
    29cc:	45 50       	subi	r20, 0x05	; 5
    29ce:	51 09       	sbc	r21, r1
    29d0:	2e 85       	ldd	r18, Y+14	; 0x0e
    29d2:	3f 85       	ldd	r19, Y+15	; 0x0f
    29d4:	fa 01       	movw	r30, r20
    29d6:	e2 1b       	sub	r30, r18
    29d8:	f3 0b       	sbc	r31, r19
    29da:	cf 01       	movw	r24, r30
    29dc:	86 0f       	add	r24, r22
    29de:	97 1f       	adc	r25, r23
    29e0:	df 91       	pop	r29
    29e2:	cf 91       	pop	r28
    29e4:	1f 91       	pop	r17
    29e6:	0f 91       	pop	r16
    29e8:	08 95       	ret

000029ea <__vector_13>:


#if defined (__AVR_ATmega32U4__) // Use Timer4 for ATmega32U4 (Teensy/Leonardo).
ISR(TIMER4_OVF_vect) {
#else
ISR(TIMER2_COMPA_vect) {
    29ea:	1f 92       	push	r1
    29ec:	0f 92       	push	r0
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	0f 92       	push	r0
    29f2:	11 24       	eor	r1, r1
    29f4:	0b b6       	in	r0, 0x3b	; 59
    29f6:	0f 92       	push	r0
    29f8:	2f 93       	push	r18
    29fa:	3f 93       	push	r19
    29fc:	4f 93       	push	r20
    29fe:	5f 93       	push	r21
    2a00:	6f 93       	push	r22
    2a02:	7f 93       	push	r23
    2a04:	8f 93       	push	r24
    2a06:	9f 93       	push	r25
    2a08:	af 93       	push	r26
    2a0a:	bf 93       	push	r27
    2a0c:	ef 93       	push	r30
    2a0e:	ff 93       	push	r31
#endif
	if(intFunc) intFunc(); // If wrapped function is set, call it.
    2a10:	e0 91 0f 0a 	lds	r30, 0x0A0F	; 0x800a0f <intFunc>
    2a14:	f0 91 10 0a 	lds	r31, 0x0A10	; 0x800a10 <intFunc+0x1>
    2a18:	30 97       	sbiw	r30, 0x00	; 0
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <__vector_13+0x34>
    2a1c:	19 95       	eicall
}
    2a1e:	ff 91       	pop	r31
    2a20:	ef 91       	pop	r30
    2a22:	bf 91       	pop	r27
    2a24:	af 91       	pop	r26
    2a26:	9f 91       	pop	r25
    2a28:	8f 91       	pop	r24
    2a2a:	7f 91       	pop	r23
    2a2c:	6f 91       	pop	r22
    2a2e:	5f 91       	pop	r21
    2a30:	4f 91       	pop	r20
    2a32:	3f 91       	pop	r19
    2a34:	2f 91       	pop	r18
    2a36:	0f 90       	pop	r0
    2a38:	0b be       	out	0x3b, r0	; 59
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	0f 90       	pop	r0
    2a40:	1f 90       	pop	r1
    2a42:	18 95       	reti

00002a44 <_ZN7OneWire5resetEv>:
   ROM_NO[0] = family_code;
   for (uint8_t i = 1; i < 8; i++)
      ROM_NO[i] = 0;
   LastDiscrepancy = 64;
   LastFamilyDiscrepancy = 0;
   LastDeviceFlag = FALSE;
    2a44:	ff 92       	push	r15
    2a46:	0f 93       	push	r16
    2a48:	1f 93       	push	r17
    2a4a:	cf 93       	push	r28
    2a4c:	df 93       	push	r29
    2a4e:	fc 01       	movw	r30, r24
    2a50:	f0 80       	ld	r15, Z
    2a52:	c1 81       	ldd	r28, Z+1	; 0x01
    2a54:	d2 81       	ldd	r29, Z+2	; 0x02
    2a56:	f8 94       	cli
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	0f 2d       	mov	r16, r15
    2a5c:	00 95       	com	r16
    2a5e:	80 23       	and	r24, r16
    2a60:	89 83       	std	Y+1, r24	; 0x01
    2a62:	78 94       	sei
    2a64:	1d e7       	ldi	r17, 0x7D	; 125
    2a66:	11 50       	subi	r17, 0x01	; 1
    2a68:	29 f1       	breq	.+74     	; 0x2ab4 <_ZN7OneWire5resetEv+0x70>
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2a72:	88 81       	ld	r24, Y
    2a74:	8f 21       	and	r24, r15
    2a76:	b9 f3       	breq	.-18     	; 0x2a66 <_ZN7OneWire5resetEv+0x22>
    2a78:	f8 94       	cli
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	80 23       	and	r24, r16
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	8f 29       	or	r24, r15
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	78 94       	sei
    2a88:	80 ee       	ldi	r24, 0xE0	; 224
    2a8a:	91 e0       	ldi	r25, 0x01	; 1
    2a8c:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2a90:	f8 94       	cli
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	08 23       	and	r16, r24
    2a96:	09 83       	std	Y+1, r16	; 0x01
    2a98:	86 e4       	ldi	r24, 0x46	; 70
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2aa0:	88 81       	ld	r24, Y
    2aa2:	f8 22       	and	r15, r24
    2aa4:	11 e0       	ldi	r17, 0x01	; 1
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <_ZN7OneWire5resetEv+0x66>
    2aa8:	10 e0       	ldi	r17, 0x00	; 0
    2aaa:	78 94       	sei
    2aac:	8a e9       	ldi	r24, 0x9A	; 154
    2aae:	91 e0       	ldi	r25, 0x01	; 1
    2ab0:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2ab4:	81 2f       	mov	r24, r17
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	1f 91       	pop	r17
    2abc:	0f 91       	pop	r16
    2abe:	ff 90       	pop	r15
    2ac0:	08 95       	ret

00002ac2 <_ZN7OneWire9write_bitEh>:
    2ac2:	1f 93       	push	r17
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	fc 01       	movw	r30, r24
    2aca:	10 81       	ld	r17, Z
    2acc:	c1 81       	ldd	r28, Z+1	; 0x01
    2ace:	d2 81       	ldd	r29, Z+2	; 0x02
    2ad0:	81 2f       	mov	r24, r17
    2ad2:	80 95       	com	r24
    2ad4:	60 ff       	sbrs	r22, 0
    2ad6:	12 c0       	rjmp	.+36     	; 0x2afc <_ZN7OneWire9write_bitEh+0x3a>
    2ad8:	f8 94       	cli
    2ada:	9a 81       	ldd	r25, Y+2	; 0x02
    2adc:	89 23       	and	r24, r25
    2ade:	8a 83       	std	Y+2, r24	; 0x02
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	81 2b       	or	r24, r17
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	8a e0       	ldi	r24, 0x0A	; 10
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	18 2b       	or	r17, r24
    2af2:	1a 83       	std	Y+2, r17	; 0x02
    2af4:	78 94       	sei
    2af6:	87 e3       	ldi	r24, 0x37	; 55
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	11 c0       	rjmp	.+34     	; 0x2b1e <_ZN7OneWire9write_bitEh+0x5c>
    2afc:	f8 94       	cli
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	89 23       	and	r24, r25
    2b02:	8a 83       	std	Y+2, r24	; 0x02
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	81 2b       	or	r24, r17
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	81 e4       	ldi	r24, 0x41	; 65
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	18 2b       	or	r17, r24
    2b16:	1a 83       	std	Y+2, r17	; 0x02
    2b18:	78 94       	sei
    2b1a:	85 e0       	ldi	r24, 0x05	; 5
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	1f 91       	pop	r17
    2b24:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <delayMicroseconds>

00002b28 <_ZN7OneWire8read_bitEv>:
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	cf 93       	push	r28
    2b2e:	df 93       	push	r29
    2b30:	fc 01       	movw	r30, r24
    2b32:	00 81       	ld	r16, Z
    2b34:	c1 81       	ldd	r28, Z+1	; 0x01
    2b36:	d2 81       	ldd	r29, Z+2	; 0x02
    2b38:	f8 94       	cli
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	80 2b       	or	r24, r16
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	8a 81       	ldd	r24, Y+2	; 0x02
    2b42:	10 2f       	mov	r17, r16
    2b44:	10 95       	com	r17
    2b46:	81 23       	and	r24, r17
    2b48:	8a 83       	std	Y+2, r24	; 0x02
    2b4a:	83 e0       	ldi	r24, 0x03	; 3
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2b52:	89 81       	ldd	r24, Y+1	; 0x01
    2b54:	18 23       	and	r17, r24
    2b56:	19 83       	std	Y+1, r17	; 0x01
    2b58:	8a e0       	ldi	r24, 0x0A	; 10
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2b60:	c8 81       	ld	r28, Y
    2b62:	78 94       	sei
    2b64:	85 e3       	ldi	r24, 0x35	; 53
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
    2b6c:	c0 23       	and	r28, r16
    2b6e:	81 e0       	ldi	r24, 0x01	; 1
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <_ZN7OneWire8read_bitEv+0x4c>
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	df 91       	pop	r29
    2b76:	cf 91       	pop	r28
    2b78:	1f 91       	pop	r17
    2b7a:	0f 91       	pop	r16
    2b7c:	08 95       	ret

00002b7e <_ZN7OneWire5writeEhh>:
    2b7e:	df 92       	push	r13
    2b80:	ef 92       	push	r14
    2b82:	ff 92       	push	r15
    2b84:	0f 93       	push	r16
    2b86:	1f 93       	push	r17
    2b88:	cf 93       	push	r28
    2b8a:	df 93       	push	r29
    2b8c:	ec 01       	movw	r28, r24
    2b8e:	d6 2e       	mov	r13, r22
    2b90:	e4 2e       	mov	r14, r20
    2b92:	08 e0       	ldi	r16, 0x08	; 8
    2b94:	10 e0       	ldi	r17, 0x00	; 0
    2b96:	ff 24       	eor	r15, r15
    2b98:	f3 94       	inc	r15
    2b9a:	61 e0       	ldi	r22, 0x01	; 1
    2b9c:	8d 2d       	mov	r24, r13
    2b9e:	8f 21       	and	r24, r15
    2ba0:	09 f4       	brne	.+2      	; 0x2ba4 <_ZN7OneWire5writeEhh+0x26>
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	8d df       	rcall	.-230    	; 0x2ac2 <_ZN7OneWire9write_bitEh>
    2ba8:	ff 0c       	add	r15, r15
    2baa:	01 50       	subi	r16, 0x01	; 1
    2bac:	11 09       	sbc	r17, r1
    2bae:	a9 f7       	brne	.-22     	; 0x2b9a <_ZN7OneWire5writeEhh+0x1c>
    2bb0:	e1 10       	cpse	r14, r1
    2bb2:	10 c0       	rjmp	.+32     	; 0x2bd4 <_ZN7OneWire5writeEhh+0x56>
    2bb4:	f8 94       	cli
    2bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	88 81       	ld	r24, Y
    2bbe:	80 95       	com	r24
    2bc0:	89 23       	and	r24, r25
    2bc2:	81 83       	std	Z+1, r24	; 0x01
    2bc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc8:	92 81       	ldd	r25, Z+2	; 0x02
    2bca:	88 81       	ld	r24, Y
    2bcc:	80 95       	com	r24
    2bce:	89 23       	and	r24, r25
    2bd0:	82 83       	std	Z+2, r24	; 0x02
    2bd2:	78 94       	sei
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	08 95       	ret

00002be4 <_ZN7OneWire4readEv>:
    2be4:	ef 92       	push	r14
    2be6:	ff 92       	push	r15
    2be8:	0f 93       	push	r16
    2bea:	1f 93       	push	r17
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	7c 01       	movw	r14, r24
    2bf2:	08 e0       	ldi	r16, 0x08	; 8
    2bf4:	10 e0       	ldi	r17, 0x00	; 0
    2bf6:	c0 e0       	ldi	r28, 0x00	; 0
    2bf8:	d1 e0       	ldi	r29, 0x01	; 1
    2bfa:	c7 01       	movw	r24, r14
    2bfc:	95 df       	rcall	.-214    	; 0x2b28 <_ZN7OneWire8read_bitEv>
    2bfe:	81 11       	cpse	r24, r1
    2c00:	cd 2b       	or	r28, r29
    2c02:	dd 0f       	add	r29, r29
    2c04:	01 50       	subi	r16, 0x01	; 1
    2c06:	11 09       	sbc	r17, r1
    2c08:	c1 f7       	brne	.-16     	; 0x2bfa <_ZN7OneWire4readEv+0x16>
    2c0a:	8c 2f       	mov	r24, r28
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	1f 91       	pop	r17
    2c12:	0f 91       	pop	r16
    2c14:	ff 90       	pop	r15
    2c16:	ef 90       	pop	r14
    2c18:	08 95       	ret

00002c1a <_ZN7OneWire6selectEPKh>:
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	8c 01       	movw	r16, r24
    2c28:	7b 01       	movw	r14, r22
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	65 e5       	ldi	r22, 0x55	; 85
    2c2e:	a7 df       	rcall	.-178    	; 0x2b7e <_ZN7OneWire5writeEhh>
    2c30:	e7 01       	movw	r28, r14
    2c32:	88 e0       	ldi	r24, 0x08	; 8
    2c34:	e8 0e       	add	r14, r24
    2c36:	f1 1c       	adc	r15, r1
    2c38:	69 91       	ld	r22, Y+
    2c3a:	40 e0       	ldi	r20, 0x00	; 0
    2c3c:	c8 01       	movw	r24, r16
    2c3e:	9f df       	rcall	.-194    	; 0x2b7e <_ZN7OneWire5writeEhh>
    2c40:	ce 15       	cp	r28, r14
    2c42:	df 05       	cpc	r29, r15
    2c44:	c9 f7       	brne	.-14     	; 0x2c38 <_ZN7OneWire6selectEPKh+0x1e>
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	08 95       	ret

00002c54 <_ZN7OneWire4skipEv>:
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	6c ec       	ldi	r22, 0xCC	; 204
    2c58:	92 cf       	rjmp	.-220    	; 0x2b7e <_ZN7OneWire5writeEhh>

00002c5a <_ZN7OneWire12reset_searchEv>:
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	13 86       	std	Z+11, r1	; 0x0b
    2c5e:	15 86       	std	Z+13, r1	; 0x0d
    2c60:	14 86       	std	Z+12, r1	; 0x0c
    2c62:	dc 01       	movw	r26, r24
    2c64:	1b 96       	adiw	r26, 0x0b	; 11
    2c66:	33 96       	adiw	r30, 0x03	; 3
    2c68:	1e 92       	st	-X, r1
    2c6a:	ae 17       	cp	r26, r30
    2c6c:	bf 07       	cpc	r27, r31
    2c6e:	e1 f7       	brne	.-8      	; 0x2c68 <_ZN7OneWire12reset_searchEv+0xe>
    2c70:	08 95       	ret

00002c72 <_ZN7OneWireC1Eh>:
    2c72:	1f 93       	push	r17
    2c74:	cf 93       	push	r28
    2c76:	df 93       	push	r29
    2c78:	ec 01       	movw	r28, r24
    2c7a:	16 2f       	mov	r17, r22
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	81 2f       	mov	r24, r17
    2c80:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
    2c84:	61 2f       	mov	r22, r17
    2c86:	70 e0       	ldi	r23, 0x00	; 0
    2c88:	fb 01       	movw	r30, r22
    2c8a:	e8 52       	subi	r30, 0x28	; 40
    2c8c:	fd 4f       	sbci	r31, 0xFD	; 253
    2c8e:	e4 91       	lpm	r30, Z
    2c90:	e8 83       	st	Y, r30
    2c92:	fb 01       	movw	r30, r22
    2c94:	e2 5e       	subi	r30, 0xE2	; 226
    2c96:	fc 4f       	sbci	r31, 0xFC	; 252
    2c98:	e4 91       	lpm	r30, Z
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	ee 0f       	add	r30, r30
    2c9e:	ff 1f       	adc	r31, r31
    2ca0:	ec 59       	subi	r30, 0x9C	; 156
    2ca2:	fc 4f       	sbci	r31, 0xFC	; 252
    2ca4:	85 91       	lpm	r24, Z+
    2ca6:	94 91       	lpm	r25, Z
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	ce 01       	movw	r24, r28
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	d2 cf       	rjmp	.-92     	; 0x2c5a <_ZN7OneWire12reset_searchEv>

00002cb6 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
    2cb6:	bf 92       	push	r11
    2cb8:	cf 92       	push	r12
    2cba:	df 92       	push	r13
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
    2cc8:	ec 01       	movw	r28, r24
    2cca:	d6 2e       	mov	r13, r22
    2ccc:	c7 2e       	mov	r12, r23
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    2cce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd0:	81 11       	cpse	r24, r1
    2cd2:	56 c0       	rjmp	.+172    	; 0x2d80 <_ZN7OneWire6searchEPh+0xca>
   {
      // 1-Wire reset
      if (!reset())
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	b6 de       	rcall	.-660    	; 0x2a44 <_ZN7OneWire5resetEv>
    2cd8:	81 11       	cpse	r24, r1
    2cda:	04 c0       	rjmp	.+8      	; 0x2ce4 <_ZN7OneWire6searchEPh+0x2e>
      {
         // reset the search
         LastDiscrepancy = 0;
    2cdc:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    2cde:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    2ce0:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    2ce2:	62 c0       	rjmp	.+196    	; 0x2da8 <_ZN7OneWire6searchEPh+0xf2>
      }

      // issue the search command
      write(0xF0);
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	60 ef       	ldi	r22, 0xF0	; 240
    2ce8:	ce 01       	movw	r24, r28
    2cea:	49 df       	rcall	.-366    	; 0x2b7e <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    2cec:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    2cee:	e1 2c       	mov	r14, r1

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    2cf0:	b1 2c       	mov	r11, r1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    2cf2:	11 e0       	ldi	r17, 0x01	; 1
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	18 df       	rcall	.-464    	; 0x2b28 <_ZN7OneWire8read_bitEv>
         cmp_id_bit = read_bit();
    2cf8:	f8 2e       	mov	r15, r24
    2cfa:	ce 01       	movw	r24, r28
    2cfc:	15 df       	rcall	.-470    	; 0x2b28 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	f9 12       	cpse	r15, r25
    2d02:	03 c0       	rjmp	.+6      	; 0x2d0a <_ZN7OneWire6searchEPh+0x54>
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	b1 f4       	brne	.+44     	; 0x2d34 <_ZN7OneWire6searchEPh+0x7e>
    2d08:	33 c0       	rjmp	.+102    	; 0x2d70 <_ZN7OneWire6searchEPh+0xba>
    2d0a:	2e 2d       	mov	r18, r14
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    2d0e:	f8 12       	cpse	r15, r24
    2d10:	1b c0       	rjmp	.+54     	; 0x2d48 <_ZN7OneWire6searchEPh+0x92>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    2d12:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d14:	18 17       	cp	r17, r24
    2d16:	38 f4       	brcc	.+14     	; 0x2d26 <_ZN7OneWire6searchEPh+0x70>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e2 0f       	add	r30, r18
    2d1c:	f3 1f       	adc	r31, r19
    2d1e:	83 81       	ldd	r24, Z+3	; 0x03
    2d20:	80 23       	and	r24, r16
    2d22:	41 f4       	brne	.+16     	; 0x2d34 <_ZN7OneWire6searchEPh+0x7e>
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <_ZN7OneWire6searchEPh+0x74>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    2d26:	18 17       	cp	r17, r24
    2d28:	29 f0       	breq	.+10     	; 0x2d34 <_ZN7OneWire6searchEPh+0x7e>
    2d2a:	f1 2c       	mov	r15, r1
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    2d2c:	19 30       	cpi	r17, 0x09	; 9
    2d2e:	58 f4       	brcc	.+22     	; 0x2d46 <_ZN7OneWire6searchEPh+0x90>
                     LastFamilyDiscrepancy = last_zero;
    2d30:	1c 87       	std	Y+12, r17	; 0x0c
    2d32:	09 c0       	rjmp	.+18     	; 0x2d46 <_ZN7OneWire6searchEPh+0x90>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    2d34:	fe 01       	movw	r30, r28
    2d36:	ee 0d       	add	r30, r14
    2d38:	f1 1d       	adc	r31, r1
    2d3a:	83 81       	ldd	r24, Z+3	; 0x03
    2d3c:	80 2b       	or	r24, r16
    2d3e:	83 83       	std	Z+3, r24	; 0x03
    2d40:	ff 24       	eor	r15, r15
    2d42:	f3 94       	inc	r15
    2d44:	09 c0       	rjmp	.+18     	; 0x2d58 <_ZN7OneWire6searchEPh+0xa2>
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    2d46:	b1 2e       	mov	r11, r17
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e2 0f       	add	r30, r18
    2d4c:	f3 1f       	adc	r31, r19
    2d4e:	93 81       	ldd	r25, Z+3	; 0x03
    2d50:	80 2f       	mov	r24, r16
    2d52:	80 95       	com	r24
    2d54:	89 23       	and	r24, r25

            // serial number search direction write bit
            write_bit(search_direction);
    2d56:	83 83       	std	Z+3, r24	; 0x03
    2d58:	6f 2d       	mov	r22, r15
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	b2 de       	rcall	.-668    	; 0x2ac2 <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    2d5e:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    2d60:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    2d62:	11 f4       	brne	.+4      	; 0x2d68 <_ZN7OneWire6searchEPh+0xb2>
            {
                rom_byte_number++;
    2d64:	e3 94       	inc	r14
                rom_byte_mask = 1;
    2d66:	01 e0       	ldi	r16, 0x01	; 1
            }
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
    2d68:	87 e0       	ldi	r24, 0x07	; 7
    2d6a:	8e 15       	cp	r24, r14
    2d6c:	08 f0       	brcs	.+2      	; 0x2d70 <_ZN7OneWire6searchEPh+0xba>
    2d6e:	c2 cf       	rjmp	.-124    	; 0x2cf4 <_ZN7OneWire6searchEPh+0x3e>

      // if the search was successful then
      if (!(id_bit_number < 65))
    2d70:	11 34       	cpi	r17, 0x41	; 65
    2d72:	30 f0       	brcs	.+12     	; 0x2d80 <_ZN7OneWire6searchEPh+0xca>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    2d74:	bb 86       	std	Y+11, r11	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    2d76:	b1 10       	cpse	r11, r1
    2d78:	12 c0       	rjmp	.+36     	; 0x2d9e <_ZN7OneWire6searchEPh+0xe8>
            LastDeviceFlag = TRUE;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	8d 87       	std	Y+13, r24	; 0x0d
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <_ZN7OneWire6searchEPh+0xe8>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    2d80:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    2d82:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    2d84:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	de 01       	movw	r26, r28
    2d8a:	13 96       	adiw	r26, 0x03	; 3
    2d8c:	ed 2d       	mov	r30, r13
    2d8e:	fc 2d       	mov	r31, r12
    2d90:	2b 96       	adiw	r28, 0x0b	; 11
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    2d92:	9d 91       	ld	r25, X+
    2d94:	91 93       	st	Z+, r25
    2d96:	ac 17       	cp	r26, r28
    2d98:	bd 07       	cpc	r27, r29
    2d9a:	d9 f7       	brne	.-10     	; 0x2d92 <_ZN7OneWire6searchEPh+0xdc>
    2d9c:	05 c0       	rjmp	.+10     	; 0x2da8 <_ZN7OneWire6searchEPh+0xf2>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	88 23       	and	r24, r24
    2da2:	71 f3       	breq	.-36     	; 0x2d80 <_ZN7OneWire6searchEPh+0xca>
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	f0 cf       	rjmp	.-32     	; 0x2d88 <_ZN7OneWire6searchEPh+0xd2>
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
   return search_result;
  }
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
    2db4:	df 90       	pop	r13
    2db6:	cf 90       	pop	r12
    2db8:	bf 90       	pop	r11
    2dba:	08 95       	ret

00002dbc <_ZN7OneWire4crc8EPKhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
    2dbc:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    2dbe:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    2dc0:	61 50       	subi	r22, 0x01	; 1
    2dc2:	40 f0       	brcs	.+16     	; 0x2dd4 <_ZN7OneWire4crc8EPKhh+0x18>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    2dc4:	9d 91       	ld	r25, X+
    2dc6:	e8 2f       	mov	r30, r24
    2dc8:	e9 27       	eor	r30, r25
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	ee 56       	subi	r30, 0x6E	; 110
    2dce:	fe 4f       	sbci	r31, 0xFE	; 254
    2dd0:	84 91       	lpm	r24, Z
//
uint8_t OneWire::crc8(const uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    2dd2:	f6 cf       	rjmp	.-20     	; 0x2dc0 <_ZN7OneWire4crc8EPKhh+0x4>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    2dd4:	08 95       	ret

00002dd6 <_ZN18ProcessManagerBase4TestEv>:
void ProcessManagerBase::SetTimeout( unsigned long lTimeout )
{
    m_lTimeout = lTimeout;
    m_lStartTime = millis();
    m_lApplicableTimeoutErrorCode = PROC_TIMEOUT;
}
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	08 95       	ret

00002dda <_ZN18ProcessManagerBase12ClearMembersEv>:
    2dda:	fc 01       	movw	r30, r24
    2ddc:	16 82       	std	Z+6, r1	; 0x06
    2dde:	17 82       	std	Z+7, r1	; 0x07
    2de0:	10 86       	std	Z+8, r1	; 0x08
    2de2:	11 86       	std	Z+9, r1	; 0x09
    2de4:	12 86       	std	Z+10, r1	; 0x0a
    2de6:	13 86       	std	Z+11, r1	; 0x0b
    2de8:	14 86       	std	Z+12, r1	; 0x0c
    2dea:	15 86       	std	Z+13, r1	; 0x0d
    2dec:	16 86       	std	Z+14, r1	; 0x0e
    2dee:	17 86       	std	Z+15, r1	; 0x0f
    2df0:	10 8a       	std	Z+16, r1	; 0x10
    2df2:	11 8a       	std	Z+17, r1	; 0x11
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	86 8b       	std	Z+22, r24	; 0x16
    2df8:	08 95       	ret

00002dfa <_ZN18ProcessManagerBaseC1EP20TeaMachineController>:
    2dfa:	0f 93       	push	r16
    2dfc:	1f 93       	push	r17
    2dfe:	cf 93       	push	r28
    2e00:	df 93       	push	r29
    2e02:	ec 01       	movw	r28, r24
    2e04:	8b 01       	movw	r16, r22
    2e06:	80 e5       	ldi	r24, 0x50	; 80
    2e08:	96 e0       	ldi	r25, 0x06	; 6
    2e0a:	99 83       	std	Y+1, r25	; 0x01
    2e0c:	88 83       	st	Y, r24
    2e0e:	ce 01       	movw	r24, r28
    2e10:	e4 df       	rcall	.-56     	; 0x2dda <_ZN18ProcessManagerBase12ClearMembersEv>
    2e12:	1d 83       	std	Y+5, r17	; 0x05
    2e14:	0c 83       	std	Y+4, r16	; 0x04
    2e16:	c8 01       	movw	r24, r16
    2e18:	6a d5       	rcall	.+2772   	; 0x38ee <_ZN20TeaMachineController13GetTeaMachineEv>
    2e1a:	9b 83       	std	Y+3, r25	; 0x03
    2e1c:	8a 83       	std	Y+2, r24	; 0x02
    2e1e:	df 91       	pop	r29
    2e20:	cf 91       	pop	r28
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <_ZN18ProcessManagerBase10InitialiseEv>:
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	ec 01       	movw	r28, r24
    2e2e:	d5 df       	rcall	.-86     	; 0x2dda <_ZN18ProcessManagerBase12ClearMembersEv>
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	8e 8b       	std	Y+22, r24	; 0x16
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	df 91       	pop	r29
    2e38:	cf 91       	pop	r28
    2e3a:	08 95       	ret

00002e3c <_ZN18ProcessManagerBase10SetTimeoutEml>:

//
//  Set the timeout period in milliseconds
//
void ProcessManagerBase::SetTimeout( unsigned long lTimeout, long lApplicableErrorCode )
{
    2e3c:	cf 92       	push	r12
    2e3e:	df 92       	push	r13
    2e40:	ef 92       	push	r14
    2e42:	ff 92       	push	r15
    2e44:	0f 93       	push	r16
    2e46:	1f 93       	push	r17
    2e48:	cf 93       	push	r28
    2e4a:	df 93       	push	r29
    2e4c:	ec 01       	movw	r28, r24
    2e4e:	68 01       	movw	r12, r16
    2e50:	79 01       	movw	r14, r18
    m_lTimeout = lTimeout;
    2e52:	4e 83       	std	Y+6, r20	; 0x06
    2e54:	5f 83       	std	Y+7, r21	; 0x07
    2e56:	68 87       	std	Y+8, r22	; 0x08
    2e58:	79 87       	std	Y+9, r23	; 0x09
    m_lStartTime = millis();
    2e5a:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    2e5e:	6a 87       	std	Y+10, r22	; 0x0a
    2e60:	7b 87       	std	Y+11, r23	; 0x0b
    2e62:	8c 87       	std	Y+12, r24	; 0x0c
    2e64:	9d 87       	std	Y+13, r25	; 0x0d
    m_lApplicableTimeoutErrorCode = lApplicableErrorCode;
    2e66:	ca 8a       	std	Y+18, r12	; 0x12
    2e68:	db 8a       	std	Y+19, r13	; 0x13
    2e6a:	ec 8a       	std	Y+20, r14	; 0x14
    2e6c:	fd 8a       	std	Y+21, r15	; 0x15
}
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	08 95       	ret

00002e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>:
//  ClearTimeout()
//
//  Clear the timeout
//
void ProcessManagerBase::ClearTimeout()
{
    2e80:	cf 93       	push	r28
    2e82:	df 93       	push	r29
    2e84:	ec 01       	movw	r28, r24
    m_lTimeout = 0;
    2e86:	1e 82       	std	Y+6, r1	; 0x06
    2e88:	1f 82       	std	Y+7, r1	; 0x07
    2e8a:	18 86       	std	Y+8, r1	; 0x08
    2e8c:	19 86       	std	Y+9, r1	; 0x09
    m_lStartTime = millis();
    2e8e:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    2e92:	6a 87       	std	Y+10, r22	; 0x0a
    2e94:	7b 87       	std	Y+11, r23	; 0x0b
    2e96:	8c 87       	std	Y+12, r24	; 0x0c
    2e98:	9d 87       	std	Y+13, r25	; 0x0d
    m_lApplicableTimeoutErrorCode = PROC_TIMEOUT;
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ea0:	b0 e0       	ldi	r27, 0x00	; 0
    2ea2:	8a 8b       	std	Y+18, r24	; 0x12
    2ea4:	9b 8b       	std	Y+19, r25	; 0x13
    2ea6:	ac 8b       	std	Y+20, r26	; 0x14
    2ea8:	bd 8b       	std	Y+21, r27	; 0x15
}
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	08 95       	ret

00002eb0 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>:
//	CheckTimeoutExpired()
//
//  Returns true if the timeout period has expired
//
bool ProcessManagerBase::CheckTimeoutExpired()
{
    2eb0:	cf 92       	push	r12
    2eb2:	df 92       	push	r13
    2eb4:	ef 92       	push	r14
    2eb6:	ff 92       	push	r15
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	ec 01       	movw	r28, r24
    bool bExpired = ((m_lStartTime + m_lTimeout) < millis()) && (m_lTimeout > 0);
    2ebe:	ca 84       	ldd	r12, Y+10	; 0x0a
    2ec0:	db 84       	ldd	r13, Y+11	; 0x0b
    2ec2:	ec 84       	ldd	r14, Y+12	; 0x0c
    2ec4:	fd 84       	ldd	r15, Y+13	; 0x0d
    2ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eca:	a8 85       	ldd	r26, Y+8	; 0x08
    2ecc:	b9 85       	ldd	r27, Y+9	; 0x09
    2ece:	c8 0e       	add	r12, r24
    2ed0:	d9 1e       	adc	r13, r25
    2ed2:	ea 1e       	adc	r14, r26
    2ed4:	fb 1e       	adc	r15, r27
    2ed6:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    2eda:	c6 16       	cp	r12, r22
    2edc:	d7 06       	cpc	r13, r23
    2ede:	e8 06       	cpc	r14, r24
    2ee0:	f9 06       	cpc	r15, r25
    2ee2:	40 f4       	brcc	.+16     	; 0x2ef4 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv+0x44>
    2ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee8:	a8 85       	ldd	r26, Y+8	; 0x08
    2eea:	b9 85       	ldd	r27, Y+9	; 0x09
    2eec:	89 2b       	or	r24, r25
    2eee:	8a 2b       	or	r24, r26
    2ef0:	8b 2b       	or	r24, r27
    2ef2:	79 f4       	brne	.+30     	; 0x2f12 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv+0x62>
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    
    SetErrorCode( bExpired ? m_lApplicableTimeoutErrorCode : PROC_OK );
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	50 e0       	ldi	r21, 0x00	; 0
    2efa:	ba 01       	movw	r22, r20
//
//  Set process error code
//
void ProcessManagerBase::SetErrorCode(long lErrorCode)
{
	m_lErrorCode = lErrorCode;
    2efc:	4e 87       	std	Y+14, r20	; 0x0e
    2efe:	5f 87       	std	Y+15, r21	; 0x0f
    2f00:	68 8b       	std	Y+16, r22	; 0x10
    2f02:	79 8b       	std	Y+17, r23	; 0x11
    bool bExpired = ((m_lStartTime + m_lTimeout) < millis()) && (m_lTimeout > 0);
    
    SetErrorCode( bExpired ? m_lApplicableTimeoutErrorCode : PROC_OK );
    
	return bExpired;
}
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	ff 90       	pop	r15
    2f0a:	ef 90       	pop	r14
    2f0c:	df 90       	pop	r13
    2f0e:	cf 90       	pop	r12
    2f10:	08 95       	ret
//
bool ProcessManagerBase::CheckTimeoutExpired()
{
    bool bExpired = ((m_lStartTime + m_lTimeout) < millis()) && (m_lTimeout > 0);
    
    SetErrorCode( bExpired ? m_lApplicableTimeoutErrorCode : PROC_OK );
    2f12:	4a 89       	ldd	r20, Y+18	; 0x12
    2f14:	5b 89       	ldd	r21, Y+19	; 0x13
    2f16:	6c 89       	ldd	r22, Y+20	; 0x14
    2f18:	7d 89       	ldd	r23, Y+21	; 0x15
//
//  Returns true if the timeout period has expired
//
bool ProcessManagerBase::CheckTimeoutExpired()
{
    bool bExpired = ((m_lStartTime + m_lTimeout) < millis()) && (m_lTimeout > 0);
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	ef cf       	rjmp	.-34     	; 0x2efc <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv+0x4c>

00002f1e <_ZN11StirManager4StopEv>:
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
    m_State = nextState;
    2f1e:	08 95       	ret

00002f20 <_ZN11StirManager10BeginResetEv>:
    2f20:	fc 01       	movw	r30, r24
    2f22:	17 8a       	std	Z+23, r1	; 0x17
    2f24:	16 8a       	std	Z+22, r1	; 0x16
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	08 95       	ret

00002f2a <_ZN11StirManager12BeginProcessEv>:
    2f2a:	21 e0       	ldi	r18, 0x01	; 1
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	27 8b       	std	Z+23, r18	; 0x17
    2f30:	16 8a       	std	Z+22, r1	; 0x16
    2f32:	80 e0       	ldi	r24, 0x00	; 0
    2f34:	08 95       	ret

00002f36 <_ZN11StirManager4TestEv>:
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	ec 01       	movw	r28, r24
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f40:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    2f44:	2e d1       	rcall	.+604    	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    2f46:	93 ff       	sbrs	r25, 3
    2f48:	f9 cf       	rjmp	.-14     	; 0x2f3c <_ZN11StirManager4TestEv+0x6>
    2f4a:	e8 81       	ld	r30, Y
    2f4c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f4e:	01 90       	ld	r0, Z+
    2f50:	f0 81       	ld	r31, Z
    2f52:	e0 2d       	mov	r30, r0
    2f54:	ce 01       	movw	r24, r28
    2f56:	19 95       	eicall
    2f58:	81 11       	cpse	r24, r1
    2f5a:	06 c0       	rjmp	.+12     	; 0x2f68 <_ZN11StirManager4TestEv+0x32>
    2f5c:	e8 81       	ld	r30, Y
    2f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    2f60:	04 80       	ldd	r0, Z+4	; 0x04
    2f62:	f5 81       	ldd	r31, Z+5	; 0x05
    2f64:	e0 2d       	mov	r30, r0
    2f66:	f6 cf       	rjmp	.-20     	; 0x2f54 <_ZN11StirManager4TestEv+0x1e>
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	82 30       	cpi	r24, 0x02	; 2
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <_ZN11StirManager4TestEv+0x3a>
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	89 2f       	mov	r24, r25
    2f72:	df 91       	pop	r29
    2f74:	cf 91       	pop	r28
    2f76:	08 95       	ret

00002f78 <_ZN11StirManagerC1EP20TeaMachineController>:
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	ec 01       	movw	r28, r24
    2f7e:	3d df       	rcall	.-390    	; 0x2dfa <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    2f80:	88 eb       	ldi	r24, 0xB8	; 184
    2f82:	96 e0       	ldi	r25, 0x06	; 6
    2f84:	99 83       	std	Y+1, r25	; 0x01
    2f86:	88 83       	st	Y, r24
    2f88:	1f 8a       	std	Y+23, r1	; 0x17
    2f8a:	df 91       	pop	r29
    2f8c:	cf 91       	pop	r28
    2f8e:	08 95       	ret

00002f90 <_ZN11StirManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::AdvanceStateMachine()
{
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	ec 01       	movw	r28, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	89 f0       	breq	.+34     	; 0x2fbe <_ZN11StirManager19AdvanceStateMachineEv+0x2e>
    2f9c:	68 f0       	brcs	.+26     	; 0x2fb8 <_ZN11StirManager19AdvanceStateMachineEv+0x28>
    2f9e:	82 30       	cpi	r24, 0x02	; 2
    2fa0:	c9 f4       	brne	.+50     	; 0x2fd4 <_ZN11StirManager19AdvanceStateMachineEv+0x44>
    2fa2:	e8 8d       	ldd	r30, Y+24	; 0x18
    2fa4:	f9 8d       	ldd	r31, Y+25	; 0x19
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	81 83       	std	Z+1, r24	; 0x01
                    
        // Process step:
        case StirComplete:
  			m_pDrink->SetState( ReadyToDrink );
  			response = ProcessComplete;
            Serial.print("State: StirComplete\n");
    2faa:	6f e6       	ldi	r22, 0x6F	; 111
    2fac:	76 e0       	ldi	r23, 0x06	; 6
    2fae:	81 e1       	ldi	r24, 0x11	; 17
    2fb0:	9a e0       	ldi	r25, 0x0A	; 10
    2fb2:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    2fb6:	0c c0       	rjmp	.+24     	; 0x2fd0 <_ZN11StirManager19AdvanceStateMachineEv+0x40>

    switch( m_State )
    {
        // Reset Stir components
        case StirReset:
            ClearTimeout();
    2fb8:	ce 01       	movw	r24, r28
    2fba:	62 df       	rcall	.-316    	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
    2fbc:	09 c0       	rjmp	.+18     	; 0x2fd0 <_ZN11StirManager19AdvanceStateMachineEv+0x40>
            response = ProcessComplete;        
            break;
                    
        // Process step:
        case StirBegins:
			Serial.print("State: StirBegins\n");
    2fbe:	6c e5       	ldi	r22, 0x5C	; 92
    2fc0:	76 e0       	ldi	r23, 0x06	; 6
    2fc2:	81 e1       	ldi	r24, 0x11	; 17
    2fc4:	9a e0       	ldi	r25, 0x0A	; 10
    2fc6:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
//
//  Set the next state in the process sequence
//
void StirManager::SetNextState( StirState nextState )
{
    m_State = nextState;
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	8f 8b       	std	Y+23, r24	; 0x17
    2fce:	02 c0       	rjmp	.+4      	; 0x2fd4 <_ZN11StirManager19AdvanceStateMachineEv+0x44>
                    
        // Process step:
        case StirComplete:
  			m_pDrink->SetState( ReadyToDrink );
  			response = ProcessComplete;
            Serial.print("State: StirComplete\n");
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	01 c0       	rjmp	.+2      	; 0x2fd6 <_ZN11StirManager19AdvanceStateMachineEv+0x46>
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
            Serial.print("State: StirComplete\n");
            break;
    } // switch            
            
	return response;
}
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	08 95       	ret

00002fdc <_ZN11StirManager8ContinueEv>:
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse StirManager::Continue()
{
    2fdc:	cf 93       	push	r28
    2fde:	df 93       	push	r29
    2fe0:	ec 01       	movw	r28, r24
    2fe2:	8e 89       	ldd	r24, Y+22	; 0x16
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    2fe4:	81 30       	cpi	r24, 0x01	; 1
    2fe6:	09 f1       	breq	.+66     	; 0x302a <_ZN11StirManager8ContinueEv+0x4e>
    2fe8:	82 30       	cpi	r24, 0x02	; 2
    2fea:	f9 f0       	breq	.+62     	; 0x302a <_ZN11StirManager8ContinueEv+0x4e>
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    2fec:	ce 01       	movw	r24, r28
    2fee:	60 df       	rcall	.-320    	; 0x2eb0 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    2ff0:	81 11       	cpse	r24, r1
    2ff2:	03 c0       	rjmp	.+6      	; 0x2ffa <_ZN11StirManager8ContinueEv+0x1e>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    2ff4:	ce 01       	movw	r24, r28
    2ff6:	cc df       	rcall	.-104    	; 0x2f90 <_ZN11StirManager19AdvanceStateMachineEv>
    2ff8:	17 c0       	rjmp	.+46     	; 0x3028 <_ZN11StirManager8ContinueEv+0x4c>
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
    2ffa:	6c ec       	ldi	r22, 0xCC	; 204
    2ffc:	73 e0       	ldi	r23, 0x03	; 3
    2ffe:	81 e1       	ldi	r24, 0x11	; 17
    3000:	9a e0       	ldi	r25, 0x0A	; 10
    3002:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
    3006:	4e 85       	ldd	r20, Y+14	; 0x0e
    3008:	5f 85       	ldd	r21, Y+15	; 0x0f
    300a:	68 89       	ldd	r22, Y+16	; 0x10
    300c:	79 89       	ldd	r23, Y+17	; 0x11
    300e:	2a e0       	ldi	r18, 0x0A	; 10
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	81 e1       	ldi	r24, 0x11	; 17
    3014:	9a e0       	ldi	r25, 0x0A	; 10
    3016:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <_ZN5Print5printEmi>
            Serial.print("\n");
    301a:	65 ef       	ldi	r22, 0xF5	; 245
    301c:	79 e0       	ldi	r23, 0x09	; 9
    301e:	81 e1       	ldi	r24, 0x11	; 17
    3020:	9a e0       	ldi	r25, 0x0A	; 10
    3022:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
{
    ProcessManagerResponse response = GetLastResponse();
    
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
    3026:	81 e0       	ldi	r24, 0x01	; 1
    3028:	8e 8b       	std	Y+22, r24	; 0x16
        
        SetResponse(response);
    }
    
    return response;
}    
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	08 95       	ret

00003030 <_ZN11StirManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the UI manager
//
bool StirManager::Initialise()
{
    3030:	cf 93       	push	r28
    3032:	df 93       	push	r29
    3034:	ec 01       	movw	r28, r24
if(m_pTeaMachine == NULL)
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	9b 81       	ldd	r25, Y+3	; 0x03
    303a:	89 2b       	or	r24, r25
    303c:	31 f4       	brne	.+12     	; 0x304a <_ZN11StirManager10InitialiseEv+0x1a>
{
    Serial.println("StirManager::Initialise() m_pTeaMachine == NULL");
    303e:	64 e8       	ldi	r22, 0x84	; 132
    3040:	76 e0       	ldi	r23, 0x06	; 6
    3042:	81 e1       	ldi	r24, 0x11	; 17
    3044:	9a e0       	ldi	r25, 0x0A	; 10
    3046:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
}
    // Call the base class
    ProcessManagerBase::Initialise();
    304a:	ce 01       	movw	r24, r28
    304c:	ed de       	rcall	.-550    	; 0x2e28 <_ZN18ProcessManagerBase10InitialiseEv>
    
	// Set the hardware to its initial state
	ProcessManagerResponse response = BeginReset();
    304e:	e8 81       	ld	r30, Y
    3050:	f9 81       	ldd	r31, Y+1	; 0x01
    3052:	01 90       	ld	r0, Z+
    3054:	f0 81       	ld	r31, Z
    3056:	e0 2d       	mov	r30, r0
    3058:	ce 01       	movw	r24, r28
    305a:	19 95       	eicall
    
	while( response == ProcessIncomplete )
    305c:	81 11       	cpse	r24, r1
    305e:	06 c0       	rjmp	.+12     	; 0x306c <_ZN11StirManager10InitialiseEv+0x3c>
	{
		response = Continue();
    3060:	e8 81       	ld	r30, Y
    3062:	f9 81       	ldd	r31, Y+1	; 0x01
    3064:	04 80       	ldd	r0, Z+4	; 0x04
    3066:	f5 81       	ldd	r31, Z+5	; 0x05
    3068:	e0 2d       	mov	r30, r0
    306a:	f6 cf       	rjmp	.-20     	; 0x3058 <_ZN11StirManager10InitialiseEv+0x28>
	} // while

	return (response == ProcessComplete);
    306c:	91 e0       	ldi	r25, 0x01	; 1
    306e:	82 30       	cpi	r24, 0x02	; 2
    3070:	09 f0       	breq	.+2      	; 0x3074 <_ZN11StirManager10InitialiseEv+0x44>
    3072:	90 e0       	ldi	r25, 0x00	; 0
}
    3074:	89 2f       	mov	r24, r25
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	08 95       	ret

0000307c <_ZN7StirrerC1EP10TeaMachine>:
} //Stirrer

//
//	Default destructor
//
Stirrer::~Stirrer()
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	ec 01       	movw	r28, r24
    3082:	fa d3       	rcall	.+2036   	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    3084:	84 ee       	ldi	r24, 0xE4	; 228
    3086:	96 e0       	ldi	r25, 0x06	; 6
    3088:	99 83       	std	Y+1, r25	; 0x01
    308a:	88 83       	st	Y, r24
    308c:	df 91       	pop	r29
    308e:	cf 91       	pop	r28
    3090:	08 95       	ret

00003092 <_ZN7Stirrer5RaiseEv>:
//	Raise()
//
//	Raise the Stirrer
//
bool Stirrer::Raise()
{
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	ec 01       	movw	r28, r24
Serial.print("STIRRER RAISE");
    3098:	64 ec       	ldi	r22, 0xC4	; 196
    309a:	76 e0       	ldi	r23, 0x06	; 6
    309c:	81 e1       	ldi	r24, 0x11	; 17
    309e:	9a e0       	ldi	r25, 0x0A	; 10
    30a0:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
	m_pSystem->SetOutputRegisterBit(OUTREG_STIRRER_UPDOWN);
    30a4:	65 e1       	ldi	r22, 0x15	; 21
    30a6:	70 e0       	ldi	r23, 0x00	; 0
    30a8:	8c 81       	ldd	r24, Y+4	; 0x04
    30aa:	9d 81       	ldd	r25, Y+5	; 0x05
    30ac:	12 d1       	rcall	.+548    	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	m_pSystem->SetOutputRegisterBit(OUTREG_STIRRER_EN);
    30ae:	66 e1       	ldi	r22, 0x16	; 22
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	8c 81       	ldd	r24, Y+4	; 0x04
    30b4:	9d 81       	ldd	r25, Y+5	; 0x05
    30b6:	0d d1       	rcall	.+538    	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
    
	return true;
}
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	df 91       	pop	r29
    30bc:	cf 91       	pop	r28
    30be:	08 95       	ret

000030c0 <_ZN7Stirrer4TestEv>:
//	Test
//
//	Perform hardware tests
//
bool Stirrer::Test()
{
    30c0:	ec 01       	movw	r28, r24
Serial.print("STIRRER TEST ");
    30c2:	62 ed       	ldi	r22, 0xD2	; 210
    30c4:	76 e0       	ldi	r23, 0x06	; 6
    30c6:	81 e1       	ldi	r24, 0x11	; 17
    30c8:	9a e0       	ldi	r25, 0x0A	; 10
    30ca:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
	Raise();
    30ce:	ce 01       	movw	r24, r28
    30d0:	e0 df       	rcall	.-64     	; 0x3092 <_ZN7Stirrer5RaiseEv>
    30d2:	ff cf       	rjmp	.-2      	; 0x30d2 <_ZN7Stirrer4TestEv+0x12>

000030d4 <_ZN6SystemC1Ev>:
#include "System.h"

//
//	Default constructor
//
System::System()
    30d4:	fc 01       	movw	r30, r24
{
	wOutputRegisterCurrentValueLow = 0;
    30d6:	11 82       	std	Z+1, r1	; 0x01
    30d8:	10 82       	st	Z, r1
	wOutputRegisterCurrentValueHigh = 0;
    30da:	13 82       	std	Z+3, r1	; 0x03
    30dc:	12 82       	std	Z+2, r1	; 0x02
	m_nSystemMode = -1;
    30de:	8f ef       	ldi	r24, 0xFF	; 255
    30e0:	9f ef       	ldi	r25, 0xFF	; 255
    30e2:	95 83       	std	Z+5, r25	; 0x05
    30e4:	84 83       	std	Z+4, r24	; 0x04
    30e6:	08 95       	ret

000030e8 <_ZN6SystemD1Ev>:
}

//
//	Default destructor
//
System::~System()
    30e8:	08 95       	ret

000030ea <_ZN6System10InitialiseEv>:
//	Initialise
//
void System::Initialise()
{
	// Initialise I/O ports
	pinMode(LED_BUILTIN, OUTPUT);
    30ea:	61 e0       	ldi	r22, 0x01	; 1
    30ec:	8d e0       	ldi	r24, 0x0D	; 13
    30ee:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(INPUTREG_CLOCK, OUTPUT);
    30f2:	61 e0       	ldi	r22, 0x01	; 1
    30f4:	83 e0       	ldi	r24, 0x03	; 3
    30f6:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(INPUTREG_LATCH, OUTPUT);
    30fa:	61 e0       	ldi	r22, 0x01	; 1
    30fc:	84 e0       	ldi	r24, 0x04	; 4
    30fe:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(INPUTREG_DATA, INPUT);
    3102:	60 e0       	ldi	r22, 0x00	; 0
    3104:	85 e0       	ldi	r24, 0x05	; 5
    3106:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(OUTPUTREG_CLOCK, OUTPUT);
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	87 e0       	ldi	r24, 0x07	; 7
    310e:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(OUTPUTREG_LATCH, OUTPUT);
    3112:	61 e0       	ldi	r22, 0x01	; 1
    3114:	86 e0       	ldi	r24, 0x06	; 6
    3116:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(OUTPUTREG_DATA, OUTPUT);
    311a:	61 e0       	ldi	r22, 0x01	; 1
    311c:	82 e0       	ldi	r24, 0x02	; 2
    311e:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(SYSMODE_BIT0, INPUT);
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	80 e2       	ldi	r24, 0x20	; 32
    3126:	0e 94 ba 30 	call	0x6174	; 0x6174 <pinMode>
	pinMode(SYSMODE_BIT1, INPUT);
    312a:	60 e0       	ldi	r22, 0x00	; 0
    312c:	82 e2       	ldi	r24, 0x22	; 34
    312e:	0c 94 ba 30 	jmp	0x6174	; 0x6174 <pinMode>

00003132 <_ZN6System22LatchInputRegisterDataEv>:
//	Load current state of inputs into shift register ready for shifting
//
void System::LatchInputRegisterData()
{	
	// Set the latch pin high to read current state of inputs
	digitalWrite(INPUTREG_LATCH, HIGH);
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	84 e0       	ldi	r24, 0x04	; 4
    3136:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
	
	// Wait a bit
	delayMicroseconds(1);
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
	
	// Set it low to allow data to be shifted out
	digitalWrite(INPUTREG_LATCH, LOW);
    3142:	60 e0       	ldi	r22, 0x00	; 0
    3144:	84 e0       	ldi	r24, 0x04	; 4
    3146:	0c 94 f6 30 	jmp	0x61ec	; 0x61ec <digitalWrite>

0000314a <_ZN6System21ReadInputRegisterByteEv>:
//  ReadInputRegisterByte
//
//	Extract byte from shift register
//
byte System::ReadInputRegisterByte()
{
    314a:	ef 92       	push	r14
    314c:	ff 92       	push	r15
    314e:	1f 93       	push	r17
    3150:	cf 93       	push	r28
    3152:	df 93       	push	r29
	int i;
	int temp = 0;
	int pinState;
	byte myDataIn = 0;
    3154:	10 e0       	ldi	r17, 0x00	; 0

	for (i=7; i>=0; i--)
    3156:	c7 e0       	ldi	r28, 0x07	; 7
    3158:	d0 e0       	ldi	r29, 0x00	; 0
		temp = digitalRead(INPUTREG_DATA);
		if (temp) 
		{
			pinState = 1;
			//set the bit to 0 no matter what
			myDataIn = myDataIn | (1 << i);
    315a:	ee 24       	eor	r14, r14
    315c:	e3 94       	inc	r14
    315e:	f1 2c       	mov	r15, r1
	int pinState;
	byte myDataIn = 0;

	for (i=7; i>=0; i--)
	{
		digitalWrite(INPUTREG_CLOCK, 0);
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	83 e0       	ldi	r24, 0x03	; 3
    3164:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
		delayMicroseconds(2);
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	0e 94 f8 2f 	call	0x5ff0	; 0x5ff0 <delayMicroseconds>
		temp = digitalRead(INPUTREG_DATA);
    3170:	85 e0       	ldi	r24, 0x05	; 5
    3172:	0e 94 24 31 	call	0x6248	; 0x6248 <digitalRead>
		if (temp) 
    3176:	89 2b       	or	r24, r25
    3178:	39 f0       	breq	.+14     	; 0x3188 <_ZN6System21ReadInputRegisterByteEv+0x3e>
		{
			pinState = 1;
			//set the bit to 0 no matter what
			myDataIn = myDataIn | (1 << i);
    317a:	c7 01       	movw	r24, r14
    317c:	0c 2e       	mov	r0, r28
    317e:	01 c0       	rjmp	.+2      	; 0x3182 <_ZN6System21ReadInputRegisterByteEv+0x38>
    3180:	88 0f       	add	r24, r24
    3182:	0a 94       	dec	r0
    3184:	ea f7       	brpl	.-6      	; 0x3180 <_ZN6System21ReadInputRegisterByteEv+0x36>
    3186:	18 2b       	or	r17, r24
		else 
		{
			pinState = 0;
		}

		digitalWrite(INPUTREG_CLOCK, 1);
    3188:	61 e0       	ldi	r22, 0x01	; 1
    318a:	83 e0       	ldi	r24, 0x03	; 3
    318c:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
	int i;
	int temp = 0;
	int pinState;
	byte myDataIn = 0;

	for (i=7; i>=0; i--)
    3190:	21 97       	sbiw	r28, 0x01	; 1
    3192:	30 f7       	brcc	.-52     	; 0x3160 <_ZN6System21ReadInputRegisterByteEv+0x16>

		digitalWrite(INPUTREG_CLOCK, 1);
	}

	return myDataIn;
}
    3194:	81 2f       	mov	r24, r17
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	ff 90       	pop	r15
    319e:	ef 90       	pop	r14
    31a0:	08 95       	ret

000031a2 <_ZN6System21ReadInputRegisterDataEv>:
//  ReadInputRegisterData
//
//	Extract data from shift register
//
word System::ReadInputRegisterData()
{
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	8c 01       	movw	r16, r24
    LatchInputRegisterData();
    31aa:	c3 df       	rcall	.-122    	; 0x3132 <_ZN6System22LatchInputRegisterDataEv>
    
    byte lowByteMain = ReadInputRegisterByte();
    31ac:	c8 01       	movw	r24, r16
    31ae:	cd df       	rcall	.-102    	; 0x314a <_ZN6System21ReadInputRegisterByteEv>
    31b0:	c8 2f       	mov	r28, r24
    byte hiByteMain = ReadInputRegisterByte();
    31b2:	c8 01       	movw	r24, r16
    31b4:	ca df       	rcall	.-108    	; 0x314a <_ZN6System21ReadInputRegisterByteEv>
    31b6:	2c 2f       	mov	r18, r28
    
    return lowByteMain | (hiByteMain << 8);
    31b8:	30 e0       	ldi	r19, 0x00	; 0
    31ba:	a9 01       	movw	r20, r18
}
    31bc:	58 2b       	or	r21, r24
    31be:	ca 01       	movw	r24, r20
    31c0:	cf 91       	pop	r28
    31c2:	1f 91       	pop	r17
    31c4:	0f 91       	pop	r16
    31c6:	08 95       	ret

000031c8 <_ZN6System21ReadInputRegisterDataEPhS0_>:
    31c8:	cf 92       	push	r12
//  ReadInputRegisterData
//
//	Extract data from shift register including user control settings
//
word System::ReadInputRegisterData( byte *pControlsLow, byte *pControlsHigh )
{
    31ca:	df 92       	push	r13
    31cc:	ef 92       	push	r14
    31ce:	ff 92       	push	r15
    31d0:	0f 93       	push	r16
    31d2:	1f 93       	push	r17
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
    31d8:	ec 01       	movw	r28, r24
    31da:	6b 01       	movw	r12, r22
    31dc:	7a 01       	movw	r14, r20
    LatchInputRegisterData();
    31de:	a9 df       	rcall	.-174    	; 0x3132 <_ZN6System22LatchInputRegisterDataEv>
    
    byte lowByteMain = ReadInputRegisterByte();
    31e0:	ce 01       	movw	r24, r28
    31e2:	b3 df       	rcall	.-154    	; 0x314a <_ZN6System21ReadInputRegisterByteEv>
    31e4:	18 2f       	mov	r17, r24
    byte hiByteMain = ReadInputRegisterByte();
    31e6:	ce 01       	movw	r24, r28
    31e8:	b0 df       	rcall	.-160    	; 0x314a <_ZN6System21ReadInputRegisterByteEv>
    31ea:	08 2f       	mov	r16, r24
    *pControlsLow = ReadInputRegisterByte();
    31ec:	ce 01       	movw	r24, r28
    31ee:	ad df       	rcall	.-166    	; 0x314a <_ZN6System21ReadInputRegisterByteEv>
    31f0:	f6 01       	movw	r30, r12
    31f2:	80 83       	st	Z, r24
    *pControlsHigh = ReadInputRegisterByte();
    31f4:	ce 01       	movw	r24, r28
    31f6:	a9 df       	rcall	.-174    	; 0x314a <_ZN6System21ReadInputRegisterByteEv>
    31f8:	f7 01       	movw	r30, r14
    31fa:	80 83       	st	Z, r24
    31fc:	81 2f       	mov	r24, r17
    
    return lowByteMain | (hiByteMain << 8);
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	90 2b       	or	r25, r16
}
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	08 95       	ret

00003214 <_ZN6System23WriteOutputRegisterDataEjj>:
    3214:	ef 92       	push	r14

//
//	WriteOutputRegisterData
//	
void System::WriteOutputRegisterData(word wHighData, word wLowData)
{
    3216:	ff 92       	push	r15
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	ec 01       	movw	r28, r24
    3222:	7b 01       	movw	r14, r22
    3224:	8a 01       	movw	r16, r20
   digitalWrite(OUTPUTREG_LATCH, LOW);
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	86 e0       	ldi	r24, 0x06	; 6
    322a:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wHighData>>8);
    322e:	2f 2d       	mov	r18, r15
    3230:	40 e0       	ldi	r20, 0x00	; 0
    3232:	67 e0       	ldi	r22, 0x07	; 7
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wHighData);
    323a:	2e 2d       	mov	r18, r14
    323c:	40 e0       	ldi	r20, 0x00	; 0
    323e:	67 e0       	ldi	r22, 0x07	; 7
    3240:	82 e0       	ldi	r24, 0x02	; 2
    3242:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wLowData>>8);
    3246:	21 2f       	mov	r18, r17
    3248:	40 e0       	ldi	r20, 0x00	; 0
    324a:	67 e0       	ldi	r22, 0x07	; 7
    324c:	82 e0       	ldi	r24, 0x02	; 2
    324e:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
   shiftOut(OUTPUTREG_DATA, OUTPUTREG_CLOCK, LSBFIRST, wLowData);
    3252:	20 2f       	mov	r18, r16
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	67 e0       	ldi	r22, 0x07	; 7
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	0e 94 4c 31 	call	0x6298	; 0x6298 <shiftOut>
   digitalWrite(OUTPUTREG_LATCH, HIGH);
    325e:	61 e0       	ldi	r22, 0x01	; 1
    3260:	86 e0       	ldi	r24, 0x06	; 6
    3262:	0e 94 f6 30 	call	0x61ec	; 0x61ec <digitalWrite>
   wOutputRegisterCurrentValueHigh = wHighData;
    3266:	ea 82       	std	Y+2, r14	; 0x02
    3268:	fb 82       	std	Y+3, r15	; 0x03
   wOutputRegisterCurrentValueLow = wLowData;
    326a:	08 83       	st	Y, r16
    326c:	19 83       	std	Y+1, r17	; 0x01
}
    326e:	df 91       	pop	r29
    3270:	cf 91       	pop	r28
    3272:	1f 91       	pop	r17
    3274:	0f 91       	pop	r16
    3276:	ff 90       	pop	r15
    3278:	ef 90       	pop	r14
    327a:	08 95       	ret

0000327c <_ZN6System22ClearOutputRegisterBitEj>:
//  ClearOutputRegisterBit
//
//	Clear a specified bit in the output register
//
void System::ClearOutputRegisterBit(unsigned int nBitNumber)
{
    327c:	fc 01       	movw	r30, r24
    if( nBitNumber > 15 )
    327e:	60 31       	cpi	r22, 0x10	; 16
    3280:	71 05       	cpc	r23, r1
    3282:	90 f0       	brcs	.+36     	; 0x32a8 <_ZN6System22ClearOutputRegisterBitEj+0x2c>
    {
        // Clear bit in high word
        wOutputRegisterCurrentValueHigh &= ((1 << (nBitNumber-16)) ^ 0xFFFF);
    3284:	60 51       	subi	r22, 0x10	; 16
    3286:	71 09       	sbc	r23, r1
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	02 c0       	rjmp	.+4      	; 0x3292 <_ZN6System22ClearOutputRegisterBitEj+0x16>
    328e:	88 0f       	add	r24, r24
    3290:	99 1f       	adc	r25, r25
    3292:	6a 95       	dec	r22
    3294:	e2 f7       	brpl	.-8      	; 0x328e <_ZN6System22ClearOutputRegisterBitEj+0x12>
    3296:	80 95       	com	r24
    3298:	90 95       	com	r25
    329a:	22 81       	ldd	r18, Z+2	; 0x02
    329c:	33 81       	ldd	r19, Z+3	; 0x03
    329e:	82 23       	and	r24, r18
    32a0:	93 23       	and	r25, r19
    32a2:	93 83       	std	Z+3, r25	; 0x03
    32a4:	82 83       	std	Z+2, r24	; 0x02
    32a6:	0f c0       	rjmp	.+30     	; 0x32c6 <_ZN6System22ClearOutputRegisterBitEj+0x4a>
    }
    else
    {
        // Clear bit in low word
        wOutputRegisterCurrentValueLow &= ((1 << nBitNumber) ^ 0xFFFF);
    32a8:	81 e0       	ldi	r24, 0x01	; 1
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <_ZN6System22ClearOutputRegisterBitEj+0x36>
    32ae:	88 0f       	add	r24, r24
    32b0:	99 1f       	adc	r25, r25
    32b2:	6a 95       	dec	r22
    32b4:	e2 f7       	brpl	.-8      	; 0x32ae <_ZN6System22ClearOutputRegisterBitEj+0x32>
    32b6:	80 95       	com	r24
    32b8:	90 95       	com	r25
    32ba:	20 81       	ld	r18, Z
    32bc:	31 81       	ldd	r19, Z+1	; 0x01
    32be:	82 23       	and	r24, r18
    32c0:	93 23       	and	r25, r19
    32c2:	91 83       	std	Z+1, r25	; 0x01
    32c4:	80 83       	st	Z, r24
    }

    WriteOutputRegisterData(wOutputRegisterCurrentValueHigh, wOutputRegisterCurrentValueLow);
    32c6:	40 81       	ld	r20, Z
    32c8:	51 81       	ldd	r21, Z+1	; 0x01
    32ca:	62 81       	ldd	r22, Z+2	; 0x02
    32cc:	73 81       	ldd	r23, Z+3	; 0x03
    32ce:	cf 01       	movw	r24, r30
    32d0:	a1 cf       	rjmp	.-190    	; 0x3214 <_ZN6System23WriteOutputRegisterDataEjj>

000032d2 <_ZN6System20SetOutputRegisterBitEj>:
//  SetOutputRegisterBit
//
//  Set a specified bit in the output register
//
void System::SetOutputRegisterBit(unsigned int nBitNumber)
{
    32d2:	fc 01       	movw	r30, r24
    if( nBitNumber > 15 )
    32d4:	60 31       	cpi	r22, 0x10	; 16
    32d6:	71 05       	cpc	r23, r1
    32d8:	80 f0       	brcs	.+32     	; 0x32fa <_ZN6System20SetOutputRegisterBitEj+0x28>
    {
        // Set bit in high word
        wOutputRegisterCurrentValueHigh |= 1 << (nBitNumber-16);
    32da:	60 51       	subi	r22, 0x10	; 16
    32dc:	71 09       	sbc	r23, r1
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <_ZN6System20SetOutputRegisterBitEj+0x16>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	6a 95       	dec	r22
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <_ZN6System20SetOutputRegisterBitEj+0x12>
    32ec:	22 81       	ldd	r18, Z+2	; 0x02
    32ee:	33 81       	ldd	r19, Z+3	; 0x03
    32f0:	82 2b       	or	r24, r18
    32f2:	93 2b       	or	r25, r19
    32f4:	93 83       	std	Z+3, r25	; 0x03
    32f6:	82 83       	std	Z+2, r24	; 0x02
    32f8:	0d c0       	rjmp	.+26     	; 0x3314 <_ZN6System20SetOutputRegisterBitEj+0x42>
    }
    else
    {
        // Set bit in low word
        wOutputRegisterCurrentValueLow |= 1 << nBitNumber;
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <_ZN6System20SetOutputRegisterBitEj+0x32>
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	6a 95       	dec	r22
    3306:	e2 f7       	brpl	.-8      	; 0x3300 <_ZN6System20SetOutputRegisterBitEj+0x2e>
    3308:	20 81       	ld	r18, Z
    330a:	31 81       	ldd	r19, Z+1	; 0x01
    330c:	82 2b       	or	r24, r18
    330e:	93 2b       	or	r25, r19
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    }

    WriteOutputRegisterData(wOutputRegisterCurrentValueHigh, wOutputRegisterCurrentValueLow);
    3314:	40 81       	ld	r20, Z
    3316:	51 81       	ldd	r21, Z+1	; 0x01
    3318:	62 81       	ldd	r22, Z+2	; 0x02
    331a:	73 81       	ldd	r23, Z+3	; 0x03
    331c:	cf 01       	movw	r24, r30
    331e:	7a cf       	rjmp	.-268    	; 0x3214 <_ZN6System23WriteOutputRegisterDataEjj>

00003320 <_ZN6System22SetOutRegisterBitGroupEji>:
    // Create mask for bit group and clear current setting
    word bitGroupMask = (0xF << nBitGroupLSB) ^ 0xFFFF;
    wOutputRegisterCurrentValueLow &= bitGroupMask;
    
    // Place the new setting in the bit group
    wOutputRegisterCurrentValueLow |= newValue << (nBitGroupLSB & 0xF);
    3320:	2f e0       	ldi	r18, 0x0F	; 15
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	06 2e       	mov	r0, r22
    3326:	02 c0       	rjmp	.+4      	; 0x332c <_ZN6System22SetOutRegisterBitGroupEji+0xc>
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	0a 94       	dec	r0
    332e:	e2 f7       	brpl	.-8      	; 0x3328 <_ZN6System22SetOutRegisterBitGroupEji+0x8>
    3330:	20 95       	com	r18
    3332:	30 95       	com	r19
    3334:	dc 01       	movw	r26, r24
    3336:	ed 91       	ld	r30, X+
    3338:	fc 91       	ld	r31, X
    333a:	11 97       	sbiw	r26, 0x01	; 1
    333c:	2e 23       	and	r18, r30
    333e:	3f 23       	and	r19, r31
    3340:	6f 70       	andi	r22, 0x0F	; 15
    3342:	77 27       	eor	r23, r23
    3344:	02 c0       	rjmp	.+4      	; 0x334a <_ZN6System22SetOutRegisterBitGroupEji+0x2a>
    3346:	44 0f       	add	r20, r20
    3348:	55 1f       	adc	r21, r21
    334a:	6a 95       	dec	r22
    334c:	e2 f7       	brpl	.-8      	; 0x3346 <_ZN6System22SetOutRegisterBitGroupEji+0x26>
    334e:	42 2b       	or	r20, r18
    3350:	53 2b       	or	r21, r19
    3352:	11 96       	adiw	r26, 0x01	; 1
    3354:	5c 93       	st	X, r21
    3356:	4e 93       	st	-X, r20
    
    // Update the output register
    WriteOutputRegisterData(wOutputRegisterCurrentValueHigh, wOutputRegisterCurrentValueLow);
    3358:	12 96       	adiw	r26, 0x02	; 2
    335a:	6d 91       	ld	r22, X+
    335c:	7c 91       	ld	r23, X
    335e:	13 97       	sbiw	r26, 0x03	; 3
    3360:	59 cf       	rjmp	.-334    	; 0x3214 <_ZN6System23WriteOutputRegisterDataEjj>

00003362 <_ZN6System14ReadSystemModeEv>:
//  ReadSystemMode
//
//	Read the two-bit system mode
//
int System::ReadSystemMode()
{
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	cf 93       	push	r28
    3368:	df 93       	push	r29
    336a:	8c 01       	movw	r16, r24
	int nSysMode0 = digitalRead(SYSMODE_BIT0);
    336c:	80 e2       	ldi	r24, 0x20	; 32
    336e:	0e 94 24 31 	call	0x6248	; 0x6248 <digitalRead>
    3372:	ec 01       	movw	r28, r24
	int nSysMode1 = digitalRead(SYSMODE_BIT1);
    3374:	82 e2       	ldi	r24, 0x22	; 34
    3376:	0e 94 24 31 	call	0x6248	; 0x6248 <digitalRead>
	
	m_nSystemMode = nSysMode0 + (nSysMode1 * 2);
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	8c 0f       	add	r24, r28
    3380:	9d 1f       	adc	r25, r29
    3382:	f8 01       	movw	r30, r16
    3384:	95 83       	std	Z+5, r25	; 0x05
    3386:	84 83       	std	Z+4, r24	; 0x04
	
	return m_nSystemMode;
}
    3388:	df 91       	pop	r29
    338a:	cf 91       	pop	r28
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	08 95       	ret

00003392 <_ZN6System20SystemModeHasChangedEv>:
//  SystemModeHasChanged
//
//	Read the two-bit system mode to see if it has changed
//
bool System::SystemModeHasChanged()
{
    3392:	0f 93       	push	r16
    3394:	1f 93       	push	r17
    3396:	cf 93       	push	r28
    3398:	df 93       	push	r29
    339a:	8c 01       	movw	r16, r24
	int nSysMode0 = digitalRead(SYSMODE_BIT0);
    339c:	80 e2       	ldi	r24, 0x20	; 32
    339e:	0e 94 24 31 	call	0x6248	; 0x6248 <digitalRead>
    33a2:	ec 01       	movw	r28, r24
	int nSysMode1 = digitalRead(SYSMODE_BIT1);
    33a4:	82 e2       	ldi	r24, 0x22	; 34
    33a6:	0e 94 24 31 	call	0x6248	; 0x6248 <digitalRead>
	
	return ((nSysMode0 + (nSysMode1 * 2)) != m_nSystemMode);
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	c8 0f       	add	r28, r24
    33b0:	d9 1f       	adc	r29, r25
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	f8 01       	movw	r30, r16
    33b6:	24 81       	ldd	r18, Z+4	; 0x04
    33b8:	35 81       	ldd	r19, Z+5	; 0x05
    33ba:	c2 17       	cp	r28, r18
    33bc:	d3 07       	cpc	r29, r19
    33be:	09 f4       	brne	.+2      	; 0x33c2 <_ZN6System20SystemModeHasChangedEv+0x30>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
}
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	08 95       	ret

000033cc <_ZN10TeaMachine10InitialiseEv>:

//
//	Initialise system
//
bool TeaMachine::Initialise()
{
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	ec 01       	movw	r28, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
    33d2:	26 e0       	ldi	r18, 0x06	; 6
    33d4:	40 e8       	ldi	r20, 0x80	; 128
    33d6:	55 e2       	ldi	r21, 0x25	; 37
    33d8:	60 e0       	ldi	r22, 0x00	; 0
    33da:	70 e0       	ldi	r23, 0x00	; 0
    33dc:	81 e1       	ldi	r24, 0x11	; 17
    33de:	9a e0       	ldi	r25, 0x0A	; 10
    33e0:	0e 94 21 2c 	call	0x5842	; 0x5842 <_ZN14HardwareSerial5beginEmh>
	Serial.begin(SERIAL_BAUDRATE);
	
	// Initialise system object
	GetSystem()->Initialise();
    33e4:	ce 01       	movw	r24, r28
    33e6:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    33ea:	7f de       	rcall	.-770    	; 0x30ea <_ZN6System10InitialiseEv>

	// Fetch system mode
	m_nSystemMode = GetSystem()->ReadSystemMode();
    33ec:	ce 01       	movw	r24, r28
    33ee:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    33f2:	b7 df       	rcall	.-146    	; 0x3362 <_ZN6System14ReadSystemModeEv>
    33f4:	9d 83       	std	Y+5, r25	; 0x05
    33f6:	8c 83       	std	Y+4, r24	; 0x04
	Serial.print("System mode: ");
    33f8:	68 ee       	ldi	r22, 0xE8	; 232
    33fa:	76 e0       	ldi	r23, 0x06	; 6
    33fc:	81 e1       	ldi	r24, 0x11	; 17
    33fe:	9a e0       	ldi	r25, 0x0A	; 10
    3400:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
	Serial.println(m_nSystemMode);
    3404:	6c 81       	ldd	r22, Y+4	; 0x04
    3406:	7d 81       	ldd	r23, Y+5	; 0x05
    3408:	4a e0       	ldi	r20, 0x0A	; 10
    340a:	50 e0       	ldi	r21, 0x00	; 0
    340c:	81 e1       	ldi	r24, 0x11	; 17
    340e:	9a e0       	ldi	r25, 0x0A	; 10
    3410:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <_ZN5Print7printlnEji>
	
	if(m_nSystemMode == SYSMODE_NORMAL)
    3414:	8c 81       	ldd	r24, Y+4	; 0x04
    3416:	9d 81       	ldd	r25, Y+5	; 0x05
    3418:	89 2b       	or	r24, r25
    341a:	39 f4       	brne	.+14     	; 0x342a <_ZN10TeaMachine10InitialiseEv+0x5e>
	{
		// Normal mode: Switch 'Normal' LED on and 'Test' LED off
		GetSystem()->ClearOutputRegisterBit(OUTREG_LED_TESTMODE);
    341c:	ce 01       	movw	r24, r28
    341e:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3422:	65 e0       	ldi	r22, 0x05	; 5
    3424:	70 e0       	ldi	r23, 0x00	; 0
    3426:	2a df       	rcall	.-428    	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
    3428:	06 c0       	rjmp	.+12     	; 0x3436 <_ZN10TeaMachine10InitialiseEv+0x6a>
	}
	else
	{
		// Switch 'Test' LED on and 'Normal' LED off
		GetSystem()->SetOutputRegisterBit(OUTREG_LED_TESTMODE);
    342a:	ce 01       	movw	r24, r28
    342c:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3430:	65 e0       	ldi	r22, 0x05	; 5
    3432:	70 e0       	ldi	r23, 0x00	; 0
    3434:	4e df       	rcall	.-356    	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	}
		
	// Switch off 'Fault' LED
	GetSystem()->SetOutputRegisterBit(OUTREG_LED_FAULT);
    3436:	ce 01       	movw	r24, r28
    3438:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    343c:	64 e0       	ldi	r22, 0x04	; 4
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	48 df       	rcall	.-368    	; 0x32d2 <_ZN6System20SetOutputRegisterBitEj>
	
	return true;
}
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	df 91       	pop	r29
    3446:	cf 91       	pop	r28
    3448:	08 95       	ret

0000344a <_ZN10TeaMachineC1Ev>:
#include "Stirrer.h"

//
//	Default constructor
//
TeaMachine::TeaMachine()
    344a:	cf 93       	push	r28
    344c:	df 93       	push	r29
    344e:	ec 01       	movw	r28, r24
    3450:	0e 94 10 02 	call	0x420	; 0x420 <_ZN21ATMegaApplicationBaseC1Ev>
    3454:	86 e0       	ldi	r24, 0x06	; 6
    3456:	97 e0       	ldi	r25, 0x07	; 7
    3458:	99 83       	std	Y+1, r25	; 0x01
    345a:	88 83       	st	Y, r24
{
	m_nTestCode = SYSMODE_NORMAL;
    345c:	1f 82       	std	Y+7, r1	; 0x07
    345e:	1e 82       	std	Y+6, r1	; 0x06
}
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	08 95       	ret

00003466 <_ZN10TeaMachineD1Ev>:

//
//	Default destructor
//
TeaMachine::~TeaMachine()
    3466:	26 e0       	ldi	r18, 0x06	; 6
    3468:	37 e0       	ldi	r19, 0x07	; 7
    346a:	fc 01       	movw	r30, r24
    346c:	31 83       	std	Z+1, r19	; 0x01
    346e:	20 83       	st	Z, r18
    3470:	0c 94 18 02 	jmp	0x430	; 0x430 <_ZN21ATMegaApplicationBaseD1Ev>

00003474 <_ZN10TeaMachine18ExecuteGroup2TestsEv>:
//	ExecuteGroup2Tests
//
//	Run process tests (Group 2)
//
void TeaMachine::ExecuteGroup2Tests()
{
    3474:	ef 92       	push	r14
    3476:	ff 92       	push	r15
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
    3480:	cd b7       	in	r28, 0x3d	; 61
    3482:	de b7       	in	r29, 0x3e	; 62
    3484:	aa 97       	sbiw	r28, 0x2a	; 42
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	f8 94       	cli
    348a:	de bf       	out	0x3e, r29	; 62
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	cd bf       	out	0x3d, r28	; 61
    3490:	7c 01       	movw	r14, r24
	TeaMachineController controller(this);
    3492:	bc 01       	movw	r22, r24
    3494:	ce 01       	movw	r24, r28
    3496:	01 96       	adiw	r24, 0x01	; 1
    3498:	1c d2       	rcall	.+1080   	; 0x38d2 <_ZN20TeaMachineControllerC1EP10TeaMachine>
	
	// Fetch test code
	m_nTestCode = GetSystem()->ReadInputRegisterData() & INREGMASK_MODE;
    349a:	c7 01       	movw	r24, r14
    349c:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    34a0:	80 de       	rcall	.-768    	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    34a2:	8f 70       	andi	r24, 0x0F	; 15
    34a4:	99 27       	eor	r25, r25
    34a6:	f7 01       	movw	r30, r14
    34a8:	97 83       	std	Z+7, r25	; 0x07
    34aa:	86 83       	std	Z+6, r24	; 0x06
	
	Serial.print("Test code: ");
    34ac:	66 ef       	ldi	r22, 0xF6	; 246
    34ae:	76 e0       	ldi	r23, 0x06	; 6
    34b0:	81 e1       	ldi	r24, 0x11	; 17
    34b2:	9a e0       	ldi	r25, 0x0A	; 10
    34b4:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
	Serial.println(m_nTestCode);
    34b8:	f7 01       	movw	r30, r14
    34ba:	66 81       	ldd	r22, Z+6	; 0x06
    34bc:	77 81       	ldd	r23, Z+7	; 0x07
    34be:	4a e0       	ldi	r20, 0x0A	; 10
    34c0:	50 e0       	ldi	r21, 0x00	; 0
    34c2:	81 e1       	ldi	r24, 0x11	; 17
    34c4:	9a e0       	ldi	r25, 0x0A	; 10
    34c6:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <_ZN5Print7printlnEji>
	
	// Display test information
	Display *pDisplay = new Display(this);
    34ca:	86 e3       	ldi	r24, 0x36	; 54
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    34d2:	8c 01       	movw	r16, r24
    34d4:	b7 01       	movw	r22, r14
    34d6:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7DisplayC1EP10TeaMachine>
	pDisplay->Initialise();
    34da:	c8 01       	movw	r24, r16
    34dc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN7Display10InitialiseEv>
	pDisplay->Set( IndicatorDrinkName1, 'T');
    34e0:	44 e5       	ldi	r20, 0x54	; 84
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	c8 01       	movw	r24, r16
    34e6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName2, 'E');
    34ea:	45 e4       	ldi	r20, 0x45	; 69
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	c8 01       	movw	r24, r16
    34f0:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName3, 'S');
    34f4:	43 e5       	ldi	r20, 0x53	; 83
    34f6:	62 e0       	ldi	r22, 0x02	; 2
    34f8:	c8 01       	movw	r24, r16
    34fa:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName4, 'T');
    34fe:	44 e5       	ldi	r20, 0x54	; 84
    3500:	63 e0       	ldi	r22, 0x03	; 3
    3502:	c8 01       	movw	r24, r16
    3504:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorMilkLevel, 2 );
    3508:	42 e0       	ldi	r20, 0x02	; 2
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	61 e0       	ldi	r22, 0x01	; 1
    350e:	c8 01       	movw	r24, r16
    3510:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	pDisplay->Set( IndicatorSugarLevel, m_nTestCode );
    3514:	f7 01       	movw	r30, r14
    3516:	46 81       	ldd	r20, Z+6	; 0x06
    3518:	57 81       	ldd	r21, Z+7	; 0x07
    351a:	62 e0       	ldi	r22, 0x02	; 2
    351c:	c8 01       	movw	r24, r16
    351e:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	pDisplay->Update();
    3522:	c8 01       	movw	r24, r16
    3524:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>
	delete pDisplay;
    3528:	01 15       	cp	r16, r1
    352a:	11 05       	cpc	r17, r1
    352c:	31 f0       	breq	.+12     	; 0x353a <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xc6>
    352e:	c8 01       	movw	r24, r16
    3530:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN7DisplayD1Ev>
    3534:	c8 01       	movw	r24, r16
    3536:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
    353a:	f7 01       	movw	r30, r14
    353c:	86 81       	ldd	r24, Z+6	; 0x06
    353e:	97 81       	ldd	r25, Z+7	; 0x07
    3540:	81 30       	cpi	r24, 0x01	; 1
    3542:	91 05       	cpc	r25, r1
    3544:	51 f0       	breq	.+20     	; 0x355a <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xe6>
    3546:	38 f0       	brcs	.+14     	; 0x3556 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xe2>
    3548:	82 30       	cpi	r24, 0x02	; 2
    354a:	91 05       	cpc	r25, r1
    354c:	41 f0       	breq	.+16     	; 0x355e <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xea>
    354e:	03 97       	sbiw	r24, 0x03	; 3
    3550:	51 f4       	brne	.+20     	; 0x3566 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xf2>
		case TESTCODE_BREWPROCESS:
		controller.Start(ControllerMode_TestBrewManager);
		break;
		
		case TESTCODE_MILKPROCESS:
		controller.Start(ControllerMode_TestMilkManager);
    3552:	64 e0       	ldi	r22, 0x04	; 4
    3554:	05 c0       	rjmp	.+10     	; 0x3560 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xec>
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
	{		
		case TESTCODE_INSERVICE_WITHLOGGING:
		controller.Start(ControllerMode_InServiceWithLogging);
    3556:	61 e0       	ldi	r22, 0x01	; 1
    3558:	03 c0       	rjmp	.+6      	; 0x3560 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xec>
		break;
		
		case TESTCODE_USERINTERFACE:
		controller.Start(ControllerMode_TestUserInterface);
    355a:	62 e0       	ldi	r22, 0x02	; 2
    355c:	01 c0       	rjmp	.+2      	; 0x3560 <_ZN10TeaMachine18ExecuteGroup2TestsEv+0xec>
		break;
		
		case TESTCODE_BREWPROCESS:
		controller.Start(ControllerMode_TestBrewManager);
    355e:	63 e0       	ldi	r22, 0x03	; 3
		break;
		
		case TESTCODE_MILKPROCESS:
		controller.Start(ControllerMode_TestMilkManager);
    3560:	ce 01       	movw	r24, r28
    3562:	01 96       	adiw	r24, 0x01	; 1
    3564:	96 d7       	rcall	.+3884   	; 0x4492 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode>
//
//	Run process tests (Group 2)
//
void TeaMachine::ExecuteGroup2Tests()
{
	TeaMachineController controller(this);
    3566:	ce 01       	movw	r24, r28
    3568:	01 96       	adiw	r24, 0x01	; 1
    356a:	98 d1       	rcall	.+816    	; 0x389c <_ZN20TeaMachineControllerD1Ev>
    356c:	aa 96       	adiw	r28, 0x2a	; 42
		
		case TESTCODE_MILKPROCESS:
		controller.Start(ControllerMode_TestMilkManager);
		break;
	} // switch
    356e:	0f b6       	in	r0, 0x3f	; 63
    3570:	f8 94       	cli
    3572:	de bf       	out	0x3e, r29	; 62
    3574:	0f be       	out	0x3f, r0	; 63
    3576:	cd bf       	out	0x3d, r28	; 61
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	1f 91       	pop	r17
    357e:	0f 91       	pop	r16
    3580:	ff 90       	pop	r15
    3582:	ef 90       	pop	r14
    3584:	08 95       	ret

00003586 <_ZN10TeaMachine18ExecuteGroup1TestsEv>:
    3586:	0f 93       	push	r16
//	ExecuteGroup1Tests
//
//	Run device tests (Group 1)
//
bool TeaMachine::ExecuteGroup1Tests()
{
    3588:	1f 93       	push	r17
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	8c 01       	movw	r16, r24
	bool bResult = false;
	Boiler *pBoilerUnderTest = NULL;
	TeaMachineComponent *pComponentUnderTest = NULL;
	
	// Fetch test code
	m_nTestCode = GetSystem()->ReadInputRegisterData() & INREGMASK_MODE;
    3590:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3594:	06 de       	rcall	.-1012   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    3596:	8f 70       	andi	r24, 0x0F	; 15
    3598:	99 27       	eor	r25, r25
    359a:	d8 01       	movw	r26, r16
    359c:	17 96       	adiw	r26, 0x07	; 7
    359e:	9c 93       	st	X, r25
    35a0:	8e 93       	st	-X, r24
    35a2:	16 97       	sbiw	r26, 0x06	; 6
	
	Serial.print("Test code: ");
    35a4:	66 ef       	ldi	r22, 0xF6	; 246
    35a6:	76 e0       	ldi	r23, 0x06	; 6
    35a8:	81 e1       	ldi	r24, 0x11	; 17
    35aa:	9a e0       	ldi	r25, 0x0A	; 10
    35ac:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
	Serial.println(m_nTestCode);
    35b0:	f8 01       	movw	r30, r16
    35b2:	66 81       	ldd	r22, Z+6	; 0x06
    35b4:	77 81       	ldd	r23, Z+7	; 0x07
    35b6:	4a e0       	ldi	r20, 0x0A	; 10
    35b8:	50 e0       	ldi	r21, 0x00	; 0
    35ba:	81 e1       	ldi	r24, 0x11	; 17
    35bc:	9a e0       	ldi	r25, 0x0A	; 10
    35be:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <_ZN5Print7printlnEji>
	
	// Display test information
	Display *pDisplay = new Display(this);
    35c2:	86 e3       	ldi	r24, 0x36	; 54
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    35ca:	ec 01       	movw	r28, r24
    35cc:	b8 01       	movw	r22, r16
    35ce:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7DisplayC1EP10TeaMachine>
	pDisplay->Initialise();
    35d2:	ce 01       	movw	r24, r28
    35d4:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN7Display10InitialiseEv>
	pDisplay->Set( IndicatorDrinkName1, 'T');
    35d8:	44 e5       	ldi	r20, 0x54	; 84
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	ce 01       	movw	r24, r28
    35de:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName2, 'E');
    35e2:	45 e4       	ldi	r20, 0x45	; 69
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	ce 01       	movw	r24, r28
    35e8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName3, 'S');
    35ec:	43 e5       	ldi	r20, 0x53	; 83
    35ee:	62 e0       	ldi	r22, 0x02	; 2
    35f0:	ce 01       	movw	r24, r28
    35f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorDrinkName4, 'T');
    35f6:	44 e5       	ldi	r20, 0x54	; 84
    35f8:	63 e0       	ldi	r22, 0x03	; 3
    35fa:	ce 01       	movw	r24, r28
    35fc:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	pDisplay->Set( IndicatorMilkLevel, 1 );
    3600:	41 e0       	ldi	r20, 0x01	; 1
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	61 e0       	ldi	r22, 0x01	; 1
    3606:	ce 01       	movw	r24, r28
    3608:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	pDisplay->Set( IndicatorSugarLevel, m_nTestCode );
    360c:	d8 01       	movw	r26, r16
    360e:	16 96       	adiw	r26, 0x06	; 6
    3610:	4d 91       	ld	r20, X+
    3612:	5c 91       	ld	r21, X
    3614:	17 97       	sbiw	r26, 0x07	; 7
    3616:	62 e0       	ldi	r22, 0x02	; 2
    3618:	ce 01       	movw	r24, r28
    361a:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	pDisplay->Update();
    361e:	ce 01       	movw	r24, r28
    3620:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>
	delete pDisplay;
    3624:	20 97       	sbiw	r28, 0x00	; 0
    3626:	31 f0       	breq	.+12     	; 0x3634 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xae>
    3628:	ce 01       	movw	r24, r28
    362a:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN7DisplayD1Ev>
    362e:	ce 01       	movw	r24, r28
    3630:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
	
	// Initiate processing according to system operating mode
	switch(m_nTestCode)
    3634:	d8 01       	movw	r26, r16
    3636:	16 96       	adiw	r26, 0x06	; 6
    3638:	ed 91       	ld	r30, X+
    363a:	fc 91       	ld	r31, X
    363c:	17 97       	sbiw	r26, 0x07	; 7
    363e:	31 97       	sbiw	r30, 0x01	; 1
    3640:	ec 30       	cpi	r30, 0x0C	; 12
    3642:	f1 05       	cpc	r31, r1
    3644:	08 f0       	brcs	.+2      	; 0x3648 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xc2>
    3646:	a2 c0       	rjmp	.+324    	; 0x378c <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x206>
    3648:	88 27       	eor	r24, r24
    364a:	e9 56       	subi	r30, 0x69	; 105
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	8f 4f       	sbci	r24, 0xFF	; 255
    3650:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__tablejump2__>
	{
		case TESTCODE_EXTRACTOR:
		pComponentUnderTest = new Extractor(this);
    3654:	86 e0       	ldi	r24, 0x06	; 6
    3656:	90 e0       	ldi	r25, 0x00	; 0
    3658:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    365c:	ec 01       	movw	r28, r24
    365e:	b8 01       	movw	r22, r16
    3660:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <_ZN9ExtractorC1EP10TeaMachine>
    3664:	08 c0       	rjmp	.+16     	; 0x3676 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xf0>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_BAGCONVEYOR:
		pComponentUnderTest = new BagConveyor(this);
    3666:	86 e0       	ldi	r24, 0x06	; 6
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    366e:	ec 01       	movw	r28, r24
    3670:	b8 01       	movw	r22, r16
    3672:	0e 94 47 02 	call	0x48e	; 0x48e <_ZN11BagConveyorC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    3676:	ce 01       	movw	r24, r28
    3678:	f3 d0       	rcall	.+486    	; 0x3860 <_ZN19TeaMachineComponent10InitialiseEv>
    367a:	4b c0       	rjmp	.+150    	; 0x3712 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x18c>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_MASHER:
		pComponentUnderTest = new Masher(this);
    367c:	87 e0       	ldi	r24, 0x07	; 7
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    3684:	ec 01       	movw	r28, r24
    3686:	b8 01       	movw	r22, r16
    3688:	0e 94 6f 11 	call	0x22de	; 0x22de <_ZN6MasherC1EP10TeaMachine>
    368c:	f4 cf       	rjmp	.-24     	; 0x3676 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xf0>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_BOILERCNTRL:
		pComponentUnderTest = new Boiler(this);
    368e:	8a e0       	ldi	r24, 0x0A	; 10
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    3696:	ec 01       	movw	r28, r24
    3698:	b8 01       	movw	r22, r16
    369a:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN6BoilerC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    369e:	ce 01       	movw	r24, r28
    36a0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN6Boiler10InitialiseEv>
    36a4:	36 c0       	rjmp	.+108    	; 0x3712 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x18c>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_WATERVALVE:
		pBoilerUnderTest = new Boiler(this);
    36a6:	8a e0       	ldi	r24, 0x0A	; 10
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    36ae:	ec 01       	movw	r28, r24
    36b0:	b8 01       	movw	r22, r16
    36b2:	0e 94 a0 02 	call	0x540	; 0x540 <_ZN6BoilerC1EP10TeaMachine>
		pBoilerUnderTest->Initialise();
    36b6:	ce 01       	movw	r24, r28
    36b8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <_ZN6Boiler10InitialiseEv>
		bResult = pBoilerUnderTest->TestExitValve();
    36bc:	ce 01       	movw	r24, r28
    36be:	0e 94 2d 03 	call	0x65a	; 0x65a <_ZN6Boiler13TestExitValveEv>
    36c2:	18 2f       	mov	r17, r24
		delete pBoilerUnderTest;
    36c4:	20 97       	sbiw	r28, 0x00	; 0
    36c6:	09 f4       	brne	.+2      	; 0x36ca <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x144>
    36c8:	62 c0       	rjmp	.+196    	; 0x378e <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x208>
    36ca:	ce 01       	movw	r24, r28
    36cc:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN6BoilerD1Ev>
    36d0:	59 c0       	rjmp	.+178    	; 0x3784 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1fe>
		break;
		
		case TESTCODE_CUPCONVEYOR:
		pComponentUnderTest = new CupConveyor(this);
    36d2:	86 e0       	ldi	r24, 0x06	; 6
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    36da:	ec 01       	movw	r28, r24
    36dc:	b8 01       	movw	r22, r16
    36de:	0e 94 02 08 	call	0x1004	; 0x1004 <_ZN11CupConveyorC1EP10TeaMachine>
    36e2:	c9 cf       	rjmp	.-110    	; 0x3676 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xf0>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;

		case TESTCODE_CUPLEVELARM:
		pComponentUnderTest = new CupLevelProbe(this);
    36e4:	86 e0       	ldi	r24, 0x06	; 6
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    36ec:	ec 01       	movw	r28, r24
    36ee:	b8 01       	movw	r22, r16
    36f0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <_ZN13CupLevelProbeC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    36f4:	ce 01       	movw	r24, r28
    36f6:	0e 94 58 09 	call	0x12b0	; 0x12b0 <_ZN13CupLevelProbe10InitialiseEv>
    36fa:	0b c0       	rjmp	.+22     	; 0x3712 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x18c>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_DISPLAY:
		pComponentUnderTest = new Display(this);
    36fc:	86 e3       	ldi	r24, 0x36	; 54
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    3704:	ec 01       	movw	r28, r24
    3706:	b8 01       	movw	r22, r16
    3708:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7DisplayC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    370c:	ce 01       	movw	r24, r28
    370e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN7Display10InitialiseEv>
		bResult = pComponentUnderTest->Test();
    3712:	e8 81       	ld	r30, Y
    3714:	f9 81       	ldd	r31, Y+1	; 0x01
    3716:	02 80       	ldd	r0, Z+2	; 0x02
    3718:	f3 81       	ldd	r31, Z+3	; 0x03
    371a:	e0 2d       	mov	r30, r0
    371c:	ce 01       	movw	r24, r28
    371e:	19 95       	eicall
    3720:	18 2f       	mov	r17, r24
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
	} // switch
	
	if( pComponentUnderTest != NULL )
    3722:	20 97       	sbiw	r28, 0x00	; 0
	{
		delete pComponentUnderTest;
    3724:	a1 f1       	breq	.+104    	; 0x378e <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x208>
    3726:	ce 01       	movw	r24, r28
    3728:	b8 d0       	rcall	.+368    	; 0x389a <_ZN19TeaMachineComponentD1Ev>
    372a:	2c c0       	rjmp	.+88     	; 0x3784 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x1fe>
		pComponentUnderTest->Initialise();
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_CUPDETECTOR:
		pComponentUnderTest = new CupDetector(this);
    372c:	8a e1       	ldi	r24, 0x1A	; 26
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    3734:	ec 01       	movw	r28, r24
    3736:	b8 01       	movw	r22, r16
    3738:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN11CupDetectorC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    373c:	ce 01       	movw	r24, r28
    373e:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN11CupDetector10InitialiseEv>
    3742:	e7 cf       	rjmp	.-50     	; 0x3712 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x18c>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_USERCONTROLS:
		pComponentUnderTest = new UserControls(this);
    3744:	8d e2       	ldi	r24, 0x2D	; 45
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    374c:	ec 01       	movw	r28, r24
    374e:	b8 01       	movw	r22, r16
    3750:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <_ZN12UserControlsC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    3754:	ce 01       	movw	r24, r28
    3756:	0e 94 db 27 	call	0x4fb6	; 0x4fb6 <_ZN12UserControls10InitialiseEv>
    375a:	db cf       	rjmp	.-74     	; 0x3712 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x18c>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_MILKDISPENSER:
		pComponentUnderTest = new MilkDispenser(this);
    375c:	86 e0       	ldi	r24, 0x06	; 6
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    3764:	ec 01       	movw	r28, r24
    3766:	b8 01       	movw	r22, r16
    3768:	0e 94 e6 11 	call	0x23cc	; 0x23cc <_ZN13MilkDispenserC1EP10TeaMachine>
		pComponentUnderTest->Initialise();
    376c:	ce 01       	movw	r24, r28
    376e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <_ZN13MilkDispenser10InitialiseEv>
    3772:	cf cf       	rjmp	.-98     	; 0x3712 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x18c>
		bResult = pComponentUnderTest->Test();
		break;
		
		case TESTCODE_STIRRER:
		pComponentUnderTest = new Stirrer(this);
    3774:	86 e0       	ldi	r24, 0x06	; 6
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    377c:	ec 01       	movw	r28, r24
    377e:	b8 01       	movw	r22, r16
    3780:	7d dc       	rcall	.-1798   	; 0x307c <_ZN7StirrerC1EP10TeaMachine>
    3782:	79 cf       	rjmp	.-270    	; 0x3676 <_ZN10TeaMachine18ExecuteGroup1TestsEv+0xf0>
		break;
	} // switch
	
	if( pComponentUnderTest != NULL )
	{
		delete pComponentUnderTest;
    3784:	ce 01       	movw	r24, r28
    3786:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
    378a:	01 c0       	rjmp	.+2      	; 0x378e <_ZN10TeaMachine18ExecuteGroup1TestsEv+0x208>
//
//	Run device tests (Group 1)
//
bool TeaMachine::ExecuteGroup1Tests()
{
	bool bResult = false;
    378c:	10 e0       	ldi	r17, 0x00	; 0
	{
		delete pComponentUnderTest;
	}

	return bResult;
}
    378e:	81 2f       	mov	r24, r17
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	08 95       	ret

0000379a <_ZN10TeaMachine7ProcessEv>:

//
//	Main process loop
//
void TeaMachine::Process()
{
    379a:	ef 92       	push	r14
    379c:	ff 92       	push	r15
    379e:	0f 93       	push	r16
    37a0:	1f 93       	push	r17
    37a2:	cf 93       	push	r28
    37a4:	df 93       	push	r29
    37a6:	cd b7       	in	r28, 0x3d	; 61
    37a8:	de b7       	in	r29, 0x3e	; 62
    37aa:	aa 97       	sbiw	r28, 0x2a	; 42
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	8c 01       	movw	r16, r24
 	TeaMachineController controller(this);
    37b8:	bc 01       	movw	r22, r24
    37ba:	ce 01       	movw	r24, r28
    37bc:	01 96       	adiw	r24, 0x01	; 1
    37be:	89 d0       	rcall	.+274    	; 0x38d2 <_ZN20TeaMachineControllerC1EP10TeaMachine>
    
    // Clear LED displays
    Display *pDisplay = new Display(this);
    37c0:	86 e3       	ldi	r24, 0x36	; 54
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    37c8:	7c 01       	movw	r14, r24
    37ca:	b8 01       	movw	r22, r16
    37cc:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7DisplayC1EP10TeaMachine>
	pDisplay->Initialise();
    37d0:	c7 01       	movw	r24, r14
    37d2:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN7Display10InitialiseEv>
    delete pDisplay;
    37d6:	e1 14       	cp	r14, r1
    37d8:	f1 04       	cpc	r15, r1
    37da:	31 f0       	breq	.+12     	; 0x37e8 <_ZN10TeaMachine7ProcessEv+0x4e>
    37dc:	c7 01       	movw	r24, r14
    37de:	0e 94 95 0c 	call	0x192a	; 0x192a <_ZN7DisplayD1Ev>
    37e2:	c7 01       	movw	r24, r14
    37e4:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
    
	switch( m_nSystemMode )
    37e8:	f8 01       	movw	r30, r16
    37ea:	84 81       	ldd	r24, Z+4	; 0x04
    37ec:	95 81       	ldd	r25, Z+5	; 0x05
    37ee:	81 30       	cpi	r24, 0x01	; 1
    37f0:	91 05       	cpc	r25, r1
    37f2:	51 f0       	breq	.+20     	; 0x3808 <_ZN10TeaMachine7ProcessEv+0x6e>
    37f4:	38 f0       	brcs	.+14     	; 0x3804 <_ZN10TeaMachine7ProcessEv+0x6a>
    37f6:	82 30       	cpi	r24, 0x02	; 2
    37f8:	91 05       	cpc	r25, r1
    37fa:	49 f0       	breq	.+18     	; 0x380e <_ZN10TeaMachine7ProcessEv+0x74>
    37fc:	03 97       	sbiw	r24, 0x03	; 3
    37fe:	69 f4       	brne	.+26     	; 0x381a <_ZN10TeaMachine7ProcessEv+0x80>
		case SYSMODE_TESTGROUP2:
			ExecuteGroup2Tests();
			break;
		
		case SYSMODE_LOAD:
			controller.Start(ControllerMode_Load);
    3800:	67 e0       	ldi	r22, 0x07	; 7
    3802:	08 c0       	rjmp	.+16     	; 0x3814 <_ZN10TeaMachine7ProcessEv+0x7a>
    delete pDisplay;
    
	switch( m_nSystemMode )
	{
		case SYSMODE_NORMAL:
			controller.Start(ControllerMode_InService);
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	06 c0       	rjmp	.+12     	; 0x3814 <_ZN10TeaMachine7ProcessEv+0x7a>
			break;
		
		case SYSMODE_TESTGROUP1:
			ExecuteGroup1Tests();
    3808:	c8 01       	movw	r24, r16
    380a:	bd de       	rcall	.-646    	; 0x3586 <_ZN10TeaMachine18ExecuteGroup1TestsEv>
			break;
		
		case SYSMODE_TESTGROUP2:
			ExecuteGroup2Tests();
    380c:	06 c0       	rjmp	.+12     	; 0x381a <_ZN10TeaMachine7ProcessEv+0x80>
    380e:	c8 01       	movw	r24, r16
    3810:	31 de       	rcall	.-926    	; 0x3474 <_ZN10TeaMachine18ExecuteGroup2TestsEv>
			break;
		
		case SYSMODE_LOAD:
			controller.Start(ControllerMode_Load);
    3812:	03 c0       	rjmp	.+6      	; 0x381a <_ZN10TeaMachine7ProcessEv+0x80>
    3814:	ce 01       	movw	r24, r28
    3816:	01 96       	adiw	r24, 0x01	; 1
			break;
	} // switch
	
	// Wait until system mode changes
	while( !GetSystem()->SystemModeHasChanged() );
    3818:	3c d6       	rcall	.+3192   	; 0x4492 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode>
    381a:	c8 01       	movw	r24, r16
    381c:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3820:	b8 dd       	rcall	.-1168   	; 0x3392 <_ZN6System20SystemModeHasChangedEv>
    3822:	88 23       	and	r24, r24
    3824:	d1 f3       	breq	.-12     	; 0x381a <_ZN10TeaMachine7ProcessEv+0x80>
	
	// Wait a while for the new code to settle
	delay( 500 );
    3826:	64 ef       	ldi	r22, 0xF4	; 244
    3828:	71 e0       	ldi	r23, 0x01	; 1
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	0e 94 bf 2f 	call	0x5f7e	; 0x5f7e <delay>
	
	m_nSystemMode = GetSystem()->ReadSystemMode();
    3832:	c8 01       	movw	r24, r16
    3834:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3838:	94 dd       	rcall	.-1240   	; 0x3362 <_ZN6System14ReadSystemModeEv>
    383a:	f8 01       	movw	r30, r16
    383c:	95 83       	std	Z+5, r25	; 0x05
//
//	Main process loop
//
void TeaMachine::Process()
{
 	TeaMachineController controller(this);
    383e:	84 83       	std	Z+4, r24	; 0x04
    3840:	ce 01       	movw	r24, r28
    3842:	01 96       	adiw	r24, 0x01	; 1
    3844:	2b d0       	rcall	.+86     	; 0x389c <_ZN20TeaMachineControllerD1Ev>
	
	// Wait a while for the new code to settle
	delay( 500 );
	
	m_nSystemMode = GetSystem()->ReadSystemMode();
}
    3846:	aa 96       	adiw	r28, 0x2a	; 42
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	df 91       	pop	r29
    3854:	cf 91       	pop	r28
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	ff 90       	pop	r15
    385c:	ef 90       	pop	r14
    385e:	08 95       	ret

00003860 <_ZN19TeaMachineComponent10InitialiseEv>:
//	Test an element of the tea machine
//
bool TeaMachineComponent::Test()
{
	return true;
}
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	08 95       	ret

00003864 <_ZN19TeaMachineComponentC1Ev>:
#include "TeaMachineComponent.h"

//
//	Class constructor
//
TeaMachineComponent::TeaMachineComponent()
    3864:	fc 01       	movw	r30, r24
    3866:	8e e0       	ldi	r24, 0x0E	; 14
    3868:	97 e0       	ldi	r25, 0x07	; 7
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	80 83       	st	Z, r24
{
	m_pTeaMachine = NULL;
    386e:	13 82       	std	Z+3, r1	; 0x03
    3870:	12 82       	std	Z+2, r1	; 0x02
	m_pSystem = NULL;
    3872:	15 82       	std	Z+5, r1	; 0x05
    3874:	14 82       	std	Z+4, r1	; 0x04
    3876:	08 95       	ret

00003878 <_ZN19TeaMachineComponentC1EP10TeaMachine>:
} //TeaMachineComponent

//
//	Class constructor
//
TeaMachineComponent::TeaMachineComponent(TeaMachine *pTeaMachine)
    3878:	cf 93       	push	r28
    387a:	df 93       	push	r29
    387c:	ec 01       	movw	r28, r24
    387e:	cb 01       	movw	r24, r22
    3880:	2e e0       	ldi	r18, 0x0E	; 14
    3882:	37 e0       	ldi	r19, 0x07	; 7
    3884:	39 83       	std	Y+1, r19	; 0x01
    3886:	28 83       	st	Y, r18
{
	m_pTeaMachine = pTeaMachine;
    3888:	7b 83       	std	Y+3, r23	; 0x03
    388a:	6a 83       	std	Y+2, r22	; 0x02
	m_pSystem = pTeaMachine->GetSystem();
    388c:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3890:	9d 83       	std	Y+5, r25	; 0x05
    3892:	8c 83       	std	Y+4, r24	; 0x04
} //TeaMachineComponent
    3894:	df 91       	pop	r29
    3896:	cf 91       	pop	r28
    3898:	08 95       	ret

0000389a <_ZN19TeaMachineComponentD1Ev>:

//
//	Class destructor
//
TeaMachineComponent::~TeaMachineComponent()
    389a:	08 95       	ret

0000389c <_ZN20TeaMachineControllerD1Ev>:
//
//  Find an unused drink ID and mark it as used
//
void TeaMachineController::ReleaseDrinkID( unsigned int nDrinkID )
{
    m_bDrinkIDAllocated[nDrinkID] = false;
    389c:	08 95       	ret

0000389e <_ZN20TeaMachineController12ClearMembersEv>:
    389e:	cf 93       	push	r28
    38a0:	df 93       	push	r29
    38a2:	fc 01       	movw	r30, r24
    38a4:	11 82       	std	Z+1, r1	; 0x01
    38a6:	10 82       	st	Z, r1
    38a8:	13 82       	std	Z+3, r1	; 0x03
    38aa:	12 82       	std	Z+2, r1	; 0x02
    38ac:	15 82       	std	Z+5, r1	; 0x05
    38ae:	14 82       	std	Z+4, r1	; 0x04
    38b0:	17 82       	std	Z+7, r1	; 0x07
    38b2:	16 82       	std	Z+6, r1	; 0x06
    38b4:	11 86       	std	Z+9, r1	; 0x09
    38b6:	10 86       	std	Z+8, r1	; 0x08
    38b8:	dc 01       	movw	r26, r24
    38ba:	1c 96       	adiw	r26, 0x0c	; 12
    38bc:	b0 96       	adiw	r30, 0x20	; 32
    38be:	ef 01       	movw	r28, r30
    38c0:	1d 92       	st	X+, r1
    38c2:	1d 92       	st	X+, r1
    38c4:	19 92       	st	Y+, r1
    38c6:	ae 17       	cp	r26, r30
    38c8:	bf 07       	cpc	r27, r31
    38ca:	d1 f7       	brne	.-12     	; 0x38c0 <_ZN20TeaMachineController12ClearMembersEv+0x22>
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	08 95       	ret

000038d2 <_ZN20TeaMachineControllerC1EP10TeaMachine>:
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	ec 01       	movw	r28, r24
    38dc:	8b 01       	movw	r16, r22
    38de:	df df       	rcall	.-66     	; 0x389e <_ZN20TeaMachineController12ClearMembersEv>
    38e0:	1b 87       	std	Y+11, r17	; 0x0b
    38e2:	0a 87       	std	Y+10, r16	; 0x0a
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	1f 91       	pop	r17
    38ea:	0f 91       	pop	r16
    38ec:	08 95       	ret

000038ee <_ZN20TeaMachineController13GetTeaMachineEv>:
    38ee:	fc 01       	movw	r30, r24
    38f0:	82 85       	ldd	r24, Z+10	; 0x0a
    38f2:	93 85       	ldd	r25, Z+11	; 0x0b
    38f4:	08 95       	ret

000038f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>:
    38f6:	6a 5f       	subi	r22, 0xFA	; 250
    38f8:	7f 4f       	sbci	r23, 0xFF	; 255
    38fa:	66 0f       	add	r22, r22
    38fc:	77 1f       	adc	r23, r23
    38fe:	86 0f       	add	r24, r22
    3900:	97 1f       	adc	r25, r23
    3902:	dc 01       	movw	r26, r24
    3904:	ed 91       	ld	r30, X+
    3906:	fc 91       	ld	r31, X
    3908:	30 97       	sbiw	r30, 0x00	; 0
    390a:	29 f0       	breq	.+10     	; 0x3916 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState+0x20>
    390c:	81 81       	ldd	r24, Z+1	; 0x01
    390e:	48 13       	cpse	r20, r24
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState+0x20>
    3912:	87 85       	ldd	r24, Z+15	; 0x0f
    3914:	08 95       	ret
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	08 95       	ret

0000391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>:
    391a:	6a 5f       	subi	r22, 0xFA	; 250
    391c:	7f 4f       	sbci	r23, 0xFF	; 255
    391e:	66 0f       	add	r22, r22
    3920:	77 1f       	adc	r23, r23
    3922:	86 0f       	add	r24, r22
    3924:	97 1f       	adc	r25, r23
    3926:	dc 01       	movw	r26, r24
    3928:	ed 91       	ld	r30, X+
    392a:	fc 91       	ld	r31, X
    392c:	30 97       	sbiw	r30, 0x00	; 0
    392e:	21 f0       	breq	.+8      	; 0x3938 <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi+0x1e>
    3930:	97 85       	ldd	r25, Z+15	; 0x0f
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	89 27       	eor	r24, r25
    3936:	08 95       	ret
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	08 95       	ret

0000393c <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv>:
    393c:	0f 93       	push	r16
    393e:	1f 93       	push	r17
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	ec 01       	movw	r28, r24
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	63 e0       	ldi	r22, 0x03	; 3
    394a:	70 e0       	ldi	r23, 0x00	; 0
    394c:	d4 df       	rcall	.-88     	; 0x38f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    394e:	18 2f       	mov	r17, r24
    3950:	88 23       	and	r24, r24
    3952:	31 f0       	breq	.+12     	; 0x3960 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x24>
    3954:	64 e0       	ldi	r22, 0x04	; 4
    3956:	70 e0       	ldi	r23, 0x00	; 0
    3958:	ce 01       	movw	r24, r28
    395a:	df df       	rcall	.-66     	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    395c:	11 e0       	ldi	r17, 0x01	; 1
    395e:	18 27       	eor	r17, r24
    3960:	40 e0       	ldi	r20, 0x00	; 0
    3962:	62 e0       	ldi	r22, 0x02	; 2
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	ce 01       	movw	r24, r28
    3968:	c6 df       	rcall	.-116    	; 0x38f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    396a:	88 23       	and	r24, r24
    396c:	71 f0       	breq	.+28     	; 0x398a <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x4e>
    396e:	64 e0       	ldi	r22, 0x04	; 4
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	ce 01       	movw	r24, r28
    3974:	d2 df       	rcall	.-92     	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    3976:	81 11       	cpse	r24, r1
    3978:	07 c0       	rjmp	.+14     	; 0x3988 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x4c>
    397a:	63 e0       	ldi	r22, 0x03	; 3
    397c:	70 e0       	ldi	r23, 0x00	; 0
    397e:	ce 01       	movw	r24, r28
    3980:	cc df       	rcall	.-104    	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    3982:	91 e0       	ldi	r25, 0x01	; 1
    3984:	89 27       	eor	r24, r25
    3986:	01 c0       	rjmp	.+2      	; 0x398a <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x4e>
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	18 2b       	or	r17, r24
    398c:	40 e0       	ldi	r20, 0x00	; 0
    398e:	61 e0       	ldi	r22, 0x01	; 1
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	ce 01       	movw	r24, r28
    3994:	b0 df       	rcall	.-160    	; 0x38f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    3996:	08 2f       	mov	r16, r24
    3998:	88 23       	and	r24, r24
    399a:	a9 f0       	breq	.+42     	; 0x39c6 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x8a>
    399c:	64 e0       	ldi	r22, 0x04	; 4
    399e:	70 e0       	ldi	r23, 0x00	; 0
    39a0:	ce 01       	movw	r24, r28
    39a2:	bb df       	rcall	.-138    	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    39a4:	08 2f       	mov	r16, r24
    39a6:	81 11       	cpse	r24, r1
    39a8:	0d c0       	rjmp	.+26     	; 0x39c4 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x88>
    39aa:	63 e0       	ldi	r22, 0x03	; 3
    39ac:	70 e0       	ldi	r23, 0x00	; 0
    39ae:	ce 01       	movw	r24, r28
    39b0:	b4 df       	rcall	.-152    	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    39b2:	81 11       	cpse	r24, r1
    39b4:	08 c0       	rjmp	.+16     	; 0x39c6 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x8a>
    39b6:	62 e0       	ldi	r22, 0x02	; 2
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	ce 01       	movw	r24, r28
    39bc:	ae df       	rcall	.-164    	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    39be:	01 e0       	ldi	r16, 0x01	; 1
    39c0:	08 27       	eor	r16, r24
    39c2:	01 c0       	rjmp	.+2      	; 0x39c6 <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv+0x8a>
    39c4:	00 e0       	ldi	r16, 0x00	; 0
    39c6:	80 2f       	mov	r24, r16
    39c8:	81 2b       	or	r24, r17
    39ca:	df 91       	pop	r29
    39cc:	cf 91       	pop	r28
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	08 95       	ret

000039d4 <_ZN20TeaMachineController30PreparationStationsAreInactiveEv>:
    39d4:	fc 01       	movw	r30, r24
    39d6:	a2 81       	ldd	r26, Z+2	; 0x02
    39d8:	b3 81       	ldd	r27, Z+3	; 0x03
    39da:	56 96       	adiw	r26, 0x16	; 22
    39dc:	8c 91       	ld	r24, X
    39de:	88 23       	and	r24, r24
    39e0:	69 f0       	breq	.+26     	; 0x39fc <_ZN20TeaMachineController30PreparationStationsAreInactiveEv+0x28>
    39e2:	a4 81       	ldd	r26, Z+4	; 0x04
    39e4:	b5 81       	ldd	r27, Z+5	; 0x05
    39e6:	56 96       	adiw	r26, 0x16	; 22
    39e8:	8c 91       	ld	r24, X
    39ea:	88 23       	and	r24, r24
    39ec:	39 f0       	breq	.+14     	; 0x39fc <_ZN20TeaMachineController30PreparationStationsAreInactiveEv+0x28>
    39ee:	06 80       	ldd	r0, Z+6	; 0x06
    39f0:	f7 81       	ldd	r31, Z+7	; 0x07
    39f2:	e0 2d       	mov	r30, r0
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	96 89       	ldd	r25, Z+22	; 0x16
    39f8:	91 11       	cpse	r25, r1
    39fa:	01 c0       	rjmp	.+2      	; 0x39fe <_ZN20TeaMachineController30PreparationStationsAreInactiveEv+0x2a>
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	08 95       	ret

00003a00 <_ZN20TeaMachineController16NotifyCupRemovalEj>:
    3a00:	0f 93       	push	r16
    3a02:	1f 93       	push	r17
    3a04:	cf 93       	push	r28
    3a06:	df 93       	push	r29
    3a08:	eb 01       	movw	r28, r22
    3a0a:	cc 0f       	add	r28, r28
    3a0c:	dd 1f       	adc	r29, r29
    3a0e:	c8 0f       	add	r28, r24
    3a10:	d9 1f       	adc	r29, r25
    3a12:	0c 85       	ldd	r16, Y+12	; 0x0c
    3a14:	1d 85       	ldd	r17, Y+13	; 0x0d
    3a16:	01 15       	cp	r16, r1
    3a18:	11 05       	cpc	r17, r1
    3a1a:	79 f0       	breq	.+30     	; 0x3a3a <_ZN20TeaMachineController16NotifyCupRemovalEj+0x3a>
    3a1c:	f8 01       	movw	r30, r16
    3a1e:	25 85       	ldd	r18, Z+13	; 0x0d
    3a20:	36 85       	ldd	r19, Z+14	; 0x0e
    3a22:	fc 01       	movw	r30, r24
    3a24:	e2 0f       	add	r30, r18
    3a26:	f3 1f       	adc	r31, r19
    3a28:	10 a2       	std	Z+32, r1	; 0x20
    3a2a:	c8 01       	movw	r24, r16
    3a2c:	0e 94 97 10 	call	0x212e	; 0x212e <_ZN5DrinkD1Ev>
    3a30:	c8 01       	movw	r24, r16
    3a32:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
    3a36:	1d 86       	std	Y+13, r1	; 0x0d
    3a38:	1c 86       	std	Y+12, r1	; 0x0c
    3a3a:	df 91       	pop	r29
    3a3c:	cf 91       	pop	r28
    3a3e:	1f 91       	pop	r17
    3a40:	0f 91       	pop	r16
    3a42:	08 95       	ret

00003a44 <_ZN20TeaMachineController15AllocateDrinkIDEv>:
    3a44:	fc 01       	movw	r30, r24
    3a46:	b1 96       	adiw	r30, 0x21	; 33
    3a48:	20 e0       	ldi	r18, 0x00	; 0
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	2f 5f       	subi	r18, 0xFF	; 255
    3a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a50:	2a 30       	cpi	r18, 0x0A	; 10
    3a52:	31 05       	cpc	r19, r1
    3a54:	19 f0       	breq	.+6      	; 0x3a5c <_ZN20TeaMachineController15AllocateDrinkIDEv+0x18>
    3a56:	41 91       	ld	r20, Z+
    3a58:	41 11       	cpse	r20, r1
    3a5a:	f8 cf       	rjmp	.-16     	; 0x3a4c <_ZN20TeaMachineController15AllocateDrinkIDEv+0x8>
    3a5c:	fc 01       	movw	r30, r24
    3a5e:	e2 0f       	add	r30, r18
    3a60:	f3 1f       	adc	r31, r19
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	40 a3       	std	Z+32, r20	; 0x20
    3a66:	c9 01       	movw	r24, r18
    3a68:	08 95       	ret

00003a6a <_ZN20TeaMachineController21NotifyNewDrinkRequestEj>:
    3a6a:	ef 92       	push	r14
    3a6c:	ff 92       	push	r15
    3a6e:	0f 93       	push	r16
    3a70:	1f 93       	push	r17
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	7c 01       	movw	r14, r24
    3a78:	eb 01       	movw	r28, r22
    3a7a:	cc 0f       	add	r28, r28
    3a7c:	dd 1f       	adc	r29, r29
    3a7e:	ce 0d       	add	r28, r14
    3a80:	df 1d       	adc	r29, r15
    3a82:	0c 85       	ldd	r16, Y+12	; 0x0c
    3a84:	1d 85       	ldd	r17, Y+13	; 0x0d
    3a86:	01 15       	cp	r16, r1
    3a88:	11 05       	cpc	r17, r1
    3a8a:	31 f0       	breq	.+12     	; 0x3a98 <_ZN20TeaMachineController21NotifyNewDrinkRequestEj+0x2e>
    3a8c:	c8 01       	movw	r24, r16
    3a8e:	0e 94 97 10 	call	0x212e	; 0x212e <_ZN5DrinkD1Ev>
    3a92:	c8 01       	movw	r24, r16
    3a94:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
    3a98:	c7 01       	movw	r24, r14
    3a9a:	d4 df       	rcall	.-88     	; 0x3a44 <_ZN20TeaMachineController15AllocateDrinkIDEv>
    3a9c:	7c 01       	movw	r14, r24
    3a9e:	83 e1       	ldi	r24, 0x13	; 19
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    3aa6:	8c 01       	movw	r16, r24
    3aa8:	b7 01       	movw	r22, r14
    3aaa:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN5DrinkC1Ej>
    3aae:	1d 87       	std	Y+13, r17	; 0x0d
    3ab0:	0c 87       	std	Y+12, r16	; 0x0c
    3ab2:	c8 01       	movw	r24, r16
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	08 95       	ret

00003ac2 <_ZN20TeaMachineController17GetDrinkByStationEi>:
    3ac2:	6a 5f       	subi	r22, 0xFA	; 250
    3ac4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ac6:	66 0f       	add	r22, r22
    3ac8:	77 1f       	adc	r23, r23
    3aca:	86 0f       	add	r24, r22
    3acc:	97 1f       	adc	r25, r23
    3ace:	fc 01       	movw	r30, r24
    3ad0:	80 81       	ld	r24, Z
    3ad2:	91 81       	ldd	r25, Z+1	; 0x01
    3ad4:	08 95       	ret

00003ad6 <_ZN20TeaMachineController12GetNextDrinkEv>:
    3ad6:	dc 01       	movw	r26, r24
    3ad8:	1e 96       	adiw	r26, 0x0e	; 14
    3ada:	ac 01       	movw	r20, r24
    3adc:	40 5e       	subi	r20, 0xE0	; 224
    3ade:	5f 4f       	sbci	r21, 0xFF	; 255
    3ae0:	80 e0       	ldi	r24, 0x00	; 0
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	ed 91       	ld	r30, X+
    3aea:	fd 91       	ld	r31, X+
    3aec:	30 97       	sbiw	r30, 0x00	; 0
    3aee:	49 f0       	breq	.+18     	; 0x3b02 <_ZN20TeaMachineController12GetNextDrinkEv+0x2c>
    3af0:	61 81       	ldd	r22, Z+1	; 0x01
    3af2:	64 30       	cpi	r22, 0x04	; 4
    3af4:	31 f0       	breq	.+12     	; 0x3b02 <_ZN20TeaMachineController12GetNextDrinkEv+0x2c>
    3af6:	67 85       	ldd	r22, Z+15	; 0x0f
    3af8:	61 11       	cpse	r22, r1
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <_ZN20TeaMachineController12GetNextDrinkEv+0x2a>
    3afc:	9f 01       	movw	r18, r30
    3afe:	01 c0       	rjmp	.+2      	; 0x3b02 <_ZN20TeaMachineController12GetNextDrinkEv+0x2c>
    3b00:	cf 01       	movw	r24, r30
    3b02:	a4 17       	cp	r26, r20
    3b04:	b5 07       	cpc	r27, r21
    3b06:	81 f7       	brne	.-32     	; 0x3ae8 <_ZN20TeaMachineController12GetNextDrinkEv+0x12>
    3b08:	21 15       	cp	r18, r1
    3b0a:	31 05       	cpc	r19, r1
    3b0c:	09 f0       	breq	.+2      	; 0x3b10 <_ZN20TeaMachineController12GetNextDrinkEv+0x3a>
    3b0e:	c9 01       	movw	r24, r18
    3b10:	08 95       	ret

00003b12 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink>:
    3b12:	af 92       	push	r10
    3b14:	bf 92       	push	r11
    3b16:	cf 92       	push	r12
    3b18:	df 92       	push	r13
    3b1a:	ef 92       	push	r14
    3b1c:	ff 92       	push	r15
    3b1e:	0f 93       	push	r16
    3b20:	1f 93       	push	r17
    3b22:	cf 93       	push	r28
    3b24:	df 93       	push	r29
    3b26:	7c 01       	movw	r14, r24
    3b28:	8b 01       	movw	r16, r22
    3b2a:	62 e1       	ldi	r22, 0x12	; 18
    3b2c:	77 e0       	ldi	r23, 0x07	; 7
    3b2e:	81 e1       	ldi	r24, 0x11	; 17
    3b30:	9a e0       	ldi	r25, 0x0A	; 10
    3b32:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3b36:	d8 01       	movw	r26, r16
    3b38:	1d 96       	adiw	r26, 0x0d	; 13
    3b3a:	6d 91       	ld	r22, X+
    3b3c:	7c 91       	ld	r23, X
    3b3e:	1e 97       	sbiw	r26, 0x0e	; 14
    3b40:	4a e0       	ldi	r20, 0x0A	; 10
    3b42:	50 e0       	ldi	r21, 0x00	; 0
    3b44:	81 e1       	ldi	r24, 0x11	; 17
    3b46:	9a e0       	ldi	r25, 0x0A	; 10
    3b48:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    3b4c:	65 ef       	ldi	r22, 0xF5	; 245
    3b4e:	79 e0       	ldi	r23, 0x09	; 9
    3b50:	81 e1       	ldi	r24, 0x11	; 17
    3b52:	9a e0       	ldi	r25, 0x0A	; 10
    3b54:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3b58:	f8 01       	movw	r30, r16
    3b5a:	81 81       	ldd	r24, Z+1	; 0x01
    3b5c:	84 30       	cpi	r24, 0x04	; 4
    3b5e:	09 f4       	brne	.+2      	; 0x3b62 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x50>
    3b60:	42 c0       	rjmp	.+132    	; 0x3be6 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0xd4>
    3b62:	e7 01       	movw	r28, r14
    3b64:	57 01       	movw	r10, r14
    3b66:	f0 e1       	ldi	r31, 0x10	; 16
    3b68:	af 0e       	add	r10, r31
    3b6a:	b1 1c       	adc	r11, r1
    3b6c:	78 01       	movw	r14, r16
    3b6e:	68 01       	movw	r12, r16
    3b70:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b72:	9f 85       	ldd	r25, Y+15	; 0x0f
    3b74:	89 2b       	or	r24, r25
    3b76:	39 f1       	breq	.+78     	; 0x3bc6 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0xb4>
    3b78:	61 e3       	ldi	r22, 0x31	; 49
    3b7a:	77 e0       	ldi	r23, 0x07	; 7
    3b7c:	81 e1       	ldi	r24, 0x11	; 17
    3b7e:	9a e0       	ldi	r25, 0x0A	; 10
    3b80:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3b84:	ee 85       	ldd	r30, Y+14	; 0x0e
    3b86:	ff 85       	ldd	r31, Y+15	; 0x0f
    3b88:	65 85       	ldd	r22, Z+13	; 0x0d
    3b8a:	76 85       	ldd	r23, Z+14	; 0x0e
    3b8c:	4a e0       	ldi	r20, 0x0A	; 10
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	81 e1       	ldi	r24, 0x11	; 17
    3b92:	9a e0       	ldi	r25, 0x0A	; 10
    3b94:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    3b98:	65 ef       	ldi	r22, 0xF5	; 245
    3b9a:	79 e0       	ldi	r23, 0x09	; 9
    3b9c:	81 e1       	ldi	r24, 0x11	; 17
    3b9e:	9a e0       	ldi	r25, 0x0A	; 10
    3ba0:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3ba4:	ee 85       	ldd	r30, Y+14	; 0x0e
    3ba6:	ff 85       	ldd	r31, Y+15	; 0x0f
    3ba8:	25 85       	ldd	r18, Z+13	; 0x0d
    3baa:	36 85       	ldd	r19, Z+14	; 0x0e
    3bac:	d8 01       	movw	r26, r16
    3bae:	1d 96       	adiw	r26, 0x0d	; 13
    3bb0:	8d 91       	ld	r24, X+
    3bb2:	9c 91       	ld	r25, X
    3bb4:	1e 97       	sbiw	r26, 0x0e	; 14
    3bb6:	28 17       	cp	r18, r24
    3bb8:	39 07       	cpc	r19, r25
    3bba:	19 f4       	brne	.+6      	; 0x3bc2 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0xb0>
    3bbc:	81 81       	ldd	r24, Z+1	; 0x01
    3bbe:	84 30       	cpi	r24, 0x04	; 4
    3bc0:	f1 f4       	brne	.+60     	; 0x3bfe <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0xec>
    3bc2:	ee 84       	ldd	r14, Y+14	; 0x0e
    3bc4:	ff 84       	ldd	r15, Y+15	; 0x0f
    3bc6:	22 96       	adiw	r28, 0x02	; 2
    3bc8:	ca 15       	cp	r28, r10
    3bca:	db 05       	cpc	r29, r11
    3bcc:	89 f6       	brne	.-94     	; 0x3b70 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0x5e>
    3bce:	c6 01       	movw	r24, r12
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	1f 91       	pop	r17
    3bd6:	0f 91       	pop	r16
    3bd8:	ff 90       	pop	r15
    3bda:	ef 90       	pop	r14
    3bdc:	df 90       	pop	r13
    3bde:	cf 90       	pop	r12
    3be0:	bf 90       	pop	r11
    3be2:	af 90       	pop	r10
    3be4:	08 95       	ret
    3be6:	c7 01       	movw	r24, r14
    3be8:	df 91       	pop	r29
    3bea:	cf 91       	pop	r28
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ff 90       	pop	r15
    3bf2:	ef 90       	pop	r14
    3bf4:	df 90       	pop	r13
    3bf6:	cf 90       	pop	r12
    3bf8:	bf 90       	pop	r11
    3bfa:	af 90       	pop	r10
    3bfc:	6c cf       	rjmp	.-296    	; 0x3ad6 <_ZN20TeaMachineController12GetNextDrinkEv>
    3bfe:	6e e3       	ldi	r22, 0x3E	; 62
    3c00:	77 e0       	ldi	r23, 0x07	; 7
    3c02:	81 e1       	ldi	r24, 0x11	; 17
    3c04:	9a e0       	ldi	r25, 0x0A	; 10
    3c06:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    3c0a:	f7 01       	movw	r30, r14
    3c0c:	65 85       	ldd	r22, Z+13	; 0x0d
    3c0e:	76 85       	ldd	r23, Z+14	; 0x0e
    3c10:	4a e0       	ldi	r20, 0x0A	; 10
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	81 e1       	ldi	r24, 0x11	; 17
    3c16:	9a e0       	ldi	r25, 0x0A	; 10
    3c18:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    3c1c:	65 ef       	ldi	r22, 0xF5	; 245
    3c1e:	79 e0       	ldi	r23, 0x09	; 9
    3c20:	81 e1       	ldi	r24, 0x11	; 17
    3c22:	9a e0       	ldi	r25, 0x0A	; 10
    3c24:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3c28:	67 01       	movw	r12, r14
    3c2a:	cb cf       	rjmp	.-106    	; 0x3bc2 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink+0xb0>

00003c2c <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink>:
    3c2c:	af 92       	push	r10
    3c2e:	bf 92       	push	r11
    3c30:	cf 92       	push	r12
    3c32:	df 92       	push	r13
    3c34:	ef 92       	push	r14
    3c36:	ff 92       	push	r15
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	cf 93       	push	r28
    3c3e:	df 93       	push	r29
    3c40:	7c 01       	movw	r14, r24
    3c42:	8b 01       	movw	r16, r22
    3c44:	6f e6       	ldi	r22, 0x6F	; 111
    3c46:	77 e0       	ldi	r23, 0x07	; 7
    3c48:	81 e1       	ldi	r24, 0x11	; 17
    3c4a:	9a e0       	ldi	r25, 0x0A	; 10
    3c4c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3c50:	d8 01       	movw	r26, r16
    3c52:	1d 96       	adiw	r26, 0x0d	; 13
    3c54:	6d 91       	ld	r22, X+
    3c56:	7c 91       	ld	r23, X
    3c58:	1e 97       	sbiw	r26, 0x0e	; 14
    3c5a:	4a e0       	ldi	r20, 0x0A	; 10
    3c5c:	50 e0       	ldi	r21, 0x00	; 0
    3c5e:	81 e1       	ldi	r24, 0x11	; 17
    3c60:	9a e0       	ldi	r25, 0x0A	; 10
    3c62:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    3c66:	65 ef       	ldi	r22, 0xF5	; 245
    3c68:	79 e0       	ldi	r23, 0x09	; 9
    3c6a:	81 e1       	ldi	r24, 0x11	; 17
    3c6c:	9a e0       	ldi	r25, 0x0A	; 10
    3c6e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3c72:	f8 01       	movw	r30, r16
    3c74:	81 81       	ldd	r24, Z+1	; 0x01
    3c76:	84 30       	cpi	r24, 0x04	; 4
    3c78:	09 f4       	brne	.+2      	; 0x3c7c <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x50>
    3c7a:	42 c0       	rjmp	.+132    	; 0x3d00 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0xd4>
    3c7c:	e7 01       	movw	r28, r14
    3c7e:	a0 96       	adiw	r28, 0x20	; 32
    3c80:	67 01       	movw	r12, r14
    3c82:	fe e0       	ldi	r31, 0x0E	; 14
    3c84:	cf 0e       	add	r12, r31
    3c86:	d1 1c       	adc	r13, r1
    3c88:	78 01       	movw	r14, r16
    3c8a:	58 01       	movw	r10, r16
    3c8c:	9a 91       	ld	r25, -Y
    3c8e:	8a 91       	ld	r24, -Y
    3c90:	89 2b       	or	r24, r25
    3c92:	39 f1       	breq	.+78     	; 0x3ce2 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0xb6>
    3c94:	61 e3       	ldi	r22, 0x31	; 49
    3c96:	77 e0       	ldi	r23, 0x07	; 7
    3c98:	81 e1       	ldi	r24, 0x11	; 17
    3c9a:	9a e0       	ldi	r25, 0x0A	; 10
    3c9c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3ca0:	e8 81       	ld	r30, Y
    3ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca4:	65 85       	ldd	r22, Z+13	; 0x0d
    3ca6:	76 85       	ldd	r23, Z+14	; 0x0e
    3ca8:	4a e0       	ldi	r20, 0x0A	; 10
    3caa:	50 e0       	ldi	r21, 0x00	; 0
    3cac:	81 e1       	ldi	r24, 0x11	; 17
    3cae:	9a e0       	ldi	r25, 0x0A	; 10
    3cb0:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    3cb4:	65 ef       	ldi	r22, 0xF5	; 245
    3cb6:	79 e0       	ldi	r23, 0x09	; 9
    3cb8:	81 e1       	ldi	r24, 0x11	; 17
    3cba:	9a e0       	ldi	r25, 0x0A	; 10
    3cbc:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3cc0:	e8 81       	ld	r30, Y
    3cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    3cc4:	25 85       	ldd	r18, Z+13	; 0x0d
    3cc6:	36 85       	ldd	r19, Z+14	; 0x0e
    3cc8:	d8 01       	movw	r26, r16
    3cca:	1d 96       	adiw	r26, 0x0d	; 13
    3ccc:	8d 91       	ld	r24, X+
    3cce:	9c 91       	ld	r25, X
    3cd0:	1e 97       	sbiw	r26, 0x0e	; 14
    3cd2:	28 17       	cp	r18, r24
    3cd4:	39 07       	cpc	r19, r25
    3cd6:	19 f4       	brne	.+6      	; 0x3cde <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0xb2>
    3cd8:	81 81       	ldd	r24, Z+1	; 0x01
    3cda:	84 30       	cpi	r24, 0x04	; 4
    3cdc:	e9 f4       	brne	.+58     	; 0x3d18 <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0xec>
    3cde:	e8 80       	ld	r14, Y
    3ce0:	f9 80       	ldd	r15, Y+1	; 0x01
    3ce2:	cc 15       	cp	r28, r12
    3ce4:	dd 05       	cpc	r29, r13
    3ce6:	91 f6       	brne	.-92     	; 0x3c8c <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0x60>
    3ce8:	c5 01       	movw	r24, r10
    3cea:	df 91       	pop	r29
    3cec:	cf 91       	pop	r28
    3cee:	1f 91       	pop	r17
    3cf0:	0f 91       	pop	r16
    3cf2:	ff 90       	pop	r15
    3cf4:	ef 90       	pop	r14
    3cf6:	df 90       	pop	r13
    3cf8:	cf 90       	pop	r12
    3cfa:	bf 90       	pop	r11
    3cfc:	af 90       	pop	r10
    3cfe:	08 95       	ret
    3d00:	c7 01       	movw	r24, r14
    3d02:	df 91       	pop	r29
    3d04:	cf 91       	pop	r28
    3d06:	1f 91       	pop	r17
    3d08:	0f 91       	pop	r16
    3d0a:	ff 90       	pop	r15
    3d0c:	ef 90       	pop	r14
    3d0e:	df 90       	pop	r13
    3d10:	cf 90       	pop	r12
    3d12:	bf 90       	pop	r11
    3d14:	af 90       	pop	r10
    3d16:	df ce       	rjmp	.-578    	; 0x3ad6 <_ZN20TeaMachineController12GetNextDrinkEv>
    3d18:	6d e8       	ldi	r22, 0x8D	; 141
    3d1a:	77 e0       	ldi	r23, 0x07	; 7
    3d1c:	81 e1       	ldi	r24, 0x11	; 17
    3d1e:	9a e0       	ldi	r25, 0x0A	; 10
    3d20:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
    3d24:	f7 01       	movw	r30, r14
    3d26:	65 85       	ldd	r22, Z+13	; 0x0d
    3d28:	76 85       	ldd	r23, Z+14	; 0x0e
    3d2a:	4a e0       	ldi	r20, 0x0A	; 10
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	81 e1       	ldi	r24, 0x11	; 17
    3d30:	9a e0       	ldi	r25, 0x0A	; 10
    3d32:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN5Print5printEii>
    3d36:	65 ef       	ldi	r22, 0xF5	; 245
    3d38:	79 e0       	ldi	r23, 0x09	; 9
    3d3a:	81 e1       	ldi	r24, 0x11	; 17
    3d3c:	9a e0       	ldi	r25, 0x0A	; 10
    3d3e:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <_ZN5Print5printEPKc>
    3d42:	57 01       	movw	r10, r14
    3d44:	cc cf       	rjmp	.-104    	; 0x3cde <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink+0xb2>

00003d46 <_ZN20TeaMachineController16GetDrinkLocationEi>:
    3d46:	fc 01       	movw	r30, r24
    3d48:	b0 96       	adiw	r30, 0x20	; 32
    3d4a:	29 e0       	ldi	r18, 0x09	; 9
    3d4c:	30 e0       	ldi	r19, 0x00	; 0
    3d4e:	8f ef       	ldi	r24, 0xFF	; 255
    3d50:	9f ef       	ldi	r25, 0xFF	; 255
    3d52:	b2 91       	ld	r27, -Z
    3d54:	a2 91       	ld	r26, -Z
    3d56:	10 97       	sbiw	r26, 0x00	; 0
    3d58:	41 f0       	breq	.+16     	; 0x3d6a <_ZN20TeaMachineController16GetDrinkLocationEi+0x24>
    3d5a:	1d 96       	adiw	r26, 0x0d	; 13
    3d5c:	4d 91       	ld	r20, X+
    3d5e:	5c 91       	ld	r21, X
    3d60:	1e 97       	sbiw	r26, 0x0e	; 14
    3d62:	64 17       	cp	r22, r20
    3d64:	75 07       	cpc	r23, r21
    3d66:	09 f4       	brne	.+2      	; 0x3d6a <_ZN20TeaMachineController16GetDrinkLocationEi+0x24>
    3d68:	c9 01       	movw	r24, r18
    3d6a:	21 50       	subi	r18, 0x01	; 1
    3d6c:	31 09       	sbc	r19, r1
    3d6e:	89 f7       	brne	.-30     	; 0x3d52 <_ZN20TeaMachineController16GetDrinkLocationEi+0xc>
    3d70:	08 95       	ret

00003d72 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv>:
//  ActiveDrinkIsPresent()
//
//  Determine whether or not a cup is present on the preparation/reception stations and that the user has chosen the drink
//
bool TeaMachineController::ActiveDrinkIsPresent()
{
    3d72:	fc 01       	movw	r30, r24
    bool bActiveDrinkIsPresent = false;
    
    // Check stir station
    if( m_drinks[ST_STIR] != NULL )
    3d74:	a0 8d       	ldd	r26, Z+24	; 0x18
    3d76:	b1 8d       	ldd	r27, Z+25	; 0x19
    3d78:	10 97       	sbiw	r26, 0x00	; 0
    3d7a:	41 f0       	breq	.+16     	; 0x3d8c <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x1a>
    {
	    if( m_drinks[ST_STIR]->CupIsPresent() && m_drinks[ST_STIR]->SelectionIsConfirmed() )
    3d7c:	50 96       	adiw	r26, 0x10	; 16
    3d7e:	8c 91       	ld	r24, X
    3d80:	50 97       	sbiw	r26, 0x10	; 16
    3d82:	88 23       	and	r24, r24
    3d84:	19 f0       	breq	.+6      	; 0x3d8c <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x1a>
    3d86:	1f 96       	adiw	r26, 0x0f	; 15
    3d88:	8c 91       	ld	r24, X
    3d8a:	01 c0       	rjmp	.+2      	; 0x3d8e <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x1c>
//
//  Determine whether or not a cup is present on the preparation/reception stations and that the user has chosen the drink
//
bool TeaMachineController::ActiveDrinkIsPresent()
{
    bool bActiveDrinkIsPresent = false;
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
		    bActiveDrinkIsPresent = true;
	    }
    }
    
    // Check milk station
    if( m_drinks[ST_MILK] != NULL )
    3d8e:	a6 89       	ldd	r26, Z+22	; 0x16
    3d90:	b7 89       	ldd	r27, Z+23	; 0x17
    3d92:	10 97       	sbiw	r26, 0x00	; 0
    3d94:	49 f0       	breq	.+18     	; 0x3da8 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x36>
    {
	    if( m_drinks[ST_MILK]->CupIsPresent() && m_drinks[ST_MILK]->SelectionIsConfirmed() )
    3d96:	50 96       	adiw	r26, 0x10	; 16
    3d98:	9c 91       	ld	r25, X
    3d9a:	50 97       	sbiw	r26, 0x10	; 16
    3d9c:	99 23       	and	r25, r25
    3d9e:	21 f0       	breq	.+8      	; 0x3da8 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x36>
    3da0:	1f 96       	adiw	r26, 0x0f	; 15
    3da2:	9c 91       	ld	r25, X
    3da4:	91 11       	cpse	r25, r1
	    {
		    bActiveDrinkIsPresent = true;
    3da6:	81 e0       	ldi	r24, 0x01	; 1
	    }
    }
    
    // Check brew station
    if( m_drinks[ST_BREW] != NULL )
    3da8:	a4 89       	ldd	r26, Z+20	; 0x14
    3daa:	b5 89       	ldd	r27, Z+21	; 0x15
    3dac:	10 97       	sbiw	r26, 0x00	; 0
    3dae:	49 f0       	breq	.+18     	; 0x3dc2 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x50>
    {
	    if( m_drinks[ST_BREW]->CupIsPresent() && m_drinks[ST_BREW]->SelectionIsConfirmed() )
    3db0:	50 96       	adiw	r26, 0x10	; 16
    3db2:	9c 91       	ld	r25, X
    3db4:	50 97       	sbiw	r26, 0x10	; 16
    3db6:	99 23       	and	r25, r25
    3db8:	21 f0       	breq	.+8      	; 0x3dc2 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x50>
    3dba:	1f 96       	adiw	r26, 0x0f	; 15
    3dbc:	9c 91       	ld	r25, X
    3dbe:	91 11       	cpse	r25, r1
	    {
		    bActiveDrinkIsPresent = true;
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
	    }
    }
    
    // Check first reception station
    if( m_drinks[ST_RECEPTION_A] != NULL )
    3dc2:	a2 89       	ldd	r26, Z+18	; 0x12
    3dc4:	b3 89       	ldd	r27, Z+19	; 0x13
    3dc6:	10 97       	sbiw	r26, 0x00	; 0
    3dc8:	49 f0       	breq	.+18     	; 0x3ddc <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x6a>
    {
        if( m_drinks[ST_RECEPTION_A]->CupIsPresent() && m_drinks[ST_RECEPTION_A]->SelectionIsConfirmed() )
    3dca:	50 96       	adiw	r26, 0x10	; 16
    3dcc:	9c 91       	ld	r25, X
    3dce:	50 97       	sbiw	r26, 0x10	; 16
    3dd0:	99 23       	and	r25, r25
    3dd2:	21 f0       	breq	.+8      	; 0x3ddc <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x6a>
    3dd4:	1f 96       	adiw	r26, 0x0f	; 15
    3dd6:	9c 91       	ld	r25, X
    3dd8:	91 11       	cpse	r25, r1
        {
            bActiveDrinkIsPresent = true;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    // Check second reception station
    if( m_drinks[ST_RECEPTION_B] != NULL )
    3ddc:	a0 89       	ldd	r26, Z+16	; 0x10
    3dde:	b1 89       	ldd	r27, Z+17	; 0x11
    3de0:	10 97       	sbiw	r26, 0x00	; 0
    3de2:	49 f0       	breq	.+18     	; 0x3df6 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x84>
    {
        if( m_drinks[ST_RECEPTION_B]->CupIsPresent() && m_drinks[ST_RECEPTION_B]->SelectionIsConfirmed() )
    3de4:	50 96       	adiw	r26, 0x10	; 16
    3de6:	9c 91       	ld	r25, X
    3de8:	50 97       	sbiw	r26, 0x10	; 16
    3dea:	99 23       	and	r25, r25
    3dec:	21 f0       	breq	.+8      	; 0x3df6 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x84>
    3dee:	1f 96       	adiw	r26, 0x0f	; 15
    3df0:	9c 91       	ld	r25, X
    3df2:	91 11       	cpse	r25, r1
        {
            bActiveDrinkIsPresent = true;
    3df4:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    // Check third reception station
    if( m_drinks[ST_RECEPTION_C] != NULL )
    3df6:	06 84       	ldd	r0, Z+14	; 0x0e
    3df8:	f7 85       	ldd	r31, Z+15	; 0x0f
    3dfa:	e0 2d       	mov	r30, r0
    3dfc:	30 97       	sbiw	r30, 0x00	; 0
    3dfe:	31 f0       	breq	.+12     	; 0x3e0c <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x9a>
    {
        if( m_drinks[ST_RECEPTION_C]->CupIsPresent() && m_drinks[ST_RECEPTION_C]->SelectionIsConfirmed() )
    3e00:	90 89       	ldd	r25, Z+16	; 0x10
    3e02:	99 23       	and	r25, r25
    3e04:	19 f0       	breq	.+6      	; 0x3e0c <_ZN20TeaMachineController20ActiveDrinkIsPresentEv+0x9a>
    3e06:	97 85       	ldd	r25, Z+15	; 0x0f
    3e08:	91 11       	cpse	r25, r1
        {
            bActiveDrinkIsPresent = true;
    3e0a:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    
    return bActiveDrinkIsPresent;
}
    3e0c:	08 95       	ret

00003e0e <_ZN20TeaMachineController29NotifyConveyorAdvanceCompleteEv>:
//  NotifyConveyorAdvance()
//
//  Inform controller that conveyor advance has completed
//
void TeaMachineController::NotifyConveyorAdvanceComplete()
{
    3e0e:	0f 93       	push	r16
    3e10:	1f 93       	push	r17
    3e12:	cf 93       	push	r28
    3e14:	df 93       	push	r29
    3e16:	ec 01       	movw	r28, r24
    if( m_drinks[ST_COLLECTION_A] != NULL )
    3e18:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3e1a:	1f 8d       	ldd	r17, Y+31	; 0x1f
    3e1c:	01 15       	cp	r16, r1
    3e1e:	11 05       	cpc	r17, r1
    3e20:	31 f0       	breq	.+12     	; 0x3e2e <_ZN20TeaMachineController29NotifyConveyorAdvanceCompleteEv+0x20>
    {
        // There should not be a drink at Collection station A, but if there is, delete it
        delete m_drinks[ST_COLLECTION_A];
    3e22:	c8 01       	movw	r24, r16
    3e24:	0e 94 97 10 	call	0x212e	; 0x212e <_ZN5DrinkD1Ev>
    3e28:	c8 01       	movw	r24, r16
    3e2a:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <_ZdlPv>
    }
    
    // Move the drinks along by one position
    m_drinks[ST_COLLECTION_A] = m_drinks[ST_COLLECTION_B];
    3e2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e32:	9f 8f       	std	Y+31, r25	; 0x1f
    3e34:	8e 8f       	std	Y+30, r24	; 0x1e
    m_drinks[ST_COLLECTION_B] = m_drinks[ST_COLLECTION_C];
    3e36:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3e38:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3e3a:	9d 8f       	std	Y+29, r25	; 0x1d
    3e3c:	8c 8f       	std	Y+28, r24	; 0x1c
    m_drinks[ST_COLLECTION_C] = m_drinks[ST_STIR];
    3e3e:	88 8d       	ldd	r24, Y+24	; 0x18
    3e40:	99 8d       	ldd	r25, Y+25	; 0x19
    3e42:	9b 8f       	std	Y+27, r25	; 0x1b
    3e44:	8a 8f       	std	Y+26, r24	; 0x1a
    m_drinks[ST_STIR] = m_drinks[ST_MILK];
    3e46:	8e 89       	ldd	r24, Y+22	; 0x16
    3e48:	9f 89       	ldd	r25, Y+23	; 0x17
    3e4a:	99 8f       	std	Y+25, r25	; 0x19
    3e4c:	88 8f       	std	Y+24, r24	; 0x18
    m_drinks[ST_MILK] = m_drinks[ST_BREW];
    3e4e:	8c 89       	ldd	r24, Y+20	; 0x14
    3e50:	9d 89       	ldd	r25, Y+21	; 0x15
    3e52:	9f 8b       	std	Y+23, r25	; 0x17
    3e54:	8e 8b       	std	Y+22, r24	; 0x16
    m_drinks[ST_BREW] = m_drinks[ST_RECEPTION_A];
    3e56:	8a 89       	ldd	r24, Y+18	; 0x12
    3e58:	9b 89       	ldd	r25, Y+19	; 0x13
    3e5a:	9d 8b       	std	Y+21, r25	; 0x15
    3e5c:	8c 8b       	std	Y+20, r24	; 0x14
    m_drinks[ST_RECEPTION_A] = m_drinks[ST_RECEPTION_B];
    3e5e:	88 89       	ldd	r24, Y+16	; 0x10
    3e60:	99 89       	ldd	r25, Y+17	; 0x11
    3e62:	9b 8b       	std	Y+19, r25	; 0x13
    3e64:	8a 8b       	std	Y+18, r24	; 0x12
    m_drinks[ST_RECEPTION_B] = m_drinks[ST_RECEPTION_C];
    3e66:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e68:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e6a:	99 8b       	std	Y+17, r25	; 0x11
    3e6c:	88 8b       	std	Y+16, r24	; 0x10
    m_drinks[ST_RECEPTION_C] = NULL;
    3e6e:	1f 86       	std	Y+15, r1	; 0x0f
    3e70:	1e 86       	std	Y+14, r1	; 0x0e
    
    // Notify UI Manager that station positions have all advanced by one
    m_pUIManager->NotifyStationAdvanceComplete();
    3e72:	88 81       	ld	r24, Y
    3e74:	99 81       	ldd	r25, Y+1	; 0x01
}
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	1f 91       	pop	r17
    3e7c:	0f 91       	pop	r16
    m_drinks[ST_RECEPTION_A] = m_drinks[ST_RECEPTION_B];
    m_drinks[ST_RECEPTION_B] = m_drinks[ST_RECEPTION_C];
    m_drinks[ST_RECEPTION_C] = NULL;
    
    // Notify UI Manager that station positions have all advanced by one
    m_pUIManager->NotifyStationAdvanceComplete();
    3e7e:	0c 94 4a 27 	jmp	0x4e94	; 0x4e94 <_ZN9UIManager28NotifyStationAdvanceCompleteEv>

00003e82 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>:
//  HandleError
//
//  Handle a failure condition by displaying error code and context
//
void TeaMachineController::HandleError( TeaMachineErrorContext context, unsigned long lErrorCode )
{
    3e82:	ec 01       	movw	r28, r24
    3e84:	16 2f       	mov	r17, r22
    3e86:	69 01       	movw	r12, r18
    3e88:	7a 01       	movw	r14, r20
	// Stop all devices
	m_pBrewManager->Stop();
    3e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8e:	dc 01       	movw	r26, r24
    3e90:	ed 91       	ld	r30, X+
    3e92:	fc 91       	ld	r31, X
    3e94:	06 80       	ldd	r0, Z+6	; 0x06
    3e96:	f7 81       	ldd	r31, Z+7	; 0x07
    3e98:	e0 2d       	mov	r30, r0
    3e9a:	19 95       	eicall
	m_pMilkManager->Stop();
    3e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    3ea0:	dc 01       	movw	r26, r24
    3ea2:	ed 91       	ld	r30, X+
    3ea4:	fc 91       	ld	r31, X
    3ea6:	06 80       	ldd	r0, Z+6	; 0x06
    3ea8:	f7 81       	ldd	r31, Z+7	; 0x07
    3eaa:	e0 2d       	mov	r30, r0
    3eac:	19 95       	eicall
	m_pStirManager->Stop();
    3eae:	8e 81       	ldd	r24, Y+6	; 0x06
    3eb0:	9f 81       	ldd	r25, Y+7	; 0x07
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	ed 91       	ld	r30, X+
    3eb6:	fc 91       	ld	r31, X
    3eb8:	06 80       	ldd	r0, Z+6	; 0x06
    3eba:	f7 81       	ldd	r31, Z+7	; 0x07
    3ebc:	e0 2d       	mov	r30, r0
    3ebe:	19 95       	eicall
	m_pConveyorManager->Stop();
    3ec0:	88 85       	ldd	r24, Y+8	; 0x08
    3ec2:	99 85       	ldd	r25, Y+9	; 0x09
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	ed 91       	ld	r30, X+
    3ec8:	fc 91       	ld	r31, X
    3eca:	06 80       	ldd	r0, Z+6	; 0x06
    3ecc:	f7 81       	ldd	r31, Z+7	; 0x07
    3ece:	e0 2d       	mov	r30, r0
    3ed0:	19 95       	eicall
	
	// Illuminate FAULT LED
	m_pTeaMachine->GetSystem()->ClearOutputRegisterBit(OUTREG_LED_FAULT);
    3ed2:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ed4:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ed6:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3eda:	64 e0       	ldi	r22, 0x04	; 4
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	ce d9       	rcall	.-3172   	; 0x327c <_ZN6System22ClearOutputRegisterBitEj>
		case ErrorContext_Service:
		errorDisplay.Set( IndicatorMilkLevel, 1 );
		break;
	} // switch
	*/
	m_pUIManager->SetMessage( "FAIL", (int)context, (int)lErrorCode >> 4, (int)lErrorCode & 0x0F );
    3ee0:	c6 01       	movw	r24, r12
    3ee2:	8f 70       	andi	r24, 0x0F	; 15
    3ee4:	99 27       	eor	r25, r25
    3ee6:	96 01       	movw	r18, r12
    3ee8:	44 e0       	ldi	r20, 0x04	; 4
    3eea:	35 95       	asr	r19
    3eec:	27 95       	ror	r18
    3eee:	4a 95       	dec	r20
    3ef0:	e1 f7       	brne	.-8      	; 0x3eea <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm+0x68>
    3ef2:	41 2f       	mov	r20, r17
    3ef4:	50 e0       	ldi	r21, 0x00	; 0
    3ef6:	8c 01       	movw	r16, r24
    3ef8:	6d eb       	ldi	r22, 0xBD	; 189
    3efa:	77 e0       	ldi	r23, 0x07	; 7
    3efc:	88 81       	ld	r24, Y
    3efe:	99 81       	ldd	r25, Y+1	; 0x01
    3f00:	2a d4       	rcall	.+2132   	; 0x4756 <_ZN9UIManager10SetMessageEPciii>
    3f02:	ff cf       	rjmp	.-2      	; 0x3f02 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm+0x80>

00003f04 <_ZN20TeaMachineController17TestUserInterfaceEv>:
//  TestUserInterface()
//
//  Operate UI as if tea machine was in service but without brew functions etc
//
bool TeaMachineController::TestUserInterface()
{
    3f04:	ec 01       	movw	r28, r24
    bool bResult = true;
    ProcessManagerResponse UIManagerResponse = m_pUIManager->BeginReset();
    3f06:	88 81       	ld	r24, Y
    3f08:	99 81       	ldd	r25, Y+1	; 0x01
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	ed 91       	ld	r30, X+
    3f0e:	fc 91       	ld	r31, X
    3f10:	01 90       	ld	r0, Z+
    3f12:	f0 81       	ld	r31, Z
    3f14:	e0 2d       	mov	r30, r0
    3f16:	19 95       	eicall
    while( UIManagerResponse == ProcessIncomplete )
    3f18:	81 11       	cpse	r24, r1
    3f1a:	09 c0       	rjmp	.+18     	; 0x3f2e <_ZN20TeaMachineController17TestUserInterfaceEv+0x2a>
    {
        if( UIManagerResponse == ProcessIncomplete )
        {
            UIManagerResponse = m_pUIManager->Continue();
    3f1c:	88 81       	ld	r24, Y
    3f1e:	99 81       	ldd	r25, Y+1	; 0x01
    3f20:	dc 01       	movw	r26, r24
    3f22:	ed 91       	ld	r30, X+
    3f24:	fc 91       	ld	r31, X
    3f26:	04 80       	ldd	r0, Z+4	; 0x04
    3f28:	f5 81       	ldd	r31, Z+5	; 0x05
    3f2a:	e0 2d       	mov	r30, r0
    3f2c:	f4 cf       	rjmp	.-24     	; 0x3f16 <_ZN20TeaMachineController17TestUserInterfaceEv+0x12>
        }
    } // while

	// Initialise conveyor as this may be required in the test
    ProcessManagerResponse conveyorManagerResponse = m_pConveyorManager->BeginReset();
    3f2e:	88 85       	ldd	r24, Y+8	; 0x08
    3f30:	99 85       	ldd	r25, Y+9	; 0x09
    3f32:	dc 01       	movw	r26, r24
    3f34:	ed 91       	ld	r30, X+
    3f36:	fc 91       	ld	r31, X
    3f38:	01 90       	ld	r0, Z+
    3f3a:	f0 81       	ld	r31, Z
    3f3c:	e0 2d       	mov	r30, r0
    3f3e:	19 95       	eicall
    3f40:	18 2f       	mov	r17, r24
    while( conveyorManagerResponse == ProcessIncomplete )
    3f42:	81 11       	cpse	r24, r1
    3f44:	09 c0       	rjmp	.+18     	; 0x3f58 <_ZN20TeaMachineController17TestUserInterfaceEv+0x54>
    {
	    if( conveyorManagerResponse == ProcessIncomplete )
	    {
		    conveyorManagerResponse = m_pConveyorManager->Continue();
    3f46:	88 85       	ldd	r24, Y+8	; 0x08
    3f48:	99 85       	ldd	r25, Y+9	; 0x09
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	ed 91       	ld	r30, X+
    3f4e:	fc 91       	ld	r31, X
    3f50:	04 80       	ldd	r0, Z+4	; 0x04
    3f52:	f5 81       	ldd	r31, Z+5	; 0x05
    3f54:	e0 2d       	mov	r30, r0
    3f56:	f3 cf       	rjmp	.-26     	; 0x3f3e <_ZN20TeaMachineController17TestUserInterfaceEv+0x3a>
	    }
    } // while
	unsigned long nNextAdvance = millis() + CONVEYOR_TEST_PERIOD;
    3f58:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    3f5c:	6b 01       	movw	r12, r22
    3f5e:	7c 01       	movw	r14, r24
    3f60:	b0 e1       	ldi	r27, 0x10	; 16
    3f62:	cb 0e       	add	r12, r27
    3f64:	b7 e2       	ldi	r27, 0x27	; 39
    3f66:	db 1e       	adc	r13, r27
    3f68:	e1 1c       	adc	r14, r1
    3f6a:	f1 1c       	adc	r15, r1
	
	// Begin the processing cycle
    UIManagerResponse = m_pUIManager->BeginProcess();
    3f6c:	88 81       	ld	r24, Y
    3f6e:	99 81       	ldd	r25, Y+1	; 0x01
    3f70:	dc 01       	movw	r26, r24
    3f72:	ed 91       	ld	r30, X+
    3f74:	fc 91       	ld	r31, X
    3f76:	02 80       	ldd	r0, Z+2	; 0x02
    3f78:	f3 81       	ldd	r31, Z+3	; 0x03
    3f7a:	e0 2d       	mov	r30, r0
    3f7c:	19 95       	eicall
    if( UIManagerResponse != ProcessFailed )
    3f7e:	81 30       	cpi	r24, 0x01	; 1
    3f80:	21 f1       	breq	.+72     	; 0x3fca <_ZN20TeaMachineController17TestUserInterfaceEv+0xc6>
    {
        // Do this loop forever
        while(true)
        {
            // Yield to UI manager
            m_pUIManager->Continue();
    3f82:	88 81       	ld	r24, Y
    3f84:	99 81       	ldd	r25, Y+1	; 0x01
    3f86:	dc 01       	movw	r26, r24
    3f88:	ed 91       	ld	r30, X+
    3f8a:	fc 91       	ld	r31, X
    3f8c:	04 80       	ldd	r0, Z+4	; 0x04
    3f8e:	f5 81       	ldd	r31, Z+5	; 0x05
    3f90:	e0 2d       	mov	r30, r0
    3f92:	19 95       	eicall
 
			if((m_pTeaMachine->GetSystem()->ReadInputRegisterData() & INREGMASK_ACTIONSWITCH) != 0)
    3f94:	8a 85       	ldd	r24, Y+10	; 0x0a
    3f96:	9b 85       	ldd	r25, Y+11	; 0x0b
    3f98:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    3f9c:	02 d9       	rcall	.-3580   	; 0x31a2 <_ZN6System21ReadInputRegisterDataEv>
    3f9e:	93 ff       	sbrs	r25, 3
    3fa0:	09 c0       	rjmp	.+18     	; 0x3fb4 <_ZN20TeaMachineController17TestUserInterfaceEv+0xb0>
			{
				// Action switch is up, so, every few seconds, advance the conveyor
				if( (millis() > nNextAdvance) && (conveyorManagerResponse == ProcessComplete))
    3fa2:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    3fa6:	c6 16       	cp	r12, r22
    3fa8:	d7 06       	cpc	r13, r23
    3faa:	e8 06       	cpc	r14, r24
    3fac:	f9 06       	cpc	r15, r25
    3fae:	10 f4       	brcc	.+4      	; 0x3fb4 <_ZN20TeaMachineController17TestUserInterfaceEv+0xb0>
    3fb0:	12 30       	cpi	r17, 0x02	; 2
    3fb2:	a1 f0       	breq	.+40     	; 0x3fdc <_ZN20TeaMachineController17TestUserInterfaceEv+0xd8>
					nNextAdvance = millis() + CONVEYOR_TEST_PERIOD;
				}
			}
			
			// Yield to conveyor manager
			conveyorManagerResponse = m_pConveyorManager->Continue();
    3fb4:	88 85       	ldd	r24, Y+8	; 0x08
    3fb6:	99 85       	ldd	r25, Y+9	; 0x09
    3fb8:	dc 01       	movw	r26, r24
    3fba:	ed 91       	ld	r30, X+
    3fbc:	fc 91       	ld	r31, X
    3fbe:	04 80       	ldd	r0, Z+4	; 0x04
    3fc0:	f5 81       	ldd	r31, Z+5	; 0x05
    3fc2:	e0 2d       	mov	r30, r0
    3fc4:	19 95       	eicall
    3fc6:	18 2f       	mov	r17, r24
	// Begin the processing cycle
    UIManagerResponse = m_pUIManager->BeginProcess();
    if( UIManagerResponse != ProcessFailed )
    {
        // Do this loop forever
        while(true)
    3fc8:	dc cf       	rjmp	.-72     	; 0x3f82 <_ZN20TeaMachineController17TestUserInterfaceEv+0x7e>
	ProcessManagerBase();
	ProcessManagerBase(TeaMachineController *pController);
	~ProcessManagerBase();

	// Returns process code for most recent error
   	unsigned long GetLastError() { return m_lErrorCode; }
    3fca:	e8 81       	ld	r30, Y
    3fcc:	f9 81       	ldd	r31, Y+1	; 0x01
			conveyorManagerResponse = m_pConveyorManager->Continue();
        } // while
    }
    else
    {
        HandleError( ErrorContext_Reset, m_pUIManager->GetLastError() );
    3fce:	26 85       	ldd	r18, Z+14	; 0x0e
    3fd0:	37 85       	ldd	r19, Z+15	; 0x0f
    3fd2:	40 89       	ldd	r20, Z+16	; 0x10
    3fd4:	51 89       	ldd	r21, Z+17	; 0x11
    3fd6:	60 e0       	ldi	r22, 0x00	; 0
    3fd8:	ce 01       	movw	r24, r28
    3fda:	53 df       	rcall	.-346    	; 0x3e82 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>
			{
				// Action switch is up, so, every few seconds, advance the conveyor
				if( (millis() > nNextAdvance) && (conveyorManagerResponse == ProcessComplete))
				{
					// Tell UI Manager that conveyor is advancing
					m_pUIManager->NotifyStationAdvanceBegins();
    3fdc:	88 81       	ld	r24, Y
    3fde:	99 81       	ldd	r25, Y+1	; 0x01
    3fe0:	55 d7       	rcall	.+3754   	; 0x4e8c <_ZN9UIManager26NotifyStationAdvanceBeginsEv>
					
					// Initiate advance
					conveyorManagerResponse = m_pConveyorManager->BeginProcess();
    3fe2:	88 85       	ldd	r24, Y+8	; 0x08
    3fe4:	99 85       	ldd	r25, Y+9	; 0x09
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	ed 91       	ld	r30, X+
    3fea:	fc 91       	ld	r31, X
    3fec:	02 80       	ldd	r0, Z+2	; 0x02
    3fee:	f3 81       	ldd	r31, Z+3	; 0x03
    3ff0:	e0 2d       	mov	r30, r0
    3ff2:	19 95       	eicall
					
					// Remember to do another advance
					nNextAdvance = millis() + CONVEYOR_TEST_PERIOD;
    3ff4:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    3ff8:	6b 01       	movw	r12, r22
    3ffa:	7c 01       	movw	r14, r24
    3ffc:	b0 e1       	ldi	r27, 0x10	; 16
    3ffe:	cb 0e       	add	r12, r27
    4000:	b7 e2       	ldi	r27, 0x27	; 39
    4002:	db 1e       	adc	r13, r27
    4004:	e1 1c       	adc	r14, r1
    4006:	f1 1c       	adc	r15, r1
    4008:	d5 cf       	rjmp	.-86     	; 0x3fb4 <_ZN20TeaMachineController17TestUserInterfaceEv+0xb0>

0000400a <_ZN20TeaMachineController13ResetHardwareEv>:
//  ResetHardware()
//
//  Restore hardware to a known state
//
bool TeaMachineController::ResetHardware()
{     
    400a:	df 92       	push	r13
    400c:	ef 92       	push	r14
    400e:	ff 92       	push	r15
    4010:	0f 93       	push	r16
    4012:	1f 93       	push	r17
    4014:	cf 93       	push	r28
    4016:	df 93       	push	r29
    4018:	ec 01       	movw	r28, r24
    bool bResult = true;
       
    // Initiate reset sequences
    ProcessManagerResponse brewManagerResponse = m_pBrewManager->BeginReset();
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	9b 81       	ldd	r25, Y+3	; 0x03
    401e:	dc 01       	movw	r26, r24
    4020:	ed 91       	ld	r30, X+
    4022:	fc 91       	ld	r31, X
    4024:	01 90       	ld	r0, Z+
    4026:	f0 81       	ld	r31, Z
    4028:	e0 2d       	mov	r30, r0
    402a:	19 95       	eicall
    402c:	d8 2e       	mov	r13, r24
    ProcessManagerResponse milkManagerResponse = m_pMilkManager->BeginReset();
    402e:	8c 81       	ldd	r24, Y+4	; 0x04
    4030:	9d 81       	ldd	r25, Y+5	; 0x05
    4032:	dc 01       	movw	r26, r24
    4034:	ed 91       	ld	r30, X+
    4036:	fc 91       	ld	r31, X
    4038:	01 90       	ld	r0, Z+
    403a:	f0 81       	ld	r31, Z
    403c:	e0 2d       	mov	r30, r0
    403e:	19 95       	eicall
    4040:	e8 2e       	mov	r14, r24
    ProcessManagerResponse stirManagerResponse = m_pStirManager->BeginReset();
    4042:	8e 81       	ldd	r24, Y+6	; 0x06
    4044:	9f 81       	ldd	r25, Y+7	; 0x07
    4046:	dc 01       	movw	r26, r24
    4048:	ed 91       	ld	r30, X+
    404a:	fc 91       	ld	r31, X
    404c:	01 90       	ld	r0, Z+
    404e:	f0 81       	ld	r31, Z
    4050:	e0 2d       	mov	r30, r0
    4052:	19 95       	eicall
    4054:	f8 2e       	mov	r15, r24
    ProcessManagerResponse conveyorManagerResponse = m_pConveyorManager->BeginReset();
    4056:	88 85       	ldd	r24, Y+8	; 0x08
    4058:	99 85       	ldd	r25, Y+9	; 0x09
    405a:	dc 01       	movw	r26, r24
    405c:	ed 91       	ld	r30, X+
    405e:	fc 91       	ld	r31, X
    4060:	01 90       	ld	r0, Z+
    4062:	f0 81       	ld	r31, Z
    4064:	e0 2d       	mov	r30, r0
    4066:	19 95       	eicall
    4068:	08 2f       	mov	r16, r24
    ProcessManagerResponse UIManagerResponse = m_pUIManager->BeginReset();
    406a:	88 81       	ld	r24, Y
    406c:	99 81       	ldd	r25, Y+1	; 0x01
    406e:	dc 01       	movw	r26, r24
    4070:	ed 91       	ld	r30, X+
    4072:	fc 91       	ld	r31, X
    4074:	01 90       	ld	r0, Z+
    4076:	f0 81       	ld	r31, Z
    4078:	e0 2d       	mov	r30, r0
    407a:	19 95       	eicall
    407c:	18 2f       	mov	r17, r24
    // Ensure reset sequences complete
    while(     (brewManagerResponse == ProcessIncomplete) 
            || (milkManagerResponse == ProcessIncomplete)
            || (stirManagerResponse == ProcessIncomplete)
            || (conveyorManagerResponse == ProcessIncomplete)
            || (UIManagerResponse == ProcessIncomplete))
    407e:	dd 20       	and	r13, r13
    4080:	49 f0       	breq	.+18     	; 0x4094 <_ZN20TeaMachineController13ResetHardwareEv+0x8a>
    ProcessManagerResponse conveyorManagerResponse = m_pConveyorManager->BeginReset();
    ProcessManagerResponse UIManagerResponse = m_pUIManager->BeginReset();
    
    // Ensure reset sequences complete
    while(     (brewManagerResponse == ProcessIncomplete) 
            || (milkManagerResponse == ProcessIncomplete)
    4082:	ee 20       	and	r14, r14
    4084:	99 f0       	breq	.+38     	; 0x40ac <_ZN20TeaMachineController13ResetHardwareEv+0xa2>
            || (stirManagerResponse == ProcessIncomplete)
    4086:	ff 20       	and	r15, r15
    4088:	e9 f0       	breq	.+58     	; 0x40c4 <_ZN20TeaMachineController13ResetHardwareEv+0xba>
            || (conveyorManagerResponse == ProcessIncomplete)
    408a:	00 23       	and	r16, r16
    408c:	39 f1       	breq	.+78     	; 0x40dc <_ZN20TeaMachineController13ResetHardwareEv+0xd2>
            || (UIManagerResponse == ProcessIncomplete))
    408e:	11 23       	and	r17, r17
    4090:	19 f1       	breq	.+70     	; 0x40d8 <_ZN20TeaMachineController13ResetHardwareEv+0xce>
    4092:	39 c0       	rjmp	.+114    	; 0x4106 <_ZN20TeaMachineController13ResetHardwareEv+0xfc>
    {
        if( brewManagerResponse == ProcessIncomplete )
        {
            brewManagerResponse = m_pBrewManager->Continue();
    4094:	8a 81       	ldd	r24, Y+2	; 0x02
    4096:	9b 81       	ldd	r25, Y+3	; 0x03
    4098:	dc 01       	movw	r26, r24
    409a:	ed 91       	ld	r30, X+
    409c:	fc 91       	ld	r31, X
    409e:	04 80       	ldd	r0, Z+4	; 0x04
    40a0:	f5 81       	ldd	r31, Z+5	; 0x05
    40a2:	e0 2d       	mov	r30, r0
    40a4:	19 95       	eicall
    40a6:	d8 2e       	mov	r13, r24
        }
        if( milkManagerResponse == ProcessIncomplete )
    40a8:	e1 10       	cpse	r14, r1
    40aa:	0a c0       	rjmp	.+20     	; 0x40c0 <_ZN20TeaMachineController13ResetHardwareEv+0xb6>
        {
            milkManagerResponse = m_pMilkManager->Continue();
    40ac:	8c 81       	ldd	r24, Y+4	; 0x04
    40ae:	9d 81       	ldd	r25, Y+5	; 0x05
    40b0:	dc 01       	movw	r26, r24
    40b2:	ed 91       	ld	r30, X+
    40b4:	fc 91       	ld	r31, X
    40b6:	04 80       	ldd	r0, Z+4	; 0x04
    40b8:	f5 81       	ldd	r31, Z+5	; 0x05
    40ba:	e0 2d       	mov	r30, r0
    40bc:	19 95       	eicall
    40be:	e8 2e       	mov	r14, r24
        }
        if( stirManagerResponse == ProcessIncomplete )
    40c0:	f1 10       	cpse	r15, r1
    40c2:	0a c0       	rjmp	.+20     	; 0x40d8 <_ZN20TeaMachineController13ResetHardwareEv+0xce>
        {
            stirManagerResponse = m_pStirManager->Continue();
    40c4:	8e 81       	ldd	r24, Y+6	; 0x06
    40c6:	9f 81       	ldd	r25, Y+7	; 0x07
    40c8:	dc 01       	movw	r26, r24
    40ca:	ed 91       	ld	r30, X+
    40cc:	fc 91       	ld	r31, X
    40ce:	04 80       	ldd	r0, Z+4	; 0x04
    40d0:	f5 81       	ldd	r31, Z+5	; 0x05
    40d2:	e0 2d       	mov	r30, r0
    40d4:	19 95       	eicall
    40d6:	f8 2e       	mov	r15, r24
        }
        if( conveyorManagerResponse == ProcessIncomplete )
    40d8:	01 11       	cpse	r16, r1
    40da:	0a c0       	rjmp	.+20     	; 0x40f0 <_ZN20TeaMachineController13ResetHardwareEv+0xe6>
        {
            conveyorManagerResponse = m_pConveyorManager->Continue();
    40dc:	88 85       	ldd	r24, Y+8	; 0x08
    40de:	99 85       	ldd	r25, Y+9	; 0x09
    40e0:	dc 01       	movw	r26, r24
    40e2:	ed 91       	ld	r30, X+
    40e4:	fc 91       	ld	r31, X
    40e6:	04 80       	ldd	r0, Z+4	; 0x04
    40e8:	f5 81       	ldd	r31, Z+5	; 0x05
    40ea:	e0 2d       	mov	r30, r0
    40ec:	19 95       	eicall
    40ee:	08 2f       	mov	r16, r24
        }
        if( UIManagerResponse == ProcessIncomplete )
    40f0:	11 11       	cpse	r17, r1
    40f2:	c5 cf       	rjmp	.-118    	; 0x407e <_ZN20TeaMachineController13ResetHardwareEv+0x74>
        {
            UIManagerResponse = m_pUIManager->Continue();
    40f4:	88 81       	ld	r24, Y
    40f6:	99 81       	ldd	r25, Y+1	; 0x01
    40f8:	dc 01       	movw	r26, r24
    40fa:	ed 91       	ld	r30, X+
    40fc:	fc 91       	ld	r31, X
    40fe:	04 80       	ldd	r0, Z+4	; 0x04
    4100:	f5 81       	ldd	r31, Z+5	; 0x05
    4102:	e0 2d       	mov	r30, r0
    4104:	ba cf       	rjmp	.-140    	; 0x407a <_ZN20TeaMachineController13ResetHardwareEv+0x70>
        }
    } // while
 
    // Handle any errors resulting from the reset sequence
    unsigned long lErrorCode = PROC_OK;
    if( brewManagerResponse == ProcessFailed )
    4106:	b1 e0       	ldi	r27, 0x01	; 1
    4108:	db 12       	cpse	r13, r27
    410a:	03 c0       	rjmp	.+6      	; 0x4112 <_ZN20TeaMachineController13ResetHardwareEv+0x108>
    410c:	ea 81       	ldd	r30, Y+2	; 0x02
    410e:	fb 81       	ldd	r31, Y+3	; 0x03
    4110:	05 c0       	rjmp	.+10     	; 0x411c <_ZN20TeaMachineController13ResetHardwareEv+0x112>
    {
        HandleError( ErrorContext_Reset, m_pBrewManager->GetLastError() );
        bResult = false;
    }
    if( milkManagerResponse == ProcessFailed )
    4112:	81 e0       	ldi	r24, 0x01	; 1
    4114:	e8 12       	cpse	r14, r24
    4116:	09 c0       	rjmp	.+18     	; 0x412a <_ZN20TeaMachineController13ResetHardwareEv+0x120>
    4118:	ec 81       	ldd	r30, Y+4	; 0x04
    411a:	fd 81       	ldd	r31, Y+5	; 0x05
    {
        HandleError( ErrorContext_Reset, m_pMilkManager->GetLastError() );
    411c:	26 85       	ldd	r18, Z+14	; 0x0e
    411e:	37 85       	ldd	r19, Z+15	; 0x0f
    4120:	40 89       	ldd	r20, Z+16	; 0x10
    4122:	51 89       	ldd	r21, Z+17	; 0x11
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	ce 01       	movw	r24, r28
    4128:	ac de       	rcall	.-680    	; 0x3e82 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>
        bResult = false;
    }
    if( stirManagerResponse == ProcessFailed )
    412a:	a1 e0       	ldi	r26, 0x01	; 1
    412c:	fa 12       	cpse	r15, r26
    412e:	03 c0       	rjmp	.+6      	; 0x4136 <_ZN20TeaMachineController13ResetHardwareEv+0x12c>
    4130:	ee 81       	ldd	r30, Y+6	; 0x06
    4132:	ff 81       	ldd	r31, Y+7	; 0x07
    4134:	f3 cf       	rjmp	.-26     	; 0x411c <_ZN20TeaMachineController13ResetHardwareEv+0x112>
    {
        HandleError( ErrorContext_Reset, m_pStirManager->GetLastError() );
        bResult = false;
    }
    if( conveyorManagerResponse == ProcessFailed )
    4136:	01 30       	cpi	r16, 0x01	; 1
    4138:	19 f4       	brne	.+6      	; 0x4140 <_ZN20TeaMachineController13ResetHardwareEv+0x136>
    413a:	e8 85       	ldd	r30, Y+8	; 0x08
    413c:	f9 85       	ldd	r31, Y+9	; 0x09
    413e:	ee cf       	rjmp	.-36     	; 0x411c <_ZN20TeaMachineController13ResetHardwareEv+0x112>
    {
        HandleError( ErrorContext_Reset, m_pConveyorManager->GetLastError() );
        bResult = false;
    }
    if( UIManagerResponse == ProcessFailed )
    4140:	11 30       	cpi	r17, 0x01	; 1
    4142:	19 f4       	brne	.+6      	; 0x414a <_ZN20TeaMachineController13ResetHardwareEv+0x140>
    4144:	e8 81       	ld	r30, Y
    4146:	f9 81       	ldd	r31, Y+1	; 0x01
    4148:	e9 cf       	rjmp	.-46     	; 0x411c <_ZN20TeaMachineController13ResetHardwareEv+0x112>
        HandleError( ErrorContext_Reset, m_pUIManager->GetLastError() );
        bResult = false;
    }
   
    return bResult;
}
    414a:	81 e0       	ldi	r24, 0x01	; 1
    414c:	df 91       	pop	r29
    414e:	cf 91       	pop	r28
    4150:	1f 91       	pop	r17
    4152:	0f 91       	pop	r16
    4154:	ff 90       	pop	r15
    4156:	ef 90       	pop	r14
    4158:	df 90       	pop	r13
    415a:	08 95       	ret

0000415c <_ZN20TeaMachineController7ServiceEv>:
//  Service()
//
//  Main service loop
//
void TeaMachineController::Service()
{
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	ec 01       	movw	r28, r24
    if( ResetHardware() )
    4162:	53 df       	rcall	.-346    	; 0x400a <_ZN20TeaMachineController13ResetHardwareEv>
    4164:	88 23       	and	r24, r24
    4166:	09 f4       	brne	.+2      	; 0x416a <_ZN20TeaMachineController7ServiceEv+0xe>
    4168:	47 c1       	rjmp	.+654    	; 0x43f8 <_ZN20TeaMachineController7ServiceEv+0x29c>
    {
        m_pUIManager->BeginProcess();
    416a:	88 81       	ld	r24, Y
    416c:	99 81       	ldd	r25, Y+1	; 0x01
    416e:	dc 01       	movw	r26, r24
    4170:	ed 91       	ld	r30, X+
    4172:	fc 91       	ld	r31, X
    4174:	02 80       	ldd	r0, Z+2	; 0x02
    4176:	f3 81       	ldd	r31, Z+3	; 0x03
    4178:	e0 2d       	mov	r30, r0
    417a:	19 95       	eicall
        
        // Do this loop forever
        while(!m_pTeaMachine->GetSystem()->SystemModeHasChanged())
    417c:	8a 85       	ldd	r24, Y+10	; 0x0a
    417e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4180:	0e 94 2e 02 	call	0x45c	; 0x45c <_ZN21ATMegaApplicationBase9GetSystemEv>
    4184:	06 d9       	rcall	.-3572   	; 0x3392 <_ZN6System20SystemModeHasChangedEv>
    4186:	81 11       	cpse	r24, r1
    4188:	37 c1       	rjmp	.+622    	; 0x43f8 <_ZN20TeaMachineController7ServiceEv+0x29c>
        {
            // Yield to UI manager
            m_pUIManager->Continue();
    418a:	88 81       	ld	r24, Y
    418c:	99 81       	ldd	r25, Y+1	; 0x01
    418e:	dc 01       	movw	r26, r24
    4190:	ed 91       	ld	r30, X+
    4192:	fc 91       	ld	r31, X
    4194:	04 80       	ldd	r0, Z+4	; 0x04
    4196:	f5 81       	ldd	r31, Z+5	; 0x05
    4198:	e0 2d       	mov	r30, r0
    419a:	19 95       	eicall
            
            switch( m_pConveyorManager->GetLastResponse() )
    419c:	a8 85       	ldd	r26, Y+8	; 0x08
    419e:	b9 85       	ldd	r27, Y+9	; 0x09
    41a0:	56 96       	adiw	r26, 0x16	; 22
    41a2:	8c 91       	ld	r24, X
    41a4:	56 97       	sbiw	r26, 0x16	; 22
    41a6:	81 30       	cpi	r24, 0x01	; 1
    41a8:	09 f4       	brne	.+2      	; 0x41ac <_ZN20TeaMachineController7ServiceEv+0x50>
    41aa:	b6 c0       	rjmp	.+364    	; 0x4318 <_ZN20TeaMachineController7ServiceEv+0x1bc>
    41ac:	08 f4       	brcc	.+2      	; 0x41b0 <_ZN20TeaMachineController7ServiceEv+0x54>
    41ae:	ac c0       	rjmp	.+344    	; 0x4308 <_ZN20TeaMachineController7ServiceEv+0x1ac>
    41b0:	82 30       	cpi	r24, 0x02	; 2
    41b2:	21 f7       	brne	.-56     	; 0x417c <_ZN20TeaMachineController7ServiceEv+0x20>
            {
                case ProcessComplete:
                // Conveyor is not advancing
                if( ActiveDrinkIsPresent() )
    41b4:	ce 01       	movw	r24, r28
    41b6:	dd dd       	rcall	.-1094   	; 0x3d72 <_ZN20TeaMachineController20ActiveDrinkIsPresentEv>
    41b8:	88 23       	and	r24, r24
    41ba:	01 f3       	breq	.-64     	; 0x417c <_ZN20TeaMachineController7ServiceEv+0x20>
                {
                    // At least one cup is present on preparation/reception stations and is active (i.e. user has chosen drink)
                    if( (m_drinks[ST_STIR] != NULL) && (m_pStirManager->GetLastResponse() != ProcessIncomplete)  )
    41bc:	88 8d       	ldd	r24, Y+24	; 0x18
    41be:	99 8d       	ldd	r25, Y+25	; 0x19
    41c0:	89 2b       	or	r24, r25
    41c2:	99 f0       	breq	.+38     	; 0x41ea <_ZN20TeaMachineController7ServiceEv+0x8e>
    41c4:	ee 81       	ldd	r30, Y+6	; 0x06
    41c6:	ff 81       	ldd	r31, Y+7	; 0x07
    41c8:	86 89       	ldd	r24, Z+22	; 0x16
    41ca:	88 23       	and	r24, r24
    41cc:	71 f0       	breq	.+28     	; 0x41ea <_ZN20TeaMachineController7ServiceEv+0x8e>
                    {
 Serial.println("Drink present at stir station");
    41ce:	62 ec       	ldi	r22, 0xC2	; 194
    41d0:	77 e0       	ldi	r23, 0x07	; 7
    41d2:	81 e1       	ldi	r24, 0x11	; 17
    41d4:	9a e0       	ldi	r25, 0x0A	; 10
    41d6:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
                        // Check drink standing at stir station
                        if( m_drinks[ST_STIR]->CupIsPresent() && m_drinks[ST_STIR]->SelectionIsConfirmed() && (m_drinks[ST_STIR]->GetState() == MilkStageComplete ) )
    41da:	e8 8d       	ldd	r30, Y+24	; 0x18
    41dc:	f9 8d       	ldd	r31, Y+25	; 0x19
    41de:	80 89       	ldd	r24, Z+16	; 0x10
    41e0:	88 23       	and	r24, r24
    41e2:	19 f0       	breq	.+6      	; 0x41ea <_ZN20TeaMachineController7ServiceEv+0x8e>
    41e4:	87 85       	ldd	r24, Z+15	; 0x0f
    41e6:	81 11       	cpse	r24, r1
    41e8:	9e c0       	rjmp	.+316    	; 0x4326 <_ZN20TeaMachineController7ServiceEv+0x1ca>
	                            HandleError( ErrorContext_Service, m_pStirManager->GetLastError() );
                            }
                        }
                    }
                    
                    if( (m_drinks[ST_MILK] != NULL) && (m_pMilkManager->GetLastResponse() != ProcessIncomplete)  )
    41ea:	8e 89       	ldd	r24, Y+22	; 0x16
    41ec:	9f 89       	ldd	r25, Y+23	; 0x17
    41ee:	89 2b       	or	r24, r25
    41f0:	99 f0       	breq	.+38     	; 0x4218 <_ZN20TeaMachineController7ServiceEv+0xbc>
    41f2:	ec 81       	ldd	r30, Y+4	; 0x04
    41f4:	fd 81       	ldd	r31, Y+5	; 0x05
    41f6:	86 89       	ldd	r24, Z+22	; 0x16
    41f8:	88 23       	and	r24, r24
    41fa:	71 f0       	breq	.+28     	; 0x4218 <_ZN20TeaMachineController7ServiceEv+0xbc>
                    {
Serial.println("Drink present at milk station");
    41fc:	66 ef       	ldi	r22, 0xF6	; 246
    41fe:	77 e0       	ldi	r23, 0x07	; 7
    4200:	81 e1       	ldi	r24, 0x11	; 17
    4202:	9a e0       	ldi	r25, 0x0A	; 10
    4204:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
                        // Check drink standing at milk station
                        if( m_drinks[ST_MILK]->CupIsPresent() && m_drinks[ST_MILK]->SelectionIsConfirmed() && (m_drinks[ST_MILK]->GetState() == BrewStageComplete ) )
    4208:	ee 89       	ldd	r30, Y+22	; 0x16
    420a:	ff 89       	ldd	r31, Y+23	; 0x17
    420c:	80 89       	ldd	r24, Z+16	; 0x10
    420e:	88 23       	and	r24, r24
    4210:	19 f0       	breq	.+6      	; 0x4218 <_ZN20TeaMachineController7ServiceEv+0xbc>
    4212:	87 85       	ldd	r24, Z+15	; 0x0f
    4214:	81 11       	cpse	r24, r1
    4216:	a4 c0       	rjmp	.+328    	; 0x4360 <_ZN20TeaMachineController7ServiceEv+0x204>
								HandleError( ErrorContext_Service, m_pMilkManager->GetLastError() );
							}
                        }
                    }
                    
                    if( ( m_drinks[ST_BREW] != NULL) && (m_pBrewManager->GetLastResponse() != ProcessIncomplete) )
    4218:	8c 89       	ldd	r24, Y+20	; 0x14
    421a:	9d 89       	ldd	r25, Y+21	; 0x15
    421c:	89 2b       	or	r24, r25
    421e:	99 f0       	breq	.+38     	; 0x4246 <_ZN20TeaMachineController7ServiceEv+0xea>
    4220:	ea 81       	ldd	r30, Y+2	; 0x02
    4222:	fb 81       	ldd	r31, Y+3	; 0x03
    4224:	86 89       	ldd	r24, Z+22	; 0x16
    4226:	88 23       	and	r24, r24
    4228:	71 f0       	breq	.+28     	; 0x4246 <_ZN20TeaMachineController7ServiceEv+0xea>
                    {
 Serial.println("Drink present at brew station");
    422a:	6a e2       	ldi	r22, 0x2A	; 42
    422c:	78 e0       	ldi	r23, 0x08	; 8
    422e:	81 e1       	ldi	r24, 0x11	; 17
    4230:	9a e0       	ldi	r25, 0x0A	; 10
    4232:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
                       
                        // Check drink standing at brew station
                        if( m_drinks[ST_BREW]->CupIsPresent() && m_drinks[ST_BREW]->SelectionIsConfirmed() && (m_drinks[ST_BREW]->GetState() == Empty) )
    4236:	ec 89       	ldd	r30, Y+20	; 0x14
    4238:	fd 89       	ldd	r31, Y+21	; 0x15
    423a:	80 89       	ldd	r24, Z+16	; 0x10
    423c:	88 23       	and	r24, r24
    423e:	19 f0       	breq	.+6      	; 0x4246 <_ZN20TeaMachineController7ServiceEv+0xea>
    4240:	87 85       	ldd	r24, Z+15	; 0x0f
    4242:	81 11       	cpse	r24, r1
    4244:	aa c0       	rjmp	.+340    	; 0x439a <_ZN20TeaMachineController7ServiceEv+0x23e>
                            }
                        }
                    }
                    
                    // Yield to brew process manager
                    if( m_pBrewManager->Continue() == ProcessFailed )
    4246:	8a 81       	ldd	r24, Y+2	; 0x02
    4248:	9b 81       	ldd	r25, Y+3	; 0x03
    424a:	dc 01       	movw	r26, r24
    424c:	ed 91       	ld	r30, X+
    424e:	fc 91       	ld	r31, X
    4250:	04 80       	ldd	r0, Z+4	; 0x04
    4252:	f5 81       	ldd	r31, Z+5	; 0x05
    4254:	e0 2d       	mov	r30, r0
    4256:	19 95       	eicall
    4258:	81 30       	cpi	r24, 0x01	; 1
    425a:	49 f4       	brne	.+18     	; 0x426e <_ZN20TeaMachineController7ServiceEv+0x112>
    425c:	ea 81       	ldd	r30, Y+2	; 0x02
    425e:	fb 81       	ldd	r31, Y+3	; 0x03
                           // Milk station cup is ready to begin milk process
                            m_pMilkManager->SetDrink(m_drinks[ST_MILK]);
                            if( m_pMilkManager->BeginProcess() == ProcessFailed )
							{
								// Handle process failure
								HandleError( ErrorContext_Service, m_pMilkManager->GetLastError() );
    4260:	26 85       	ldd	r18, Z+14	; 0x0e
    4262:	37 85       	ldd	r19, Z+15	; 0x0f
    4264:	40 89       	ldd	r20, Z+16	; 0x10
    4266:	51 89       	ldd	r21, Z+17	; 0x11
    4268:	61 e0       	ldi	r22, 0x01	; 1
    426a:	ce 01       	movw	r24, r28
    426c:	0a de       	rcall	.-1004   	; 0x3e82 <_ZN20TeaMachineController11HandleErrorE22TeaMachineErrorContextm>
	                    // Handle process failure
	                    HandleError( ErrorContext_Service, m_pBrewManager->GetLastError() );
                    }
                    
                    // Yield to milk process manager
                    if( m_pMilkManager->Continue() == ProcessFailed )
    426e:	8c 81       	ldd	r24, Y+4	; 0x04
    4270:	9d 81       	ldd	r25, Y+5	; 0x05
    4272:	dc 01       	movw	r26, r24
    4274:	ed 91       	ld	r30, X+
    4276:	fc 91       	ld	r31, X
    4278:	04 80       	ldd	r0, Z+4	; 0x04
    427a:	f5 81       	ldd	r31, Z+5	; 0x05
    427c:	e0 2d       	mov	r30, r0
    427e:	19 95       	eicall
    4280:	81 30       	cpi	r24, 0x01	; 1
    4282:	19 f4       	brne	.+6      	; 0x428a <_ZN20TeaMachineController7ServiceEv+0x12e>
    4284:	ec 81       	ldd	r30, Y+4	; 0x04
    4286:	fd 81       	ldd	r31, Y+5	; 0x05
    4288:	eb cf       	rjmp	.-42     	; 0x4260 <_ZN20TeaMachineController7ServiceEv+0x104>
	                    // Handle process failure
	                    HandleError( ErrorContext_Service, m_pMilkManager->GetLastError() );
                    }
                    
                    // Yield to stir process manager
                    if( m_pStirManager->Continue() == ProcessFailed )
    428a:	8e 81       	ldd	r24, Y+6	; 0x06
    428c:	9f 81       	ldd	r25, Y+7	; 0x07
    428e:	dc 01       	movw	r26, r24
    4290:	ed 91       	ld	r30, X+
    4292:	fc 91       	ld	r31, X
    4294:	04 80       	ldd	r0, Z+4	; 0x04
    4296:	f5 81       	ldd	r31, Z+5	; 0x05
    4298:	e0 2d       	mov	r30, r0
    429a:	19 95       	eicall
    429c:	81 30       	cpi	r24, 0x01	; 1
    429e:	19 f4       	brne	.+6      	; 0x42a6 <_ZN20TeaMachineController7ServiceEv+0x14a>
    42a0:	ee 81       	ldd	r30, Y+6	; 0x06
    42a2:	ff 81       	ldd	r31, Y+7	; 0x07
                    {
	                    // Handle process failure
	                    HandleError( ErrorContext_Service, m_pStirManager->GetLastError() );
                    }
                    
                    if( PreparationStationsAreInactive() )
    42a4:	dd cf       	rjmp	.-70     	; 0x4260 <_ZN20TeaMachineController7ServiceEv+0x104>
    42a6:	ce 01       	movw	r24, r28
    42a8:	95 db       	rcall	.-2262   	; 0x39d4 <_ZN20TeaMachineController30PreparationStationsAreInactiveEv>
    42aa:	88 23       	and	r24, r24
						||  DrinkStateAtStation(ST_RECEPTION_C, Empty)
						||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
						||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
						||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
						*/
						if((	ReceptionCupsReadyToAdvance()
    42ac:	21 f1       	breq	.+72     	; 0x42f6 <_ZN20TeaMachineController7ServiceEv+0x19a>
    42ae:	ce 01       	movw	r24, r28
    42b0:	45 db       	rcall	.-2422   	; 0x393c <_ZN20TeaMachineController27ReceptionCupsReadyToAdvanceEv>
							||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
							||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
							||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
    42b2:	81 11       	cpse	r24, r1
						||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
						||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
						||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
						*/
						if((	ReceptionCupsReadyToAdvance()
							||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
    42b4:	15 c0       	rjmp	.+42     	; 0x42e0 <_ZN20TeaMachineController7ServiceEv+0x184>
    42b6:	41 e0       	ldi	r20, 0x01	; 1
    42b8:	64 e0       	ldi	r22, 0x04	; 4
    42ba:	70 e0       	ldi	r23, 0x00	; 0
    42bc:	ce 01       	movw	r24, r28
    42be:	1b db       	rcall	.-2506   	; 0x38f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    42c0:	81 11       	cpse	r24, r1
							||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
    42c2:	0e c0       	rjmp	.+28     	; 0x42e0 <_ZN20TeaMachineController7ServiceEv+0x184>
    42c4:	42 e0       	ldi	r20, 0x02	; 2
    42c6:	65 e0       	ldi	r22, 0x05	; 5
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	ce 01       	movw	r24, r28
    42cc:	14 db       	rcall	.-2520   	; 0x38f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    42ce:	81 11       	cpse	r24, r1
							||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
    42d0:	07 c0       	rjmp	.+14     	; 0x42e0 <_ZN20TeaMachineController7ServiceEv+0x184>
    42d2:	43 e0       	ldi	r20, 0x03	; 3
    42d4:	66 e0       	ldi	r22, 0x06	; 6
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	ce 01       	movw	r24, r28
    42da:	0d db       	rcall	.-2534   	; 0x38f6 <_ZN20TeaMachineController19DrinkStateAtStationEi10DrinkState>
    42dc:	88 23       	and	r24, r24
    42de:	59 f0       	breq	.+22     	; 0x42f6 <_ZN20TeaMachineController7ServiceEv+0x19a>
    42e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    42e4:	89 2b       	or	r24, r25
    42e6:	39 f4       	brne	.+14     	; 0x42f6 <_ZN20TeaMachineController7ServiceEv+0x19a>
    42e8:	64 e0       	ldi	r22, 0x04	; 4
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	ce 01       	movw	r24, r28
    42ee:	15 db       	rcall	.-2518   	; 0x391a <_ZN20TeaMachineController25DrinkUnconfirmedAtStationEi>
    42f0:	88 23       	and	r24, r24
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <_ZN20TeaMachineController7ServiceEv+0x19a>
    42f4:	6e c0       	rjmp	.+220    	; 0x43d2 <_ZN20TeaMachineController7ServiceEv+0x276>
							m_pConveyorManager->BeginProcess();
						}
                    }
					
					// Yield to the conveyor manager
					m_pConveyorManager->Continue();
    42f6:	88 85       	ldd	r24, Y+8	; 0x08
    42f8:	99 85       	ldd	r25, Y+9	; 0x09
    42fa:	dc 01       	movw	r26, r24
    42fc:	ed 91       	ld	r30, X+
    42fe:	fc 91       	ld	r31, X
    4300:	04 80       	ldd	r0, Z+4	; 0x04
    4302:	f5 81       	ldd	r31, Z+5	; 0x05
    4304:	e0 2d       	mov	r30, r0
    4306:	39 cf       	rjmp	.-398    	; 0x417a <_ZN20TeaMachineController7ServiceEv+0x1e>
                }
                break;
                
                case ProcessIncomplete:
                // Conveyor is in the process of advancing, so do nothing else until it completes
                m_pConveyorManager->Continue();
    4308:	ed 91       	ld	r30, X+
    430a:	fc 91       	ld	r31, X
    430c:	11 97       	sbiw	r26, 0x01	; 1
    430e:	04 80       	ldd	r0, Z+4	; 0x04
    4310:	f5 81       	ldd	r31, Z+5	; 0x05
    4312:	e0 2d       	mov	r30, r0
    4314:	cd 01       	movw	r24, r26
    4316:	31 cf       	rjmp	.-414    	; 0x417a <_ZN20TeaMachineController7ServiceEv+0x1e>
                break;
                
                case ProcessFailed:
                // Conveyor failure
                HandleError( ErrorContext_Service, m_pConveyorManager->GetLastError() );
    4318:	1e 96       	adiw	r26, 0x0e	; 14
    431a:	2d 91       	ld	r18, X+
    431c:	3d 91       	ld	r19, X+
    431e:	4d 91       	ld	r20, X+
    4320:	5c 91       	ld	r21, X
    4322:	51 97       	sbiw	r26, 0x11	; 17
    4324:	a1 cf       	rjmp	.-190    	; 0x4268 <_ZN20TeaMachineController7ServiceEv+0x10c>
                    // At least one cup is present on preparation/reception stations and is active (i.e. user has chosen drink)
                    if( (m_drinks[ST_STIR] != NULL) && (m_pStirManager->GetLastResponse() != ProcessIncomplete)  )
                    {
 Serial.println("Drink present at stir station");
                        // Check drink standing at stir station
                        if( m_drinks[ST_STIR]->CupIsPresent() && m_drinks[ST_STIR]->SelectionIsConfirmed() && (m_drinks[ST_STIR]->GetState() == MilkStageComplete ) )
    4326:	81 81       	ldd	r24, Z+1	; 0x01
    4328:	82 30       	cpi	r24, 0x02	; 2
    432a:	09 f0       	breq	.+2      	; 0x432e <_ZN20TeaMachineController7ServiceEv+0x1d2>
    432c:	5e cf       	rjmp	.-324    	; 0x41ea <_ZN20TeaMachineController7ServiceEv+0x8e>
                        {
Serial.println("Starting stir process");
    432e:	60 ee       	ldi	r22, 0xE0	; 224
    4330:	77 e0       	ldi	r23, 0x07	; 7
    4332:	81 e1       	ldi	r24, 0x11	; 17
    4334:	9a e0       	ldi	r25, 0x0A	; 10
    4336:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
                            // Stir station cup is ready to begin stir process
                            m_pStirManager->SetDrink(m_drinks[ST_STIR]);
    433a:	88 8d       	ldd	r24, Y+24	; 0x18
    433c:	99 8d       	ldd	r25, Y+25	; 0x19
    433e:	ee 81       	ldd	r30, Y+6	; 0x06
    4340:	ff 81       	ldd	r31, Y+7	; 0x07
	bool Test();							            // Perform a complete cycle test
    ProcessManagerResponse BeginReset();                // Initiate reset sequence
    ProcessManagerResponse BeginProcess();              // Initiate Stir process
	ProcessManagerResponse Continue();		            // Initiate the next step of the process
	void Stop();	    	                            // Terminate the Stir process
    void SetDrink( Drink *pDrink ) { m_pDrink = pDrink; } // Set the current drink
    4342:	91 8f       	std	Z+25, r25	; 0x19
    4344:	80 8f       	std	Z+24, r24	; 0x18
                            if( m_pStirManager->BeginProcess() == ProcessFailed )
    4346:	8e 81       	ldd	r24, Y+6	; 0x06
    4348:	9f 81       	ldd	r25, Y+7	; 0x07
    434a:	dc 01       	movw	r26, r24
    434c:	ed 91       	ld	r30, X+
    434e:	fc 91       	ld	r31, X
    4350:	02 80       	ldd	r0, Z+2	; 0x02
    4352:	f3 81       	ldd	r31, Z+3	; 0x03
    4354:	e0 2d       	mov	r30, r0
    4356:	19 95       	eicall
    4358:	81 30       	cpi	r24, 0x01	; 1
    435a:	09 f0       	breq	.+2      	; 0x435e <_ZN20TeaMachineController7ServiceEv+0x202>
    435c:	46 cf       	rjmp	.-372    	; 0x41ea <_ZN20TeaMachineController7ServiceEv+0x8e>
    435e:	a0 cf       	rjmp	.-192    	; 0x42a0 <_ZN20TeaMachineController7ServiceEv+0x144>
                    
                    if( (m_drinks[ST_MILK] != NULL) && (m_pMilkManager->GetLastResponse() != ProcessIncomplete)  )
                    {
Serial.println("Drink present at milk station");
                        // Check drink standing at milk station
                        if( m_drinks[ST_MILK]->CupIsPresent() && m_drinks[ST_MILK]->SelectionIsConfirmed() && (m_drinks[ST_MILK]->GetState() == BrewStageComplete ) )
    4360:	81 81       	ldd	r24, Z+1	; 0x01
    4362:	81 30       	cpi	r24, 0x01	; 1
    4364:	09 f0       	breq	.+2      	; 0x4368 <_ZN20TeaMachineController7ServiceEv+0x20c>
    4366:	58 cf       	rjmp	.-336    	; 0x4218 <_ZN20TeaMachineController7ServiceEv+0xbc>
                        {
 Serial.println("Starting milk process");
    4368:	64 e1       	ldi	r22, 0x14	; 20
    436a:	78 e0       	ldi	r23, 0x08	; 8
    436c:	81 e1       	ldi	r24, 0x11	; 17
    436e:	9a e0       	ldi	r25, 0x0A	; 10
    4370:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
                           // Milk station cup is ready to begin milk process
                            m_pMilkManager->SetDrink(m_drinks[ST_MILK]);
    4374:	8e 89       	ldd	r24, Y+22	; 0x16
    4376:	9f 89       	ldd	r25, Y+23	; 0x17
    4378:	ec 81       	ldd	r30, Y+4	; 0x04
    437a:	fd 81       	ldd	r31, Y+5	; 0x05
    ProcessManagerResponse BeginReset();                // Initiate reset sequence
    ProcessManagerResponse BeginProcess();              // Initiate Milk process
	ProcessManagerResponse Continue();		            // Initiate the next step of the process
	void Stop();										// Terminate the Milk process
    
    void SetDrink( Drink *pDrink ) { m_pDrink = pDrink; } // Set the current drink
    437c:	91 8f       	std	Z+25, r25	; 0x19
    437e:	80 8f       	std	Z+24, r24	; 0x18
                            if( m_pMilkManager->BeginProcess() == ProcessFailed )
    4380:	8c 81       	ldd	r24, Y+4	; 0x04
    4382:	9d 81       	ldd	r25, Y+5	; 0x05
    4384:	dc 01       	movw	r26, r24
    4386:	ed 91       	ld	r30, X+
    4388:	fc 91       	ld	r31, X
    438a:	02 80       	ldd	r0, Z+2	; 0x02
    438c:	f3 81       	ldd	r31, Z+3	; 0x03
    438e:	e0 2d       	mov	r30, r0
    4390:	19 95       	eicall
    4392:	81 30       	cpi	r24, 0x01	; 1
    4394:	09 f0       	breq	.+2      	; 0x4398 <_ZN20TeaMachineController7ServiceEv+0x23c>
    4396:	40 cf       	rjmp	.-384    	; 0x4218 <_ZN20TeaMachineController7ServiceEv+0xbc>
    4398:	75 cf       	rjmp	.-278    	; 0x4284 <_ZN20TeaMachineController7ServiceEv+0x128>
                    if( ( m_drinks[ST_BREW] != NULL) && (m_pBrewManager->GetLastResponse() != ProcessIncomplete) )
                    {
 Serial.println("Drink present at brew station");
                       
                        // Check drink standing at brew station
                        if( m_drinks[ST_BREW]->CupIsPresent() && m_drinks[ST_BREW]->SelectionIsConfirmed() && (m_drinks[ST_BREW]->GetState() == Empty) )
    439a:	81 81       	ldd	r24, Z+1	; 0x01
    439c:	81 11       	cpse	r24, r1
    439e:	53 cf       	rjmp	.-346    	; 0x4246 <_ZN20TeaMachineController7ServiceEv+0xea>
                        {
 Serial.println("Starting brew process");
    43a0:	68 e4       	ldi	r22, 0x48	; 72
    43a2:	78 e0       	ldi	r23, 0x08	; 8
    43a4:	81 e1       	ldi	r24, 0x11	; 17
    43a6:	9a e0       	ldi	r25, 0x0A	; 10
    43a8:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
                           // Brew station cup is ready to begin brew process
                            m_pBrewManager->SetDrink(m_drinks[ST_BREW]);
    43ac:	6c 89       	ldd	r22, Y+20	; 0x14
    43ae:	7d 89       	ldd	r23, Y+21	; 0x15
    43b0:	8a 81       	ldd	r24, Y+2	; 0x02
    43b2:	9b 81       	ldd	r25, Y+3	; 0x03
    43b4:	0e 94 34 04 	call	0x868	; 0x868 <_ZN11BrewManager8SetDrinkEP5Drink>
                            if( m_pBrewManager->BeginProcess() == ProcessFailed )
    43b8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ba:	9b 81       	ldd	r25, Y+3	; 0x03
    43bc:	dc 01       	movw	r26, r24
    43be:	ed 91       	ld	r30, X+
    43c0:	fc 91       	ld	r31, X
    43c2:	02 80       	ldd	r0, Z+2	; 0x02
    43c4:	f3 81       	ldd	r31, Z+3	; 0x03
    43c6:	e0 2d       	mov	r30, r0
    43c8:	19 95       	eicall
    43ca:	81 30       	cpi	r24, 0x01	; 1
    43cc:	09 f0       	breq	.+2      	; 0x43d0 <_ZN20TeaMachineController7ServiceEv+0x274>
    43ce:	3b cf       	rjmp	.-394    	; 0x4246 <_ZN20TeaMachineController7ServiceEv+0xea>
						if((	ReceptionCupsReadyToAdvance()
							||  DrinkStateAtStation(ST_BREW, BrewStageComplete)
							||  DrinkStateAtStation(ST_MILK, MilkStageComplete)
							||  DrinkStateAtStation(ST_STIR, ReadyToDrink) ) && !((GetDrinkByStation(ST_FARLEFT) != NULL) || (DrinkUnconfirmedAtStation(ST_BREW))))
						{
Serial.println("Conveyor advance");
    43d0:	45 cf       	rjmp	.-374    	; 0x425c <_ZN20TeaMachineController7ServiceEv+0x100>
    43d2:	6e e5       	ldi	r22, 0x5E	; 94
    43d4:	78 e0       	ldi	r23, 0x08	; 8
    43d6:	81 e1       	ldi	r24, 0x11	; 17
    43d8:	9a e0       	ldi	r25, 0x0A	; 10
    43da:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <_ZN5Print7printlnEPKc>
							// Tell UI Manager that conveyor is advancing
							m_pUIManager->NotifyStationAdvanceBegins();
    43de:	88 81       	ld	r24, Y
    43e0:	99 81       	ldd	r25, Y+1	; 0x01
    43e2:	54 d5       	rcall	.+2728   	; 0x4e8c <_ZN9UIManager26NotifyStationAdvanceBeginsEv>
							
							// Initiate the advance
							m_pConveyorManager->BeginProcess();
    43e4:	88 85       	ldd	r24, Y+8	; 0x08
    43e6:	99 85       	ldd	r25, Y+9	; 0x09
    43e8:	dc 01       	movw	r26, r24
    43ea:	ed 91       	ld	r30, X+
    43ec:	fc 91       	ld	r31, X
    43ee:	02 80       	ldd	r0, Z+2	; 0x02
    43f0:	f3 81       	ldd	r31, Z+3	; 0x03
    43f2:	e0 2d       	mov	r30, r0
    43f4:	19 95       	eicall
    43f6:	7f cf       	rjmp	.-258    	; 0x42f6 <_ZN20TeaMachineController7ServiceEv+0x19a>
                HandleError( ErrorContext_Service, m_pConveyorManager->GetLastError() );
                break;
            } // switch
        } // while
    }
}
    43f8:	df 91       	pop	r29
    43fa:	cf 91       	pop	r28
    43fc:	08 95       	ret

000043fe <_ZN20TeaMachineController10InitialiseEv>:
//  Initialise()
//
//  Initialise class members and manager objects
//
bool TeaMachineController::Initialise()
{
    43fe:	0f 93       	push	r16
    4400:	1f 93       	push	r17
    4402:	cf 93       	push	r28
    4404:	df 93       	push	r29
    4406:	ec 01       	movw	r28, r24
    // Create and initialise UI manager
    m_pUIManager = new UIManager(this);
    4408:	8a e2       	ldi	r24, 0x2A	; 42
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    4410:	8c 01       	movw	r16, r24
    4412:	be 01       	movw	r22, r28
    4414:	ca d0       	rcall	.+404    	; 0x45aa <_ZN9UIManagerC1EP20TeaMachineController>
    4416:	19 83       	std	Y+1, r17	; 0x01
    4418:	08 83       	st	Y, r16
    m_pUIManager->Initialise();
    441a:	c8 01       	movw	r24, r16
    441c:	83 d5       	rcall	.+2822   	; 0x4f24 <_ZN9UIManager10InitialiseEv>

    // Create and initialise brew manager
    m_pBrewManager = new BrewManager(this);
    441e:	8c e3       	ldi	r24, 0x3C	; 60
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    4426:	8c 01       	movw	r16, r24
    4428:	be 01       	movw	r22, r28
    442a:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN11BrewManagerC1EP20TeaMachineController>
    442e:	1b 83       	std	Y+3, r17	; 0x03
    4430:	0a 83       	std	Y+2, r16	; 0x02
    m_pBrewManager->Initialise();
    4432:	c8 01       	movw	r24, r16
    4434:	0e 94 a3 06 	call	0xd46	; 0xd46 <_ZN11BrewManager10InitialiseEv>

    // Create and initialise Milk manager
    m_pMilkManager = new MilkManager(this);
    4438:	82 e2       	ldi	r24, 0x22	; 34
    443a:	90 e0       	ldi	r25, 0x00	; 0
    443c:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    4440:	8c 01       	movw	r16, r24
    4442:	be 01       	movw	r22, r28
    4444:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <_ZN11MilkManagerC1EP20TeaMachineController>
    4448:	1d 83       	std	Y+5, r17	; 0x05
    444a:	0c 83       	std	Y+4, r16	; 0x04
    m_pMilkManager->Initialise();
    444c:	c8 01       	movw	r24, r16
    444e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <_ZN11MilkManager10InitialiseEv>
  
    // Create and initialise Stir manager
    m_pStirManager = new StirManager(this);
    4452:	8a e1       	ldi	r24, 0x1A	; 26
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    445a:	8c 01       	movw	r16, r24
    445c:	be 01       	movw	r22, r28
    445e:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <_ZN11StirManagerC1EP20TeaMachineController>
    4462:	1f 83       	std	Y+7, r17	; 0x07
    4464:	0e 83       	std	Y+6, r16	; 0x06
    m_pStirManager->Initialise();
    4466:	c8 01       	movw	r24, r16
    4468:	0e 94 18 18 	call	0x3030	; 0x3030 <_ZN11StirManager10InitialiseEv>

    // Create and initialise conveyor manager
    m_pConveyorManager = new ConveyorManager(this);
    446c:	8a e1       	ldi	r24, 0x1A	; 26
    446e:	90 e0       	ldi	r25, 0x00	; 0
    4470:	0e 94 48 2d 	call	0x5a90	; 0x5a90 <_Znwj>
    4474:	8c 01       	movw	r16, r24
    4476:	be 01       	movw	r22, r28
    4478:	0e 94 5e 07 	call	0xebc	; 0xebc <_ZN15ConveyorManagerC1EP20TeaMachineController>
    447c:	19 87       	std	Y+9, r17	; 0x09
    447e:	08 87       	std	Y+8, r16	; 0x08
    m_pConveyorManager->Initialise();
    4480:	c8 01       	movw	r24, r16
    4482:	0e 94 e6 07 	call	0xfcc	; 0xfcc <_ZN15ConveyorManager10InitialiseEv>

    return true; 
}
    4486:	81 e0       	ldi	r24, 0x01	; 1
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	08 95       	ret

00004492 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode>:
//  Start()
//
//  Start the tea machine
//
bool TeaMachineController::Start( TeaMachineControllerMode mode )
{
    4492:	ff 92       	push	r15
    4494:	0f 93       	push	r16
    4496:	1f 93       	push	r17
    4498:	cf 93       	push	r28
    449a:	df 93       	push	r29
    449c:	ec 01       	movw	r28, r24
    449e:	f6 2e       	mov	r15, r22
    bool bResult = false;
 
    // Initialise the tea machine
    Initialise();
    44a0:	ae df       	rcall	.-164    	; 0x43fe <_ZN20TeaMachineController10InitialiseEv>

    switch( mode )
    44a2:	8f 2d       	mov	r24, r15
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	88 30       	cpi	r24, 0x08	; 8
    44a8:	91 05       	cpc	r25, r1
    44aa:	08 f0       	brcs	.+2      	; 0x44ae <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x1c>
    44ac:	41 c0       	rjmp	.+130    	; 0x4530 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x9e>
    44ae:	fc 01       	movw	r30, r24
    44b0:	88 27       	eor	r24, r24
    44b2:	ed 55       	subi	r30, 0x5D	; 93
    44b4:	ff 4f       	sbci	r31, 0xFF	; 255
    44b6:	8f 4f       	sbci	r24, 0xFF	; 255
    44b8:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__tablejump2__>
    {
        // Start tea machine for normal 'in service' operation (no logging)
        case ControllerMode_InService:
			Serial.end();
    44bc:	81 e1       	ldi	r24, 0x11	; 17
    44be:	9a e0       	ldi	r25, 0x0A	; 10
    44c0:	0e 94 84 2c 	call	0x5908	; 0x5908 <_ZN14HardwareSerial3endEv>
            Service();
    44c4:	ce 01       	movw	r24, r28
    44c6:	4a de       	rcall	.-876    	; 0x415c <_ZN20TeaMachineController7ServiceEv>
    44c8:	26 e0       	ldi	r18, 0x06	; 6
    44ca:	40 e8       	ldi	r20, 0x80	; 128
    44cc:	55 e2       	ldi	r21, 0x25	; 37
    44ce:	60 e0       	ldi	r22, 0x00	; 0
    44d0:	70 e0       	ldi	r23, 0x00	; 0
    44d2:	81 e1       	ldi	r24, 0x11	; 17
    44d4:	9a e0       	ldi	r25, 0x0A	; 10
    44d6:	0e 94 21 2c 	call	0x5842	; 0x5842 <_ZN14HardwareSerial5beginEmh>
			Serial.begin(SERIAL_BAUDRATE);
            break;
			
        // Start tea machine for normal operation with logging switched on
        case ControllerMode_InServiceWithLogging:
		    Service();
    44da:	2a c0       	rjmp	.+84     	; 0x4530 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x9e>
    44dc:	ce 01       	movw	r24, r28
    44de:	3e de       	rcall	.-900    	; 0x415c <_ZN20TeaMachineController7ServiceEv>
		    break;
       
            
        // Test the user interface operation
        case ControllerMode_TestUserInterface:
            TestUserInterface();
    44e0:	27 c0       	rjmp	.+78     	; 0x4530 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x9e>
    44e2:	ce 01       	movw	r24, r28
    44e4:	0f dd       	rcall	.-1506   	; 0x3f04 <_ZN20TeaMachineController17TestUserInterfaceEv>
            break;
           
        // Test the brew process 
        case ControllerMode_TestBrewManager:          
            bResult = m_pBrewManager->Test();
    44e6:	8a 81       	ldd	r24, Y+2	; 0x02
    44e8:	9b 81       	ldd	r25, Y+3	; 0x03
    44ea:	05 c0       	rjmp	.+10     	; 0x44f6 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x64>
            break;
            
        // Test the milk process
        case ControllerMode_TestMilkManager:
            bResult = m_pMilkManager->Test();
    44ec:	8c 81       	ldd	r24, Y+4	; 0x04
    44ee:	9d 81       	ldd	r25, Y+5	; 0x05
    44f0:	02 c0       	rjmp	.+4      	; 0x44f6 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0x64>
            break;
            
        // Test the stir process
        case ControllerMode_TestStirManager:
            bResult = m_pStirManager->Test();
    44f2:	8e 81       	ldd	r24, Y+6	; 0x06
    44f4:	9f 81       	ldd	r25, Y+7	; 0x07
    44f6:	dc 01       	movw	r26, r24
    44f8:	ed 91       	ld	r30, X+
    44fa:	fc 91       	ld	r31, X
    44fc:	02 84       	ldd	r0, Z+10	; 0x0a
    44fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    4500:	e0 2d       	mov	r30, r0
			m_pUIManager->SetMessage( "LOAD", BLANK, BLANK, BLANK );
		   break;
    } //switch
    
    return bResult;
}
    4502:	df 91       	pop	r29
    4504:	cf 91       	pop	r28
    4506:	1f 91       	pop	r17
    4508:	0f 91       	pop	r16
    450a:	ff 90       	pop	r15
            bResult = m_pMilkManager->Test();
            break;
            
        // Test the stir process
        case ControllerMode_TestStirManager:
            bResult = m_pStirManager->Test();
    450c:	19 94       	eijmp
	    case ControllerMode_TestConveyorManager:
		   break;
         
        // Set load positions
		case ControllerMode_Load:
			bResult = m_pMilkManager->SetLoadPosition();
    450e:	8c 81       	ldd	r24, Y+4	; 0x04
    4510:	9d 81       	ldd	r25, Y+5	; 0x05
    4512:	0e 94 b1 13 	call	0x2762	; 0x2762 <_ZN11MilkManager15SetLoadPositionEv>
    4516:	f8 2e       	mov	r15, r24
			m_pUIManager->SetMessage( "LOAD", BLANK, BLANK, BLANK );
    4518:	0f ef       	ldi	r16, 0xFF	; 255
    451a:	1f ef       	ldi	r17, 0xFF	; 255
    451c:	2f ef       	ldi	r18, 0xFF	; 255
    451e:	3f ef       	ldi	r19, 0xFF	; 255
    4520:	4f ef       	ldi	r20, 0xFF	; 255
    4522:	5f ef       	ldi	r21, 0xFF	; 255
    4524:	6f e6       	ldi	r22, 0x6F	; 111
    4526:	78 e0       	ldi	r23, 0x08	; 8
    4528:	88 81       	ld	r24, Y
    452a:	99 81       	ldd	r25, Y+1	; 0x01
    452c:	14 d1       	rcall	.+552    	; 0x4756 <_ZN9UIManager10SetMessageEPciii>
		   break;
    452e:	01 c0       	rjmp	.+2      	; 0x4532 <_ZN20TeaMachineController5StartE24TeaMachineControllerMode+0xa0>
//
//  Start the tea machine
//
bool TeaMachineController::Start( TeaMachineControllerMode mode )
{
    bool bResult = false;
    4530:	f1 2c       	mov	r15, r1
			m_pUIManager->SetMessage( "LOAD", BLANK, BLANK, BLANK );
		   break;
    } //switch
    
    return bResult;
}
    4532:	8f 2d       	mov	r24, r15
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	1f 91       	pop	r17
    453a:	0f 91       	pop	r16
    453c:	ff 90       	pop	r15
    453e:	08 95       	ret

00004540 <_ZN9UIManager4StopEv>:
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4540:	08 95       	ret

00004542 <_ZN9UIManager10BeginResetEv>:
    4542:	fc 01       	movw	r30, r24
    4544:	15 8e       	std	Z+29, r1	; 0x1d
    4546:	16 8a       	std	Z+22, r1	; 0x16
    4548:	80 e0       	ldi	r24, 0x00	; 0
    454a:	08 95       	ret

0000454c <_ZN9UIManager12BeginProcessEv>:
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	ec 01       	movw	r28, r24
    4552:	41 e0       	ldi	r20, 0x01	; 1
    4554:	60 e0       	ldi	r22, 0x00	; 0
    4556:	8f 89       	ldd	r24, Y+23	; 0x17
    4558:	98 8d       	ldd	r25, Y+24	; 0x18
    455a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN7Display3SetE12IndicatorLEDb>
    455e:	8f 89       	ldd	r24, Y+23	; 0x17
    4560:	98 8d       	ldd	r25, Y+24	; 0x18
    4562:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	8d 8f       	std	Y+29, r24	; 0x1d
    456a:	1e 8a       	std	Y+22, r1	; 0x16
    456c:	80 e0       	ldi	r24, 0x00	; 0
    456e:	df 91       	pop	r29
    4570:	cf 91       	pop	r28
    4572:	08 95       	ret

00004574 <_ZN9UIManager12ClearMembersEv>:
    4574:	cf 93       	push	r28
    4576:	df 93       	push	r29
    4578:	ec 01       	movw	r28, r24
    457a:	18 8e       	std	Y+24, r1	; 0x18
    457c:	1f 8a       	std	Y+23, r1	; 0x17
    457e:	1a 8e       	std	Y+26, r1	; 0x1a
    4580:	19 8e       	std	Y+25, r1	; 0x19
    4582:	1c 8e       	std	Y+28, r1	; 0x1c
    4584:	1b 8e       	std	Y+27, r1	; 0x1b
    4586:	1f 8e       	std	Y+31, r1	; 0x1f
    4588:	1e 8e       	std	Y+30, r1	; 0x1e
    458a:	1d 8e       	std	Y+29, r1	; 0x1d
    458c:	1a a2       	std	Y+34, r1	; 0x22
    458e:	1b a2       	std	Y+35, r1	; 0x23
    4590:	1c a2       	std	Y+36, r1	; 0x24
    4592:	1d a2       	std	Y+37, r1	; 0x25
    4594:	18 a2       	std	Y+32, r1	; 0x20
    4596:	19 a2       	std	Y+33, r1	; 0x21
    4598:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    459c:	6e a3       	std	Y+38, r22	; 0x26
    459e:	7f a3       	std	Y+39, r23	; 0x27
    45a0:	88 a7       	std	Y+40, r24	; 0x28
    45a2:	99 a7       	std	Y+41, r25	; 0x29
    45a4:	df 91       	pop	r29
    45a6:	cf 91       	pop	r28
    45a8:	08 95       	ret

000045aa <_ZN9UIManagerC1EP20TeaMachineController>:
    45aa:	cf 93       	push	r28
    45ac:	df 93       	push	r29
    45ae:	ec 01       	movw	r28, r24
    45b0:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN18ProcessManagerBaseC1EP20TeaMachineController>
    45b4:	80 ea       	ldi	r24, 0xA0	; 160
    45b6:	98 e0       	ldi	r25, 0x08	; 8
    45b8:	99 83       	std	Y+1, r25	; 0x01
    45ba:	88 83       	st	Y, r24
    45bc:	ce 01       	movw	r24, r28
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	d8 cf       	rjmp	.-80     	; 0x4574 <_ZN9UIManager12ClearMembersEv>

000045c4 <_ZN9UIManager24ClearCurrentDrinkDisplayEv>:
//	ClearCurrentDrinkDisplay
//
//  Clear current drink display information
//
void UIManager::ClearCurrentDrinkDisplay()
{
    45c4:	cf 93       	push	r28
    45c6:	df 93       	push	r29
    45c8:	ec 01       	movw	r28, r24
	// Clear current cup details
	m_pDisplay->Set( IndicatorCupNumber, BLANK );
    45ca:	4f ef       	ldi	r20, 0xFF	; 255
    45cc:	5f ef       	ldi	r21, 0xFF	; 255
    45ce:	60 e0       	ldi	r22, 0x00	; 0
    45d0:	8f 89       	ldd	r24, Y+23	; 0x17
    45d2:	98 8d       	ldd	r25, Y+24	; 0x18
    45d4:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorMilkLevel, BLANK );
    45d8:	4f ef       	ldi	r20, 0xFF	; 255
    45da:	5f ef       	ldi	r21, 0xFF	; 255
    45dc:	61 e0       	ldi	r22, 0x01	; 1
    45de:	8f 89       	ldd	r24, Y+23	; 0x17
    45e0:	98 8d       	ldd	r25, Y+24	; 0x18
    45e2:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorSugarLevel, BLANK );
    45e6:	4f ef       	ldi	r20, 0xFF	; 255
    45e8:	5f ef       	ldi	r21, 0xFF	; 255
    45ea:	62 e0       	ldi	r22, 0x02	; 2
    45ec:	8f 89       	ldd	r24, Y+23	; 0x17
    45ee:	98 8d       	ldd	r25, Y+24	; 0x18
    45f0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorStrengthLevel, BLANK );
    45f4:	4f ef       	ldi	r20, 0xFF	; 255
    45f6:	5f ef       	ldi	r21, 0xFF	; 255
    45f8:	63 e0       	ldi	r22, 0x03	; 3
    45fa:	8f 89       	ldd	r24, Y+23	; 0x17
    45fc:	98 8d       	ldd	r25, Y+24	; 0x18
    45fe:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
	m_pDisplay->Set( IndicatorDrinkName1, ' ' );
    4602:	40 e2       	ldi	r20, 0x20	; 32
    4604:	60 e0       	ldi	r22, 0x00	; 0
    4606:	8f 89       	ldd	r24, Y+23	; 0x17
    4608:	98 8d       	ldd	r25, Y+24	; 0x18
    460a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName2, ' ' );
    460e:	40 e2       	ldi	r20, 0x20	; 32
    4610:	61 e0       	ldi	r22, 0x01	; 1
    4612:	8f 89       	ldd	r24, Y+23	; 0x17
    4614:	98 8d       	ldd	r25, Y+24	; 0x18
    4616:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName3, ' ' );
    461a:	40 e2       	ldi	r20, 0x20	; 32
    461c:	62 e0       	ldi	r22, 0x02	; 2
    461e:	8f 89       	ldd	r24, Y+23	; 0x17
    4620:	98 8d       	ldd	r25, Y+24	; 0x18
    4622:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName4, ' ' );	
    4626:	40 e2       	ldi	r20, 0x20	; 32
    4628:	63 e0       	ldi	r22, 0x03	; 3
    462a:	8f 89       	ldd	r24, Y+23	; 0x17
    462c:	98 8d       	ldd	r25, Y+24	; 0x18
    462e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorLED_GoButton, false );
    4632:	40 e0       	ldi	r20, 0x00	; 0
    4634:	62 e0       	ldi	r22, 0x02	; 2
    4636:	8f 89       	ldd	r24, Y+23	; 0x17
    4638:	98 8d       	ldd	r25, Y+24	; 0x18
}
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
	m_pDisplay->Set( IndicatorStrengthLevel, BLANK );
	m_pDisplay->Set( IndicatorDrinkName1, ' ' );
	m_pDisplay->Set( IndicatorDrinkName2, ' ' );
	m_pDisplay->Set( IndicatorDrinkName3, ' ' );
	m_pDisplay->Set( IndicatorDrinkName4, ' ' );	
	m_pDisplay->Set( IndicatorLED_GoButton, false );
    463e:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <_ZN7Display3SetE12IndicatorLEDb>

00004642 <_ZN9UIManager15SetCurrentDrinkEP5Drink>:
//	SetCurrentDrink()
//
//  Set the drink to be displayed and modified by the user
//
void UIManager::SetCurrentDrink( Drink *pDrink )
{
    4642:	ef 92       	push	r14
    4644:	ff 92       	push	r15
    4646:	0f 93       	push	r16
    4648:	1f 93       	push	r17
    464a:	cf 93       	push	r28
    464c:	df 93       	push	r29
    464e:	00 d0       	rcall	.+0      	; 0x4650 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xe>
    4650:	1f 92       	push	r1
    4652:	1f 92       	push	r1
    4654:	cd b7       	in	r28, 0x3d	; 61
    4656:	de b7       	in	r29, 0x3e	; 62
    4658:	fc 01       	movw	r30, r24
    m_pCurrentDrink = pDrink;
    465a:	77 8f       	std	Z+31, r23	; 0x1f
    465c:	66 8f       	std	Z+30, r22	; 0x1e
    
    if( (m_pDisplay != NULL))
    465e:	87 89       	ldd	r24, Z+23	; 0x17
    4660:	90 8d       	ldd	r25, Z+24	; 0x18
    4662:	00 97       	sbiw	r24, 0x00	; 0
    4664:	09 f4       	brne	.+2      	; 0x4668 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x26>
    4666:	6b c0       	rjmp	.+214    	; 0x473e <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xfc>
    4668:	7b 01       	movw	r14, r22
    466a:	8f 01       	movw	r16, r30
	{
		if( pDrink != NULL )
    466c:	61 15       	cp	r22, r1
    466e:	71 05       	cpc	r23, r1
    4670:	09 f4       	brne	.+2      	; 0x4674 <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x32>
    4672:	53 c0       	rjmp	.+166    	; 0x471a <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xd8>
		{
			if( pDrink->GetState() != Invalid )
    4674:	fb 01       	movw	r30, r22
    4676:	21 81       	ldd	r18, Z+1	; 0x01
    4678:	24 30       	cpi	r18, 0x04	; 4
    467a:	09 f4       	brne	.+2      	; 0x467e <_ZN9UIManager15SetCurrentDrinkEP5Drink+0x3c>
    467c:	4e c0       	rjmp	.+156    	; 0x471a <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xd8>
			{
				// Update the display with the new drink details
				m_pDisplay->Set( IndicatorCupNumber, (int)pDrink->GetID() );
    467e:	45 85       	ldd	r20, Z+13	; 0x0d
    4680:	56 85       	ldd	r21, Z+14	; 0x0e
    4682:	60 e0       	ldi	r22, 0x00	; 0
    4684:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
				m_pDisplay->Set( IndicatorMilkLevel, (int)pDrink->GetMilk() );
    4688:	f7 01       	movw	r30, r14
    468a:	47 81       	ldd	r20, Z+7	; 0x07
    468c:	50 85       	ldd	r21, Z+8	; 0x08
    468e:	61 e0       	ldi	r22, 0x01	; 1
    4690:	f8 01       	movw	r30, r16
    4692:	87 89       	ldd	r24, Z+23	; 0x17
    4694:	90 8d       	ldd	r25, Z+24	; 0x18
    4696:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
				m_pDisplay->Set( IndicatorSugarLevel, (int)pDrink->GetSugar() );
    469a:	f7 01       	movw	r30, r14
    469c:	41 85       	ldd	r20, Z+9	; 0x09
    469e:	52 85       	ldd	r21, Z+10	; 0x0a
    46a0:	62 e0       	ldi	r22, 0x02	; 2
    46a2:	f8 01       	movw	r30, r16
    46a4:	87 89       	ldd	r24, Z+23	; 0x17
    46a6:	90 8d       	ldd	r25, Z+24	; 0x18
    46a8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
				m_pDisplay->Set( IndicatorStrengthLevel, (int)pDrink->GetStrength() );
    46ac:	f7 01       	movw	r30, r14
    46ae:	43 85       	ldd	r20, Z+11	; 0x0b
    46b0:	54 85       	ldd	r21, Z+12	; 0x0c
    46b2:	63 e0       	ldi	r22, 0x03	; 3
    46b4:	f8 01       	movw	r30, r16
    46b6:	87 89       	ldd	r24, Z+23	; 0x17
    46b8:	90 8d       	ldd	r25, Z+24	; 0x18
    46ba:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
        
				char szName[DISPLAY_DRINKNAMELENGTH+1];
				strcpy( szName, pDrink->GetName() );
    46be:	b7 01       	movw	r22, r14
    46c0:	6e 5f       	subi	r22, 0xFE	; 254
    46c2:	7f 4f       	sbci	r23, 0xFF	; 255
    46c4:	ce 01       	movw	r24, r28
    46c6:	01 96       	adiw	r24, 0x01	; 1
    46c8:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <strcpy>
				m_pDisplay->Set( IndicatorDrinkName1, szName[0] );
    46cc:	49 81       	ldd	r20, Y+1	; 0x01
    46ce:	60 e0       	ldi	r22, 0x00	; 0
    46d0:	f8 01       	movw	r30, r16
    46d2:	87 89       	ldd	r24, Z+23	; 0x17
    46d4:	90 8d       	ldd	r25, Z+24	; 0x18
    46d6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
				m_pDisplay->Set( IndicatorDrinkName2, szName[1] );
    46da:	4a 81       	ldd	r20, Y+2	; 0x02
    46dc:	61 e0       	ldi	r22, 0x01	; 1
    46de:	f8 01       	movw	r30, r16
    46e0:	87 89       	ldd	r24, Z+23	; 0x17
    46e2:	90 8d       	ldd	r25, Z+24	; 0x18
    46e4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
				m_pDisplay->Set( IndicatorDrinkName3, szName[2] );
    46e8:	4b 81       	ldd	r20, Y+3	; 0x03
    46ea:	62 e0       	ldi	r22, 0x02	; 2
    46ec:	f8 01       	movw	r30, r16
    46ee:	87 89       	ldd	r24, Z+23	; 0x17
    46f0:	90 8d       	ldd	r25, Z+24	; 0x18
    46f2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
				m_pDisplay->Set( IndicatorDrinkName4, szName[3] );
    46f6:	4c 81       	ldd	r20, Y+4	; 0x04
    46f8:	63 e0       	ldi	r22, 0x03	; 3
    46fa:	f8 01       	movw	r30, r16
    46fc:	87 89       	ldd	r24, Z+23	; 0x17
    46fe:	90 8d       	ldd	r25, Z+24	; 0x18
    4700:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
        
				m_pDisplay->Set( IndicatorLED_GoButton, !pDrink->SelectionIsConfirmed() );
    4704:	f7 01       	movw	r30, r14
    4706:	47 85       	ldd	r20, Z+15	; 0x0f
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	48 27       	eor	r20, r24
    470c:	62 e0       	ldi	r22, 0x02	; 2
    470e:	f8 01       	movw	r30, r16
    4710:	87 89       	ldd	r24, Z+23	; 0x17
    4712:	90 8d       	ldd	r25, Z+24	; 0x18
    4714:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN7Display3SetE12IndicatorLEDb>
    4718:	02 c0       	rjmp	.+4      	; 0x471e <_ZN9UIManager15SetCurrentDrinkEP5Drink+0xdc>
			}
			else
			{
				ClearCurrentDrinkDisplay();
    471a:	c8 01       	movw	r24, r16
    471c:	53 df       	rcall	.-346    	; 0x45c4 <_ZN9UIManager24ClearCurrentDrinkDisplayEv>
		else
		{
			ClearCurrentDrinkDisplay();
		}

		m_pDisplay->Update();
    471e:	f8 01       	movw	r30, r16
    4720:	87 89       	ldd	r24, Z+23	; 0x17
    4722:	90 8d       	ldd	r25, Z+24	; 0x18
	}
}
    4724:	0f 90       	pop	r0
    4726:	0f 90       	pop	r0
    4728:	0f 90       	pop	r0
    472a:	0f 90       	pop	r0
    472c:	0f 90       	pop	r0
    472e:	df 91       	pop	r29
    4730:	cf 91       	pop	r28
    4732:	1f 91       	pop	r17
    4734:	0f 91       	pop	r16
    4736:	ff 90       	pop	r15
    4738:	ef 90       	pop	r14
		else
		{
			ClearCurrentDrinkDisplay();
		}

		m_pDisplay->Update();
    473a:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>
	}
}
    473e:	0f 90       	pop	r0
    4740:	0f 90       	pop	r0
    4742:	0f 90       	pop	r0
    4744:	0f 90       	pop	r0
    4746:	0f 90       	pop	r0
    4748:	df 91       	pop	r29
    474a:	cf 91       	pop	r28
    474c:	1f 91       	pop	r17
    474e:	0f 91       	pop	r16
    4750:	ff 90       	pop	r15
    4752:	ef 90       	pop	r14
    4754:	08 95       	ret

00004756 <_ZN9UIManager10SetMessageEPciii>:
//  SetMessage()
//
//  Display a message to the user
//
void UIManager::SetMessage( char *pText, int nMilkIndicator, int nSugarIndicator, int nStrengthIndicator )
{
    4756:	8f 92       	push	r8
    4758:	9f 92       	push	r9
    475a:	af 92       	push	r10
    475c:	bf 92       	push	r11
    475e:	cf 92       	push	r12
    4760:	df 92       	push	r13
    4762:	ef 92       	push	r14
    4764:	ff 92       	push	r15
    4766:	0f 93       	push	r16
    4768:	1f 93       	push	r17
    476a:	cf 93       	push	r28
    476c:	df 93       	push	r29
    476e:	ec 01       	movw	r28, r24
    4770:	6b 01       	movw	r12, r22
    4772:	4a 01       	movw	r8, r20
    4774:	59 01       	movw	r10, r18
	int nLength = strlen( pText );
    4776:	fb 01       	movw	r30, r22
    4778:	01 90       	ld	r0, Z+
    477a:	00 20       	and	r0, r0
    477c:	e9 f7       	brne	.-6      	; 0x4778 <_ZN9UIManager10SetMessageEPciii+0x22>
    477e:	31 97       	sbiw	r30, 0x01	; 1
    4780:	7f 01       	movw	r14, r30
    4782:	e6 1a       	sub	r14, r22
    4784:	f7 0a       	sbc	r15, r23
	m_pDisplay->Set( IndicatorDrinkName1, (nLength > 0) ? pText[0] : ' ' );
    4786:	1e 14       	cp	r1, r14
    4788:	1f 04       	cpc	r1, r15
    478a:	1c f4       	brge	.+6      	; 0x4792 <_ZN9UIManager10SetMessageEPciii+0x3c>
    478c:	fb 01       	movw	r30, r22
    478e:	40 81       	ld	r20, Z
    4790:	01 c0       	rjmp	.+2      	; 0x4794 <_ZN9UIManager10SetMessageEPciii+0x3e>
    4792:	40 e2       	ldi	r20, 0x20	; 32
    4794:	60 e0       	ldi	r22, 0x00	; 0
    4796:	8f 89       	ldd	r24, Y+23	; 0x17
    4798:	98 8d       	ldd	r25, Y+24	; 0x18
    479a:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName2, (nLength > 1) ? pText[1] : ' ' );
    479e:	f2 e0       	ldi	r31, 0x02	; 2
    47a0:	ef 16       	cp	r14, r31
    47a2:	f1 04       	cpc	r15, r1
    47a4:	1c f0       	brlt	.+6      	; 0x47ac <_ZN9UIManager10SetMessageEPciii+0x56>
    47a6:	f6 01       	movw	r30, r12
    47a8:	41 81       	ldd	r20, Z+1	; 0x01
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <_ZN9UIManager10SetMessageEPciii+0x58>
    47ac:	40 e2       	ldi	r20, 0x20	; 32
    47ae:	61 e0       	ldi	r22, 0x01	; 1
    47b0:	8f 89       	ldd	r24, Y+23	; 0x17
    47b2:	98 8d       	ldd	r25, Y+24	; 0x18
    47b4:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName3, (nLength > 2) ? pText[2] : ' ' );
    47b8:	f3 e0       	ldi	r31, 0x03	; 3
    47ba:	ef 16       	cp	r14, r31
    47bc:	f1 04       	cpc	r15, r1
    47be:	1c f0       	brlt	.+6      	; 0x47c6 <_ZN9UIManager10SetMessageEPciii+0x70>
    47c0:	f6 01       	movw	r30, r12
    47c2:	42 81       	ldd	r20, Z+2	; 0x02
    47c4:	01 c0       	rjmp	.+2      	; 0x47c8 <_ZN9UIManager10SetMessageEPciii+0x72>
    47c6:	40 e2       	ldi	r20, 0x20	; 32
    47c8:	62 e0       	ldi	r22, 0x02	; 2
    47ca:	8f 89       	ldd	r24, Y+23	; 0x17
    47cc:	98 8d       	ldd	r25, Y+24	; 0x18
    47ce:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorDrinkName4, (nLength > 3) ? pText[3] : ' ' );
    47d2:	f4 e0       	ldi	r31, 0x04	; 4
    47d4:	ef 16       	cp	r14, r31
    47d6:	f1 04       	cpc	r15, r1
    47d8:	1c f0       	brlt	.+6      	; 0x47e0 <_ZN9UIManager10SetMessageEPciii+0x8a>
    47da:	f6 01       	movw	r30, r12
    47dc:	43 81       	ldd	r20, Z+3	; 0x03
    47de:	01 c0       	rjmp	.+2      	; 0x47e2 <_ZN9UIManager10SetMessageEPciii+0x8c>
    47e0:	40 e2       	ldi	r20, 0x20	; 32
    47e2:	63 e0       	ldi	r22, 0x03	; 3
    47e4:	8f 89       	ldd	r24, Y+23	; 0x17
    47e6:	98 8d       	ldd	r25, Y+24	; 0x18
    47e8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
	m_pDisplay->Set( IndicatorMilkLevel, nMilkIndicator, false );
    47ec:	20 e0       	ldi	r18, 0x00	; 0
    47ee:	a4 01       	movw	r20, r8
    47f0:	61 e0       	ldi	r22, 0x01	; 1
    47f2:	70 e0       	ldi	r23, 0x00	; 0
    47f4:	8f 89       	ldd	r24, Y+23	; 0x17
    47f6:	98 8d       	ldd	r25, Y+24	; 0x18
    47f8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
	m_pDisplay->Set( IndicatorMilkLevel, nSugarIndicator, false );
    47fc:	20 e0       	ldi	r18, 0x00	; 0
    47fe:	a5 01       	movw	r20, r10
    4800:	61 e0       	ldi	r22, 0x01	; 1
    4802:	70 e0       	ldi	r23, 0x00	; 0
    4804:	8f 89       	ldd	r24, Y+23	; 0x17
    4806:	98 8d       	ldd	r25, Y+24	; 0x18
    4808:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
	m_pDisplay->Set( IndicatorMilkLevel, nStrengthIndicator, false );
    480c:	20 e0       	ldi	r18, 0x00	; 0
    480e:	a8 01       	movw	r20, r16
    4810:	61 e0       	ldi	r22, 0x01	; 1
    4812:	70 e0       	ldi	r23, 0x00	; 0
    4814:	8f 89       	ldd	r24, Y+23	; 0x17
    4816:	98 8d       	ldd	r25, Y+24	; 0x18
    4818:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
	m_pDisplay->Update();
    481c:	8f 89       	ldd	r24, Y+23	; 0x17
    481e:	98 8d       	ldd	r25, Y+24	; 0x18
}
    4820:	df 91       	pop	r29
    4822:	cf 91       	pop	r28
    4824:	1f 91       	pop	r17
    4826:	0f 91       	pop	r16
    4828:	ff 90       	pop	r15
    482a:	ef 90       	pop	r14
    482c:	df 90       	pop	r13
    482e:	cf 90       	pop	r12
    4830:	bf 90       	pop	r11
    4832:	af 90       	pop	r10
    4834:	9f 90       	pop	r9
    4836:	8f 90       	pop	r8
	m_pDisplay->Set( IndicatorDrinkName3, (nLength > 2) ? pText[2] : ' ' );
	m_pDisplay->Set( IndicatorDrinkName4, (nLength > 3) ? pText[3] : ' ' );
	m_pDisplay->Set( IndicatorMilkLevel, nMilkIndicator, false );
	m_pDisplay->Set( IndicatorMilkLevel, nSugarIndicator, false );
	m_pDisplay->Set( IndicatorMilkLevel, nStrengthIndicator, false );
	m_pDisplay->Update();
    4838:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>

0000483c <_ZN9UIManager23HandleUserControlEventsEv>:
//  HandleUserControlEvents()
//
//  Confirm user control states and take appropriate action
//
void UIManager::HandleUserControlEvents()
{
    483c:	ef 92       	push	r14
    483e:	ff 92       	push	r15
    4840:	0f 93       	push	r16
    4842:	1f 93       	push	r17
    4844:	cf 93       	push	r28
    4846:	df 93       	push	r29
    4848:	00 d0       	rcall	.+0      	; 0x484a <_ZN9UIManager23HandleUserControlEventsEv+0xe>
    484a:	1f 92       	push	r1
    484c:	1f 92       	push	r1
    484e:	cd b7       	in	r28, 0x3d	; 61
    4850:	de b7       	in	r29, 0x3e	; 62
    4852:	8c 01       	movw	r16, r24
    if( m_pCurrentDrink != NULL )
    4854:	dc 01       	movw	r26, r24
    4856:	5e 96       	adiw	r26, 0x1e	; 30
    4858:	8d 91       	ld	r24, X+
    485a:	9c 91       	ld	r25, X
    485c:	5f 97       	sbiw	r26, 0x1f	; 31
    485e:	89 2b       	or	r24, r25
    4860:	09 f4       	brne	.+2      	; 0x4864 <_ZN9UIManager23HandleUserControlEventsEv+0x28>
    4862:	dd c1       	rjmp	.+954    	; 0x4c1e <_ZN9UIManager23HandleUserControlEventsEv+0x3e2>
    {
        if( m_pUserControls->CheckSettledEvent( UC_CUP_INC ) == UserControlSwitchedOn )
    4864:	60 e0       	ldi	r22, 0x00	; 0
    4866:	70 e0       	ldi	r23, 0x00	; 0
    4868:	5b 96       	adiw	r26, 0x1b	; 27
    486a:	8d 91       	ld	r24, X+
    486c:	9c 91       	ld	r25, X
    486e:	5c 97       	sbiw	r26, 0x1c	; 28
    4870:	ad d3       	rcall	.+1882   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4872:	81 30       	cpi	r24, 0x01	; 1
    4874:	b9 f4       	brne	.+46     	; 0x48a4 <_ZN9UIManager23HandleUserControlEventsEv+0x68>
        {
            // User has toggled Cup increment control
            SetCurrentDrink( m_pController->GetDrinkToTheRight(m_pCurrentDrink) );
    4876:	f8 01       	movw	r30, r16
    4878:	66 8d       	ldd	r22, Z+30	; 0x1e
    487a:	77 8d       	ldd	r23, Z+31	; 0x1f
    487c:	84 81       	ldd	r24, Z+4	; 0x04
    487e:	95 81       	ldd	r25, Z+5	; 0x05
    4880:	48 d9       	rcall	.-3440   	; 0x3b12 <_ZN20TeaMachineController18GetDrinkToTheRightEP5Drink>
    4882:	bc 01       	movw	r22, r24
    4884:	c8 01       	movw	r24, r16
    4886:	dd de       	rcall	.-582    	; 0x4642 <_ZN9UIManager15SetCurrentDrinkEP5Drink>
    4888:	d8 01       	movw	r26, r16
    488a:	5e 96       	adiw	r26, 0x1e	; 30
    488c:	ed 91       	ld	r30, X+
    488e:	fc 91       	ld	r31, X
    4890:	5f 97       	sbiw	r26, 0x1f	; 31
            m_pDisplay->Set( IndicatorCupNumber, (int)m_pCurrentDrink->GetID() );
    4892:	45 85       	ldd	r20, Z+13	; 0x0d
    4894:	56 85       	ldd	r21, Z+14	; 0x0e
    4896:	60 e0       	ldi	r22, 0x00	; 0
    4898:	57 96       	adiw	r26, 0x17	; 23
    489a:	8d 91       	ld	r24, X+
    489c:	9c 91       	ld	r25, X
    489e:	58 97       	sbiw	r26, 0x18	; 24
    48a0:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
        }

        if( m_pUserControls->CheckSettledEvent( UC_CUP_DEC ) == UserControlSwitchedOn )
    48a4:	61 e0       	ldi	r22, 0x01	; 1
    48a6:	70 e0       	ldi	r23, 0x00	; 0
    48a8:	f8 01       	movw	r30, r16
    48aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    48ac:	94 8d       	ldd	r25, Z+28	; 0x1c
    48ae:	8e d3       	rcall	.+1820   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    48b0:	81 30       	cpi	r24, 0x01	; 1
    48b2:	d9 f4       	brne	.+54     	; 0x48ea <_ZN9UIManager23HandleUserControlEventsEv+0xae>
        {
            // User has toggled Cup decrement control
            SetCurrentDrink( m_pController->GetDrinkToTheLeft(m_pCurrentDrink) );
    48b4:	d8 01       	movw	r26, r16
    48b6:	5e 96       	adiw	r26, 0x1e	; 30
    48b8:	6d 91       	ld	r22, X+
    48ba:	7c 91       	ld	r23, X
    48bc:	5f 97       	sbiw	r26, 0x1f	; 31
    48be:	14 96       	adiw	r26, 0x04	; 4
    48c0:	8d 91       	ld	r24, X+
    48c2:	9c 91       	ld	r25, X
    48c4:	15 97       	sbiw	r26, 0x05	; 5
    48c6:	b2 d9       	rcall	.-3228   	; 0x3c2c <_ZN20TeaMachineController17GetDrinkToTheLeftEP5Drink>
    48c8:	bc 01       	movw	r22, r24
    48ca:	c8 01       	movw	r24, r16
    48cc:	ba de       	rcall	.-652    	; 0x4642 <_ZN9UIManager15SetCurrentDrinkEP5Drink>
    48ce:	d8 01       	movw	r26, r16
    48d0:	5e 96       	adiw	r26, 0x1e	; 30
    48d2:	ed 91       	ld	r30, X+
    48d4:	fc 91       	ld	r31, X
    48d6:	5f 97       	sbiw	r26, 0x1f	; 31
            m_pDisplay->Set( IndicatorCupNumber, (int)m_pCurrentDrink->GetID() );
    48d8:	45 85       	ldd	r20, Z+13	; 0x0d
    48da:	56 85       	ldd	r21, Z+14	; 0x0e
    48dc:	60 e0       	ldi	r22, 0x00	; 0
    48de:	57 96       	adiw	r26, 0x17	; 23
    48e0:	8d 91       	ld	r24, X+
    48e2:	9c 91       	ld	r25, X
    48e4:	58 97       	sbiw	r26, 0x18	; 24
    48e6:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
    48ea:	d8 01       	movw	r26, r16
    48ec:	5e 96       	adiw	r26, 0x1e	; 30
    48ee:	ed 91       	ld	r30, X+
    48f0:	fc 91       	ld	r31, X
    48f2:	5f 97       	sbiw	r26, 0x1f	; 31
        }

        if( !m_pCurrentDrink->SelectionIsConfirmed() )
    48f4:	87 85       	ldd	r24, Z+15	; 0x0f
    48f6:	81 11       	cpse	r24, r1
    48f8:	58 c1       	rjmp	.+688    	; 0x4baa <_ZN9UIManager23HandleUserControlEventsEv+0x36e>
        {
            // Can only make changes to a drink whose selection is not yet confirmed
            if( m_pUserControls->CheckSettledEvent( UC_DRINK_INC ) == UserControlSwitchedOn )
    48fa:	62 e0       	ldi	r22, 0x02	; 2
    48fc:	70 e0       	ldi	r23, 0x00	; 0
    48fe:	5b 96       	adiw	r26, 0x1b	; 27
    4900:	8d 91       	ld	r24, X+
    4902:	9c 91       	ld	r25, X
    4904:	5c 97       	sbiw	r26, 0x1c	; 28
    4906:	62 d3       	rcall	.+1732   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4908:	81 30       	cpi	r24, 0x01	; 1
    490a:	81 f5       	brne	.+96     	; 0x496c <_ZN9UIManager23HandleUserControlEventsEv+0x130>
            {
                // User has toggled 'Next drink type' control
                m_pCurrentDrink->SetNextType();
    490c:	f8 01       	movw	r30, r16
    490e:	86 8d       	ldd	r24, Z+30	; 0x1e
    4910:	97 8d       	ldd	r25, Z+31	; 0x1f
    4912:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN5Drink11SetNextTypeEv>
                
                // Update display
                char szName[DISPLAY_DRINKNAMELENGTH+1];
                strcpy( szName, m_pCurrentDrink->GetName() );
    4916:	d8 01       	movw	r26, r16
    4918:	5e 96       	adiw	r26, 0x1e	; 30
    491a:	6d 91       	ld	r22, X+
    491c:	7c 91       	ld	r23, X
    491e:	5f 97       	sbiw	r26, 0x1f	; 31
    4920:	6e 5f       	subi	r22, 0xFE	; 254
    4922:	7f 4f       	sbci	r23, 0xFF	; 255
    4924:	ce 01       	movw	r24, r28
    4926:	01 96       	adiw	r24, 0x01	; 1
    4928:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <strcpy>
                m_pDisplay->Set( IndicatorDrinkName1, szName[0] );
    492c:	49 81       	ldd	r20, Y+1	; 0x01
    492e:	60 e0       	ldi	r22, 0x00	; 0
    4930:	f8 01       	movw	r30, r16
    4932:	87 89       	ldd	r24, Z+23	; 0x17
    4934:	90 8d       	ldd	r25, Z+24	; 0x18
    4936:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName2, szName[1] );
    493a:	4a 81       	ldd	r20, Y+2	; 0x02
    493c:	61 e0       	ldi	r22, 0x01	; 1
    493e:	d8 01       	movw	r26, r16
    4940:	57 96       	adiw	r26, 0x17	; 23
    4942:	8d 91       	ld	r24, X+
    4944:	9c 91       	ld	r25, X
    4946:	58 97       	sbiw	r26, 0x18	; 24
    4948:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName3, szName[2] );
    494c:	4b 81       	ldd	r20, Y+3	; 0x03
    494e:	62 e0       	ldi	r22, 0x02	; 2
    4950:	f8 01       	movw	r30, r16
    4952:	87 89       	ldd	r24, Z+23	; 0x17
    4954:	90 8d       	ldd	r25, Z+24	; 0x18
    4956:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName4, szName[3] );
    495a:	4c 81       	ldd	r20, Y+4	; 0x04
    495c:	63 e0       	ldi	r22, 0x03	; 3
    495e:	d8 01       	movw	r26, r16
    4960:	57 96       	adiw	r26, 0x17	; 23
    4962:	8d 91       	ld	r24, X+
    4964:	9c 91       	ld	r25, X
    4966:	58 97       	sbiw	r26, 0x18	; 24
    4968:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
            }

            if( m_pUserControls->CheckSettledEvent( UC_DRINK_DEC ) == UserControlSwitchedOn )
    496c:	63 e0       	ldi	r22, 0x03	; 3
    496e:	70 e0       	ldi	r23, 0x00	; 0
    4970:	f8 01       	movw	r30, r16
    4972:	83 8d       	ldd	r24, Z+27	; 0x1b
    4974:	94 8d       	ldd	r25, Z+28	; 0x1c
    4976:	2a d3       	rcall	.+1620   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4978:	81 30       	cpi	r24, 0x01	; 1
    497a:	81 f5       	brne	.+96     	; 0x49dc <_ZN9UIManager23HandleUserControlEventsEv+0x1a0>
            {
                // User has toggled 'Previous drink type' control
                m_pCurrentDrink->SetPreviousType();
    497c:	d8 01       	movw	r26, r16
    497e:	5e 96       	adiw	r26, 0x1e	; 30
    4980:	8d 91       	ld	r24, X+
    4982:	9c 91       	ld	r25, X
    4984:	5f 97       	sbiw	r26, 0x1f	; 31
    4986:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <_ZN5Drink15SetPreviousTypeEv>
                
                // Update display
                char szName[DISPLAY_DRINKNAMELENGTH+1];
                strcpy( szName, m_pCurrentDrink->GetName() );
    498a:	f8 01       	movw	r30, r16
    498c:	66 8d       	ldd	r22, Z+30	; 0x1e
    498e:	77 8d       	ldd	r23, Z+31	; 0x1f
    4990:	6e 5f       	subi	r22, 0xFE	; 254
    4992:	7f 4f       	sbci	r23, 0xFF	; 255
    4994:	ce 01       	movw	r24, r28
    4996:	01 96       	adiw	r24, 0x01	; 1
    4998:	0e 94 58 35 	call	0x6ab0	; 0x6ab0 <strcpy>
                m_pDisplay->Set( IndicatorDrinkName1, szName[0] );
    499c:	49 81       	ldd	r20, Y+1	; 0x01
    499e:	60 e0       	ldi	r22, 0x00	; 0
    49a0:	d8 01       	movw	r26, r16
    49a2:	57 96       	adiw	r26, 0x17	; 23
    49a4:	8d 91       	ld	r24, X+
    49a6:	9c 91       	ld	r25, X
    49a8:	58 97       	sbiw	r26, 0x18	; 24
    49aa:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName2, szName[1] );
    49ae:	4a 81       	ldd	r20, Y+2	; 0x02
    49b0:	61 e0       	ldi	r22, 0x01	; 1
    49b2:	f8 01       	movw	r30, r16
    49b4:	87 89       	ldd	r24, Z+23	; 0x17
    49b6:	90 8d       	ldd	r25, Z+24	; 0x18
    49b8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName3, szName[2] );
    49bc:	4b 81       	ldd	r20, Y+3	; 0x03
    49be:	62 e0       	ldi	r22, 0x02	; 2
    49c0:	d8 01       	movw	r26, r16
    49c2:	57 96       	adiw	r26, 0x17	; 23
    49c4:	8d 91       	ld	r24, X+
    49c6:	9c 91       	ld	r25, X
    49c8:	58 97       	sbiw	r26, 0x18	; 24
    49ca:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
                m_pDisplay->Set( IndicatorDrinkName4, szName[3] );
    49ce:	4c 81       	ldd	r20, Y+4	; 0x04
    49d0:	63 e0       	ldi	r22, 0x03	; 3
    49d2:	f8 01       	movw	r30, r16
    49d4:	87 89       	ldd	r24, Z+23	; 0x17
    49d6:	90 8d       	ldd	r25, Z+24	; 0x18
    49d8:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN7Display3SetE14IndicatorAlphac>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_MILK_INC ) == UserControlSwitchedOn )
    49dc:	64 e0       	ldi	r22, 0x04	; 4
    49de:	70 e0       	ldi	r23, 0x00	; 0
    49e0:	d8 01       	movw	r26, r16
    49e2:	5b 96       	adiw	r26, 0x1b	; 27
    49e4:	8d 91       	ld	r24, X+
    49e6:	9c 91       	ld	r25, X
    49e8:	5c 97       	sbiw	r26, 0x1c	; 28
    49ea:	f0 d2       	rcall	.+1504   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    49ec:	81 30       	cpi	r24, 0x01	; 1
    49ee:	a1 f4       	brne	.+40     	; 0x4a18 <_ZN9UIManager23HandleUserControlEventsEv+0x1dc>
            {
                // User has toggled 'Increment milk' control
                m_pCurrentDrink->IncrementMilk();
    49f0:	d8 01       	movw	r26, r16
    49f2:	5e 96       	adiw	r26, 0x1e	; 30
    49f4:	ed 91       	ld	r30, X+
    49f6:	fc 91       	ld	r31, X
    49f8:	5f 97       	sbiw	r26, 0x1f	; 31
    int         GetSugar() { return m_nSugar; }
    void        IncrementSugar() { m_nSugar = (m_nSugar == MAX_SUGAR) ? MAX_SUGAR : m_nSugar + 1; }
    void        DecrementSugar()  { m_nSugar = (m_nSugar == 0) ? 0 : m_nSugar - 1; }
    
    int         GetStrength() { return m_nStrength; }
    void        IncrementStrength() { m_nStrength = (m_nStrength == MAX_STRENGTH) ? MAX_STRENGTH : m_nStrength + 1; }
    49fa:	47 81       	ldd	r20, Z+7	; 0x07
    49fc:	50 85       	ldd	r21, Z+8	; 0x08
    49fe:	43 30       	cpi	r20, 0x03	; 3
    4a00:	51 05       	cpc	r21, r1
    4a02:	11 f0       	breq	.+4      	; 0x4a08 <_ZN9UIManager23HandleUserControlEventsEv+0x1cc>
    4a04:	4f 5f       	subi	r20, 0xFF	; 255
    4a06:	5f 4f       	sbci	r21, 0xFF	; 255
    4a08:	50 87       	std	Z+8, r21	; 0x08
    4a0a:	47 83       	std	Z+7, r20	; 0x07
                m_pDisplay->Set( IndicatorMilkLevel, (int)m_pCurrentDrink->GetMilk() );
    4a0c:	61 e0       	ldi	r22, 0x01	; 1
    4a0e:	f8 01       	movw	r30, r16
    4a10:	87 89       	ldd	r24, Z+23	; 0x17
    4a12:	90 8d       	ldd	r25, Z+24	; 0x18
    4a14:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_MILK_DEC ) == UserControlSwitchedOn )
    4a18:	65 e0       	ldi	r22, 0x05	; 5
    4a1a:	70 e0       	ldi	r23, 0x00	; 0
    4a1c:	d8 01       	movw	r26, r16
    4a1e:	5b 96       	adiw	r26, 0x1b	; 27
    4a20:	8d 91       	ld	r24, X+
    4a22:	9c 91       	ld	r25, X
    4a24:	5c 97       	sbiw	r26, 0x1c	; 28
    4a26:	d2 d2       	rcall	.+1444   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4a28:	81 30       	cpi	r24, 0x01	; 1
    4a2a:	a1 f4       	brne	.+40     	; 0x4a54 <_ZN9UIManager23HandleUserControlEventsEv+0x218>
            {
                // User has toggled 'Decrement milk' control
                m_pCurrentDrink->DecrementMilk();
    4a2c:	d8 01       	movw	r26, r16
    4a2e:	5e 96       	adiw	r26, 0x1e	; 30
    4a30:	ed 91       	ld	r30, X+
    4a32:	fc 91       	ld	r31, X
    4a34:	5f 97       	sbiw	r26, 0x1f	; 31
    void        DecrementStrength()  { m_nStrength = (m_nStrength == 0) ? 0 : m_nStrength - 1; }
    4a36:	47 81       	ldd	r20, Z+7	; 0x07
    4a38:	50 85       	ldd	r21, Z+8	; 0x08
    4a3a:	41 15       	cp	r20, r1
    4a3c:	51 05       	cpc	r21, r1
    4a3e:	11 f0       	breq	.+4      	; 0x4a44 <_ZN9UIManager23HandleUserControlEventsEv+0x208>
    4a40:	41 50       	subi	r20, 0x01	; 1
    4a42:	51 09       	sbc	r21, r1
    4a44:	50 87       	std	Z+8, r21	; 0x08
    4a46:	47 83       	std	Z+7, r20	; 0x07
                m_pDisplay->Set( IndicatorMilkLevel, (int)m_pCurrentDrink->GetMilk() );
    4a48:	61 e0       	ldi	r22, 0x01	; 1
    4a4a:	f8 01       	movw	r30, r16
    4a4c:	87 89       	ldd	r24, Z+23	; 0x17
    4a4e:	90 8d       	ldd	r25, Z+24	; 0x18
    4a50:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_SUGAR_INC ) == UserControlSwitchedOn )
    4a54:	66 e0       	ldi	r22, 0x06	; 6
    4a56:	70 e0       	ldi	r23, 0x00	; 0
    4a58:	d8 01       	movw	r26, r16
    4a5a:	5b 96       	adiw	r26, 0x1b	; 27
    4a5c:	8d 91       	ld	r24, X+
    4a5e:	9c 91       	ld	r25, X
    4a60:	5c 97       	sbiw	r26, 0x1c	; 28
    4a62:	b4 d2       	rcall	.+1384   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4a64:	81 30       	cpi	r24, 0x01	; 1
    4a66:	a1 f4       	brne	.+40     	; 0x4a90 <_ZN9UIManager23HandleUserControlEventsEv+0x254>
            {
                // User has toggled 'Increment sugar' control
                m_pCurrentDrink->IncrementSugar();
    4a68:	d8 01       	movw	r26, r16
    4a6a:	5e 96       	adiw	r26, 0x1e	; 30
    4a6c:	ed 91       	ld	r30, X+
    4a6e:	fc 91       	ld	r31, X
    4a70:	5f 97       	sbiw	r26, 0x1f	; 31
    int         GetSugar() { return m_nSugar; }
    void        IncrementSugar() { m_nSugar = (m_nSugar == MAX_SUGAR) ? MAX_SUGAR : m_nSugar + 1; }
    void        DecrementSugar()  { m_nSugar = (m_nSugar == 0) ? 0 : m_nSugar - 1; }
    
    int         GetStrength() { return m_nStrength; }
    void        IncrementStrength() { m_nStrength = (m_nStrength == MAX_STRENGTH) ? MAX_STRENGTH : m_nStrength + 1; }
    4a72:	41 85       	ldd	r20, Z+9	; 0x09
    4a74:	52 85       	ldd	r21, Z+10	; 0x0a
    4a76:	43 30       	cpi	r20, 0x03	; 3
    4a78:	51 05       	cpc	r21, r1
    4a7a:	11 f0       	breq	.+4      	; 0x4a80 <_ZN9UIManager23HandleUserControlEventsEv+0x244>
    4a7c:	4f 5f       	subi	r20, 0xFF	; 255
    4a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    4a80:	52 87       	std	Z+10, r21	; 0x0a
    4a82:	41 87       	std	Z+9, r20	; 0x09
                m_pDisplay->Set( IndicatorSugarLevel, (int)m_pCurrentDrink->GetSugar() );
    4a84:	62 e0       	ldi	r22, 0x02	; 2
    4a86:	f8 01       	movw	r30, r16
    4a88:	87 89       	ldd	r24, Z+23	; 0x17
    4a8a:	90 8d       	ldd	r25, Z+24	; 0x18
    4a8c:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_SUGAR_DEC ) == UserControlSwitchedOn )
    4a90:	67 e0       	ldi	r22, 0x07	; 7
    4a92:	70 e0       	ldi	r23, 0x00	; 0
    4a94:	d8 01       	movw	r26, r16
    4a96:	5b 96       	adiw	r26, 0x1b	; 27
    4a98:	8d 91       	ld	r24, X+
    4a9a:	9c 91       	ld	r25, X
    4a9c:	5c 97       	sbiw	r26, 0x1c	; 28
    4a9e:	96 d2       	rcall	.+1324   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4aa0:	81 30       	cpi	r24, 0x01	; 1
    4aa2:	a1 f4       	brne	.+40     	; 0x4acc <_ZN9UIManager23HandleUserControlEventsEv+0x290>
            {
                // User has toggled 'Decrement sugar' control
                m_pCurrentDrink->DecrementSugar();
    4aa4:	d8 01       	movw	r26, r16
    4aa6:	5e 96       	adiw	r26, 0x1e	; 30
    4aa8:	ed 91       	ld	r30, X+
    4aaa:	fc 91       	ld	r31, X
    4aac:	5f 97       	sbiw	r26, 0x1f	; 31
    void        DecrementStrength()  { m_nStrength = (m_nStrength == 0) ? 0 : m_nStrength - 1; }
    4aae:	41 85       	ldd	r20, Z+9	; 0x09
    4ab0:	52 85       	ldd	r21, Z+10	; 0x0a
    4ab2:	41 15       	cp	r20, r1
    4ab4:	51 05       	cpc	r21, r1
    4ab6:	11 f0       	breq	.+4      	; 0x4abc <_ZN9UIManager23HandleUserControlEventsEv+0x280>
    4ab8:	41 50       	subi	r20, 0x01	; 1
    4aba:	51 09       	sbc	r21, r1
    4abc:	52 87       	std	Z+10, r21	; 0x0a
    4abe:	41 87       	std	Z+9, r20	; 0x09
                m_pDisplay->Set( IndicatorSugarLevel, (int)m_pCurrentDrink->GetSugar() );
    4ac0:	62 e0       	ldi	r22, 0x02	; 2
    4ac2:	f8 01       	movw	r30, r16
    4ac4:	87 89       	ldd	r24, Z+23	; 0x17
    4ac6:	90 8d       	ldd	r25, Z+24	; 0x18
    4ac8:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_STRENGTH_INC ) == UserControlSwitchedOn )
    4acc:	68 e0       	ldi	r22, 0x08	; 8
    4ace:	70 e0       	ldi	r23, 0x00	; 0
    4ad0:	d8 01       	movw	r26, r16
    4ad2:	5b 96       	adiw	r26, 0x1b	; 27
    4ad4:	8d 91       	ld	r24, X+
    4ad6:	9c 91       	ld	r25, X
    4ad8:	5c 97       	sbiw	r26, 0x1c	; 28
    4ada:	78 d2       	rcall	.+1264   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4adc:	81 30       	cpi	r24, 0x01	; 1
    4ade:	a1 f4       	brne	.+40     	; 0x4b08 <_ZN9UIManager23HandleUserControlEventsEv+0x2cc>
            {
                // User has toggled 'Increment strength' control
                m_pCurrentDrink->IncrementStrength();
    4ae0:	d8 01       	movw	r26, r16
    4ae2:	5e 96       	adiw	r26, 0x1e	; 30
    4ae4:	ed 91       	ld	r30, X+
    4ae6:	fc 91       	ld	r31, X
    4ae8:	5f 97       	sbiw	r26, 0x1f	; 31
    int         GetSugar() { return m_nSugar; }
    void        IncrementSugar() { m_nSugar = (m_nSugar == MAX_SUGAR) ? MAX_SUGAR : m_nSugar + 1; }
    void        DecrementSugar()  { m_nSugar = (m_nSugar == 0) ? 0 : m_nSugar - 1; }
    
    int         GetStrength() { return m_nStrength; }
    void        IncrementStrength() { m_nStrength = (m_nStrength == MAX_STRENGTH) ? MAX_STRENGTH : m_nStrength + 1; }
    4aea:	43 85       	ldd	r20, Z+11	; 0x0b
    4aec:	54 85       	ldd	r21, Z+12	; 0x0c
    4aee:	43 30       	cpi	r20, 0x03	; 3
    4af0:	51 05       	cpc	r21, r1
    4af2:	11 f0       	breq	.+4      	; 0x4af8 <_ZN9UIManager23HandleUserControlEventsEv+0x2bc>
    4af4:	4f 5f       	subi	r20, 0xFF	; 255
    4af6:	5f 4f       	sbci	r21, 0xFF	; 255
    4af8:	54 87       	std	Z+12, r21	; 0x0c
    4afa:	43 87       	std	Z+11, r20	; 0x0b
                m_pDisplay->Set( IndicatorStrengthLevel, (int)m_pCurrentDrink->GetStrength() );
    4afc:	63 e0       	ldi	r22, 0x03	; 3
    4afe:	f8 01       	movw	r30, r16
    4b00:	87 89       	ldd	r24, Z+23	; 0x17
    4b02:	90 8d       	ldd	r25, Z+24	; 0x18
    4b04:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_STRENGTH_DEC ) == UserControlSwitchedOn )
    4b08:	69 e0       	ldi	r22, 0x09	; 9
    4b0a:	70 e0       	ldi	r23, 0x00	; 0
    4b0c:	d8 01       	movw	r26, r16
    4b0e:	5b 96       	adiw	r26, 0x1b	; 27
    4b10:	8d 91       	ld	r24, X+
    4b12:	9c 91       	ld	r25, X
    4b14:	5c 97       	sbiw	r26, 0x1c	; 28
    4b16:	5a d2       	rcall	.+1204   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4b18:	81 30       	cpi	r24, 0x01	; 1
    4b1a:	a1 f4       	brne	.+40     	; 0x4b44 <_ZN9UIManager23HandleUserControlEventsEv+0x308>
            {
                // User has toggled 'Decrement strength' control
                m_pCurrentDrink->DecrementStrength();
    4b1c:	d8 01       	movw	r26, r16
    4b1e:	5e 96       	adiw	r26, 0x1e	; 30
    4b20:	ed 91       	ld	r30, X+
    4b22:	fc 91       	ld	r31, X
    4b24:	5f 97       	sbiw	r26, 0x1f	; 31
    void        DecrementStrength()  { m_nStrength = (m_nStrength == 0) ? 0 : m_nStrength - 1; }
    4b26:	43 85       	ldd	r20, Z+11	; 0x0b
    4b28:	54 85       	ldd	r21, Z+12	; 0x0c
    4b2a:	41 15       	cp	r20, r1
    4b2c:	51 05       	cpc	r21, r1
    4b2e:	11 f0       	breq	.+4      	; 0x4b34 <_ZN9UIManager23HandleUserControlEventsEv+0x2f8>
    4b30:	41 50       	subi	r20, 0x01	; 1
    4b32:	51 09       	sbc	r21, r1
    4b34:	54 87       	std	Z+12, r21	; 0x0c
    4b36:	43 87       	std	Z+11, r20	; 0x0b
                m_pDisplay->Set( IndicatorStrengthLevel, (int)m_pCurrentDrink->GetStrength() );
    4b38:	63 e0       	ldi	r22, 0x03	; 3
    4b3a:	f8 01       	movw	r30, r16
    4b3c:	87 89       	ldd	r24, Z+23	; 0x17
    4b3e:	90 8d       	ldd	r25, Z+24	; 0x18
    4b40:	0e 94 b2 0c 	call	0x1964	; 0x1964 <_ZN7Display3SetE16IndicatorNumerici>
            }
    
            if( m_pUserControls->CheckSettledEvent( UC_GO ) == UserControlSwitchedOn )
    4b44:	6a e0       	ldi	r22, 0x0A	; 10
    4b46:	70 e0       	ldi	r23, 0x00	; 0
    4b48:	d8 01       	movw	r26, r16
    4b4a:	5b 96       	adiw	r26, 0x1b	; 27
    4b4c:	8d 91       	ld	r24, X+
    4b4e:	9c 91       	ld	r25, X
    4b50:	5c 97       	sbiw	r26, 0x1c	; 28
    4b52:	3c d2       	rcall	.+1144   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4b54:	81 30       	cpi	r24, 0x01	; 1
    4b56:	49 f5       	brne	.+82     	; 0x4baa <_ZN9UIManager23HandleUserControlEventsEv+0x36e>
    
    bool        CupIsPresent() { return m_bCupIsPresent; }
    void        SetSelectionConfirmed( bool bConfirmed ) { m_bSelectionIsConfirmed = bConfirmed; }
    4b58:	d8 01       	movw	r26, r16
    4b5a:	5e 96       	adiw	r26, 0x1e	; 30
    4b5c:	ed 91       	ld	r30, X+
    4b5e:	fc 91       	ld	r31, X
    4b60:	5f 97       	sbiw	r26, 0x1f	; 31
    4b62:	87 87       	std	Z+15, r24	; 0x0f
            {
                // User has pressed GO button
                m_pCurrentDrink->SetSelectionConfirmed( true );
                m_pDisplay->Set( IndicatorLED_GoButton, false );
    4b64:	40 e0       	ldi	r20, 0x00	; 0
    4b66:	62 e0       	ldi	r22, 0x02	; 2
    4b68:	57 96       	adiw	r26, 0x17	; 23
    4b6a:	8d 91       	ld	r24, X+
    4b6c:	9c 91       	ld	r25, X
    4b6e:	58 97       	sbiw	r26, 0x18	; 24
    4b70:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN7Display3SetE12IndicatorLEDb>
    4b74:	d8 01       	movw	r26, r16
    4b76:	5e 96       	adiw	r26, 0x1e	; 30
    4b78:	ed 91       	ld	r30, X+
    4b7a:	fc 91       	ld	r31, X
				
				// Stop the station indicator flashing for this drink 
				int nStation = m_pController->GetDrinkLocation( m_pCurrentDrink->GetID() );
    4b7c:	5f 97       	sbiw	r26, 0x1f	; 31
    4b7e:	65 85       	ldd	r22, Z+13	; 0x0d
    4b80:	76 85       	ldd	r23, Z+14	; 0x0e
    4b82:	14 96       	adiw	r26, 0x04	; 4
    4b84:	8d 91       	ld	r24, X+
    4b86:	9c 91       	ld	r25, X
    4b88:	15 97       	sbiw	r26, 0x05	; 5
    4b8a:	dd d8       	rcall	.-3654   	; 0x3d46 <_ZN20TeaMachineController16GetDrinkLocationEi>
    4b8c:	d8 01       	movw	r26, r16
    4b8e:	5e 96       	adiw	r26, 0x1e	; 30
    4b90:	ed 91       	ld	r30, X+
    4b92:	fc 91       	ld	r31, X
    4b94:	5f 97       	sbiw	r26, 0x1f	; 31
                m_pDisplay->Set( nStation, m_pCurrentDrink->GetID(), false );
    4b96:	45 85       	ldd	r20, Z+13	; 0x0d
    4b98:	56 85       	ldd	r21, Z+14	; 0x0e
    4b9a:	20 e0       	ldi	r18, 0x00	; 0
    4b9c:	bc 01       	movw	r22, r24
    4b9e:	57 96       	adiw	r26, 0x17	; 23
    4ba0:	8d 91       	ld	r24, X+
    4ba2:	9c 91       	ld	r25, X
    4ba4:	58 97       	sbiw	r26, 0x18	; 24
    4ba6:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
            }
        }            
    
        if( m_pUserControls->CheckSettledEvent( UC_CANCEL ) == UserControlSwitchedOn )
    4baa:	6b e0       	ldi	r22, 0x0B	; 11
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	f8 01       	movw	r30, r16
    4bb0:	83 8d       	ldd	r24, Z+27	; 0x1b
    4bb2:	94 8d       	ldd	r25, Z+28	; 0x1c
    4bb4:	0b d2       	rcall	.+1046   	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    4bb6:	81 30       	cpi	r24, 0x01	; 1
    4bb8:	69 f5       	brne	.+90     	; 0x4c14 <_ZN9UIManager23HandleUserControlEventsEv+0x3d8>
    4bba:	d8 01       	movw	r26, r16
    4bbc:	5e 96       	adiw	r26, 0x1e	; 30
    4bbe:	ed 91       	ld	r30, X+
    4bc0:	fc 91       	ld	r31, X
        {
            // User has pressed CANCEL button
            int nStation = m_pController->GetDrinkLocation( m_pCurrentDrink->GetID() );
    4bc2:	5f 97       	sbiw	r26, 0x1f	; 31
    4bc4:	65 85       	ldd	r22, Z+13	; 0x0d
    4bc6:	76 85       	ldd	r23, Z+14	; 0x0e
    4bc8:	14 96       	adiw	r26, 0x04	; 4
    4bca:	8d 91       	ld	r24, X+
    4bcc:	9c 91       	ld	r25, X
    4bce:	15 97       	sbiw	r26, 0x05	; 5
    4bd0:	ba d8       	rcall	.-3724   	; 0x3d46 <_ZN20TeaMachineController16GetDrinkLocationEi>
    4bd2:	7c 01       	movw	r14, r24
            if( (nStation==ST_RECEPTION_A) || (nStation==ST_RECEPTION_B) || (nStation==ST_RECEPTION_C) )
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	03 97       	sbiw	r24, 0x03	; 3
    4bd8:	e8 f4       	brcc	.+58     	; 0x4c14 <_ZN9UIManager23HandleUserControlEventsEv+0x3d8>
    4bda:	d8 01       	movw	r26, r16
    4bdc:	5e 96       	adiw	r26, 0x1e	; 30
    4bde:	ed 91       	ld	r30, X+
    4be0:	fc 91       	ld	r31, X
    4be2:	5f 97       	sbiw	r26, 0x1f	; 31
    4be4:	17 86       	std	Z+15, r1	; 0x0f
            {
                // Cancellation only allowed at reception stations
                m_pCurrentDrink->SetSelectionConfirmed( false );
                m_pDisplay->Set( IndicatorLED_GoButton, true );
    4be6:	41 e0       	ldi	r20, 0x01	; 1
    4be8:	62 e0       	ldi	r22, 0x02	; 2
    4bea:	57 96       	adiw	r26, 0x17	; 23
    4bec:	8d 91       	ld	r24, X+
    4bee:	9c 91       	ld	r25, X
    4bf0:	58 97       	sbiw	r26, 0x18	; 24
    4bf2:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <_ZN7Display3SetE12IndicatorLEDb>
    4bf6:	d8 01       	movw	r26, r16
    4bf8:	5e 96       	adiw	r26, 0x1e	; 30
    4bfa:	ed 91       	ld	r30, X+
    4bfc:	fc 91       	ld	r31, X
    4bfe:	5f 97       	sbiw	r26, 0x1f	; 31
				m_pDisplay->Set( nStation, m_pCurrentDrink->GetID(), true );
    4c00:	45 85       	ldd	r20, Z+13	; 0x0d
    4c02:	56 85       	ldd	r21, Z+14	; 0x0e
    4c04:	21 e0       	ldi	r18, 0x01	; 1
    4c06:	b7 01       	movw	r22, r14
    4c08:	57 96       	adiw	r26, 0x17	; 23
    4c0a:	8d 91       	ld	r24, X+
    4c0c:	9c 91       	ld	r25, X
    4c0e:	58 97       	sbiw	r26, 0x18	; 24
    4c10:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
            }
        }
        
        // Render changes to display hardware
        m_pDisplay->Update();
    4c14:	f8 01       	movw	r30, r16
    4c16:	87 89       	ldd	r24, Z+23	; 0x17
    4c18:	90 8d       	ldd	r25, Z+24	; 0x18
    4c1a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>
    }        

    // Now record current settled state of controls
    m_pUserControls->RecordSettledStates();
    4c1e:	d8 01       	movw	r26, r16
    4c20:	5b 96       	adiw	r26, 0x1b	; 27
    4c22:	8d 91       	ld	r24, X+
    4c24:	9c 91       	ld	r25, X
}
    4c26:	5c 97       	sbiw	r26, 0x1c	; 28
    4c28:	0f 90       	pop	r0
    4c2a:	0f 90       	pop	r0
    4c2c:	0f 90       	pop	r0
    4c2e:	0f 90       	pop	r0
    4c30:	0f 90       	pop	r0
    4c32:	df 91       	pop	r29
    4c34:	cf 91       	pop	r28
    4c36:	1f 91       	pop	r17
    4c38:	0f 91       	pop	r16
    4c3a:	ff 90       	pop	r15
        // Render changes to display hardware
        m_pDisplay->Update();
    }        

    // Now record current settled state of controls
    m_pUserControls->RecordSettledStates();
    4c3c:	ef 90       	pop	r14
    4c3e:	bd c1       	rjmp	.+890    	; 0x4fba <_ZN12UserControls19RecordSettledStatesEv>

00004c40 <_ZN9UIManager18HandleCupPlacementEi>:
//	HandleCupPlacement()
//
//  A new cup has been detected
//
void UIManager::HandleCupPlacement( int nStation )
{
    4c40:	ef 92       	push	r14
    4c42:	ff 92       	push	r15
    4c44:	0f 93       	push	r16
    4c46:	1f 93       	push	r17
    4c48:	cf 93       	push	r28
    4c4a:	df 93       	push	r29
    4c4c:	ec 01       	movw	r28, r24
    4c4e:	8b 01       	movw	r16, r22
   Drink *pNewDrink = m_pController->NotifyNewDrinkRequest( nStation );
    4c50:	8c 81       	ldd	r24, Y+4	; 0x04
    4c52:	9d 81       	ldd	r25, Y+5	; 0x05
    4c54:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <_ZN20TeaMachineController21NotifyNewDrinkRequestEj>
    4c58:	7c 01       	movw	r14, r24
    4c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    4c5c:	98 8d       	ldd	r25, Y+24	; 0x18

   if( nStation <= ST_BREW )
    4c5e:	05 30       	cpi	r16, 0x05	; 5
    4c60:	11 05       	cpc	r17, r1
    4c62:	64 f4       	brge	.+24     	; 0x4c7c <_ZN9UIManager18HandleCupPlacementEi+0x3c>
    bool        SelectionIsConfirmed() { return m_bSelectionIsConfirmed; }

    int         GetID() { return m_nDrinkID; }
    
    DrinkState  GetState() { return m_State; }
    void        SetState( DrinkState state ){ m_State = state; }
    4c64:	f7 01       	movw	r30, r14
    4c66:	11 82       	std	Z+1, r1	; 0x01
   {
       // Cup has been placed in a correct station for a new drink
       pNewDrink->SetState( Empty );
	   
	   // Show new cup ID and make it flash
       m_pDisplay->Set( nStation, pNewDrink->GetID(), true );
    4c68:	45 85       	ldd	r20, Z+13	; 0x0d
    4c6a:	56 85       	ldd	r21, Z+14	; 0x0e
    4c6c:	21 e0       	ldi	r18, 0x01	; 1
    4c6e:	b8 01       	movw	r22, r16
    4c70:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
       SetCurrentDrink( pNewDrink );
    4c74:	b7 01       	movw	r22, r14
    4c76:	ce 01       	movw	r24, r28
    4c78:	e4 dc       	rcall	.-1592   	; 0x4642 <_ZN9UIManager15SetCurrentDrinkEP5Drink>
    4c7a:	09 c0       	rjmp	.+18     	; 0x4c8e <_ZN9UIManager18HandleCupPlacementEi+0x4e>
    4c7c:	24 e0       	ldi	r18, 0x04	; 4
    4c7e:	f7 01       	movw	r30, r14
    4c80:	21 83       	std	Z+1, r18	; 0x01
   }
   else
   {
       // Cup has been placed on an incorrect station, so it will be ignored
       pNewDrink->SetState( Invalid );
       m_pDisplay->Set( nStation, UNEXPECTED );	  
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	4d ef       	ldi	r20, 0xFD	; 253
    4c86:	5f ef       	ldi	r21, 0xFF	; 255
    4c88:	b8 01       	movw	r22, r16
    4c8a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
   }
   m_pDisplay->Update();
    4c8e:	8f 89       	ldd	r24, Y+23	; 0x17
    4c90:	98 8d       	ldd	r25, Y+24	; 0x18
}
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	1f 91       	pop	r17
    4c98:	0f 91       	pop	r16
    4c9a:	ff 90       	pop	r15
    4c9c:	ef 90       	pop	r14
   {
       // Cup has been placed on an incorrect station, so it will be ignored
       pNewDrink->SetState( Invalid );
       m_pDisplay->Set( nStation, UNEXPECTED );	  
   }
   m_pDisplay->Update();
    4c9e:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>

00004ca2 <_ZN9UIManager16HandleCupRemovalEi>:
//	HandleCupRemoval()
//
//  A cup has been removed
//
void UIManager::HandleCupRemoval( int nStation )
{
    4ca2:	0f 93       	push	r16
    4ca4:	1f 93       	push	r17
    4ca6:	cf 93       	push	r28
    4ca8:	df 93       	push	r29
    4caa:	ec 01       	movw	r28, r24
    4cac:	8b 01       	movw	r16, r22
    m_pController->NotifyCupRemoval( nStation );
    4cae:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb2:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <_ZN20TeaMachineController16NotifyCupRemovalEj>
    m_pDisplay->Set( nStation, BLANK );
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	4f ef       	ldi	r20, 0xFF	; 255
    4cba:	5f ef       	ldi	r21, 0xFF	; 255
    4cbc:	b8 01       	movw	r22, r16
    4cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc2:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>

	SetCurrentDrink( m_pController->GetNextDrink() );
    4cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    4cca:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <_ZN20TeaMachineController12GetNextDrinkEv>
    4cce:	bc 01       	movw	r22, r24
    4cd0:	ce 01       	movw	r24, r28
}
    4cd2:	df 91       	pop	r29
    4cd4:	cf 91       	pop	r28
    4cd6:	1f 91       	pop	r17
    4cd8:	0f 91       	pop	r16
void UIManager::HandleCupRemoval( int nStation )
{
    m_pController->NotifyCupRemoval( nStation );
    m_pDisplay->Set( nStation, BLANK );

	SetCurrentDrink( m_pController->GetNextDrink() );
    4cda:	b3 cc       	rjmp	.-1690   	; 0x4642 <_ZN9UIManager15SetCurrentDrinkEP5Drink>

00004cdc <_ZN9UIManager19AdvanceStateMachineEv>:
//	AdvanceStateMachine()
//
//  Initiate the next step of the process
//
ProcessManagerResponse UIManager::AdvanceStateMachine()
{
    4cdc:	0f 93       	push	r16
    4cde:	1f 93       	push	r17
    4ce0:	cf 93       	push	r28
    4ce2:	df 93       	push	r29
    4ce4:	ec 01       	movw	r28, r24
    ProcessManagerResponse response = ProcessIncomplete;

    switch( m_State )
    4ce6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ce8:	82 30       	cpi	r24, 0x02	; 2
    4cea:	61 f1       	breq	.+88     	; 0x4d44 <_ZN9UIManager19AdvanceStateMachineEv+0x68>
    4cec:	28 f4       	brcc	.+10     	; 0x4cf8 <_ZN9UIManager19AdvanceStateMachineEv+0x1c>
    4cee:	88 23       	and	r24, r24
    4cf0:	59 f0       	breq	.+22     	; 0x4d08 <_ZN9UIManager19AdvanceStateMachineEv+0x2c>
    4cf2:	81 30       	cpi	r24, 0x01	; 1
    4cf4:	b1 f0       	breq	.+44     	; 0x4d22 <_ZN9UIManager19AdvanceStateMachineEv+0x46>
    4cf6:	79 c0       	rjmp	.+242    	; 0x4dea <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    4cf8:	84 30       	cpi	r24, 0x04	; 4
    4cfa:	09 f4       	brne	.+2      	; 0x4cfe <_ZN9UIManager19AdvanceStateMachineEv+0x22>
    4cfc:	52 c0       	rjmp	.+164    	; 0x4da2 <_ZN9UIManager19AdvanceStateMachineEv+0xc6>
    4cfe:	68 f1       	brcs	.+90     	; 0x4d5a <_ZN9UIManager19AdvanceStateMachineEv+0x7e>
    4d00:	85 30       	cpi	r24, 0x05	; 5
    4d02:	09 f4       	brne	.+2      	; 0x4d06 <_ZN9UIManager19AdvanceStateMachineEv+0x2a>
    4d04:	5e c0       	rjmp	.+188    	; 0x4dc2 <_ZN9UIManager19AdvanceStateMachineEv+0xe6>
    4d06:	71 c0       	rjmp	.+226    	; 0x4dea <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    {
        // Reset user interface
        case UIReset:
            Serial.print("State: UIReset\n");
    4d08:	64 e7       	ldi	r22, 0x74	; 116
    4d0a:	78 e0       	ldi	r23, 0x08	; 8
    4d0c:	81 e1       	ldi	r24, 0x11	; 17
    4d0e:	9a e0       	ldi	r25, 0x0A	; 10
    4d10:	0e d7       	rcall	.+3612   	; 0x5b2e <_ZN5Print5printEPKc>
            ClearTimeout();
    4d12:	ce 01       	movw	r24, r28
    4d14:	0e 94 40 17 	call	0x2e80	; 0x2e80 <_ZN18ProcessManagerBase12ClearTimeoutEv>
            m_pUserControls->ReadStates();
    4d18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d1c:	ba d1       	rcall	.+884    	; 0x5092 <_ZN12UserControls10ReadStatesEv>
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4d1e:	81 e0       	ldi	r24, 0x01	; 1
    4d20:	63 c0       	rjmp	.+198    	; 0x4de8 <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
            SetNextState(UIResetComplete);
            break;
            
        // Obtain settled user control states
        case UIResetComplete:
            Serial.print("State: UIResetComplete\n");
    4d22:	64 e8       	ldi	r22, 0x84	; 132
    4d24:	78 e0       	ldi	r23, 0x08	; 8
    4d26:	81 e1       	ldi	r24, 0x11	; 17
    4d28:	9a e0       	ldi	r25, 0x0A	; 10
    4d2a:	01 d7       	rcall	.+3586   	; 0x5b2e <_ZN5Print5printEPKc>
            if( m_pUserControls->ReadSettledStates() )
    4d2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d30:	cd d1       	rcall	.+922    	; 0x50cc <_ZN12UserControls17ReadSettledStatesEv>
    4d32:	88 23       	and	r24, r24
    4d34:	29 f0       	breq	.+10     	; 0x4d40 <_ZN9UIManager19AdvanceStateMachineEv+0x64>
            {
                m_pUserControls->RecordSettledStates();            
    4d36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d3a:	3f d1       	rcall	.+638    	; 0x4fba <_ZN12UserControls19RecordSettledStatesEv>
    4d3c:	82 e0       	ldi	r24, 0x02	; 2
                response = ProcessComplete;
    4d3e:	56 c0       	rjmp	.+172    	; 0x4dec <_ZN9UIManager19AdvanceStateMachineEv+0x110>
    4d40:	1d 8e       	std	Y+29, r1	; 0x1d
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4d42:	53 c0       	rjmp	.+166    	; 0x4dea <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    4d44:	88 a1       	ldd	r24, Y+32	; 0x20
            break;
                             
        // UIScanStations: Scan cup stations
        case UIScanStations:
//            Serial.print("State: UIScanStations\n");
			if( !m_bStationAdvanceInProgress )
    4d46:	81 11       	cpse	r24, r1
    4d48:	06 c0       	rjmp	.+12     	; 0x4d56 <_ZN9UIManager19AdvanceStateMachineEv+0x7a>
    4d4a:	89 8d       	ldd	r24, Y+25	; 0x19
			{
				// Scan cup stations
				m_pCupDetector->Update();
    4d4c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4d4e:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <_ZN11CupDetector6UpdateEv>
    4d52:	81 e0       	ldi	r24, 0x01	; 1
				m_bResultsAwaitChecking = true;
    4d54:	89 a3       	std	Y+33, r24	; 0x21
    4d56:	83 e0       	ldi	r24, 0x03	; 3
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4d58:	47 c0       	rjmp	.+142    	; 0x4de8 <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
    4d5a:	88 a1       	ldd	r24, Y+32	; 0x20
            break;
        
        // UICheckStationScanResults: Determine whether cups have been added or removed
        case UICheckStationScanResults:
//            Serial.print("State: UICheckStationScanResults\n");
			if( !m_bStationAdvanceInProgress && m_bResultsAwaitChecking )
    4d5c:	81 11       	cpse	r24, r1
    4d5e:	1f c0       	rjmp	.+62     	; 0x4d9e <_ZN9UIManager19AdvanceStateMachineEv+0xc2>
    4d60:	89 a1       	ldd	r24, Y+33	; 0x21
    4d62:	88 23       	and	r24, r24
    4d64:	e1 f0       	breq	.+56     	; 0x4d9e <_ZN9UIManager19AdvanceStateMachineEv+0xc2>
    4d66:	01 e0       	ldi	r16, 0x01	; 1
    4d68:	10 e0       	ldi	r17, 0x00	; 0
    4d6a:	e9 8d       	ldd	r30, Y+25	; 0x19
    bool Initialise();                               // Initialise the cup detector
 	bool Test();					                 // Test the cup detector
   
    void Update();                                   // Scan all stations
    bool IsPresent( int nStation );                  // Returns true if cup was detected
    StationEvent GetChange( int nStation ) { return m_StationEvents[nStation]; }
    4d6c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4d6e:	e0 0f       	add	r30, r16
    4d70:	f1 1f       	adc	r31, r17
    4d72:	80 89       	ldd	r24, Z+16	; 0x10
			{
				// Check results of last scan
				for( int nStation = 1; nStation <=STATIONS; nStation++ )
				{
					if(m_pCupDetector->GetChange(nStation) == StationEventCupAdded)
    4d74:	81 30       	cpi	r24, 0x01	; 1
    4d76:	19 f4       	brne	.+6      	; 0x4d7e <_ZN9UIManager19AdvanceStateMachineEv+0xa2>
					{
						// A cup has been placed on the conveyor
						HandleCupPlacement(nStation);
    4d78:	b8 01       	movw	r22, r16
    4d7a:	ce 01       	movw	r24, r28
    4d7c:	61 df       	rcall	.-318    	; 0x4c40 <_ZN9UIManager18HandleCupPlacementEi>
    4d7e:	e9 8d       	ldd	r30, Y+25	; 0x19
    4d80:	fa 8d       	ldd	r31, Y+26	; 0x1a
    4d82:	e0 0f       	add	r30, r16
    4d84:	f1 1f       	adc	r31, r17
					}
					if(m_pCupDetector->GetChange(nStation) == StationEventCupRemoved)
    4d86:	80 89       	ldd	r24, Z+16	; 0x10
    4d88:	82 30       	cpi	r24, 0x02	; 2
    4d8a:	19 f4       	brne	.+6      	; 0x4d92 <_ZN9UIManager19AdvanceStateMachineEv+0xb6>
					{
						// A cup has been removed from the conveyor
						HandleCupRemoval(nStation);
    4d8c:	b8 01       	movw	r22, r16
    4d8e:	ce 01       	movw	r24, r28
    4d90:	88 df       	rcall	.-240    	; 0x4ca2 <_ZN9UIManager16HandleCupRemovalEi>
    4d92:	0f 5f       	subi	r16, 0xFF	; 255
        case UICheckStationScanResults:
//            Serial.print("State: UICheckStationScanResults\n");
			if( !m_bStationAdvanceInProgress && m_bResultsAwaitChecking )
			{
				// Check results of last scan
				for( int nStation = 1; nStation <=STATIONS; nStation++ )
    4d94:	1f 4f       	sbci	r17, 0xFF	; 255
    4d96:	0a 30       	cpi	r16, 0x0A	; 10
    4d98:	11 05       	cpc	r17, r1
    4d9a:	39 f7       	brne	.-50     	; 0x4d6a <_ZN9UIManager19AdvanceStateMachineEv+0x8e>
					{
						// A cup has been removed from the conveyor
						HandleCupRemoval(nStation);
					}
				} // for
				m_bResultsAwaitChecking = false;
    4d9c:	19 a2       	std	Y+33, r1	; 0x21
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4d9e:	84 e0       	ldi	r24, 0x04	; 4
    4da0:	23 c0       	rjmp	.+70     	; 0x4de8 <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
            
        // UICheckControls: Examine the user controls
        case UIScanControls:
//            Serial.print("State: UIScanControls\n");
            // Check state of controls
            m_pUserControls->ReadStates();
    4da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4da6:	75 d1       	rcall	.+746    	; 0x5092 <_ZN12UserControls10ReadStatesEv>
    4da8:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
            m_lDebounceCheckTime = millis() + UC_DEBOUNCE_DELAY;
    4dac:	dc 01       	movw	r26, r24
    4dae:	cb 01       	movw	r24, r22
    4db0:	c2 96       	adiw	r24, 0x32	; 50
    4db2:	a1 1d       	adc	r26, r1
    4db4:	b1 1d       	adc	r27, r1
    4db6:	8a a3       	std	Y+34, r24	; 0x22
    4db8:	9b a3       	std	Y+35, r25	; 0x23
    4dba:	ac a3       	std	Y+36, r26	; 0x24
    4dbc:	bd a3       	std	Y+37, r27	; 0x25
    4dbe:	85 e0       	ldi	r24, 0x05	; 5
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4dc0:	13 c0       	rjmp	.+38     	; 0x4de8 <_ZN9UIManager19AdvanceStateMachineEv+0x10c>
    4dc2:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
            SetNextState(UICheckControlScanResults);
            break;
            
        // UICheckControlScanResults: Act on any changes to the user controls
        case UICheckControlScanResults:
            if( millis() > m_lDebounceCheckTime )
    4dc6:	0a a1       	ldd	r16, Y+34	; 0x22
    4dc8:	1b a1       	ldd	r17, Y+35	; 0x23
    4dca:	2c a1       	ldd	r18, Y+36	; 0x24
    4dcc:	3d a1       	ldd	r19, Y+37	; 0x25
    4dce:	06 17       	cp	r16, r22
    4dd0:	17 07       	cpc	r17, r23
    4dd2:	28 07       	cpc	r18, r24
    4dd4:	39 07       	cpc	r19, r25
            {
 //               Serial.print("State: UICheckControlScanResults\n");
                if( m_pUserControls->ReadSettledStates() )
    4dd6:	48 f4       	brcc	.+18     	; 0x4dea <_ZN9UIManager19AdvanceStateMachineEv+0x10e>
    4dd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ddc:	77 d1       	rcall	.+750    	; 0x50cc <_ZN12UserControls17ReadSettledStatesEv>
    4dde:	88 23       	and	r24, r24
    4de0:	f1 f2       	breq	.-68     	; 0x4d9e <_ZN9UIManager19AdvanceStateMachineEv+0xc2>
                {
                    // Check state of controls
                    HandleUserControlEvents();
    4de2:	ce 01       	movw	r24, r28
    4de4:	2b dd       	rcall	.-1450   	; 0x483c <_ZN9UIManager23HandleUserControlEventsEv>
    4de6:	82 e0       	ldi	r24, 0x02	; 2
//
//  Set the next state in the process sequence
//
void UIManager::SetNextState( UIState nextState )
{
    m_State = nextState;
    4de8:	8d 8f       	std	Y+29, r24	; 0x1d
    4dea:	80 e0       	ldi	r24, 0x00	; 0
//
//  Initiate the next step of the process
//
ProcessManagerResponse UIManager::AdvanceStateMachine()
{
    ProcessManagerResponse response = ProcessIncomplete;
    4dec:	df 91       	pop	r29
            
            break;          
    } // switch            
            
	return response;
}
    4dee:	cf 91       	pop	r28
    4df0:	1f 91       	pop	r17
    4df2:	0f 91       	pop	r16
    4df4:	08 95       	ret

00004df6 <_ZN9UIManager8ContinueEv>:
    4df6:	cf 92       	push	r12
//	Continue()
//
//  Initiate the next step of the process
//
ProcessManagerResponse UIManager::Continue()
{
    4df8:	df 92       	push	r13
    4dfa:	ef 92       	push	r14
    4dfc:	ff 92       	push	r15
    4dfe:	1f 93       	push	r17
    4e00:	cf 93       	push	r28
    4e02:	df 93       	push	r29
    4e04:	ec 01       	movw	r28, r24
    4e06:	1e 89       	ldd	r17, Y+22	; 0x16
    ProcessManagerResponse response = GetLastResponse();
    
	// Implement display flashing as required
	if( (millis() > m_lNextFlashActionTime) && (m_pDisplay != NULL) )
    4e08:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <millis>
    4e0c:	ce a0       	ldd	r12, Y+38	; 0x26
    4e0e:	df a0       	ldd	r13, Y+39	; 0x27
    4e10:	e8 a4       	ldd	r14, Y+40	; 0x28
    4e12:	f9 a4       	ldd	r15, Y+41	; 0x29
    4e14:	c6 16       	cp	r12, r22
    4e16:	d7 06       	cpc	r13, r23
    4e18:	e8 06       	cpc	r14, r24
    4e1a:	f9 06       	cpc	r15, r25
    4e1c:	20 f4       	brcc	.+8      	; 0x4e26 <_ZN9UIManager8ContinueEv+0x30>
    4e1e:	8f 89       	ldd	r24, Y+23	; 0x17
    4e20:	98 8d       	ldd	r25, Y+24	; 0x18
    4e22:	00 97       	sbiw	r24, 0x00	; 0
    4e24:	29 f4       	brne	.+10     	; 0x4e30 <_ZN9UIManager8ContinueEv+0x3a>
	{
		m_lNextFlashActionTime = m_pDisplay->DoFlash();
	}
	
	// Advance process state machine if necessary
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    4e26:	8e 89       	ldd	r24, Y+22	; 0x16
    4e28:	81 50       	subi	r24, 0x01	; 1
    4e2a:	82 30       	cpi	r24, 0x02	; 2
    4e2c:	40 f4       	brcc	.+16     	; 0x4e3e <_ZN9UIManager8ContinueEv+0x48>
    4e2e:	25 c0       	rjmp	.+74     	; 0x4e7a <_ZN9UIManager8ContinueEv+0x84>
    ProcessManagerResponse response = GetLastResponse();
    
	// Implement display flashing as required
	if( (millis() > m_lNextFlashActionTime) && (m_pDisplay != NULL) )
	{
		m_lNextFlashActionTime = m_pDisplay->DoFlash();
    4e30:	0e 94 74 10 	call	0x20e8	; 0x20e8 <_ZN7Display7DoFlashEv>
    4e34:	6e a3       	std	Y+38, r22	; 0x26
    4e36:	7f a3       	std	Y+39, r23	; 0x27
    4e38:	88 a7       	std	Y+40, r24	; 0x28
    4e3a:	99 a7       	std	Y+41, r25	; 0x29
    4e3c:	f4 cf       	rjmp	.-24     	; 0x4e26 <_ZN9UIManager8ContinueEv+0x30>
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
        
        // Check timeout
        if( !CheckTimeoutExpired() )
    4e3e:	ce 01       	movw	r24, r28
    4e40:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN18ProcessManagerBase19CheckTimeoutExpiredEv>
    4e44:	81 11       	cpse	r24, r1
    4e46:	04 c0       	rjmp	.+8      	; 0x4e50 <_ZN9UIManager8ContinueEv+0x5a>
        {
            // Advance to the next state in the process
            response = AdvanceStateMachine();
    4e48:	ce 01       	movw	r24, r28
    4e4a:	48 df       	rcall	.-368    	; 0x4cdc <_ZN9UIManager19AdvanceStateMachineEv>
    4e4c:	18 2f       	mov	r17, r24
    4e4e:	14 c0       	rjmp	.+40     	; 0x4e78 <_ZN9UIManager8ContinueEv+0x82>
        }
        else
        {
            // Timeout has expired
            Serial.print("TIMEOUT code: ");
    4e50:	6c ec       	ldi	r22, 0xCC	; 204
    4e52:	73 e0       	ldi	r23, 0x03	; 3
    4e54:	81 e1       	ldi	r24, 0x11	; 17
    4e56:	9a e0       	ldi	r25, 0x0A	; 10
    4e58:	6a d6       	rcall	.+3284   	; 0x5b2e <_ZN5Print5printEPKc>
            Serial.print(GetLastError());
    4e5a:	4e 85       	ldd	r20, Y+14	; 0x0e
    4e5c:	5f 85       	ldd	r21, Y+15	; 0x0f
    4e5e:	68 89       	ldd	r22, Y+16	; 0x10
    4e60:	79 89       	ldd	r23, Y+17	; 0x11
    4e62:	2a e0       	ldi	r18, 0x0A	; 10
    4e64:	30 e0       	ldi	r19, 0x00	; 0
    4e66:	81 e1       	ldi	r24, 0x11	; 17
    4e68:	9a e0       	ldi	r25, 0x0A	; 10
    4e6a:	d3 d6       	rcall	.+3494   	; 0x5c12 <_ZN5Print5printEmi>
            Serial.print("\n");
    4e6c:	65 ef       	ldi	r22, 0xF5	; 245
    4e6e:	79 e0       	ldi	r23, 0x09	; 9
    4e70:	81 e1       	ldi	r24, 0x11	; 17
    4e72:	9a e0       	ldi	r25, 0x0A	; 10
    4e74:	5c d6       	rcall	.+3256   	; 0x5b2e <_ZN5Print5printEPKc>
	}
	
	// Advance process state machine if necessary
    if( (GetLastResponse() != ProcessFailed) && (GetLastResponse() != ProcessComplete) )
    {
        response = ProcessFailed;
    4e76:	11 e0       	ldi	r17, 0x01	; 1
	void SetTimeout(unsigned long lTimeout, long lApplicableErrorCode );
    void ClearTimeout();                            // Remove the timeout
	bool CheckTimeoutExpired();						// Check timeout
	void SetErrorCode(long lErrorCode);	            // Set process error code

    void SetResponse( ProcessManagerResponse response ) { m_LastResponse = response; }
    4e78:	1e 8b       	std	Y+22, r17	; 0x16
        
        SetResponse(response);
    }
    
    return response;
}
    4e7a:	81 2f       	mov	r24, r17
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	ff 90       	pop	r15
    4e84:	ef 90       	pop	r14
    4e86:	df 90       	pop	r13
    4e88:	cf 90       	pop	r12
    4e8a:	08 95       	ret

00004e8c <_ZN9UIManager26NotifyStationAdvanceBeginsEv>:
//  Called when the station positions advance by one (as a result
//  of the conveyor moving by one position)
//
void UIManager::NotifyStationAdvanceBegins()
{
	m_bStationAdvanceInProgress = true;
    4e8c:	21 e0       	ldi	r18, 0x01	; 1
    4e8e:	fc 01       	movw	r30, r24
    4e90:	20 a3       	std	Z+32, r18	; 0x20
    4e92:	08 95       	ret

00004e94 <_ZN9UIManager28NotifyStationAdvanceCompleteEv>:
//
//  Called when the station positions advance by one (as a result
//  of the conveyor moving by one position)
//
void UIManager::NotifyStationAdvanceComplete()
{
    4e94:	0f 93       	push	r16
    4e96:	1f 93       	push	r17
    4e98:	cf 93       	push	r28
    4e9a:	df 93       	push	r29
    4e9c:	8c 01       	movw	r16, r24
	if( m_pCupDetector != NULL )
    4e9e:	dc 01       	movw	r26, r24
    4ea0:	59 96       	adiw	r26, 0x19	; 25
    4ea2:	8d 91       	ld	r24, X+
    4ea4:	9c 91       	ld	r25, X
    4ea6:	5a 97       	sbiw	r26, 0x1a	; 26
    4ea8:	00 97       	sbiw	r24, 0x00	; 0
    4eaa:	11 f0       	breq	.+4      	; 0x4eb0 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x1c>
	{
		m_pCupDetector->NotifyStationAdvance();
    4eac:	0e 94 bc 08 	call	0x1178	; 0x1178 <_ZN11CupDetector20NotifyStationAdvanceEv>
//
//  Called when the station positions advance by one (as a result
//  of the conveyor moving by one position)
//
void UIManager::NotifyStationAdvanceComplete()
{
    4eb0:	c1 e0       	ldi	r28, 0x01	; 1
    4eb2:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	// Update the station indicators
	for( int nStation = ST_FARRIGHT; nStation <= ST_FARLEFT; nStation++ )
	{
		Drink *pDrink = m_pController->GetDrinkByStation( nStation );
    4eb4:	be 01       	movw	r22, r28
    4eb6:	f8 01       	movw	r30, r16
    4eb8:	84 81       	ldd	r24, Z+4	; 0x04
    4eba:	95 81       	ldd	r25, Z+5	; 0x05
    4ebc:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <_ZN20TeaMachineController17GetDrinkByStationEi>
    4ec0:	fc 01       	movw	r30, r24
    4ec2:	d8 01       	movw	r26, r16
    4ec4:	57 96       	adiw	r26, 0x17	; 23
    4ec6:	8d 91       	ld	r24, X+
    4ec8:	9c 91       	ld	r25, X
    4eca:	58 97       	sbiw	r26, 0x18	; 24
		if( pDrink != NULL )
    4ecc:	30 97       	sbiw	r30, 0x00	; 0
    4ece:	99 f0       	breq	.+38     	; 0x4ef6 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x62>
    4ed0:	31 81       	ldd	r19, Z+1	; 0x01
		{
			if( pDrink->GetState() != Invalid )
    4ed2:	34 30       	cpi	r19, 0x04	; 4
    4ed4:	61 f0       	breq	.+24     	; 0x4eee <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x5a>
			{
				// Valid drink is present
				m_pDisplay->Set( nStation, pDrink->GetID(), !pDrink->SelectionIsConfirmed() || (pDrink->GetState()==ReadyToDrink));
    4ed6:	27 85       	ldd	r18, Z+15	; 0x0f
    4ed8:	22 23       	and	r18, r18
    4eda:	29 f0       	breq	.+10     	; 0x4ee6 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x52>
    4edc:	21 e0       	ldi	r18, 0x01	; 1
    4ede:	33 30       	cpi	r19, 0x03	; 3
    4ee0:	19 f0       	breq	.+6      	; 0x4ee8 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x54>
    4ee2:	20 e0       	ldi	r18, 0x00	; 0
    4ee4:	01 c0       	rjmp	.+2      	; 0x4ee8 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x54>
    4ee6:	21 e0       	ldi	r18, 0x01	; 1
    4ee8:	45 85       	ldd	r20, Z+13	; 0x0d
    4eea:	56 85       	ldd	r21, Z+14	; 0x0e
    4eec:	07 c0       	rjmp	.+14     	; 0x4efc <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x68>
			}
			else
			{
				// Invalid cup present
				m_pDisplay->Set( nStation, UNEXPECTED );
    4eee:	20 e0       	ldi	r18, 0x00	; 0
    4ef0:	4d ef       	ldi	r20, 0xFD	; 253
    4ef2:	5f ef       	ldi	r21, 0xFF	; 255
    4ef4:	03 c0       	rjmp	.+6      	; 0x4efc <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x68>
			}
		}
		else
		{
			// No cup present
			m_pDisplay->Set( nStation, BLANK );				
    4ef6:	20 e0       	ldi	r18, 0x00	; 0
    4ef8:	4f ef       	ldi	r20, 0xFF	; 255
    4efa:	5f ef       	ldi	r21, 0xFF	; 255
    4efc:	be 01       	movw	r22, r28
    4efe:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN7Display3SetEiib>
		}
		m_pDisplay->Update();
    4f02:	f8 01       	movw	r30, r16
    4f04:	87 89       	ldd	r24, Z+23	; 0x17
    4f06:	90 8d       	ldd	r25, Z+24	; 0x18
    4f08:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN7Display6UpdateEv>
	{
		m_pCupDetector->NotifyStationAdvance();
	}
	
	// Update the station indicators
	for( int nStation = ST_FARRIGHT; nStation <= ST_FARLEFT; nStation++ )
    4f0c:	21 96       	adiw	r28, 0x01	; 1
    4f0e:	ca 30       	cpi	r28, 0x0A	; 10
    4f10:	d1 05       	cpc	r29, r1
    4f12:	81 f6       	brne	.-96     	; 0x4eb4 <_ZN9UIManager28NotifyStationAdvanceCompleteEv+0x20>
		}
		m_pDisplay->Update();
	}
	
	// Station advance has completed, so clear flag
	m_bStationAdvanceInProgress = false;
    4f14:	d8 01       	movw	r26, r16
    4f16:	90 96       	adiw	r26, 0x20	; 32
    4f18:	1c 92       	st	X, r1
    4f1a:	df 91       	pop	r29
    4f1c:	cf 91       	pop	r28
    4f1e:	1f 91       	pop	r17
    4f20:	0f 91       	pop	r16
    4f22:	08 95       	ret

00004f24 <_ZN9UIManager10InitialiseEv>:
//	Initialise()
//
//  Initialise the UI manager
//
bool UIManager::Initialise()
{
    4f24:	0f 93       	push	r16
    4f26:	1f 93       	push	r17
    4f28:	cf 93       	push	r28
    4f2a:	df 93       	push	r29
    4f2c:	ec 01       	movw	r28, r24
    // Call the base class
    ProcessManagerBase::Initialise();
    4f2e:	0e 94 14 17 	call	0x2e28	; 0x2e28 <_ZN18ProcessManagerBase10InitialiseEv>

    // Initialise display
	m_pDisplay = new Display(m_pTeaMachine);
    4f32:	86 e3       	ldi	r24, 0x36	; 54
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	ac d5       	rcall	.+2904   	; 0x5a90 <_Znwj>
    4f38:	8c 01       	movw	r16, r24
    4f3a:	6a 81       	ldd	r22, Y+2	; 0x02
    4f3c:	7b 81       	ldd	r23, Y+3	; 0x03
    4f3e:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN7DisplayC1EP10TeaMachine>
    4f42:	18 8f       	std	Y+24, r17	; 0x18
    4f44:	0f 8b       	std	Y+23, r16	; 0x17
	m_pDisplay->Initialise();
    4f46:	c8 01       	movw	r24, r16
    4f48:	0e 94 5d 10 	call	0x20ba	; 0x20ba <_ZN7Display10InitialiseEv>

    // Initialise cup detector
    m_pCupDetector = new CupDetector(m_pTeaMachine);
    4f4c:	8a e1       	ldi	r24, 0x1A	; 26
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	9f d5       	rcall	.+2878   	; 0x5a90 <_Znwj>
    4f52:	8c 01       	movw	r16, r24
    4f54:	6a 81       	ldd	r22, Y+2	; 0x02
    4f56:	7b 81       	ldd	r23, Y+3	; 0x03
    4f58:	0e 94 3c 08 	call	0x1078	; 0x1078 <_ZN11CupDetectorC1EP10TeaMachine>
    4f5c:	1a 8f       	std	Y+26, r17	; 0x1a
    4f5e:	09 8f       	std	Y+25, r16	; 0x19
    m_pCupDetector->Initialise();
    4f60:	c8 01       	movw	r24, r16
    4f62:	0e 94 49 08 	call	0x1092	; 0x1092 <_ZN11CupDetector10InitialiseEv>
 
    // Initialise user controls
    m_pUserControls = new UserControls(m_pTeaMachine);
    4f66:	8d e2       	ldi	r24, 0x2D	; 45
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	92 d5       	rcall	.+2852   	; 0x5a90 <_Znwj>
    4f6c:	8c 01       	movw	r16, r24
    4f6e:	6a 81       	ldd	r22, Y+2	; 0x02
    4f70:	7b 81       	ldd	r23, Y+3	; 0x03
    4f72:	14 d0       	rcall	.+40     	; 0x4f9c <_ZN12UserControlsC1EP10TeaMachine>
    4f74:	1c 8f       	std	Y+28, r17	; 0x1c
    m_pUserControls->Initialise();
    4f76:	0b 8f       	std	Y+27, r16	; 0x1b
    4f78:	c8 01       	movw	r24, r16
    4f7a:	1d d0       	rcall	.+58     	; 0x4fb6 <_ZN12UserControls10InitialiseEv>
    
    return true;
}
    4f7c:	81 e0       	ldi	r24, 0x01	; 1
    4f7e:	df 91       	pop	r29
    4f80:	cf 91       	pop	r28
    4f82:	1f 91       	pop	r17
    4f84:	0f 91       	pop	r16
    4f86:	08 95       	ret

00004f88 <_ZN12UserControls12ClearMembersEv>:
//
//	Class constructor
//
UserControls::UserControls()
{
    ClearMembers();
    4f88:	fc 01       	movw	r30, r24
    4f8a:	36 96       	adiw	r30, 0x06	; 6
    4f8c:	42 96       	adiw	r24, 0x12	; 18
    4f8e:	11 92       	st	Z+, r1
    4f90:	14 86       	std	Z+12, r1	; 0x0c
    4f92:	11 8e       	std	Z+25, r1	; 0x19
    4f94:	e8 17       	cp	r30, r24
    4f96:	f9 07       	cpc	r31, r25
    4f98:	d1 f7       	brne	.-12     	; 0x4f8e <_ZN12UserControls12ClearMembersEv+0x6>
    4f9a:	08 95       	ret

00004f9c <_ZN12UserControlsC1EP10TeaMachine>:
} //UserControls

//
//	Class constructor
//
UserControls::UserControls(TeaMachine *pTeaMachine) : TeaMachineComponent( pTeaMachine )
    4f9c:	cf 93       	push	r28
    4f9e:	df 93       	push	r29
    4fa0:	ec 01       	movw	r28, r24
    4fa2:	0e 94 3c 1c 	call	0x3878	; 0x3878 <_ZN19TeaMachineComponentC1EP10TeaMachine>
    4fa6:	80 ee       	ldi	r24, 0xE0	; 224
    4fa8:	99 e0       	ldi	r25, 0x09	; 9
    4faa:	99 83       	std	Y+1, r25	; 0x01
    4fac:	88 83       	st	Y, r24
{
    ClearMembers();
    4fae:	ce 01       	movw	r24, r28
} //UserControls
    4fb0:	df 91       	pop	r29
    4fb2:	cf 91       	pop	r28
//
//	Class constructor
//
UserControls::UserControls(TeaMachine *pTeaMachine) : TeaMachineComponent( pTeaMachine )
{
    ClearMembers();
    4fb4:	e9 cf       	rjmp	.-46     	; 0x4f88 <_ZN12UserControls12ClearMembersEv>

00004fb6 <_ZN12UserControls10InitialiseEv>:
//
//  Initialise the user controls class
//
bool UserControls::Initialise()
{
    ClearMembers();
    4fb6:	e8 cf       	rjmp	.-48     	; 0x4f88 <_ZN12UserControls12ClearMembersEv>
}
    4fb8:	08 95       	ret

00004fba <_ZN12UserControls19RecordSettledStatesEv>:
//  RecordSettledStates
//
//  Store the current settled states as the previous settled states
//
void UserControls::RecordSettledStates( )
{
    4fba:	fc 01       	movw	r30, r24
    4fbc:	73 96       	adiw	r30, 0x13	; 19
    4fbe:	4f 96       	adiw	r24, 0x1f	; 31
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    {
        m_bPreviousSettledControlStates[ nControlID ] = m_bSettledControlStates[ nControlID ];
    4fc0:	21 91       	ld	r18, Z+
    4fc2:	24 87       	std	Z+12, r18	; 0x0c
//
//  Store the current settled states as the previous settled states
//
void UserControls::RecordSettledStates( )
{
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    4fc4:	e8 17       	cp	r30, r24
    4fc6:	f9 07       	cpc	r31, r25
    4fc8:	d9 f7       	brne	.-10     	; 0x4fc0 <_ZN12UserControls19RecordSettledStatesEv+0x6>
    {
        m_bPreviousSettledControlStates[ nControlID ] = m_bSettledControlStates[ nControlID ];
    } // for
}
    4fca:	08 95       	ret

00004fcc <_ZN12UserControls17CheckSettledEventEi>:
//  Determine the changes between two sets of settled user control states
//
UserControlEvent UserControls::CheckSettledEvent( int nControlID )
{
    UserControlEvent controlEvent = UserControlNoChange;
    if( m_bSettledControlStates[nControlID] != m_bPreviousSettledControlStates[nControlID] )
    4fcc:	fc 01       	movw	r30, r24
    4fce:	e6 0f       	add	r30, r22
    4fd0:	f7 1f       	adc	r31, r23
    4fd2:	83 89       	ldd	r24, Z+19	; 0x13
    4fd4:	90 a1       	ldd	r25, Z+32	; 0x20
    4fd6:	89 17       	cp	r24, r25
    4fd8:	21 f0       	breq	.+8      	; 0x4fe2 <_ZN12UserControls17CheckSettledEventEi+0x16>
    {
        controlEvent = m_bSettledControlStates[nControlID] ? UserControlSwitchedOff : UserControlSwitchedOn;
    4fda:	81 11       	cpse	r24, r1
    4fdc:	04 c0       	rjmp	.+8      	; 0x4fe6 <_ZN12UserControls17CheckSettledEventEi+0x1a>
    4fde:	81 e0       	ldi	r24, 0x01	; 1
    4fe0:	08 95       	ret
//
//  Determine the changes between two sets of settled user control states
//
UserControlEvent UserControls::CheckSettledEvent( int nControlID )
{
    UserControlEvent controlEvent = UserControlNoChange;
    4fe2:	80 e0       	ldi	r24, 0x00	; 0
    4fe4:	08 95       	ret
    if( m_bSettledControlStates[nControlID] != m_bPreviousSettledControlStates[nControlID] )
    {
        controlEvent = m_bSettledControlStates[nControlID] ? UserControlSwitchedOff : UserControlSwitchedOn;
    4fe6:	82 e0       	ldi	r24, 0x02	; 2
    }
    
    return controlEvent;
}
    4fe8:	08 95       	ret

00004fea <_ZN12UserControls21GetControlStateDirectEi>:
//  GetControlStateDirect
//  
//  Read the state of a given control directly from the input register
//
bool UserControls::GetControlStateDirect( int nControlID )
{
    4fea:	0f 93       	push	r16
    4fec:	1f 93       	push	r17
    4fee:	cf 93       	push	r28
    4ff0:	df 93       	push	r29
    4ff2:	1f 92       	push	r1
    4ff4:	1f 92       	push	r1
    4ff6:	cd b7       	in	r28, 0x3d	; 61
    4ff8:	de b7       	in	r29, 0x3e	; 62
    4ffa:	8b 01       	movw	r16, r22
    bool bState = false;
    
    // Read the input register
    byte userControlsLower = 0;
    4ffc:	1a 82       	std	Y+2, r1	; 0x02
    byte userControlsUpper = 0;
    4ffe:	19 82       	std	Y+1, r1	; 0x01
    m_pSystem->ReadInputRegisterData( &userControlsLower, &userControlsUpper );
    5000:	ae 01       	movw	r20, r28
    5002:	4f 5f       	subi	r20, 0xFF	; 255
    5004:	5f 4f       	sbci	r21, 0xFF	; 255
    5006:	be 01       	movw	r22, r28
    5008:	6e 5f       	subi	r22, 0xFE	; 254
    500a:	7f 4f       	sbci	r23, 0xFF	; 255
    500c:	fc 01       	movw	r30, r24
    500e:	84 81       	ldd	r24, Z+4	; 0x04
    5010:	95 81       	ldd	r25, Z+5	; 0x05
    5012:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6System21ReadInputRegisterDataEPhS0_>

    switch( nControlID )
    5016:	0c 30       	cpi	r16, 0x0C	; 12
    5018:	11 05       	cpc	r17, r1
    501a:	98 f5       	brcc	.+102    	; 0x5082 <_ZN12UserControls21GetControlStateDirectEi+0x98>
    501c:	f8 01       	movw	r30, r16
    501e:	88 27       	eor	r24, r24
    5020:	e5 55       	subi	r30, 0x55	; 85
    5022:	ff 4f       	sbci	r31, 0xFF	; 255
    5024:	8f 4f       	sbci	r24, 0xFF	; 255
    5026:	0c 94 3b 33 	jmp	0x6676	; 0x6676 <__tablejump2__>
    {
        case UC_CUP_INC:
        bState = (userControlsLower & 0x01);
    502a:	8a 81       	ldd	r24, Y+2	; 0x02
    502c:	1a c0       	rjmp	.+52     	; 0x5062 <_ZN12UserControls21GetControlStateDirectEi+0x78>
        break;
        
        case UC_CUP_DEC:
        bState = (userControlsLower & 0x02);
    502e:	8a 81       	ldd	r24, Y+2	; 0x02
    5030:	1b c0       	rjmp	.+54     	; 0x5068 <_ZN12UserControls21GetControlStateDirectEi+0x7e>
        break;
        
        case UC_MILK_INC:
        bState = (userControlsLower & 0x04);
    5032:	8a 81       	ldd	r24, Y+2	; 0x02
    5034:	1d c0       	rjmp	.+58     	; 0x5070 <_ZN12UserControls21GetControlStateDirectEi+0x86>
        break;
        
        case UC_MILK_DEC:
        bState = (userControlsLower & 0x08);
    5036:	8a 81       	ldd	r24, Y+2	; 0x02
    5038:	20 c0       	rjmp	.+64     	; 0x507a <_ZN12UserControls21GetControlStateDirectEi+0x90>
        break;
        
        case UC_SUGAR_INC:
        bState = (userControlsLower & 0x10);
    503a:	8a 81       	ldd	r24, Y+2	; 0x02
    503c:	82 95       	swap	r24
    503e:	81 70       	andi	r24, 0x01	; 1
        break;
    5040:	21 c0       	rjmp	.+66     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_SUGAR_DEC:
        bState = (userControlsLower & 0x20);
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	85 fb       	bst	r24, 5
    5046:	88 27       	eor	r24, r24
    5048:	80 f9       	bld	r24, 0
        break;
    504a:	1c c0       	rjmp	.+56     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_STRENGTH_INC:
        bState = (userControlsLower & 0x40);
    504c:	8a 81       	ldd	r24, Y+2	; 0x02
    504e:	86 fb       	bst	r24, 6
    5050:	88 27       	eor	r24, r24
    5052:	80 f9       	bld	r24, 0
        break;
    5054:	17 c0       	rjmp	.+46     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_STRENGTH_DEC:
        bState = (userControlsLower & 0x80);
    5056:	8a 81       	ldd	r24, Y+2	; 0x02
    5058:	88 1f       	adc	r24, r24
    505a:	88 27       	eor	r24, r24
    505c:	88 1f       	adc	r24, r24
        break;
    505e:	12 c0       	rjmp	.+36     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_DRINK_INC:
        bState = (userControlsUpper & 0x01);
    5060:	89 81       	ldd	r24, Y+1	; 0x01
    5062:	81 70       	andi	r24, 0x01	; 1
        break;
    5064:	0f c0       	rjmp	.+30     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_DRINK_DEC:
        bState = (userControlsUpper & 0x02);
    5066:	89 81       	ldd	r24, Y+1	; 0x01
    5068:	86 95       	lsr	r24
    506a:	81 70       	andi	r24, 0x01	; 1
        break;
    506c:	0b c0       	rjmp	.+22     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_GO:
        bState = (userControlsUpper & 0x04);
    506e:	89 81       	ldd	r24, Y+1	; 0x01
    5070:	82 fb       	bst	r24, 2
    5072:	88 27       	eor	r24, r24
    5074:	80 f9       	bld	r24, 0
        break;
    5076:	06 c0       	rjmp	.+12     	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
        
        case UC_CANCEL:
        bState = (userControlsUpper & 0x08);
    5078:	89 81       	ldd	r24, Y+1	; 0x01
    507a:	83 fb       	bst	r24, 3
    507c:	88 27       	eor	r24, r24
    507e:	80 f9       	bld	r24, 0
        break;        
    5080:	01 c0       	rjmp	.+2      	; 0x5084 <_ZN12UserControls21GetControlStateDirectEi+0x9a>
//  
//  Read the state of a given control directly from the input register
//
bool UserControls::GetControlStateDirect( int nControlID )
{
    bool bState = false;
    5082:	80 e0       	ldi	r24, 0x00	; 0
        bState = (userControlsUpper & 0x08);
        break;        
    } // switch  
    
    return bState;      
}    
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	1f 91       	pop	r17
    508e:	0f 91       	pop	r16
    5090:	08 95       	ret

00005092 <_ZN12UserControls10ReadStatesEv>:
//  ReadStates
//
//  Read the current states of the user controls
//
void UserControls::ReadStates( )
{
    5092:	ef 92       	push	r14
    5094:	ff 92       	push	r15
    5096:	0f 93       	push	r16
    5098:	1f 93       	push	r17
    509a:	cf 93       	push	r28
    509c:	df 93       	push	r29
    509e:	7c 01       	movw	r14, r24
    50a0:	8c 01       	movw	r16, r24
    50a2:	0a 5f       	subi	r16, 0xFA	; 250
    50a4:	1f 4f       	sbci	r17, 0xFF	; 255
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    50a6:	c0 e0       	ldi	r28, 0x00	; 0
    50a8:	d0 e0       	ldi	r29, 0x00	; 0
    {
        m_bControlStates[nControlID] = GetControlStateDirect( nControlID );
    50aa:	be 01       	movw	r22, r28
    50ac:	c7 01       	movw	r24, r14
    50ae:	9d df       	rcall	.-198    	; 0x4fea <_ZN12UserControls21GetControlStateDirectEi>
    50b0:	f8 01       	movw	r30, r16
    50b2:	81 93       	st	Z+, r24
    50b4:	8f 01       	movw	r16, r30
//
//  Read the current states of the user controls
//
void UserControls::ReadStates( )
{
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    50b6:	21 96       	adiw	r28, 0x01	; 1
    50b8:	cc 30       	cpi	r28, 0x0C	; 12
    50ba:	d1 05       	cpc	r29, r1
    50bc:	b1 f7       	brne	.-20     	; 0x50aa <_ZN12UserControls10ReadStatesEv+0x18>
    {
        m_bControlStates[nControlID] = GetControlStateDirect( nControlID );
    } // for
}
    50be:	df 91       	pop	r29
    50c0:	cf 91       	pop	r28
    50c2:	1f 91       	pop	r17
    50c4:	0f 91       	pop	r16
    50c6:	ff 90       	pop	r15
    50c8:	ef 90       	pop	r14
    50ca:	08 95       	ret

000050cc <_ZN12UserControls17ReadSettledStatesEv>:
//  ReadSettledStates
//
//  Read the current states of the user controls and compare them with previously read states to see if they have settled
//
bool UserControls::ReadSettledStates( )
{
    50cc:	cf 92       	push	r12
    50ce:	df 92       	push	r13
    50d0:	ff 92       	push	r15
    50d2:	0f 93       	push	r16
    50d4:	1f 93       	push	r17
    50d6:	cf 93       	push	r28
    50d8:	df 93       	push	r29
    50da:	6c 01       	movw	r12, r24
    50dc:	8c 01       	movw	r16, r24
    50de:	0a 5f       	subi	r16, 0xFA	; 250
    50e0:	1f 4f       	sbci	r17, 0xFF	; 255
    bool bSettled = true;
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    50e2:	c0 e0       	ldi	r28, 0x00	; 0
    50e4:	d0 e0       	ldi	r29, 0x00	; 0
//
//  Read the current states of the user controls and compare them with previously read states to see if they have settled
//
bool UserControls::ReadSettledStates( )
{
    bool bSettled = true;
    50e6:	ff 24       	eor	r15, r15
    50e8:	f3 94       	inc	r15
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    {
        m_bSettledControlStates[nControlID] = GetControlStateDirect( nControlID );
    50ea:	be 01       	movw	r22, r28
    50ec:	c6 01       	movw	r24, r12
    50ee:	7d df       	rcall	.-262    	; 0x4fea <_ZN12UserControls21GetControlStateDirectEi>
    50f0:	f8 01       	movw	r30, r16
    50f2:	85 87       	std	Z+13, r24	; 0x0d
        if(m_bSettledControlStates[nControlID] != m_bControlStates[nControlID] )
    50f4:	90 81       	ld	r25, Z
    50f6:	0f 5f       	subi	r16, 0xFF	; 255
    50f8:	1f 4f       	sbci	r17, 0xFF	; 255
    50fa:	89 13       	cpse	r24, r25
        {
            // Controls have not settled
            bSettled = false;
    50fc:	f1 2c       	mov	r15, r1
//  Read the current states of the user controls and compare them with previously read states to see if they have settled
//
bool UserControls::ReadSettledStates( )
{
    bool bSettled = true;
    for( int nControlID = 0; nControlID < UC_MAXCONTROLS; nControlID++ )
    50fe:	21 96       	adiw	r28, 0x01	; 1
    5100:	cc 30       	cpi	r28, 0x0C	; 12
    5102:	d1 05       	cpc	r29, r1
    5104:	91 f7       	brne	.-28     	; 0x50ea <_ZN12UserControls17ReadSettledStatesEv+0x1e>
            bSettled = false;
        }
    } // for
    
    return bSettled;
}
    5106:	8f 2d       	mov	r24, r15
    5108:	df 91       	pop	r29
    510a:	cf 91       	pop	r28
    510c:	1f 91       	pop	r17
    510e:	0f 91       	pop	r16
    5110:	ff 90       	pop	r15
    5112:	df 90       	pop	r13
    5114:	cf 90       	pop	r12
    5116:	08 95       	ret

00005118 <_ZN12UserControls4TestEv>:
//  Test()
//
//  Test the user controls
//
bool UserControls::Test()
{
    5118:	ec 01       	movw	r28, r24
    // Read/debounce initial states
    ReadStates();
    511a:	bb df       	rcall	.-138    	; 0x5092 <_ZN12UserControls10ReadStatesEv>
    delay(UC_DEBOUNCE_DELAY);
    511c:	62 e3       	ldi	r22, 0x32	; 50
    511e:	70 e0       	ldi	r23, 0x00	; 0
    5120:	80 e0       	ldi	r24, 0x00	; 0
    5122:	90 e0       	ldi	r25, 0x00	; 0
    5124:	2c d7       	rcall	.+3672   	; 0x5f7e <delay>
    ReadSettledStates();
    5126:	ce 01       	movw	r24, r28
    5128:	d1 df       	rcall	.-94     	; 0x50cc <_ZN12UserControls17ReadSettledStatesEv>
    RecordSettledStates();
    512a:	ce 01       	movw	r24, r28
    512c:	46 df       	rcall	.-372    	; 0x4fba <_ZN12UserControls19RecordSettledStatesEv>
    512e:	64 e1       	ldi	r22, 0x14	; 20
    
    while( true )
    {
        delay(20);
    5130:	70 e0       	ldi	r23, 0x00	; 0
    5132:	80 e0       	ldi	r24, 0x00	; 0
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	23 d7       	rcall	.+3654   	; 0x5f7e <delay>
        ReadStates();
    5138:	ce 01       	movw	r24, r28
    513a:	ab df       	rcall	.-170    	; 0x5092 <_ZN12UserControls10ReadStatesEv>
        delay(UC_DEBOUNCE_DELAY);
    513c:	62 e3       	ldi	r22, 0x32	; 50
    513e:	70 e0       	ldi	r23, 0x00	; 0
    5140:	80 e0       	ldi	r24, 0x00	; 0
    5142:	90 e0       	ldi	r25, 0x00	; 0
        ReadSettledStates();
    5144:	1c d7       	rcall	.+3640   	; 0x5f7e <delay>
    5146:	ce 01       	movw	r24, r28
    5148:	c1 df       	rcall	.-126    	; 0x50cc <_ZN12UserControls17ReadSettledStatesEv>
        
        if( CheckSettledEvent( UC_CUP_INC ) == UserControlSwitchedOn )
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	ce 01       	movw	r24, r28
    5150:	3d df       	rcall	.-390    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    5152:	81 30       	cpi	r24, 0x01	; 1
    5154:	29 f4       	brne	.+10     	; 0x5160 <_ZN12UserControls4TestEv+0x48>
        {
            // User has toggled Cup increment control
            Serial.println( "Cup UP on" );
    5156:	6c ea       	ldi	r22, 0xAC	; 172
    5158:	78 e0       	ldi	r23, 0x08	; 8
    515a:	81 e1       	ldi	r24, 0x11	; 17
    515c:	9a e0       	ldi	r25, 0x0A	; 10
    515e:	02 d5       	rcall	.+2564   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5160:	61 e0       	ldi	r22, 0x01	; 1
        }

        if( CheckSettledEvent( UC_CUP_DEC ) == UserControlSwitchedOn )
    5162:	70 e0       	ldi	r23, 0x00	; 0
    5164:	ce 01       	movw	r24, r28
    5166:	32 df       	rcall	.-412    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    5168:	81 30       	cpi	r24, 0x01	; 1
    516a:	29 f4       	brne	.+10     	; 0x5176 <_ZN12UserControls4TestEv+0x5e>
        {
            // User has toggled Cup decrement control
            Serial.println( "Cup DOWN on" );
    516c:	66 eb       	ldi	r22, 0xB6	; 182
    516e:	78 e0       	ldi	r23, 0x08	; 8
    5170:	81 e1       	ldi	r24, 0x11	; 17
    5172:	9a e0       	ldi	r25, 0x0A	; 10
    5174:	f7 d4       	rcall	.+2542   	; 0x5b64 <_ZN5Print7printlnEPKc>
        }

        if( CheckSettledEvent( UC_DRINK_INC ) == UserControlSwitchedOn )
    5176:	62 e0       	ldi	r22, 0x02	; 2
    5178:	70 e0       	ldi	r23, 0x00	; 0
    517a:	ce 01       	movw	r24, r28
    517c:	27 df       	rcall	.-434    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    517e:	81 30       	cpi	r24, 0x01	; 1
    5180:	29 f4       	brne	.+10     	; 0x518c <_ZN12UserControls4TestEv+0x74>
        {
            // User has toggled 'Next drink type' control
            Serial.println( "Drink UP on" );
    5182:	62 ec       	ldi	r22, 0xC2	; 194
    5184:	78 e0       	ldi	r23, 0x08	; 8
    5186:	81 e1       	ldi	r24, 0x11	; 17
    5188:	9a e0       	ldi	r25, 0x0A	; 10
    518a:	ec d4       	rcall	.+2520   	; 0x5b64 <_ZN5Print7printlnEPKc>
        }

        if( CheckSettledEvent( UC_DRINK_DEC ) == UserControlSwitchedOn )
    518c:	63 e0       	ldi	r22, 0x03	; 3
    518e:	70 e0       	ldi	r23, 0x00	; 0
    5190:	ce 01       	movw	r24, r28
    5192:	1c df       	rcall	.-456    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    5194:	81 30       	cpi	r24, 0x01	; 1
    5196:	29 f4       	brne	.+10     	; 0x51a2 <_ZN12UserControls4TestEv+0x8a>
        {
            // User has toggled 'Previous drink type' control
            Serial.println( "Drink DOWN on" );
    5198:	6e ec       	ldi	r22, 0xCE	; 206
    519a:	78 e0       	ldi	r23, 0x08	; 8
    519c:	81 e1       	ldi	r24, 0x11	; 17
    519e:	9a e0       	ldi	r25, 0x0A	; 10
        }
        
        if( CheckSettledEvent( UC_MILK_INC ) == UserControlSwitchedOn )
    51a0:	e1 d4       	rcall	.+2498   	; 0x5b64 <_ZN5Print7printlnEPKc>
    51a2:	64 e0       	ldi	r22, 0x04	; 4
    51a4:	70 e0       	ldi	r23, 0x00	; 0
    51a6:	ce 01       	movw	r24, r28
    51a8:	11 df       	rcall	.-478    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    51aa:	81 30       	cpi	r24, 0x01	; 1
        {
            // User has toggled 'Increment milk' control
            Serial.println( "Milk UP on" );
    51ac:	29 f4       	brne	.+10     	; 0x51b8 <_ZN12UserControls4TestEv+0xa0>
    51ae:	6c ed       	ldi	r22, 0xDC	; 220
    51b0:	78 e0       	ldi	r23, 0x08	; 8
    51b2:	81 e1       	ldi	r24, 0x11	; 17
    51b4:	9a e0       	ldi	r25, 0x0A	; 10
        }
        
        if( CheckSettledEvent( UC_MILK_DEC ) == UserControlSwitchedOn )
    51b6:	d6 d4       	rcall	.+2476   	; 0x5b64 <_ZN5Print7printlnEPKc>
    51b8:	65 e0       	ldi	r22, 0x05	; 5
    51ba:	70 e0       	ldi	r23, 0x00	; 0
    51bc:	ce 01       	movw	r24, r28
    51be:	06 df       	rcall	.-500    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    51c0:	81 30       	cpi	r24, 0x01	; 1
        {
            // User has toggled 'Decrement milk' control
            Serial.println( "Milk DOWN on" );
    51c2:	29 f4       	brne	.+10     	; 0x51ce <_ZN12UserControls4TestEv+0xb6>
    51c4:	67 ee       	ldi	r22, 0xE7	; 231
    51c6:	78 e0       	ldi	r23, 0x08	; 8
    51c8:	81 e1       	ldi	r24, 0x11	; 17
    51ca:	9a e0       	ldi	r25, 0x0A	; 10
        }
        
        if( CheckSettledEvent( UC_SUGAR_INC ) == UserControlSwitchedOn )
    51cc:	cb d4       	rcall	.+2454   	; 0x5b64 <_ZN5Print7printlnEPKc>
    51ce:	66 e0       	ldi	r22, 0x06	; 6
    51d0:	70 e0       	ldi	r23, 0x00	; 0
    51d2:	ce 01       	movw	r24, r28
    51d4:	fb de       	rcall	.-522    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Increment sugar' control
            Serial.println( "Sugar UP on" );
    51d6:	81 30       	cpi	r24, 0x01	; 1
    51d8:	29 f4       	brne	.+10     	; 0x51e4 <_ZN12UserControls4TestEv+0xcc>
    51da:	64 ef       	ldi	r22, 0xF4	; 244
    51dc:	78 e0       	ldi	r23, 0x08	; 8
    51de:	81 e1       	ldi	r24, 0x11	; 17
        }
        
        if( CheckSettledEvent( UC_SUGAR_DEC ) == UserControlSwitchedOn )
    51e0:	9a e0       	ldi	r25, 0x0A	; 10
    51e2:	c0 d4       	rcall	.+2432   	; 0x5b64 <_ZN5Print7printlnEPKc>
    51e4:	67 e0       	ldi	r22, 0x07	; 7
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	ce 01       	movw	r24, r28
    51ea:	f0 de       	rcall	.-544    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Decrement sugar' control
            Serial.println( "Sugar DOWN on" );
    51ec:	81 30       	cpi	r24, 0x01	; 1
    51ee:	29 f4       	brne	.+10     	; 0x51fa <_ZN12UserControls4TestEv+0xe2>
    51f0:	60 e0       	ldi	r22, 0x00	; 0
    51f2:	79 e0       	ldi	r23, 0x09	; 9
    51f4:	81 e1       	ldi	r24, 0x11	; 17
        }
        
        if( CheckSettledEvent( UC_STRENGTH_INC ) == UserControlSwitchedOn )
    51f6:	9a e0       	ldi	r25, 0x0A	; 10
    51f8:	b5 d4       	rcall	.+2410   	; 0x5b64 <_ZN5Print7printlnEPKc>
    51fa:	68 e0       	ldi	r22, 0x08	; 8
    51fc:	70 e0       	ldi	r23, 0x00	; 0
    51fe:	ce 01       	movw	r24, r28
    5200:	e5 de       	rcall	.-566    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Increment strength' control
            Serial.println( "Strength UP on" );
    5202:	81 30       	cpi	r24, 0x01	; 1
    5204:	29 f4       	brne	.+10     	; 0x5210 <_ZN12UserControls4TestEv+0xf8>
    5206:	6e e0       	ldi	r22, 0x0E	; 14
    5208:	79 e0       	ldi	r23, 0x09	; 9
    520a:	81 e1       	ldi	r24, 0x11	; 17
        }
        
        if( CheckSettledEvent( UC_STRENGTH_DEC ) == UserControlSwitchedOn )
    520c:	9a e0       	ldi	r25, 0x0A	; 10
    520e:	aa d4       	rcall	.+2388   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5210:	69 e0       	ldi	r22, 0x09	; 9
    5212:	70 e0       	ldi	r23, 0x00	; 0
    5214:	ce 01       	movw	r24, r28
    5216:	da de       	rcall	.-588    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Decrement strength' control
            Serial.println( "Strength DOWN on" );
    5218:	81 30       	cpi	r24, 0x01	; 1
    521a:	29 f4       	brne	.+10     	; 0x5226 <_ZN12UserControls4TestEv+0x10e>
    521c:	6d e1       	ldi	r22, 0x1D	; 29
    521e:	79 e0       	ldi	r23, 0x09	; 9
    5220:	81 e1       	ldi	r24, 0x11	; 17
        }
        
        if( CheckSettledEvent( UC_GO ) == UserControlSwitchedOn )
    5222:	9a e0       	ldi	r25, 0x0A	; 10
    5224:	9f d4       	rcall	.+2366   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5226:	6a e0       	ldi	r22, 0x0A	; 10
    5228:	70 e0       	ldi	r23, 0x00	; 0
    522a:	ce 01       	movw	r24, r28
    522c:	cf de       	rcall	.-610    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has pressed GO button
            Serial.println( "GO on" );
    522e:	81 30       	cpi	r24, 0x01	; 1
    5230:	29 f4       	brne	.+10     	; 0x523c <_ZN12UserControls4TestEv+0x124>
    5232:	6e e2       	ldi	r22, 0x2E	; 46
    5234:	79 e0       	ldi	r23, 0x09	; 9
    5236:	81 e1       	ldi	r24, 0x11	; 17
        }
        
        if( CheckSettledEvent( UC_CANCEL ) == UserControlSwitchedOn )
    5238:	9a e0       	ldi	r25, 0x0A	; 10
    523a:	94 d4       	rcall	.+2344   	; 0x5b64 <_ZN5Print7printlnEPKc>
    523c:	6b e0       	ldi	r22, 0x0B	; 11
    523e:	70 e0       	ldi	r23, 0x00	; 0
    5240:	ce 01       	movw	r24, r28
    5242:	c4 de       	rcall	.-632    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has pressed CANCEL button
            Serial.println( "CANCEL on" );
    5244:	81 30       	cpi	r24, 0x01	; 1
    5246:	29 f4       	brne	.+10     	; 0x5252 <_ZN12UserControls4TestEv+0x13a>
    5248:	64 e3       	ldi	r22, 0x34	; 52
    524a:	79 e0       	ldi	r23, 0x09	; 9
    524c:	81 e1       	ldi	r24, 0x11	; 17
    524e:	9a e0       	ldi	r25, 0x0A	; 10
        }        
    
        if( CheckSettledEvent( UC_CUP_INC ) == UserControlSwitchedOff )
    5250:	89 d4       	rcall	.+2322   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5252:	60 e0       	ldi	r22, 0x00	; 0
    5254:	70 e0       	ldi	r23, 0x00	; 0
    5256:	ce 01       	movw	r24, r28
    5258:	b9 de       	rcall	.-654    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled Cup increment control
            Serial.println( "Cup UP off" );
    525a:	82 30       	cpi	r24, 0x02	; 2
    525c:	29 f4       	brne	.+10     	; 0x5268 <_ZN12UserControls4TestEv+0x150>
    525e:	6e e3       	ldi	r22, 0x3E	; 62
    5260:	79 e0       	ldi	r23, 0x09	; 9
    5262:	81 e1       	ldi	r24, 0x11	; 17
        }

        if( CheckSettledEvent( UC_CUP_DEC ) == UserControlSwitchedOff )
    5264:	9a e0       	ldi	r25, 0x0A	; 10
    5266:	7e d4       	rcall	.+2300   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5268:	61 e0       	ldi	r22, 0x01	; 1
    526a:	70 e0       	ldi	r23, 0x00	; 0
    526c:	ce 01       	movw	r24, r28
    526e:	ae de       	rcall	.-676    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled Cup decrement control
            Serial.println( "Cup DOWN off" );
    5270:	82 30       	cpi	r24, 0x02	; 2
    5272:	29 f4       	brne	.+10     	; 0x527e <_ZN12UserControls4TestEv+0x166>
    5274:	69 e4       	ldi	r22, 0x49	; 73
    5276:	79 e0       	ldi	r23, 0x09	; 9
    5278:	81 e1       	ldi	r24, 0x11	; 17
        }

        if( CheckSettledEvent( UC_DRINK_INC ) == UserControlSwitchedOff )
    527a:	9a e0       	ldi	r25, 0x0A	; 10
    527c:	73 d4       	rcall	.+2278   	; 0x5b64 <_ZN5Print7printlnEPKc>
    527e:	62 e0       	ldi	r22, 0x02	; 2
    5280:	70 e0       	ldi	r23, 0x00	; 0
    5282:	ce 01       	movw	r24, r28
    5284:	a3 de       	rcall	.-698    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
        {
            // User has toggled 'Next drink type' control
            Serial.println( "Drink UP off" );
    5286:	82 30       	cpi	r24, 0x02	; 2
    5288:	29 f4       	brne	.+10     	; 0x5294 <_ZN12UserControls4TestEv+0x17c>
    528a:	66 e5       	ldi	r22, 0x56	; 86
    528c:	79 e0       	ldi	r23, 0x09	; 9
        }

        if( CheckSettledEvent( UC_DRINK_DEC ) == UserControlSwitchedOff )
    528e:	81 e1       	ldi	r24, 0x11	; 17
    5290:	9a e0       	ldi	r25, 0x0A	; 10
    5292:	68 d4       	rcall	.+2256   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5294:	63 e0       	ldi	r22, 0x03	; 3
    5296:	70 e0       	ldi	r23, 0x00	; 0
    5298:	ce 01       	movw	r24, r28
        {
            // User has toggled 'Previous drink type' control
            Serial.println( "Drink DOWN off" );
    529a:	98 de       	rcall	.-720    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    529c:	82 30       	cpi	r24, 0x02	; 2
    529e:	29 f4       	brne	.+10     	; 0x52aa <_ZN12UserControls4TestEv+0x192>
    52a0:	63 e6       	ldi	r22, 0x63	; 99
    52a2:	79 e0       	ldi	r23, 0x09	; 9
        }
    
        if( CheckSettledEvent( UC_MILK_INC ) == UserControlSwitchedOff )
    52a4:	81 e1       	ldi	r24, 0x11	; 17
    52a6:	9a e0       	ldi	r25, 0x0A	; 10
    52a8:	5d d4       	rcall	.+2234   	; 0x5b64 <_ZN5Print7printlnEPKc>
    52aa:	64 e0       	ldi	r22, 0x04	; 4
    52ac:	70 e0       	ldi	r23, 0x00	; 0
    52ae:	ce 01       	movw	r24, r28
        {
            // User has toggled 'Increment milk' control
            Serial.println( "Milk UP off" );
    52b0:	8d de       	rcall	.-742    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    52b2:	82 30       	cpi	r24, 0x02	; 2
    52b4:	29 f4       	brne	.+10     	; 0x52c0 <_ZN12UserControls4TestEv+0x1a8>
    52b6:	62 e7       	ldi	r22, 0x72	; 114
    52b8:	79 e0       	ldi	r23, 0x09	; 9
        }
    
        if( CheckSettledEvent( UC_MILK_DEC ) == UserControlSwitchedOff )
    52ba:	81 e1       	ldi	r24, 0x11	; 17
    52bc:	9a e0       	ldi	r25, 0x0A	; 10
    52be:	52 d4       	rcall	.+2212   	; 0x5b64 <_ZN5Print7printlnEPKc>
    52c0:	65 e0       	ldi	r22, 0x05	; 5
    52c2:	70 e0       	ldi	r23, 0x00	; 0
        {
            // User has toggled 'Decrement milk' control
            Serial.println( "Milk DOWN off" );
    52c4:	ce 01       	movw	r24, r28
    52c6:	82 de       	rcall	.-764    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    52c8:	82 30       	cpi	r24, 0x02	; 2
    52ca:	29 f4       	brne	.+10     	; 0x52d6 <_ZN12UserControls4TestEv+0x1be>
    52cc:	6e e7       	ldi	r22, 0x7E	; 126
        }
    
        if( CheckSettledEvent( UC_SUGAR_INC ) == UserControlSwitchedOff )
    52ce:	79 e0       	ldi	r23, 0x09	; 9
    52d0:	81 e1       	ldi	r24, 0x11	; 17
    52d2:	9a e0       	ldi	r25, 0x0A	; 10
    52d4:	47 d4       	rcall	.+2190   	; 0x5b64 <_ZN5Print7printlnEPKc>
    52d6:	66 e0       	ldi	r22, 0x06	; 6
    52d8:	70 e0       	ldi	r23, 0x00	; 0
        {
            // User has toggled 'Increment sugar' control
            Serial.println( "Sugar UP off" );
    52da:	ce 01       	movw	r24, r28
    52dc:	77 de       	rcall	.-786    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    52de:	82 30       	cpi	r24, 0x02	; 2
    52e0:	29 f4       	brne	.+10     	; 0x52ec <_ZN12UserControls4TestEv+0x1d4>
    52e2:	6c e8       	ldi	r22, 0x8C	; 140
        }
    
        if( CheckSettledEvent( UC_SUGAR_DEC ) == UserControlSwitchedOff )
    52e4:	79 e0       	ldi	r23, 0x09	; 9
    52e6:	81 e1       	ldi	r24, 0x11	; 17
    52e8:	9a e0       	ldi	r25, 0x0A	; 10
    52ea:	3c d4       	rcall	.+2168   	; 0x5b64 <_ZN5Print7printlnEPKc>
    52ec:	67 e0       	ldi	r22, 0x07	; 7
    52ee:	70 e0       	ldi	r23, 0x00	; 0
        {
            // User has toggled 'Decrement sugar' control
            Serial.println( "Sugar DOWN off" );
    52f0:	ce 01       	movw	r24, r28
    52f2:	6c de       	rcall	.-808    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    52f4:	82 30       	cpi	r24, 0x02	; 2
    52f6:	29 f4       	brne	.+10     	; 0x5302 <_ZN12UserControls4TestEv+0x1ea>
    52f8:	69 e9       	ldi	r22, 0x99	; 153
        }
    
        if( CheckSettledEvent( UC_STRENGTH_INC ) == UserControlSwitchedOff )
    52fa:	79 e0       	ldi	r23, 0x09	; 9
    52fc:	81 e1       	ldi	r24, 0x11	; 17
    52fe:	9a e0       	ldi	r25, 0x0A	; 10
    5300:	31 d4       	rcall	.+2146   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5302:	68 e0       	ldi	r22, 0x08	; 8
    5304:	70 e0       	ldi	r23, 0x00	; 0
    5306:	ce 01       	movw	r24, r28
        {
            // User has toggled 'Increment strength' control
            Serial.println( "Strength UP off" );
    5308:	61 de       	rcall	.-830    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    530a:	82 30       	cpi	r24, 0x02	; 2
    530c:	29 f4       	brne	.+10     	; 0x5318 <_ZN12UserControls4TestEv+0x200>
    530e:	68 ea       	ldi	r22, 0xA8	; 168
    5310:	79 e0       	ldi	r23, 0x09	; 9
    5312:	81 e1       	ldi	r24, 0x11	; 17
        }
    
        if( CheckSettledEvent( UC_STRENGTH_DEC ) == UserControlSwitchedOff )
    5314:	9a e0       	ldi	r25, 0x0A	; 10
    5316:	26 d4       	rcall	.+2124   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5318:	69 e0       	ldi	r22, 0x09	; 9
    531a:	70 e0       	ldi	r23, 0x00	; 0
    531c:	ce 01       	movw	r24, r28
    531e:	56 de       	rcall	.-852    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    5320:	82 30       	cpi	r24, 0x02	; 2
        {
            // User has toggled 'Decrement strength' control
            Serial.println( "Strength DOWN off" );
    5322:	29 f4       	brne	.+10     	; 0x532e <_ZN12UserControls4TestEv+0x216>
    5324:	68 eb       	ldi	r22, 0xB8	; 184
    5326:	79 e0       	ldi	r23, 0x09	; 9
    5328:	81 e1       	ldi	r24, 0x11	; 17
    532a:	9a e0       	ldi	r25, 0x0A	; 10
    532c:	1b d4       	rcall	.+2102   	; 0x5b64 <_ZN5Print7printlnEPKc>
        }
    
        if( CheckSettledEvent( UC_GO ) == UserControlSwitchedOff )
    532e:	6a e0       	ldi	r22, 0x0A	; 10
    5330:	70 e0       	ldi	r23, 0x00	; 0
    5332:	ce 01       	movw	r24, r28
    5334:	4b de       	rcall	.-874    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    5336:	82 30       	cpi	r24, 0x02	; 2
    5338:	29 f4       	brne	.+10     	; 0x5344 <_ZN12UserControls4TestEv+0x22c>
    533a:	6a ec       	ldi	r22, 0xCA	; 202
        {
            // User has pressed GO button
            Serial.println( "GO off" );
    533c:	79 e0       	ldi	r23, 0x09	; 9
    533e:	81 e1       	ldi	r24, 0x11	; 17
    5340:	9a e0       	ldi	r25, 0x0A	; 10
    5342:	10 d4       	rcall	.+2080   	; 0x5b64 <_ZN5Print7printlnEPKc>
    5344:	6b e0       	ldi	r22, 0x0B	; 11
    5346:	70 e0       	ldi	r23, 0x00	; 0
        }
    
        if( CheckSettledEvent( UC_CANCEL ) == UserControlSwitchedOff )
    5348:	ce 01       	movw	r24, r28
    534a:	40 de       	rcall	.-896    	; 0x4fcc <_ZN12UserControls17CheckSettledEventEi>
    534c:	82 30       	cpi	r24, 0x02	; 2
    534e:	09 f0       	breq	.+2      	; 0x5352 <_ZN12UserControls4TestEv+0x23a>
    5350:	ec ce       	rjmp	.-552    	; 0x512a <_ZN12UserControls4TestEv+0x12>
    5352:	61 ed       	ldi	r22, 0xD1	; 209
    5354:	79 e0       	ldi	r23, 0x09	; 9
    5356:	81 e1       	ldi	r24, 0x11	; 17
        {
            // User has pressed CANCEL button
            Serial.println( "CANCEL off" );
    5358:	9a e0       	ldi	r25, 0x0A	; 10
    535a:	04 d4       	rcall	.+2056   	; 0x5b64 <_ZN5Print7printlnEPKc>
    535c:	e6 ce       	rjmp	.-564    	; 0x512a <_ZN12UserControls4TestEv+0x12>

0000535e <__subsf3>:
    535e:	50 58       	subi	r21, 0x80	; 128

00005360 <__addsf3>:
    5360:	bb 27       	eor	r27, r27
    5362:	aa 27       	eor	r26, r26
    5364:	0e d0       	rcall	.+28     	; 0x5382 <__addsf3x>
    5366:	b4 c0       	rjmp	.+360    	; 0x54d0 <__fp_round>
    5368:	a5 d0       	rcall	.+330    	; 0x54b4 <__fp_pscA>
    536a:	30 f0       	brcs	.+12     	; 0x5378 <__addsf3+0x18>
    536c:	aa d0       	rcall	.+340    	; 0x54c2 <__fp_pscB>
    536e:	20 f0       	brcs	.+8      	; 0x5378 <__addsf3+0x18>
    5370:	31 f4       	brne	.+12     	; 0x537e <__addsf3+0x1e>
    5372:	9f 3f       	cpi	r25, 0xFF	; 255
    5374:	11 f4       	brne	.+4      	; 0x537a <__addsf3+0x1a>
    5376:	1e f4       	brtc	.+6      	; 0x537e <__addsf3+0x1e>
    5378:	9a c0       	rjmp	.+308    	; 0x54ae <__fp_nan>
    537a:	0e f4       	brtc	.+2      	; 0x537e <__addsf3+0x1e>
    537c:	e0 95       	com	r30
    537e:	e7 fb       	bst	r30, 7
    5380:	90 c0       	rjmp	.+288    	; 0x54a2 <__fp_inf>

00005382 <__addsf3x>:
    5382:	e9 2f       	mov	r30, r25
    5384:	b6 d0       	rcall	.+364    	; 0x54f2 <__fp_split3>
    5386:	80 f3       	brcs	.-32     	; 0x5368 <__addsf3+0x8>
    5388:	ba 17       	cp	r27, r26
    538a:	62 07       	cpc	r22, r18
    538c:	73 07       	cpc	r23, r19
    538e:	84 07       	cpc	r24, r20
    5390:	95 07       	cpc	r25, r21
    5392:	18 f0       	brcs	.+6      	; 0x539a <__addsf3x+0x18>
    5394:	71 f4       	brne	.+28     	; 0x53b2 <__addsf3x+0x30>
    5396:	9e f5       	brtc	.+102    	; 0x53fe <__addsf3x+0x7c>
    5398:	ce c0       	rjmp	.+412    	; 0x5536 <__fp_zero>
    539a:	0e f4       	brtc	.+2      	; 0x539e <__addsf3x+0x1c>
    539c:	e0 95       	com	r30
    539e:	0b 2e       	mov	r0, r27
    53a0:	ba 2f       	mov	r27, r26
    53a2:	a0 2d       	mov	r26, r0
    53a4:	0b 01       	movw	r0, r22
    53a6:	b9 01       	movw	r22, r18
    53a8:	90 01       	movw	r18, r0
    53aa:	0c 01       	movw	r0, r24
    53ac:	ca 01       	movw	r24, r20
    53ae:	a0 01       	movw	r20, r0
    53b0:	11 24       	eor	r1, r1
    53b2:	ff 27       	eor	r31, r31
    53b4:	59 1b       	sub	r21, r25
    53b6:	99 f0       	breq	.+38     	; 0x53de <__addsf3x+0x5c>
    53b8:	59 3f       	cpi	r21, 0xF9	; 249
    53ba:	50 f4       	brcc	.+20     	; 0x53d0 <__addsf3x+0x4e>
    53bc:	50 3e       	cpi	r21, 0xE0	; 224
    53be:	68 f1       	brcs	.+90     	; 0x541a <__addsf3x+0x98>
    53c0:	1a 16       	cp	r1, r26
    53c2:	f0 40       	sbci	r31, 0x00	; 0
    53c4:	a2 2f       	mov	r26, r18
    53c6:	23 2f       	mov	r18, r19
    53c8:	34 2f       	mov	r19, r20
    53ca:	44 27       	eor	r20, r20
    53cc:	58 5f       	subi	r21, 0xF8	; 248
    53ce:	f3 cf       	rjmp	.-26     	; 0x53b6 <__addsf3x+0x34>
    53d0:	46 95       	lsr	r20
    53d2:	37 95       	ror	r19
    53d4:	27 95       	ror	r18
    53d6:	a7 95       	ror	r26
    53d8:	f0 40       	sbci	r31, 0x00	; 0
    53da:	53 95       	inc	r21
    53dc:	c9 f7       	brne	.-14     	; 0x53d0 <__addsf3x+0x4e>
    53de:	7e f4       	brtc	.+30     	; 0x53fe <__addsf3x+0x7c>
    53e0:	1f 16       	cp	r1, r31
    53e2:	ba 0b       	sbc	r27, r26
    53e4:	62 0b       	sbc	r22, r18
    53e6:	73 0b       	sbc	r23, r19
    53e8:	84 0b       	sbc	r24, r20
    53ea:	ba f0       	brmi	.+46     	; 0x541a <__addsf3x+0x98>
    53ec:	91 50       	subi	r25, 0x01	; 1
    53ee:	a1 f0       	breq	.+40     	; 0x5418 <__addsf3x+0x96>
    53f0:	ff 0f       	add	r31, r31
    53f2:	bb 1f       	adc	r27, r27
    53f4:	66 1f       	adc	r22, r22
    53f6:	77 1f       	adc	r23, r23
    53f8:	88 1f       	adc	r24, r24
    53fa:	c2 f7       	brpl	.-16     	; 0x53ec <__addsf3x+0x6a>
    53fc:	0e c0       	rjmp	.+28     	; 0x541a <__addsf3x+0x98>
    53fe:	ba 0f       	add	r27, r26
    5400:	62 1f       	adc	r22, r18
    5402:	73 1f       	adc	r23, r19
    5404:	84 1f       	adc	r24, r20
    5406:	48 f4       	brcc	.+18     	; 0x541a <__addsf3x+0x98>
    5408:	87 95       	ror	r24
    540a:	77 95       	ror	r23
    540c:	67 95       	ror	r22
    540e:	b7 95       	ror	r27
    5410:	f7 95       	ror	r31
    5412:	9e 3f       	cpi	r25, 0xFE	; 254
    5414:	08 f0       	brcs	.+2      	; 0x5418 <__addsf3x+0x96>
    5416:	b3 cf       	rjmp	.-154    	; 0x537e <__addsf3+0x1e>
    5418:	93 95       	inc	r25
    541a:	88 0f       	add	r24, r24
    541c:	08 f0       	brcs	.+2      	; 0x5420 <__addsf3x+0x9e>
    541e:	99 27       	eor	r25, r25
    5420:	ee 0f       	add	r30, r30
    5422:	97 95       	ror	r25
    5424:	87 95       	ror	r24
    5426:	08 95       	ret

00005428 <__floatunsisf>:
    5428:	e8 94       	clt
    542a:	09 c0       	rjmp	.+18     	; 0x543e <__floatsisf+0x12>

0000542c <__floatsisf>:
    542c:	97 fb       	bst	r25, 7
    542e:	3e f4       	brtc	.+14     	; 0x543e <__floatsisf+0x12>
    5430:	90 95       	com	r25
    5432:	80 95       	com	r24
    5434:	70 95       	com	r23
    5436:	61 95       	neg	r22
    5438:	7f 4f       	sbci	r23, 0xFF	; 255
    543a:	8f 4f       	sbci	r24, 0xFF	; 255
    543c:	9f 4f       	sbci	r25, 0xFF	; 255
    543e:	99 23       	and	r25, r25
    5440:	a9 f0       	breq	.+42     	; 0x546c <__floatsisf+0x40>
    5442:	f9 2f       	mov	r31, r25
    5444:	96 e9       	ldi	r25, 0x96	; 150
    5446:	bb 27       	eor	r27, r27
    5448:	93 95       	inc	r25
    544a:	f6 95       	lsr	r31
    544c:	87 95       	ror	r24
    544e:	77 95       	ror	r23
    5450:	67 95       	ror	r22
    5452:	b7 95       	ror	r27
    5454:	f1 11       	cpse	r31, r1
    5456:	f8 cf       	rjmp	.-16     	; 0x5448 <__floatsisf+0x1c>
    5458:	fa f4       	brpl	.+62     	; 0x5498 <__floatsisf+0x6c>
    545a:	bb 0f       	add	r27, r27
    545c:	11 f4       	brne	.+4      	; 0x5462 <__floatsisf+0x36>
    545e:	60 ff       	sbrs	r22, 0
    5460:	1b c0       	rjmp	.+54     	; 0x5498 <__floatsisf+0x6c>
    5462:	6f 5f       	subi	r22, 0xFF	; 255
    5464:	7f 4f       	sbci	r23, 0xFF	; 255
    5466:	8f 4f       	sbci	r24, 0xFF	; 255
    5468:	9f 4f       	sbci	r25, 0xFF	; 255
    546a:	16 c0       	rjmp	.+44     	; 0x5498 <__floatsisf+0x6c>
    546c:	88 23       	and	r24, r24
    546e:	11 f0       	breq	.+4      	; 0x5474 <__floatsisf+0x48>
    5470:	96 e9       	ldi	r25, 0x96	; 150
    5472:	11 c0       	rjmp	.+34     	; 0x5496 <__floatsisf+0x6a>
    5474:	77 23       	and	r23, r23
    5476:	21 f0       	breq	.+8      	; 0x5480 <__floatsisf+0x54>
    5478:	9e e8       	ldi	r25, 0x8E	; 142
    547a:	87 2f       	mov	r24, r23
    547c:	76 2f       	mov	r23, r22
    547e:	05 c0       	rjmp	.+10     	; 0x548a <__floatsisf+0x5e>
    5480:	66 23       	and	r22, r22
    5482:	71 f0       	breq	.+28     	; 0x54a0 <__floatsisf+0x74>
    5484:	96 e8       	ldi	r25, 0x86	; 134
    5486:	86 2f       	mov	r24, r22
    5488:	70 e0       	ldi	r23, 0x00	; 0
    548a:	60 e0       	ldi	r22, 0x00	; 0
    548c:	2a f0       	brmi	.+10     	; 0x5498 <__floatsisf+0x6c>
    548e:	9a 95       	dec	r25
    5490:	66 0f       	add	r22, r22
    5492:	77 1f       	adc	r23, r23
    5494:	88 1f       	adc	r24, r24
    5496:	da f7       	brpl	.-10     	; 0x548e <__floatsisf+0x62>
    5498:	88 0f       	add	r24, r24
    549a:	96 95       	lsr	r25
    549c:	87 95       	ror	r24
    549e:	97 f9       	bld	r25, 7
    54a0:	08 95       	ret

000054a2 <__fp_inf>:
    54a2:	97 f9       	bld	r25, 7
    54a4:	9f 67       	ori	r25, 0x7F	; 127
    54a6:	80 e8       	ldi	r24, 0x80	; 128
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	60 e0       	ldi	r22, 0x00	; 0
    54ac:	08 95       	ret

000054ae <__fp_nan>:
    54ae:	9f ef       	ldi	r25, 0xFF	; 255
    54b0:	80 ec       	ldi	r24, 0xC0	; 192
    54b2:	08 95       	ret

000054b4 <__fp_pscA>:
    54b4:	00 24       	eor	r0, r0
    54b6:	0a 94       	dec	r0
    54b8:	16 16       	cp	r1, r22
    54ba:	17 06       	cpc	r1, r23
    54bc:	18 06       	cpc	r1, r24
    54be:	09 06       	cpc	r0, r25
    54c0:	08 95       	ret

000054c2 <__fp_pscB>:
    54c2:	00 24       	eor	r0, r0
    54c4:	0a 94       	dec	r0
    54c6:	12 16       	cp	r1, r18
    54c8:	13 06       	cpc	r1, r19
    54ca:	14 06       	cpc	r1, r20
    54cc:	05 06       	cpc	r0, r21
    54ce:	08 95       	ret

000054d0 <__fp_round>:
    54d0:	09 2e       	mov	r0, r25
    54d2:	03 94       	inc	r0
    54d4:	00 0c       	add	r0, r0
    54d6:	11 f4       	brne	.+4      	; 0x54dc <__fp_round+0xc>
    54d8:	88 23       	and	r24, r24
    54da:	52 f0       	brmi	.+20     	; 0x54f0 <__fp_round+0x20>
    54dc:	bb 0f       	add	r27, r27
    54de:	40 f4       	brcc	.+16     	; 0x54f0 <__fp_round+0x20>
    54e0:	bf 2b       	or	r27, r31
    54e2:	11 f4       	brne	.+4      	; 0x54e8 <__fp_round+0x18>
    54e4:	60 ff       	sbrs	r22, 0
    54e6:	04 c0       	rjmp	.+8      	; 0x54f0 <__fp_round+0x20>
    54e8:	6f 5f       	subi	r22, 0xFF	; 255
    54ea:	7f 4f       	sbci	r23, 0xFF	; 255
    54ec:	8f 4f       	sbci	r24, 0xFF	; 255
    54ee:	9f 4f       	sbci	r25, 0xFF	; 255
    54f0:	08 95       	ret

000054f2 <__fp_split3>:
    54f2:	57 fd       	sbrc	r21, 7
    54f4:	90 58       	subi	r25, 0x80	; 128
    54f6:	44 0f       	add	r20, r20
    54f8:	55 1f       	adc	r21, r21
    54fa:	59 f0       	breq	.+22     	; 0x5512 <__fp_splitA+0x10>
    54fc:	5f 3f       	cpi	r21, 0xFF	; 255
    54fe:	71 f0       	breq	.+28     	; 0x551c <__fp_splitA+0x1a>
    5500:	47 95       	ror	r20

00005502 <__fp_splitA>:
    5502:	88 0f       	add	r24, r24
    5504:	97 fb       	bst	r25, 7
    5506:	99 1f       	adc	r25, r25
    5508:	61 f0       	breq	.+24     	; 0x5522 <__fp_splitA+0x20>
    550a:	9f 3f       	cpi	r25, 0xFF	; 255
    550c:	79 f0       	breq	.+30     	; 0x552c <__fp_splitA+0x2a>
    550e:	87 95       	ror	r24
    5510:	08 95       	ret
    5512:	12 16       	cp	r1, r18
    5514:	13 06       	cpc	r1, r19
    5516:	14 06       	cpc	r1, r20
    5518:	55 1f       	adc	r21, r21
    551a:	f2 cf       	rjmp	.-28     	; 0x5500 <__fp_split3+0xe>
    551c:	46 95       	lsr	r20
    551e:	f1 df       	rcall	.-30     	; 0x5502 <__fp_splitA>
    5520:	08 c0       	rjmp	.+16     	; 0x5532 <__fp_splitA+0x30>
    5522:	16 16       	cp	r1, r22
    5524:	17 06       	cpc	r1, r23
    5526:	18 06       	cpc	r1, r24
    5528:	99 1f       	adc	r25, r25
    552a:	f1 cf       	rjmp	.-30     	; 0x550e <__fp_splitA+0xc>
    552c:	86 95       	lsr	r24
    552e:	71 05       	cpc	r23, r1
    5530:	61 05       	cpc	r22, r1
    5532:	08 94       	sec
    5534:	08 95       	ret

00005536 <__fp_zero>:
    5536:	e8 94       	clt

00005538 <__fp_szero>:
    5538:	bb 27       	eor	r27, r27
    553a:	66 27       	eor	r22, r22
    553c:	77 27       	eor	r23, r23
    553e:	cb 01       	movw	r24, r22
    5540:	97 f9       	bld	r25, 7
    5542:	08 95       	ret

00005544 <__gesf2>:
    5544:	66 d0       	rcall	.+204    	; 0x5612 <__fp_cmp>
    5546:	08 f4       	brcc	.+2      	; 0x554a <__gesf2+0x6>
    5548:	8f ef       	ldi	r24, 0xFF	; 255
    554a:	08 95       	ret

0000554c <__mulsf3>:
    554c:	0b d0       	rcall	.+22     	; 0x5564 <__mulsf3x>
    554e:	c0 cf       	rjmp	.-128    	; 0x54d0 <__fp_round>
    5550:	b1 df       	rcall	.-158    	; 0x54b4 <__fp_pscA>
    5552:	28 f0       	brcs	.+10     	; 0x555e <__mulsf3+0x12>
    5554:	b6 df       	rcall	.-148    	; 0x54c2 <__fp_pscB>
    5556:	18 f0       	brcs	.+6      	; 0x555e <__mulsf3+0x12>
    5558:	95 23       	and	r25, r21
    555a:	09 f0       	breq	.+2      	; 0x555e <__mulsf3+0x12>
    555c:	a2 cf       	rjmp	.-188    	; 0x54a2 <__fp_inf>
    555e:	a7 cf       	rjmp	.-178    	; 0x54ae <__fp_nan>
    5560:	11 24       	eor	r1, r1
    5562:	ea cf       	rjmp	.-44     	; 0x5538 <__fp_szero>

00005564 <__mulsf3x>:
    5564:	c6 df       	rcall	.-116    	; 0x54f2 <__fp_split3>
    5566:	a0 f3       	brcs	.-24     	; 0x5550 <__mulsf3+0x4>

00005568 <__mulsf3_pse>:
    5568:	95 9f       	mul	r25, r21
    556a:	d1 f3       	breq	.-12     	; 0x5560 <__mulsf3+0x14>
    556c:	95 0f       	add	r25, r21
    556e:	50 e0       	ldi	r21, 0x00	; 0
    5570:	55 1f       	adc	r21, r21
    5572:	62 9f       	mul	r22, r18
    5574:	f0 01       	movw	r30, r0
    5576:	72 9f       	mul	r23, r18
    5578:	bb 27       	eor	r27, r27
    557a:	f0 0d       	add	r31, r0
    557c:	b1 1d       	adc	r27, r1
    557e:	63 9f       	mul	r22, r19
    5580:	aa 27       	eor	r26, r26
    5582:	f0 0d       	add	r31, r0
    5584:	b1 1d       	adc	r27, r1
    5586:	aa 1f       	adc	r26, r26
    5588:	64 9f       	mul	r22, r20
    558a:	66 27       	eor	r22, r22
    558c:	b0 0d       	add	r27, r0
    558e:	a1 1d       	adc	r26, r1
    5590:	66 1f       	adc	r22, r22
    5592:	82 9f       	mul	r24, r18
    5594:	22 27       	eor	r18, r18
    5596:	b0 0d       	add	r27, r0
    5598:	a1 1d       	adc	r26, r1
    559a:	62 1f       	adc	r22, r18
    559c:	73 9f       	mul	r23, r19
    559e:	b0 0d       	add	r27, r0
    55a0:	a1 1d       	adc	r26, r1
    55a2:	62 1f       	adc	r22, r18
    55a4:	83 9f       	mul	r24, r19
    55a6:	a0 0d       	add	r26, r0
    55a8:	61 1d       	adc	r22, r1
    55aa:	22 1f       	adc	r18, r18
    55ac:	74 9f       	mul	r23, r20
    55ae:	33 27       	eor	r19, r19
    55b0:	a0 0d       	add	r26, r0
    55b2:	61 1d       	adc	r22, r1
    55b4:	23 1f       	adc	r18, r19
    55b6:	84 9f       	mul	r24, r20
    55b8:	60 0d       	add	r22, r0
    55ba:	21 1d       	adc	r18, r1
    55bc:	82 2f       	mov	r24, r18
    55be:	76 2f       	mov	r23, r22
    55c0:	6a 2f       	mov	r22, r26
    55c2:	11 24       	eor	r1, r1
    55c4:	9f 57       	subi	r25, 0x7F	; 127
    55c6:	50 40       	sbci	r21, 0x00	; 0
    55c8:	8a f0       	brmi	.+34     	; 0x55ec <__mulsf3_pse+0x84>
    55ca:	e1 f0       	breq	.+56     	; 0x5604 <__mulsf3_pse+0x9c>
    55cc:	88 23       	and	r24, r24
    55ce:	4a f0       	brmi	.+18     	; 0x55e2 <__mulsf3_pse+0x7a>
    55d0:	ee 0f       	add	r30, r30
    55d2:	ff 1f       	adc	r31, r31
    55d4:	bb 1f       	adc	r27, r27
    55d6:	66 1f       	adc	r22, r22
    55d8:	77 1f       	adc	r23, r23
    55da:	88 1f       	adc	r24, r24
    55dc:	91 50       	subi	r25, 0x01	; 1
    55de:	50 40       	sbci	r21, 0x00	; 0
    55e0:	a9 f7       	brne	.-22     	; 0x55cc <__mulsf3_pse+0x64>
    55e2:	9e 3f       	cpi	r25, 0xFE	; 254
    55e4:	51 05       	cpc	r21, r1
    55e6:	70 f0       	brcs	.+28     	; 0x5604 <__mulsf3_pse+0x9c>
    55e8:	5c cf       	rjmp	.-328    	; 0x54a2 <__fp_inf>
    55ea:	a6 cf       	rjmp	.-180    	; 0x5538 <__fp_szero>
    55ec:	5f 3f       	cpi	r21, 0xFF	; 255
    55ee:	ec f3       	brlt	.-6      	; 0x55ea <__mulsf3_pse+0x82>
    55f0:	98 3e       	cpi	r25, 0xE8	; 232
    55f2:	dc f3       	brlt	.-10     	; 0x55ea <__mulsf3_pse+0x82>
    55f4:	86 95       	lsr	r24
    55f6:	77 95       	ror	r23
    55f8:	67 95       	ror	r22
    55fa:	b7 95       	ror	r27
    55fc:	f7 95       	ror	r31
    55fe:	e7 95       	ror	r30
    5600:	9f 5f       	subi	r25, 0xFF	; 255
    5602:	c1 f7       	brne	.-16     	; 0x55f4 <__mulsf3_pse+0x8c>
    5604:	fe 2b       	or	r31, r30
    5606:	88 0f       	add	r24, r24
    5608:	91 1d       	adc	r25, r1
    560a:	96 95       	lsr	r25
    560c:	87 95       	ror	r24
    560e:	97 f9       	bld	r25, 7
    5610:	08 95       	ret

00005612 <__fp_cmp>:
    5612:	99 0f       	add	r25, r25
    5614:	00 08       	sbc	r0, r0
    5616:	55 0f       	add	r21, r21
    5618:	aa 0b       	sbc	r26, r26
    561a:	e0 e8       	ldi	r30, 0x80	; 128
    561c:	fe ef       	ldi	r31, 0xFE	; 254
    561e:	16 16       	cp	r1, r22
    5620:	17 06       	cpc	r1, r23
    5622:	e8 07       	cpc	r30, r24
    5624:	f9 07       	cpc	r31, r25
    5626:	c0 f0       	brcs	.+48     	; 0x5658 <__fp_cmp+0x46>
    5628:	12 16       	cp	r1, r18
    562a:	13 06       	cpc	r1, r19
    562c:	e4 07       	cpc	r30, r20
    562e:	f5 07       	cpc	r31, r21
    5630:	98 f0       	brcs	.+38     	; 0x5658 <__fp_cmp+0x46>
    5632:	62 1b       	sub	r22, r18
    5634:	73 0b       	sbc	r23, r19
    5636:	84 0b       	sbc	r24, r20
    5638:	95 0b       	sbc	r25, r21
    563a:	39 f4       	brne	.+14     	; 0x564a <__fp_cmp+0x38>
    563c:	0a 26       	eor	r0, r26
    563e:	61 f0       	breq	.+24     	; 0x5658 <__fp_cmp+0x46>
    5640:	23 2b       	or	r18, r19
    5642:	24 2b       	or	r18, r20
    5644:	25 2b       	or	r18, r21
    5646:	21 f4       	brne	.+8      	; 0x5650 <__fp_cmp+0x3e>
    5648:	08 95       	ret
    564a:	0a 26       	eor	r0, r26
    564c:	09 f4       	brne	.+2      	; 0x5650 <__fp_cmp+0x3e>
    564e:	a1 40       	sbci	r26, 0x01	; 1
    5650:	a6 95       	lsr	r26
    5652:	8f ef       	ldi	r24, 0xFF	; 255
    5654:	81 1d       	adc	r24, r1
    5656:	81 1d       	adc	r24, r1
    5658:	08 95       	ret

0000565a <__cxa_pure_virtual>:
    565a:	0e 94 44 35 	call	0x6a88	; 0x6a88 <abort>

0000565e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    565e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    5660:	91 8d       	ldd	r25, Z+25	; 0x19
    5662:	22 8d       	ldd	r18, Z+26	; 0x1a
    5664:	89 2f       	mov	r24, r25
    5666:	90 e0       	ldi	r25, 0x00	; 0
    5668:	80 5c       	subi	r24, 0xC0	; 192
    566a:	9f 4f       	sbci	r25, 0xFF	; 255
    566c:	82 1b       	sub	r24, r18
    566e:	91 09       	sbc	r25, r1
}
    5670:	8f 73       	andi	r24, 0x3F	; 63
    5672:	99 27       	eor	r25, r25
    5674:	08 95       	ret

00005676 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    5676:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    5678:	91 8d       	ldd	r25, Z+25	; 0x19
    567a:	82 8d       	ldd	r24, Z+26	; 0x1a
    567c:	98 17       	cp	r25, r24
    567e:	31 f0       	breq	.+12     	; 0x568c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    5680:	82 8d       	ldd	r24, Z+26	; 0x1a
    5682:	e8 0f       	add	r30, r24
    5684:	f1 1d       	adc	r31, r1
    5686:	85 8d       	ldd	r24, Z+29	; 0x1d
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    568c:	8f ef       	ldi	r24, 0xFF	; 255
    568e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    5690:	08 95       	ret

00005692 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    5692:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    5694:	91 8d       	ldd	r25, Z+25	; 0x19
    5696:	82 8d       	ldd	r24, Z+26	; 0x1a
    5698:	98 17       	cp	r25, r24
    569a:	61 f0       	breq	.+24     	; 0x56b4 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    569c:	82 8d       	ldd	r24, Z+26	; 0x1a
    569e:	df 01       	movw	r26, r30
    56a0:	a8 0f       	add	r26, r24
    56a2:	b1 1d       	adc	r27, r1
    56a4:	5d 96       	adiw	r26, 0x1d	; 29
    56a6:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    56a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    56aa:	9f 5f       	subi	r25, 0xFF	; 255
    56ac:	9f 73       	andi	r25, 0x3F	; 63
    56ae:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    56b4:	8f ef       	ldi	r24, 0xFF	; 255
    56b6:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    56b8:	08 95       	ret

000056ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    56ba:	85 e0       	ldi	r24, 0x05	; 5
    56bc:	9d e2       	ldi	r25, 0x2D	; 45
    56be:	89 2b       	or	r24, r25
    56c0:	39 f0       	breq	.+14     	; 0x56d0 <_Z14serialEventRunv+0x16>
    56c2:	80 e0       	ldi	r24, 0x00	; 0
    56c4:	90 e0       	ldi	r25, 0x00	; 0
    56c6:	89 2b       	or	r24, r25
    56c8:	19 f0       	breq	.+6      	; 0x56d0 <_Z14serialEventRunv+0x16>
    56ca:	9f d1       	rcall	.+830    	; 0x5a0a <_Z17Serial0_availablev>
    56cc:	81 11       	cpse	r24, r1
    56ce:	25 c0       	rjmp	.+74     	; 0x571a <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    56d0:	80 e0       	ldi	r24, 0x00	; 0
    56d2:	90 e0       	ldi	r25, 0x00	; 0
    56d4:	89 2b       	or	r24, r25
    56d6:	41 f0       	breq	.+16     	; 0x56e8 <_Z14serialEventRunv+0x2e>
    56d8:	80 e0       	ldi	r24, 0x00	; 0
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	89 2b       	or	r24, r25
    56de:	21 f0       	breq	.+8      	; 0x56e8 <_Z14serialEventRunv+0x2e>
    56e0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    56e4:	81 11       	cpse	r24, r1
    56e6:	1c c0       	rjmp	.+56     	; 0x5720 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    56e8:	80 e0       	ldi	r24, 0x00	; 0
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	89 2b       	or	r24, r25
    56ee:	41 f0       	breq	.+16     	; 0x5700 <_Z14serialEventRunv+0x46>
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	90 e0       	ldi	r25, 0x00	; 0
    56f4:	89 2b       	or	r24, r25
    56f6:	21 f0       	breq	.+8      	; 0x5700 <_Z14serialEventRunv+0x46>
    56f8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    56fc:	81 11       	cpse	r24, r1
    56fe:	13 c0       	rjmp	.+38     	; 0x5726 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    5700:	80 e0       	ldi	r24, 0x00	; 0
    5702:	90 e0       	ldi	r25, 0x00	; 0
    5704:	89 2b       	or	r24, r25
    5706:	a1 f0       	breq	.+40     	; 0x5730 <_Z14serialEventRunv+0x76>
    5708:	80 e0       	ldi	r24, 0x00	; 0
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	89 2b       	or	r24, r25
    570e:	81 f0       	breq	.+32     	; 0x5730 <_Z14serialEventRunv+0x76>
    5710:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5714:	81 11       	cpse	r24, r1
    5716:	0a c0       	rjmp	.+20     	; 0x572c <_Z14serialEventRunv+0x72>
    5718:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    571a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    571e:	d8 cf       	rjmp	.-80     	; 0x56d0 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    5720:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5724:	e1 cf       	rjmp	.-62     	; 0x56e8 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
    5726:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    572a:	ea cf       	rjmp	.-44     	; 0x5700 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
    572c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    5730:	08 95       	ret

00005732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    5732:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    5734:	84 8d       	ldd	r24, Z+28	; 0x1c
    5736:	df 01       	movw	r26, r30
    5738:	a8 0f       	add	r26, r24
    573a:	b1 1d       	adc	r27, r1
    573c:	a3 5a       	subi	r26, 0xA3	; 163
    573e:	bf 4f       	sbci	r27, 0xFF	; 255
    5740:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    5742:	84 8d       	ldd	r24, Z+28	; 0x1c
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	01 96       	adiw	r24, 0x01	; 1
    5748:	8f 73       	andi	r24, 0x3F	; 63
    574a:	99 27       	eor	r25, r25
    574c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    574e:	a6 89       	ldd	r26, Z+22	; 0x16
    5750:	b7 89       	ldd	r27, Z+23	; 0x17
    5752:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    5754:	a0 89       	ldd	r26, Z+16	; 0x10
    5756:	b1 89       	ldd	r27, Z+17	; 0x11
    5758:	8c 91       	ld	r24, X
    575a:	80 64       	ori	r24, 0x40	; 64
    575c:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    575e:	93 8d       	ldd	r25, Z+27	; 0x1b
    5760:	84 8d       	ldd	r24, Z+28	; 0x1c
    5762:	98 13       	cpse	r25, r24
    5764:	06 c0       	rjmp	.+12     	; 0x5772 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    5766:	02 88       	ldd	r0, Z+18	; 0x12
    5768:	f3 89       	ldd	r31, Z+19	; 0x13
    576a:	e0 2d       	mov	r30, r0
    576c:	80 81       	ld	r24, Z
    576e:	8f 7d       	andi	r24, 0xDF	; 223
    5770:	80 83       	st	Z, r24
    5772:	08 95       	ret

00005774 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    5774:	ef 92       	push	r14
    5776:	ff 92       	push	r15
    5778:	0f 93       	push	r16
    577a:	1f 93       	push	r17
    577c:	cf 93       	push	r28
    577e:	df 93       	push	r29
    5780:	ec 01       	movw	r28, r24
  _written = true;
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    5786:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5788:	8c 8d       	ldd	r24, Y+28	; 0x1c
    578a:	98 13       	cpse	r25, r24
    578c:	05 c0       	rjmp	.+10     	; 0x5798 <_ZN14HardwareSerial5writeEh+0x24>
    578e:	e8 89       	ldd	r30, Y+16	; 0x10
    5790:	f9 89       	ldd	r31, Y+17	; 0x11
    5792:	80 81       	ld	r24, Z
    5794:	85 fd       	sbrc	r24, 5
    5796:	23 c0       	rjmp	.+70     	; 0x57de <_ZN14HardwareSerial5writeEh+0x6a>
    5798:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    579a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    579c:	10 e0       	ldi	r17, 0x00	; 0
    579e:	0f 5f       	subi	r16, 0xFF	; 255
    57a0:	1f 4f       	sbci	r17, 0xFF	; 255
    57a2:	0f 73       	andi	r16, 0x3F	; 63
    57a4:	11 27       	eor	r17, r17
    57a6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    57a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    57aa:	e8 12       	cpse	r14, r24
    57ac:	0b c0       	rjmp	.+22     	; 0x57c4 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
    57ae:	0f b6       	in	r0, 0x3f	; 63
    57b0:	07 fc       	sbrc	r0, 7
    57b2:	fa cf       	rjmp	.-12     	; 0x57a8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    57b4:	e8 89       	ldd	r30, Y+16	; 0x10
    57b6:	f9 89       	ldd	r31, Y+17	; 0x11
    57b8:	80 81       	ld	r24, Z
    57ba:	85 ff       	sbrs	r24, 5
    57bc:	f5 cf       	rjmp	.-22     	; 0x57a8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    57be:	ce 01       	movw	r24, r28
    57c0:	b8 df       	rcall	.-144    	; 0x5732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    57c2:	f2 cf       	rjmp	.-28     	; 0x57a8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    57c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57c6:	fe 01       	movw	r30, r28
    57c8:	e8 0f       	add	r30, r24
    57ca:	f1 1d       	adc	r31, r1
    57cc:	e3 5a       	subi	r30, 0xA3	; 163
    57ce:	ff 4f       	sbci	r31, 0xFF	; 255
    57d0:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    57d2:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    57d4:	ea 89       	ldd	r30, Y+18	; 0x12
    57d6:	fb 89       	ldd	r31, Y+19	; 0x13
    57d8:	80 81       	ld	r24, Z
    57da:	80 62       	ori	r24, 0x20	; 32
    57dc:	07 c0       	rjmp	.+14     	; 0x57ec <_ZN14HardwareSerial5writeEh+0x78>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    57de:	ee 89       	ldd	r30, Y+22	; 0x16
    57e0:	ff 89       	ldd	r31, Y+23	; 0x17
    57e2:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    57e4:	e8 89       	ldd	r30, Y+16	; 0x10
    57e6:	f9 89       	ldd	r31, Y+17	; 0x11
    57e8:	80 81       	ld	r24, Z
    57ea:	80 64       	ori	r24, 0x40	; 64
    57ec:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    57ee:	81 e0       	ldi	r24, 0x01	; 1
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	df 91       	pop	r29
    57f4:	cf 91       	pop	r28
    57f6:	1f 91       	pop	r17
    57f8:	0f 91       	pop	r16
    57fa:	ff 90       	pop	r15
    57fc:	ef 90       	pop	r14
    57fe:	08 95       	ret

00005800 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    5800:	cf 93       	push	r28
    5802:	df 93       	push	r29
    5804:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    5806:	88 8d       	ldd	r24, Y+24	; 0x18
    5808:	88 23       	and	r24, r24
    580a:	c1 f0       	breq	.+48     	; 0x583c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    580c:	ea 89       	ldd	r30, Y+18	; 0x12
    580e:	fb 89       	ldd	r31, Y+19	; 0x13
    5810:	80 81       	ld	r24, Z
    5812:	85 fd       	sbrc	r24, 5
    5814:	05 c0       	rjmp	.+10     	; 0x5820 <_ZN14HardwareSerial5flushEv+0x20>
    5816:	a8 89       	ldd	r26, Y+16	; 0x10
    5818:	b9 89       	ldd	r27, Y+17	; 0x11
    581a:	8c 91       	ld	r24, X
    581c:	86 fd       	sbrc	r24, 6
    581e:	0e c0       	rjmp	.+28     	; 0x583c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    5820:	0f b6       	in	r0, 0x3f	; 63
    5822:	07 fc       	sbrc	r0, 7
    5824:	f5 cf       	rjmp	.-22     	; 0x5810 <_ZN14HardwareSerial5flushEv+0x10>
    5826:	80 81       	ld	r24, Z
    5828:	85 ff       	sbrs	r24, 5
    582a:	f2 cf       	rjmp	.-28     	; 0x5810 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    582c:	a8 89       	ldd	r26, Y+16	; 0x10
    582e:	b9 89       	ldd	r27, Y+17	; 0x11
    5830:	8c 91       	ld	r24, X
    5832:	85 ff       	sbrs	r24, 5
    5834:	ed cf       	rjmp	.-38     	; 0x5810 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    5836:	ce 01       	movw	r24, r28
    5838:	7c df       	rcall	.-264    	; 0x5732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    583a:	e8 cf       	rjmp	.-48     	; 0x580c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    583c:	df 91       	pop	r29
    583e:	cf 91       	pop	r28
    5840:	08 95       	ret

00005842 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    5842:	cf 92       	push	r12
    5844:	df 92       	push	r13
    5846:	ef 92       	push	r14
    5848:	ff 92       	push	r15
    584a:	1f 93       	push	r17
    584c:	cf 93       	push	r28
    584e:	df 93       	push	r29
    5850:	ec 01       	movw	r28, r24
    5852:	6a 01       	movw	r12, r20
    5854:	7b 01       	movw	r14, r22
    5856:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    5858:	e8 89       	ldd	r30, Y+16	; 0x10
    585a:	f9 89       	ldd	r31, Y+17	; 0x11
    585c:	82 e0       	ldi	r24, 0x02	; 2
    585e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    5860:	41 15       	cp	r20, r1
    5862:	51 4e       	sbci	r21, 0xE1	; 225
    5864:	61 05       	cpc	r22, r1
    5866:	71 05       	cpc	r23, r1
    5868:	a9 f0       	breq	.+42     	; 0x5894 <_ZN14HardwareSerial5beginEmh+0x52>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	79 e0       	ldi	r23, 0x09	; 9
    586e:	8d e3       	ldi	r24, 0x3D	; 61
    5870:	90 e0       	ldi	r25, 0x00	; 0
    5872:	a7 01       	movw	r20, r14
    5874:	96 01       	movw	r18, r12
    5876:	dd d6       	rcall	.+3514   	; 0x6632 <__udivmodsi4>
    5878:	da 01       	movw	r26, r20
    587a:	c9 01       	movw	r24, r18
    587c:	01 97       	sbiw	r24, 0x01	; 1
    587e:	a1 09       	sbc	r26, r1
    5880:	b1 09       	sbc	r27, r1
    5882:	b6 95       	lsr	r27
    5884:	a7 95       	ror	r26
    5886:	97 95       	ror	r25
    5888:	87 95       	ror	r24
    588a:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    588c:	21 15       	cp	r18, r1
    588e:	80 e1       	ldi	r24, 0x10	; 16
    5890:	38 07       	cpc	r19, r24
    5892:	a0 f0       	brcs	.+40     	; 0x58bc <_ZN14HardwareSerial5beginEmh+0x7a>
  {
    *_ucsra = 0;
    5894:	e8 89       	ldd	r30, Y+16	; 0x10
    5896:	f9 89       	ldd	r31, Y+17	; 0x11
    5898:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    589a:	60 e8       	ldi	r22, 0x80	; 128
    589c:	74 e8       	ldi	r23, 0x84	; 132
    589e:	8e e1       	ldi	r24, 0x1E	; 30
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	a7 01       	movw	r20, r14
    58a4:	96 01       	movw	r18, r12
    58a6:	c5 d6       	rcall	.+3466   	; 0x6632 <__udivmodsi4>
    58a8:	da 01       	movw	r26, r20
    58aa:	c9 01       	movw	r24, r18
    58ac:	01 97       	sbiw	r24, 0x01	; 1
    58ae:	a1 09       	sbc	r26, r1
    58b0:	b1 09       	sbc	r27, r1
    58b2:	b6 95       	lsr	r27
    58b4:	a7 95       	ror	r26
    58b6:	97 95       	ror	r25
    58b8:	87 95       	ror	r24
    58ba:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    58bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    58be:	fd 85       	ldd	r31, Y+13	; 0x0d
    58c0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    58c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    58c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    58c6:	20 83       	st	Z, r18

  _written = false;
    58c8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    58ca:	ec 89       	ldd	r30, Y+20	; 0x14
    58cc:	fd 89       	ldd	r31, Y+21	; 0x15
    58ce:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    58d0:	ea 89       	ldd	r30, Y+18	; 0x12
    58d2:	fb 89       	ldd	r31, Y+19	; 0x13
    58d4:	80 81       	ld	r24, Z
    58d6:	80 61       	ori	r24, 0x10	; 16
    58d8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    58da:	ea 89       	ldd	r30, Y+18	; 0x12
    58dc:	fb 89       	ldd	r31, Y+19	; 0x13
    58de:	80 81       	ld	r24, Z
    58e0:	88 60       	ori	r24, 0x08	; 8
    58e2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    58e4:	ea 89       	ldd	r30, Y+18	; 0x12
    58e6:	fb 89       	ldd	r31, Y+19	; 0x13
    58e8:	80 81       	ld	r24, Z
    58ea:	80 68       	ori	r24, 0x80	; 128
    58ec:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    58ee:	ea 89       	ldd	r30, Y+18	; 0x12
    58f0:	fb 89       	ldd	r31, Y+19	; 0x13
    58f2:	80 81       	ld	r24, Z
    58f4:	8f 7d       	andi	r24, 0xDF	; 223
    58f6:	80 83       	st	Z, r24
}
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	1f 91       	pop	r17
    58fe:	ff 90       	pop	r15
    5900:	ef 90       	pop	r14
    5902:	df 90       	pop	r13
    5904:	cf 90       	pop	r12
    5906:	08 95       	ret

00005908 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    5908:	cf 93       	push	r28
    590a:	df 93       	push	r29
    590c:	ec 01       	movw	r28, r24
  // wait for transmission of outgoing data
  flush();
    590e:	e8 81       	ld	r30, Y
    5910:	f9 81       	ldd	r31, Y+1	; 0x01
    5912:	02 84       	ldd	r0, Z+10	; 0x0a
    5914:	f3 85       	ldd	r31, Z+11	; 0x0b
    5916:	e0 2d       	mov	r30, r0
    5918:	19 95       	eicall

  cbi(*_ucsrb, RXEN0);
    591a:	ea 89       	ldd	r30, Y+18	; 0x12
    591c:	fb 89       	ldd	r31, Y+19	; 0x13
    591e:	80 81       	ld	r24, Z
    5920:	8f 7e       	andi	r24, 0xEF	; 239
    5922:	80 83       	st	Z, r24
  cbi(*_ucsrb, TXEN0);
    5924:	ea 89       	ldd	r30, Y+18	; 0x12
    5926:	fb 89       	ldd	r31, Y+19	; 0x13
    5928:	80 81       	ld	r24, Z
    592a:	87 7f       	andi	r24, 0xF7	; 247
    592c:	80 83       	st	Z, r24
  cbi(*_ucsrb, RXCIE0);
    592e:	ea 89       	ldd	r30, Y+18	; 0x12
    5930:	fb 89       	ldd	r31, Y+19	; 0x13
    5932:	80 81       	ld	r24, Z
    5934:	8f 77       	andi	r24, 0x7F	; 127
    5936:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    5938:	ea 89       	ldd	r30, Y+18	; 0x12
    593a:	fb 89       	ldd	r31, Y+19	; 0x13
    593c:	80 81       	ld	r24, Z
    593e:	8f 7d       	andi	r24, 0xDF	; 223
    5940:	80 83       	st	Z, r24
  
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
    5942:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5944:	89 8f       	std	Y+25, r24	; 0x19
}
    5946:	df 91       	pop	r29
    5948:	cf 91       	pop	r28
    594a:	08 95       	ret

0000594c <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    594c:	1f 92       	push	r1
    594e:	0f 92       	push	r0
    5950:	0f b6       	in	r0, 0x3f	; 63
    5952:	0f 92       	push	r0
    5954:	11 24       	eor	r1, r1
    5956:	0b b6       	in	r0, 0x3b	; 59
    5958:	0f 92       	push	r0
    595a:	2f 93       	push	r18
    595c:	8f 93       	push	r24
    595e:	9f 93       	push	r25
    5960:	ef 93       	push	r30
    5962:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    5964:	e0 91 21 0a 	lds	r30, 0x0A21	; 0x800a21 <Serial+0x10>
    5968:	f0 91 22 0a 	lds	r31, 0x0A22	; 0x800a22 <Serial+0x11>
    596c:	80 81       	ld	r24, Z
    596e:	e0 91 27 0a 	lds	r30, 0x0A27	; 0x800a27 <Serial+0x16>
    5972:	f0 91 28 0a 	lds	r31, 0x0A28	; 0x800a28 <Serial+0x17>
    5976:	82 fd       	sbrc	r24, 2
    5978:	12 c0       	rjmp	.+36     	; 0x599e <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    597a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    597c:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <Serial+0x19>
    5980:	8f 5f       	subi	r24, 0xFF	; 255
    5982:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    5984:	20 91 2b 0a 	lds	r18, 0x0A2B	; 0x800a2b <Serial+0x1a>
    5988:	82 17       	cp	r24, r18
    598a:	51 f0       	breq	.+20     	; 0x59a0 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    598c:	e0 91 2a 0a 	lds	r30, 0x0A2A	; 0x800a2a <Serial+0x19>
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	ef 5e       	subi	r30, 0xEF	; 239
    5994:	f5 4f       	sbci	r31, 0xF5	; 245
    5996:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    5998:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <Serial+0x19>
    599c:	01 c0       	rjmp	.+2      	; 0x59a0 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    599e:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    59a0:	ff 91       	pop	r31
    59a2:	ef 91       	pop	r30
    59a4:	9f 91       	pop	r25
    59a6:	8f 91       	pop	r24
    59a8:	2f 91       	pop	r18
    59aa:	0f 90       	pop	r0
    59ac:	0b be       	out	0x3b, r0	; 59
    59ae:	0f 90       	pop	r0
    59b0:	0f be       	out	0x3f, r0	; 63
    59b2:	0f 90       	pop	r0
    59b4:	1f 90       	pop	r1
    59b6:	18 95       	reti

000059b8 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    59b8:	1f 92       	push	r1
    59ba:	0f 92       	push	r0
    59bc:	0f b6       	in	r0, 0x3f	; 63
    59be:	0f 92       	push	r0
    59c0:	11 24       	eor	r1, r1
    59c2:	0b b6       	in	r0, 0x3b	; 59
    59c4:	0f 92       	push	r0
    59c6:	2f 93       	push	r18
    59c8:	3f 93       	push	r19
    59ca:	4f 93       	push	r20
    59cc:	5f 93       	push	r21
    59ce:	6f 93       	push	r22
    59d0:	7f 93       	push	r23
    59d2:	8f 93       	push	r24
    59d4:	9f 93       	push	r25
    59d6:	af 93       	push	r26
    59d8:	bf 93       	push	r27
    59da:	ef 93       	push	r30
    59dc:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    59de:	81 e1       	ldi	r24, 0x11	; 17
    59e0:	9a e0       	ldi	r25, 0x0A	; 10
    59e2:	a7 de       	rcall	.-690    	; 0x5732 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    59e4:	ff 91       	pop	r31
    59e6:	ef 91       	pop	r30
    59e8:	bf 91       	pop	r27
    59ea:	af 91       	pop	r26
    59ec:	9f 91       	pop	r25
    59ee:	8f 91       	pop	r24
    59f0:	7f 91       	pop	r23
    59f2:	6f 91       	pop	r22
    59f4:	5f 91       	pop	r21
    59f6:	4f 91       	pop	r20
    59f8:	3f 91       	pop	r19
    59fa:	2f 91       	pop	r18
    59fc:	0f 90       	pop	r0
    59fe:	0b be       	out	0x3b, r0	; 59
    5a00:	0f 90       	pop	r0
    5a02:	0f be       	out	0x3f, r0	; 63
    5a04:	0f 90       	pop	r0
    5a06:	1f 90       	pop	r1
    5a08:	18 95       	reti

00005a0a <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    5a0a:	81 e1       	ldi	r24, 0x11	; 17
    5a0c:	9a e0       	ldi	r25, 0x0A	; 10
    5a0e:	27 de       	rcall	.-946    	; 0x565e <_ZN14HardwareSerial9availableEv>
    5a10:	21 e0       	ldi	r18, 0x01	; 1
    5a12:	89 2b       	or	r24, r25
    5a14:	09 f4       	brne	.+2      	; 0x5a18 <_Z17Serial0_availablev+0xe>
    5a16:	20 e0       	ldi	r18, 0x00	; 0
}
    5a18:	82 2f       	mov	r24, r18
    5a1a:	08 95       	ret

00005a1c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    5a1c:	e1 e1       	ldi	r30, 0x11	; 17
    5a1e:	fa e0       	ldi	r31, 0x0A	; 10
    5a20:	13 82       	std	Z+3, r1	; 0x03
    5a22:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    5a24:	88 ee       	ldi	r24, 0xE8	; 232
    5a26:	93 e0       	ldi	r25, 0x03	; 3
    5a28:	a0 e0       	ldi	r26, 0x00	; 0
    5a2a:	b0 e0       	ldi	r27, 0x00	; 0
    5a2c:	84 83       	std	Z+4, r24	; 0x04
    5a2e:	95 83       	std	Z+5, r25	; 0x05
    5a30:	a6 83       	std	Z+6, r26	; 0x06
    5a32:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    5a34:	88 ee       	ldi	r24, 0xE8	; 232
    5a36:	99 e0       	ldi	r25, 0x09	; 9
    5a38:	91 83       	std	Z+1, r25	; 0x01
    5a3a:	80 83       	st	Z, r24
    5a3c:	85 ec       	ldi	r24, 0xC5	; 197
    5a3e:	90 e0       	ldi	r25, 0x00	; 0
    5a40:	95 87       	std	Z+13, r25	; 0x0d
    5a42:	84 87       	std	Z+12, r24	; 0x0c
    5a44:	84 ec       	ldi	r24, 0xC4	; 196
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	97 87       	std	Z+15, r25	; 0x0f
    5a4a:	86 87       	std	Z+14, r24	; 0x0e
    5a4c:	80 ec       	ldi	r24, 0xC0	; 192
    5a4e:	90 e0       	ldi	r25, 0x00	; 0
    5a50:	91 8b       	std	Z+17, r25	; 0x11
    5a52:	80 8b       	std	Z+16, r24	; 0x10
    5a54:	81 ec       	ldi	r24, 0xC1	; 193
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	93 8b       	std	Z+19, r25	; 0x13
    5a5a:	82 8b       	std	Z+18, r24	; 0x12
    5a5c:	82 ec       	ldi	r24, 0xC2	; 194
    5a5e:	90 e0       	ldi	r25, 0x00	; 0
    5a60:	95 8b       	std	Z+21, r25	; 0x15
    5a62:	84 8b       	std	Z+20, r24	; 0x14
    5a64:	86 ec       	ldi	r24, 0xC6	; 198
    5a66:	90 e0       	ldi	r25, 0x00	; 0
    5a68:	97 8b       	std	Z+23, r25	; 0x17
    5a6a:	86 8b       	std	Z+22, r24	; 0x16
    5a6c:	11 8e       	std	Z+25, r1	; 0x19
    5a6e:	12 8e       	std	Z+26, r1	; 0x1a
    5a70:	13 8e       	std	Z+27, r1	; 0x1b
    5a72:	14 8e       	std	Z+28, r1	; 0x1c
    5a74:	08 95       	ret

00005a76 <initVariant>:
    5a76:	08 95       	ret

00005a78 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    5a78:	c6 d2       	rcall	.+1420   	; 0x6006 <init>

	initVariant();
    5a7a:	fd df       	rcall	.-6      	; 0x5a76 <initVariant>
    5a7c:	0e 94 5e 11 	call	0x22bc	; 0x22bc <setup>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    5a80:	cd e5       	ldi	r28, 0x5D	; 93
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    5a82:	db e2       	ldi	r29, 0x2B	; 43
    5a84:	0e 94 65 11 	call	0x22ca	; 0x22ca <loop>
#endif
	
	setup();
    
	for (;;) {
		loop();
    5a88:	20 97       	sbiw	r28, 0x00	; 0
		if (serialEventRun) serialEventRun();
    5a8a:	e1 f3       	breq	.-8      	; 0x5a84 <main+0xc>
    5a8c:	16 de       	rcall	.-980    	; 0x56ba <_Z14serialEventRunv>
    5a8e:	fa cf       	rjmp	.-12     	; 0x5a84 <main+0xc>

00005a90 <_Znwj>:
    5a90:	fa c5       	rjmp	.+3060   	; 0x6686 <malloc>

00005a92 <_ZdlPv>:
    5a92:	91 c6       	rjmp	.+3362   	; 0x67b6 <free>

00005a94 <_ZN5Print5writeEPKhj>:
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    5a94:	cf 92       	push	r12
    5a96:	df 92       	push	r13
    5a98:	ef 92       	push	r14
    5a9a:	ff 92       	push	r15
    5a9c:	0f 93       	push	r16
    5a9e:	1f 93       	push	r17
    5aa0:	cf 93       	push	r28
    5aa2:	df 93       	push	r29
    5aa4:	6c 01       	movw	r12, r24
    5aa6:	7a 01       	movw	r14, r20
    5aa8:	8b 01       	movw	r16, r22
    5aaa:	c0 e0       	ldi	r28, 0x00	; 0
    5aac:	d0 e0       	ldi	r29, 0x00	; 0
    5aae:	ce 15       	cp	r28, r14
    5ab0:	df 05       	cpc	r29, r15
    5ab2:	81 f0       	breq	.+32     	; 0x5ad4 <_ZN5Print5writeEPKhj+0x40>
    5ab4:	d8 01       	movw	r26, r16
    5ab6:	6d 91       	ld	r22, X+
    5ab8:	8d 01       	movw	r16, r26
    5aba:	d6 01       	movw	r26, r12
    5abc:	ed 91       	ld	r30, X+
    5abe:	fc 91       	ld	r31, X
    5ac0:	01 90       	ld	r0, Z+
    5ac2:	f0 81       	ld	r31, Z
    5ac4:	e0 2d       	mov	r30, r0
    5ac6:	c6 01       	movw	r24, r12
    5ac8:	19 95       	eicall
    5aca:	89 2b       	or	r24, r25
    5acc:	11 f0       	breq	.+4      	; 0x5ad2 <_ZN5Print5writeEPKhj+0x3e>
    5ace:	21 96       	adiw	r28, 0x01	; 1
    5ad0:	ee cf       	rjmp	.-36     	; 0x5aae <_ZN5Print5writeEPKhj+0x1a>
    5ad2:	7e 01       	movw	r14, r28
    5ad4:	c7 01       	movw	r24, r14
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	ff 90       	pop	r15
    5ae0:	ef 90       	pop	r14
    5ae2:	df 90       	pop	r13
    5ae4:	cf 90       	pop	r12
    5ae6:	08 95       	ret

00005ae8 <_ZN5Print5writeEPKc>:
    5ae8:	61 15       	cp	r22, r1
    5aea:	71 05       	cpc	r23, r1
    5aec:	79 f0       	breq	.+30     	; 0x5b0c <_ZN5Print5writeEPKc+0x24>
    5aee:	fb 01       	movw	r30, r22
    5af0:	01 90       	ld	r0, Z+
    5af2:	00 20       	and	r0, r0
    5af4:	e9 f7       	brne	.-6      	; 0x5af0 <_ZN5Print5writeEPKc+0x8>
    5af6:	31 97       	sbiw	r30, 0x01	; 1
    5af8:	af 01       	movw	r20, r30
    5afa:	46 1b       	sub	r20, r22
    5afc:	57 0b       	sbc	r21, r23
    5afe:	dc 01       	movw	r26, r24
    5b00:	ed 91       	ld	r30, X+
    5b02:	fc 91       	ld	r31, X
    5b04:	02 80       	ldd	r0, Z+2	; 0x02
    5b06:	f3 81       	ldd	r31, Z+3	; 0x03
    5b08:	e0 2d       	mov	r30, r0
    5b0a:	19 94       	eijmp
    5b0c:	80 e0       	ldi	r24, 0x00	; 0
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	08 95       	ret

00005b12 <_ZN5Print5printERK6String>:
    5b12:	db 01       	movw	r26, r22
    5b14:	14 96       	adiw	r26, 0x04	; 4
    5b16:	4d 91       	ld	r20, X+
    5b18:	5c 91       	ld	r21, X
    5b1a:	15 97       	sbiw	r26, 0x05	; 5
    5b1c:	6d 91       	ld	r22, X+
    5b1e:	7c 91       	ld	r23, X
    5b20:	dc 01       	movw	r26, r24
    5b22:	ed 91       	ld	r30, X+
    5b24:	fc 91       	ld	r31, X
    5b26:	02 80       	ldd	r0, Z+2	; 0x02
    5b28:	f3 81       	ldd	r31, Z+3	; 0x03
    5b2a:	e0 2d       	mov	r30, r0
    5b2c:	19 94       	eijmp

00005b2e <_ZN5Print5printEPKc>:
    5b2e:	dc cf       	rjmp	.-72     	; 0x5ae8 <_ZN5Print5writeEPKc>

00005b30 <_ZN5Print5printEc>:
    5b30:	dc 01       	movw	r26, r24
    5b32:	ed 91       	ld	r30, X+
    5b34:	fc 91       	ld	r31, X
    5b36:	01 90       	ld	r0, Z+
    5b38:	f0 81       	ld	r31, Z
    5b3a:	e0 2d       	mov	r30, r0
    5b3c:	19 94       	eijmp

00005b3e <_ZN5Print7printlnEv>:
    5b3e:	64 ef       	ldi	r22, 0xF4	; 244
    5b40:	79 e0       	ldi	r23, 0x09	; 9
    5b42:	d2 cf       	rjmp	.-92     	; 0x5ae8 <_ZN5Print5writeEPKc>

00005b44 <_ZN5Print7printlnERK6String>:
    5b44:	0f 93       	push	r16
    5b46:	1f 93       	push	r17
    5b48:	cf 93       	push	r28
    5b4a:	df 93       	push	r29
    5b4c:	ec 01       	movw	r28, r24
    5b4e:	e1 df       	rcall	.-62     	; 0x5b12 <_ZN5Print5printERK6String>
    5b50:	8c 01       	movw	r16, r24
    5b52:	ce 01       	movw	r24, r28
    5b54:	f4 df       	rcall	.-24     	; 0x5b3e <_ZN5Print7printlnEv>
    5b56:	80 0f       	add	r24, r16
    5b58:	91 1f       	adc	r25, r17
    5b5a:	df 91       	pop	r29
    5b5c:	cf 91       	pop	r28
    5b5e:	1f 91       	pop	r17
    5b60:	0f 91       	pop	r16
    5b62:	08 95       	ret

00005b64 <_ZN5Print7printlnEPKc>:
    5b64:	0f 93       	push	r16
    5b66:	1f 93       	push	r17
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	ec 01       	movw	r28, r24
    5b6e:	bc df       	rcall	.-136    	; 0x5ae8 <_ZN5Print5writeEPKc>
    5b70:	8c 01       	movw	r16, r24
    5b72:	ce 01       	movw	r24, r28
    5b74:	e4 df       	rcall	.-56     	; 0x5b3e <_ZN5Print7printlnEv>
    5b76:	80 0f       	add	r24, r16
    5b78:	91 1f       	adc	r25, r17
    5b7a:	df 91       	pop	r29
    5b7c:	cf 91       	pop	r28
    5b7e:	1f 91       	pop	r17
    5b80:	0f 91       	pop	r16
    5b82:	08 95       	ret

00005b84 <_ZN5Print11printNumberEmh>:
    5b84:	8f 92       	push	r8
    5b86:	9f 92       	push	r9
    5b88:	af 92       	push	r10
    5b8a:	bf 92       	push	r11
    5b8c:	ef 92       	push	r14
    5b8e:	ff 92       	push	r15
    5b90:	0f 93       	push	r16
    5b92:	1f 93       	push	r17
    5b94:	cf 93       	push	r28
    5b96:	df 93       	push	r29
    5b98:	cd b7       	in	r28, 0x3d	; 61
    5b9a:	de b7       	in	r29, 0x3e	; 62
    5b9c:	a1 97       	sbiw	r28, 0x21	; 33
    5b9e:	0f b6       	in	r0, 0x3f	; 63
    5ba0:	f8 94       	cli
    5ba2:	de bf       	out	0x3e, r29	; 62
    5ba4:	0f be       	out	0x3f, r0	; 63
    5ba6:	cd bf       	out	0x3d, r28	; 61
    5ba8:	7c 01       	movw	r14, r24
    5baa:	fa 01       	movw	r30, r20
    5bac:	cb 01       	movw	r24, r22
    5bae:	19 a2       	std	Y+33, r1	; 0x21
    5bb0:	22 30       	cpi	r18, 0x02	; 2
    5bb2:	08 f4       	brcc	.+2      	; 0x5bb6 <_ZN5Print11printNumberEmh+0x32>
    5bb4:	2a e0       	ldi	r18, 0x0A	; 10
    5bb6:	8e 01       	movw	r16, r28
    5bb8:	0f 5d       	subi	r16, 0xDF	; 223
    5bba:	1f 4f       	sbci	r17, 0xFF	; 255
    5bbc:	82 2e       	mov	r8, r18
    5bbe:	91 2c       	mov	r9, r1
    5bc0:	a1 2c       	mov	r10, r1
    5bc2:	b1 2c       	mov	r11, r1
    5bc4:	bf 01       	movw	r22, r30
    5bc6:	a5 01       	movw	r20, r10
    5bc8:	94 01       	movw	r18, r8
    5bca:	33 d5       	rcall	.+2662   	; 0x6632 <__udivmodsi4>
    5bcc:	f9 01       	movw	r30, r18
    5bce:	ca 01       	movw	r24, r20
    5bd0:	01 50       	subi	r16, 0x01	; 1
    5bd2:	11 09       	sbc	r17, r1
    5bd4:	6a 30       	cpi	r22, 0x0A	; 10
    5bd6:	10 f4       	brcc	.+4      	; 0x5bdc <_ZN5Print11printNumberEmh+0x58>
    5bd8:	60 5d       	subi	r22, 0xD0	; 208
    5bda:	01 c0       	rjmp	.+2      	; 0x5bde <_ZN5Print11printNumberEmh+0x5a>
    5bdc:	69 5c       	subi	r22, 0xC9	; 201
    5bde:	d8 01       	movw	r26, r16
    5be0:	6c 93       	st	X, r22
    5be2:	23 2b       	or	r18, r19
    5be4:	24 2b       	or	r18, r20
    5be6:	25 2b       	or	r18, r21
    5be8:	69 f7       	brne	.-38     	; 0x5bc4 <_ZN5Print11printNumberEmh+0x40>
    5bea:	b8 01       	movw	r22, r16
    5bec:	c7 01       	movw	r24, r14
    5bee:	7c df       	rcall	.-264    	; 0x5ae8 <_ZN5Print5writeEPKc>
    5bf0:	a1 96       	adiw	r28, 0x21	; 33
    5bf2:	0f b6       	in	r0, 0x3f	; 63
    5bf4:	f8 94       	cli
    5bf6:	de bf       	out	0x3e, r29	; 62
    5bf8:	0f be       	out	0x3f, r0	; 63
    5bfa:	cd bf       	out	0x3d, r28	; 61
    5bfc:	df 91       	pop	r29
    5bfe:	cf 91       	pop	r28
    5c00:	1f 91       	pop	r17
    5c02:	0f 91       	pop	r16
    5c04:	ff 90       	pop	r15
    5c06:	ef 90       	pop	r14
    5c08:	bf 90       	pop	r11
    5c0a:	af 90       	pop	r10
    5c0c:	9f 90       	pop	r9
    5c0e:	8f 90       	pop	r8
    5c10:	08 95       	ret

00005c12 <_ZN5Print5printEmi>:
    5c12:	21 15       	cp	r18, r1
    5c14:	31 05       	cpc	r19, r1
    5c16:	41 f4       	brne	.+16     	; 0x5c28 <_ZN5Print5printEmi+0x16>
    5c18:	dc 01       	movw	r26, r24
    5c1a:	ed 91       	ld	r30, X+
    5c1c:	fc 91       	ld	r31, X
    5c1e:	01 90       	ld	r0, Z+
    5c20:	f0 81       	ld	r31, Z
    5c22:	e0 2d       	mov	r30, r0
    5c24:	64 2f       	mov	r22, r20
    5c26:	19 94       	eijmp
    5c28:	ad cf       	rjmp	.-166    	; 0x5b84 <_ZN5Print11printNumberEmh>

00005c2a <_ZN5Print5printEhi>:
    5c2a:	9a 01       	movw	r18, r20
    5c2c:	46 2f       	mov	r20, r22
    5c2e:	50 e0       	ldi	r21, 0x00	; 0
    5c30:	60 e0       	ldi	r22, 0x00	; 0
    5c32:	70 e0       	ldi	r23, 0x00	; 0
    5c34:	ee cf       	rjmp	.-36     	; 0x5c12 <_ZN5Print5printEmi>

00005c36 <_ZN5Print5printEji>:
    5c36:	9a 01       	movw	r18, r20
    5c38:	ab 01       	movw	r20, r22
    5c3a:	60 e0       	ldi	r22, 0x00	; 0
    5c3c:	70 e0       	ldi	r23, 0x00	; 0
    5c3e:	e9 cf       	rjmp	.-46     	; 0x5c12 <_ZN5Print5printEmi>

00005c40 <_ZN5Print7printlnEji>:
    5c40:	0f 93       	push	r16
    5c42:	1f 93       	push	r17
    5c44:	cf 93       	push	r28
    5c46:	df 93       	push	r29
    5c48:	ec 01       	movw	r28, r24
    5c4a:	f5 df       	rcall	.-22     	; 0x5c36 <_ZN5Print5printEji>
    5c4c:	8c 01       	movw	r16, r24
    5c4e:	ce 01       	movw	r24, r28
    5c50:	76 df       	rcall	.-276    	; 0x5b3e <_ZN5Print7printlnEv>
    5c52:	80 0f       	add	r24, r16
    5c54:	91 1f       	adc	r25, r17
    5c56:	df 91       	pop	r29
    5c58:	cf 91       	pop	r28
    5c5a:	1f 91       	pop	r17
    5c5c:	0f 91       	pop	r16
    5c5e:	08 95       	ret

00005c60 <_ZN5Print5printEli>:
    5c60:	cf 92       	push	r12
    5c62:	df 92       	push	r13
    5c64:	ef 92       	push	r14
    5c66:	ff 92       	push	r15
    5c68:	0f 93       	push	r16
    5c6a:	1f 93       	push	r17
    5c6c:	cf 93       	push	r28
    5c6e:	df 93       	push	r29
    5c70:	21 15       	cp	r18, r1
    5c72:	31 05       	cpc	r19, r1
    5c74:	81 f4       	brne	.+32     	; 0x5c96 <_ZN5Print5printEli+0x36>
    5c76:	dc 01       	movw	r26, r24
    5c78:	ed 91       	ld	r30, X+
    5c7a:	fc 91       	ld	r31, X
    5c7c:	01 90       	ld	r0, Z+
    5c7e:	f0 81       	ld	r31, Z
    5c80:	e0 2d       	mov	r30, r0
    5c82:	64 2f       	mov	r22, r20
    5c84:	df 91       	pop	r29
    5c86:	cf 91       	pop	r28
    5c88:	1f 91       	pop	r17
    5c8a:	0f 91       	pop	r16
    5c8c:	ff 90       	pop	r15
    5c8e:	ef 90       	pop	r14
    5c90:	df 90       	pop	r13
    5c92:	cf 90       	pop	r12
    5c94:	19 94       	eijmp
    5c96:	2a 30       	cpi	r18, 0x0A	; 10
    5c98:	31 05       	cpc	r19, r1
    5c9a:	f1 f4       	brne	.+60     	; 0x5cd8 <_ZN5Print5printEli+0x78>
    5c9c:	77 ff       	sbrs	r23, 7
    5c9e:	1b c0       	rjmp	.+54     	; 0x5cd6 <_ZN5Print5printEli+0x76>
    5ca0:	6a 01       	movw	r12, r20
    5ca2:	7b 01       	movw	r14, r22
    5ca4:	ec 01       	movw	r28, r24
    5ca6:	6d e2       	ldi	r22, 0x2D	; 45
    5ca8:	43 df       	rcall	.-378    	; 0x5b30 <_ZN5Print5printEc>
    5caa:	8c 01       	movw	r16, r24
    5cac:	44 27       	eor	r20, r20
    5cae:	55 27       	eor	r21, r21
    5cb0:	ba 01       	movw	r22, r20
    5cb2:	4c 19       	sub	r20, r12
    5cb4:	5d 09       	sbc	r21, r13
    5cb6:	6e 09       	sbc	r22, r14
    5cb8:	7f 09       	sbc	r23, r15
    5cba:	2a e0       	ldi	r18, 0x0A	; 10
    5cbc:	ce 01       	movw	r24, r28
    5cbe:	62 df       	rcall	.-316    	; 0x5b84 <_ZN5Print11printNumberEmh>
    5cc0:	80 0f       	add	r24, r16
    5cc2:	91 1f       	adc	r25, r17
    5cc4:	df 91       	pop	r29
    5cc6:	cf 91       	pop	r28
    5cc8:	1f 91       	pop	r17
    5cca:	0f 91       	pop	r16
    5ccc:	ff 90       	pop	r15
    5cce:	ef 90       	pop	r14
    5cd0:	df 90       	pop	r13
    5cd2:	cf 90       	pop	r12
    5cd4:	08 95       	ret
    5cd6:	2a e0       	ldi	r18, 0x0A	; 10
    5cd8:	df 91       	pop	r29
    5cda:	cf 91       	pop	r28
    5cdc:	1f 91       	pop	r17
    5cde:	0f 91       	pop	r16
    5ce0:	ff 90       	pop	r15
    5ce2:	ef 90       	pop	r14
    5ce4:	df 90       	pop	r13
    5ce6:	cf 90       	pop	r12
    5ce8:	4d cf       	rjmp	.-358    	; 0x5b84 <_ZN5Print11printNumberEmh>

00005cea <_ZN5Print5printEii>:
    5cea:	9a 01       	movw	r18, r20
    5cec:	ab 01       	movw	r20, r22
    5cee:	77 0f       	add	r23, r23
    5cf0:	66 0b       	sbc	r22, r22
    5cf2:	77 0b       	sbc	r23, r23
    5cf4:	b5 cf       	rjmp	.-150    	; 0x5c60 <_ZN5Print5printEli>

00005cf6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    5cf6:	7f 92       	push	r7
    5cf8:	8f 92       	push	r8
    5cfa:	9f 92       	push	r9
    5cfc:	af 92       	push	r10
    5cfe:	bf 92       	push	r11
    5d00:	cf 92       	push	r12
    5d02:	df 92       	push	r13
    5d04:	ef 92       	push	r14
    5d06:	ff 92       	push	r15
    5d08:	0f 93       	push	r16
    5d0a:	1f 93       	push	r17
    5d0c:	cf 93       	push	r28
    5d0e:	df 93       	push	r29
    5d10:	8c 01       	movw	r16, r24
    5d12:	6a 01       	movw	r12, r20
    5d14:	7b 01       	movw	r14, r22
    5d16:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    5d18:	9a 01       	movw	r18, r20
    5d1a:	ab 01       	movw	r20, r22
    5d1c:	c7 01       	movw	r24, r14
    5d1e:	b6 01       	movw	r22, r12
    5d20:	5d d4       	rcall	.+2234   	; 0x65dc <__unordsf2>
    5d22:	88 23       	and	r24, r24
    5d24:	19 f0       	breq	.+6      	; 0x5d2c <_ZN5Print10printFloatEdh+0x36>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5d26:	67 ef       	ldi	r22, 0xF7	; 247
    5d28:	79 e0       	ldi	r23, 0x09	; 9
    5d2a:	24 c0       	rjmp	.+72     	; 0x5d74 <_ZN5Print10printFloatEdh+0x7e>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    5d2c:	46 01       	movw	r8, r12
    5d2e:	57 01       	movw	r10, r14
    5d30:	e8 94       	clt
    5d32:	b7 f8       	bld	r11, 7
    5d34:	2f ef       	ldi	r18, 0xFF	; 255
    5d36:	3f ef       	ldi	r19, 0xFF	; 255
    5d38:	4f e7       	ldi	r20, 0x7F	; 127
    5d3a:	5f e7       	ldi	r21, 0x7F	; 127
    5d3c:	c5 01       	movw	r24, r10
    5d3e:	b4 01       	movw	r22, r8
    5d40:	4d d4       	rcall	.+2202   	; 0x65dc <__unordsf2>
    5d42:	81 11       	cpse	r24, r1
    5d44:	0c c0       	rjmp	.+24     	; 0x5d5e <_ZN5Print10printFloatEdh+0x68>
    5d46:	2f ef       	ldi	r18, 0xFF	; 255
    5d48:	3f ef       	ldi	r19, 0xFF	; 255
    5d4a:	4f e7       	ldi	r20, 0x7F	; 127
    5d4c:	5f e7       	ldi	r21, 0x7F	; 127
    5d4e:	c5 01       	movw	r24, r10
    5d50:	b4 01       	movw	r22, r8
    5d52:	a6 d3       	rcall	.+1868   	; 0x64a0 <__cmpsf2>
    5d54:	18 16       	cp	r1, r24
    5d56:	1c f4       	brge	.+6      	; 0x5d5e <_ZN5Print10printFloatEdh+0x68>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5d58:	6b ef       	ldi	r22, 0xFB	; 251
    5d5a:	79 e0       	ldi	r23, 0x09	; 9
    5d5c:	0b c0       	rjmp	.+22     	; 0x5d74 <_ZN5Print10printFloatEdh+0x7e>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    5d5e:	2f ef       	ldi	r18, 0xFF	; 255
    5d60:	3f ef       	ldi	r19, 0xFF	; 255
    5d62:	4f e7       	ldi	r20, 0x7F	; 127
    5d64:	5f e4       	ldi	r21, 0x4F	; 79
    5d66:	c7 01       	movw	r24, r14
    5d68:	b6 01       	movw	r22, r12
    5d6a:	ec db       	rcall	.-2088   	; 0x5544 <__gesf2>
    5d6c:	18 16       	cp	r1, r24
    5d6e:	8c f4       	brge	.+34     	; 0x5d92 <_ZN5Print10printFloatEdh+0x9c>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5d70:	6f ef       	ldi	r22, 0xFF	; 255
    5d72:	79 e0       	ldi	r23, 0x09	; 9
    5d74:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    5d76:	df 91       	pop	r29
    5d78:	cf 91       	pop	r28
    5d7a:	1f 91       	pop	r17
    5d7c:	0f 91       	pop	r16
    5d7e:	ff 90       	pop	r15
    5d80:	ef 90       	pop	r14
    5d82:	df 90       	pop	r13
    5d84:	cf 90       	pop	r12
    5d86:	bf 90       	pop	r11
    5d88:	af 90       	pop	r10
    5d8a:	9f 90       	pop	r9
    5d8c:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5d8e:	7f 90       	pop	r7
    5d90:	ab ce       	rjmp	.-682    	; 0x5ae8 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    5d92:	2f ef       	ldi	r18, 0xFF	; 255
    5d94:	3f ef       	ldi	r19, 0xFF	; 255
    5d96:	4f e7       	ldi	r20, 0x7F	; 127
    5d98:	5f ec       	ldi	r21, 0xCF	; 207
    5d9a:	c7 01       	movw	r24, r14
    5d9c:	b6 01       	movw	r22, r12
    5d9e:	80 d3       	rcall	.+1792   	; 0x64a0 <__cmpsf2>
    5da0:	87 fd       	sbrc	r24, 7
    5da2:	e6 cf       	rjmp	.-52     	; 0x5d70 <_ZN5Print10printFloatEdh+0x7a>
  
  // Handle negative numbers
  if (number < 0.0)
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	a9 01       	movw	r20, r18
    5daa:	c7 01       	movw	r24, r14
    5dac:	b6 01       	movw	r22, r12
    5dae:	78 d3       	rcall	.+1776   	; 0x64a0 <__cmpsf2>
    5db0:	87 ff       	sbrs	r24, 7
    5db2:	09 c0       	rjmp	.+18     	; 0x5dc6 <_ZN5Print10printFloatEdh+0xd0>
  {
     n += print('-');
    5db4:	6d e2       	ldi	r22, 0x2D	; 45
    5db6:	c8 01       	movw	r24, r16
    5db8:	bb de       	rcall	.-650    	; 0x5b30 <_ZN5Print5printEc>
    5dba:	ec 01       	movw	r28, r24
    5dbc:	f7 fa       	bst	r15, 7
     number = -number;
    5dbe:	f0 94       	com	r15
    5dc0:	f7 f8       	bld	r15, 7
    5dc2:	f0 94       	com	r15
    5dc4:	02 c0       	rjmp	.+4      	; 0x5dca <_ZN5Print10printFloatEdh+0xd4>
    5dc6:	c0 e0       	ldi	r28, 0x00	; 0
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    5dc8:	d0 e0       	ldi	r29, 0x00	; 0
    5dca:	b1 2c       	mov	r11, r1
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    5dcc:	60 e0       	ldi	r22, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	80 e0       	ldi	r24, 0x00	; 0
    5dd2:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    5dd4:	7b 14       	cp	r7, r11
    5dd6:	39 f0       	breq	.+14     	; 0x5de6 <_ZN5Print10printFloatEdh+0xf0>
    rounding /= 10.0;
    5dd8:	20 e0       	ldi	r18, 0x00	; 0
    5dda:	30 e0       	ldi	r19, 0x00	; 0
    5ddc:	40 e2       	ldi	r20, 0x20	; 32
    5dde:	51 e4       	ldi	r21, 0x41	; 65
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    5de0:	63 d3       	rcall	.+1734   	; 0x64a8 <__divsf3>
    5de2:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    5de4:	f7 cf       	rjmp	.-18     	; 0x5dd4 <_ZN5Print10printFloatEdh+0xde>
    5de6:	a7 01       	movw	r20, r14
    5de8:	96 01       	movw	r18, r12
    5dea:	ba da       	rcall	.-2700   	; 0x5360 <__addsf3>
    5dec:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    5dee:	7c 01       	movw	r14, r24
    5df0:	c6 d3       	rcall	.+1932   	; 0x657e <__fixunssfsi>
    5df2:	4b 01       	movw	r8, r22
    5df4:	5c 01       	movw	r10, r24
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    5df6:	2a e0       	ldi	r18, 0x0A	; 10
    5df8:	ab 01       	movw	r20, r22
    5dfa:	bc 01       	movw	r22, r24
    5dfc:	c8 01       	movw	r24, r16
    5dfe:	c2 de       	rcall	.-636    	; 0x5b84 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    5e00:	c8 0f       	add	r28, r24
    5e02:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    5e04:	77 20       	and	r7, r7
    5e06:	81 f1       	breq	.+96     	; 0x5e68 <_ZN5Print10printFloatEdh+0x172>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    5e08:	c5 01       	movw	r24, r10
    5e0a:	b4 01       	movw	r22, r8
    5e0c:	0d db       	rcall	.-2534   	; 0x5428 <__floatunsisf>
    5e0e:	9b 01       	movw	r18, r22
    5e10:	ac 01       	movw	r20, r24
    5e12:	c7 01       	movw	r24, r14
    5e14:	b6 01       	movw	r22, r12
    5e16:	a3 da       	rcall	.-2746   	; 0x535e <__subsf3>
    5e18:	6b 01       	movw	r12, r22
    5e1a:	7c 01       	movw	r14, r24
    5e1c:	63 e0       	ldi	r22, 0x03	; 3
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    5e1e:	7a e0       	ldi	r23, 0x0A	; 10
    5e20:	c8 01       	movw	r24, r16
    5e22:	62 de       	rcall	.-828    	; 0x5ae8 <_ZN5Print5writeEPKc>
    5e24:	c8 0f       	add	r28, r24
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    5e26:	d9 1f       	adc	r29, r25
    5e28:	20 e0       	ldi	r18, 0x00	; 0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	40 e2       	ldi	r20, 0x20	; 32
    5e2e:	51 e4       	ldi	r21, 0x41	; 65
    5e30:	c7 01       	movw	r24, r14
    5e32:	b6 01       	movw	r22, r12
    5e34:	8b db       	rcall	.-2282   	; 0x554c <__mulsf3>
    5e36:	4b 01       	movw	r8, r22
    5e38:	5c 01       	movw	r10, r24
    unsigned int toPrint = (unsigned int)(remainder);
    5e3a:	a1 d3       	rcall	.+1858   	; 0x657e <__fixunssfsi>
    5e3c:	6b 01       	movw	r12, r22
    5e3e:	7c 01       	movw	r14, r24
    n += print(toPrint);
    5e40:	4a e0       	ldi	r20, 0x0A	; 10
    5e42:	50 e0       	ldi	r21, 0x00	; 0
    5e44:	c8 01       	movw	r24, r16
    5e46:	f7 de       	rcall	.-530    	; 0x5c36 <_ZN5Print5printEji>
    5e48:	c8 0f       	add	r28, r24
    5e4a:	d9 1f       	adc	r29, r25
    5e4c:	b6 01       	movw	r22, r12
    remainder -= toPrint; 
    5e4e:	80 e0       	ldi	r24, 0x00	; 0
    5e50:	90 e0       	ldi	r25, 0x00	; 0
    5e52:	ea da       	rcall	.-2604   	; 0x5428 <__floatunsisf>
    5e54:	9b 01       	movw	r18, r22
    5e56:	ac 01       	movw	r20, r24
    5e58:	c5 01       	movw	r24, r10
    5e5a:	b4 01       	movw	r22, r8
    5e5c:	80 da       	rcall	.-2816   	; 0x535e <__subsf3>
    5e5e:	6b 01       	movw	r12, r22
    5e60:	7c 01       	movw	r14, r24
    5e62:	7a 94       	dec	r7
    5e64:	71 10       	cpse	r7, r1
    5e66:	e0 cf       	rjmp	.-64     	; 0x5e28 <_ZN5Print10printFloatEdh+0x132>
    5e68:	ce 01       	movw	r24, r28
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    5e6a:	df 91       	pop	r29
    5e6c:	cf 91       	pop	r28
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    5e6e:	1f 91       	pop	r17
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    5e70:	0f 91       	pop	r16
    5e72:	ff 90       	pop	r15
    5e74:	ef 90       	pop	r14
    5e76:	df 90       	pop	r13
    5e78:	cf 90       	pop	r12
    5e7a:	bf 90       	pop	r11
    5e7c:	af 90       	pop	r10
    5e7e:	9f 90       	pop	r9
    5e80:	8f 90       	pop	r8
    5e82:	7f 90       	pop	r7
    5e84:	08 95       	ret

00005e86 <_ZN5Print5printEdi>:
    5e86:	37 cf       	rjmp	.-402    	; 0x5cf6 <_ZN5Print10printFloatEdh>

00005e88 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    5e88:	1f 92       	push	r1
    5e8a:	0f 92       	push	r0
    5e8c:	0f b6       	in	r0, 0x3f	; 63
    5e8e:	0f 92       	push	r0
    5e90:	11 24       	eor	r1, r1
    5e92:	2f 93       	push	r18
    5e94:	3f 93       	push	r19
    5e96:	8f 93       	push	r24
    5e98:	9f 93       	push	r25
    5e9a:	af 93       	push	r26
    5e9c:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    5e9e:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <timer0_millis>
    5ea2:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <timer0_millis+0x1>
    5ea6:	a0 91 b1 0a 	lds	r26, 0x0AB1	; 0x800ab1 <timer0_millis+0x2>
    5eaa:	b0 91 b2 0a 	lds	r27, 0x0AB2	; 0x800ab2 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    5eae:	30 91 ae 0a 	lds	r19, 0x0AAE	; 0x800aae <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    5eb2:	23 e0       	ldi	r18, 0x03	; 3
    5eb4:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    5eb6:	2d 37       	cpi	r18, 0x7D	; 125
    5eb8:	20 f4       	brcc	.+8      	; 0x5ec2 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    5eba:	01 96       	adiw	r24, 0x01	; 1
    5ebc:	a1 1d       	adc	r26, r1
    5ebe:	b1 1d       	adc	r27, r1
    5ec0:	05 c0       	rjmp	.+10     	; 0x5ecc <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    5ec2:	26 e8       	ldi	r18, 0x86	; 134
    5ec4:	23 0f       	add	r18, r19
		m += 1;
    5ec6:	02 96       	adiw	r24, 0x02	; 2
    5ec8:	a1 1d       	adc	r26, r1
    5eca:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    5ecc:	20 93 ae 0a 	sts	0x0AAE, r18	; 0x800aae <timer0_fract>
	timer0_millis = m;
    5ed0:	80 93 af 0a 	sts	0x0AAF, r24	; 0x800aaf <timer0_millis>
    5ed4:	90 93 b0 0a 	sts	0x0AB0, r25	; 0x800ab0 <timer0_millis+0x1>
    5ed8:	a0 93 b1 0a 	sts	0x0AB1, r26	; 0x800ab1 <timer0_millis+0x2>
    5edc:	b0 93 b2 0a 	sts	0x0AB2, r27	; 0x800ab2 <timer0_millis+0x3>
	timer0_overflow_count++;
    5ee0:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <timer0_overflow_count>
    5ee4:	90 91 b4 0a 	lds	r25, 0x0AB4	; 0x800ab4 <timer0_overflow_count+0x1>
    5ee8:	a0 91 b5 0a 	lds	r26, 0x0AB5	; 0x800ab5 <timer0_overflow_count+0x2>
    5eec:	b0 91 b6 0a 	lds	r27, 0x0AB6	; 0x800ab6 <timer0_overflow_count+0x3>
    5ef0:	01 96       	adiw	r24, 0x01	; 1
    5ef2:	a1 1d       	adc	r26, r1
    5ef4:	b1 1d       	adc	r27, r1
    5ef6:	80 93 b3 0a 	sts	0x0AB3, r24	; 0x800ab3 <timer0_overflow_count>
    5efa:	90 93 b4 0a 	sts	0x0AB4, r25	; 0x800ab4 <timer0_overflow_count+0x1>
    5efe:	a0 93 b5 0a 	sts	0x0AB5, r26	; 0x800ab5 <timer0_overflow_count+0x2>
    5f02:	b0 93 b6 0a 	sts	0x0AB6, r27	; 0x800ab6 <timer0_overflow_count+0x3>
}
    5f06:	bf 91       	pop	r27
    5f08:	af 91       	pop	r26
    5f0a:	9f 91       	pop	r25
    5f0c:	8f 91       	pop	r24
    5f0e:	3f 91       	pop	r19
    5f10:	2f 91       	pop	r18
    5f12:	0f 90       	pop	r0
    5f14:	0f be       	out	0x3f, r0	; 63
    5f16:	0f 90       	pop	r0
    5f18:	1f 90       	pop	r1
    5f1a:	18 95       	reti

00005f1c <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    5f1c:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    5f1e:	f8 94       	cli
	m = timer0_millis;
    5f20:	60 91 af 0a 	lds	r22, 0x0AAF	; 0x800aaf <timer0_millis>
    5f24:	70 91 b0 0a 	lds	r23, 0x0AB0	; 0x800ab0 <timer0_millis+0x1>
    5f28:	80 91 b1 0a 	lds	r24, 0x0AB1	; 0x800ab1 <timer0_millis+0x2>
    5f2c:	90 91 b2 0a 	lds	r25, 0x0AB2	; 0x800ab2 <timer0_millis+0x3>
	SREG = oldSREG;
    5f30:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    5f32:	08 95       	ret

00005f34 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    5f34:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    5f36:	f8 94       	cli
	m = timer0_overflow_count;
    5f38:	80 91 b3 0a 	lds	r24, 0x0AB3	; 0x800ab3 <timer0_overflow_count>
    5f3c:	90 91 b4 0a 	lds	r25, 0x0AB4	; 0x800ab4 <timer0_overflow_count+0x1>
    5f40:	a0 91 b5 0a 	lds	r26, 0x0AB5	; 0x800ab5 <timer0_overflow_count+0x2>
    5f44:	b0 91 b6 0a 	lds	r27, 0x0AB6	; 0x800ab6 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    5f48:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    5f4a:	a8 9b       	sbis	0x15, 0	; 21
    5f4c:	05 c0       	rjmp	.+10     	; 0x5f58 <micros+0x24>
    5f4e:	2f 3f       	cpi	r18, 0xFF	; 255
    5f50:	19 f0       	breq	.+6      	; 0x5f58 <micros+0x24>
		m++;
    5f52:	01 96       	adiw	r24, 0x01	; 1
    5f54:	a1 1d       	adc	r26, r1
    5f56:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    5f58:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    5f5a:	ba 2f       	mov	r27, r26
    5f5c:	a9 2f       	mov	r26, r25
    5f5e:	98 2f       	mov	r25, r24
    5f60:	88 27       	eor	r24, r24
    5f62:	82 0f       	add	r24, r18
    5f64:	91 1d       	adc	r25, r1
    5f66:	a1 1d       	adc	r26, r1
    5f68:	b1 1d       	adc	r27, r1
    5f6a:	bc 01       	movw	r22, r24
    5f6c:	cd 01       	movw	r24, r26
    5f6e:	42 e0       	ldi	r20, 0x02	; 2
    5f70:	66 0f       	add	r22, r22
    5f72:	77 1f       	adc	r23, r23
    5f74:	88 1f       	adc	r24, r24
    5f76:	99 1f       	adc	r25, r25
    5f78:	4a 95       	dec	r20
    5f7a:	d1 f7       	brne	.-12     	; 0x5f70 <micros+0x3c>
}
    5f7c:	08 95       	ret

00005f7e <delay>:

void delay(unsigned long ms)
{
    5f7e:	8f 92       	push	r8
    5f80:	9f 92       	push	r9
    5f82:	af 92       	push	r10
    5f84:	bf 92       	push	r11
    5f86:	cf 92       	push	r12
    5f88:	df 92       	push	r13
    5f8a:	ef 92       	push	r14
    5f8c:	ff 92       	push	r15
    5f8e:	6b 01       	movw	r12, r22
    5f90:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    5f92:	d0 df       	rcall	.-96     	; 0x5f34 <micros>
    5f94:	4b 01       	movw	r8, r22
    5f96:	5c 01       	movw	r10, r24

	while (ms > 0) {
    5f98:	c1 14       	cp	r12, r1
    5f9a:	d1 04       	cpc	r13, r1
    5f9c:	e1 04       	cpc	r14, r1
    5f9e:	f1 04       	cpc	r15, r1
		yield();
    5fa0:	f1 f0       	breq	.+60     	; 0x5fde <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    5fa2:	7d d2       	rcall	.+1274   	; 0x649e <yield>
    5fa4:	c7 df       	rcall	.-114    	; 0x5f34 <micros>
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	cb 01       	movw	r24, r22
    5faa:	88 19       	sub	r24, r8
    5fac:	99 09       	sbc	r25, r9
    5fae:	aa 09       	sbc	r26, r10
    5fb0:	bb 09       	sbc	r27, r11
    5fb2:	88 3e       	cpi	r24, 0xE8	; 232
    5fb4:	93 40       	sbci	r25, 0x03	; 3
    5fb6:	a1 05       	cpc	r26, r1
    5fb8:	b1 05       	cpc	r27, r1
    5fba:	70 f3       	brcs	.-36     	; 0x5f98 <delay+0x1a>
			ms--;
    5fbc:	21 e0       	ldi	r18, 0x01	; 1
    5fbe:	c2 1a       	sub	r12, r18
    5fc0:	d1 08       	sbc	r13, r1
    5fc2:	e1 08       	sbc	r14, r1
    5fc4:	f1 08       	sbc	r15, r1
			start += 1000;
    5fc6:	88 ee       	ldi	r24, 0xE8	; 232
    5fc8:	88 0e       	add	r8, r24
    5fca:	83 e0       	ldi	r24, 0x03	; 3
    5fcc:	98 1e       	adc	r9, r24
    5fce:	a1 1c       	adc	r10, r1
    5fd0:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    5fd2:	c1 14       	cp	r12, r1
    5fd4:	d1 04       	cpc	r13, r1
    5fd6:	e1 04       	cpc	r14, r1
    5fd8:	f1 04       	cpc	r15, r1
    5fda:	21 f7       	brne	.-56     	; 0x5fa4 <delay+0x26>
    5fdc:	dd cf       	rjmp	.-70     	; 0x5f98 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    5fde:	ff 90       	pop	r15
    5fe0:	ef 90       	pop	r14
    5fe2:	df 90       	pop	r13
    5fe4:	cf 90       	pop	r12
    5fe6:	bf 90       	pop	r11
    5fe8:	af 90       	pop	r10
    5fea:	9f 90       	pop	r9
    5fec:	8f 90       	pop	r8
    5fee:	08 95       	ret

00005ff0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    5ff0:	82 30       	cpi	r24, 0x02	; 2
    5ff2:	91 05       	cpc	r25, r1
    5ff4:	38 f0       	brcs	.+14     	; 0x6004 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    5ff6:	88 0f       	add	r24, r24
    5ff8:	99 1f       	adc	r25, r25
    5ffa:	88 0f       	add	r24, r24
    5ffc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    5ffe:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    6000:	01 97       	sbiw	r24, 0x01	; 1
    6002:	f1 f7       	brne	.-4      	; 0x6000 <delayMicroseconds+0x10>
    6004:	08 95       	ret

00006006 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    6006:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    6008:	84 b5       	in	r24, 0x24	; 36
    600a:	82 60       	ori	r24, 0x02	; 2
    600c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    600e:	84 b5       	in	r24, 0x24	; 36
    6010:	81 60       	ori	r24, 0x01	; 1
    6012:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    6014:	85 b5       	in	r24, 0x25	; 37
    6016:	82 60       	ori	r24, 0x02	; 2
    6018:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    601a:	85 b5       	in	r24, 0x25	; 37
    601c:	81 60       	ori	r24, 0x01	; 1
    601e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    6020:	ee e6       	ldi	r30, 0x6E	; 110
    6022:	f0 e0       	ldi	r31, 0x00	; 0
    6024:	80 81       	ld	r24, Z
    6026:	81 60       	ori	r24, 0x01	; 1
    6028:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    602a:	e1 e8       	ldi	r30, 0x81	; 129
    602c:	f0 e0       	ldi	r31, 0x00	; 0
    602e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    6030:	80 81       	ld	r24, Z
    6032:	82 60       	ori	r24, 0x02	; 2
    6034:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    6036:	80 81       	ld	r24, Z
    6038:	81 60       	ori	r24, 0x01	; 1
    603a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    603c:	e0 e8       	ldi	r30, 0x80	; 128
    603e:	f0 e0       	ldi	r31, 0x00	; 0
    6040:	80 81       	ld	r24, Z
    6042:	81 60       	ori	r24, 0x01	; 1
    6044:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    6046:	e1 eb       	ldi	r30, 0xB1	; 177
    6048:	f0 e0       	ldi	r31, 0x00	; 0
    604a:	80 81       	ld	r24, Z
    604c:	84 60       	ori	r24, 0x04	; 4
    604e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    6050:	e0 eb       	ldi	r30, 0xB0	; 176
    6052:	f0 e0       	ldi	r31, 0x00	; 0
    6054:	80 81       	ld	r24, Z
    6056:	81 60       	ori	r24, 0x01	; 1
    6058:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    605a:	e1 e9       	ldi	r30, 0x91	; 145
    605c:	f0 e0       	ldi	r31, 0x00	; 0
    605e:	80 81       	ld	r24, Z
    6060:	82 60       	ori	r24, 0x02	; 2
    6062:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    6064:	80 81       	ld	r24, Z
    6066:	81 60       	ori	r24, 0x01	; 1
    6068:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    606a:	e0 e9       	ldi	r30, 0x90	; 144
    606c:	f0 e0       	ldi	r31, 0x00	; 0
    606e:	80 81       	ld	r24, Z
    6070:	81 60       	ori	r24, 0x01	; 1
    6072:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    6074:	e1 ea       	ldi	r30, 0xA1	; 161
    6076:	f0 e0       	ldi	r31, 0x00	; 0
    6078:	80 81       	ld	r24, Z
    607a:	82 60       	ori	r24, 0x02	; 2
    607c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    607e:	80 81       	ld	r24, Z
    6080:	81 60       	ori	r24, 0x01	; 1
    6082:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    6084:	e0 ea       	ldi	r30, 0xA0	; 160
    6086:	f0 e0       	ldi	r31, 0x00	; 0
    6088:	80 81       	ld	r24, Z
    608a:	81 60       	ori	r24, 0x01	; 1
    608c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    608e:	e1 e2       	ldi	r30, 0x21	; 33
    6090:	f1 e0       	ldi	r31, 0x01	; 1
    6092:	80 81       	ld	r24, Z
    6094:	82 60       	ori	r24, 0x02	; 2
    6096:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    6098:	80 81       	ld	r24, Z
    609a:	81 60       	ori	r24, 0x01	; 1
    609c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    609e:	e0 e2       	ldi	r30, 0x20	; 32
    60a0:	f1 e0       	ldi	r31, 0x01	; 1
    60a2:	80 81       	ld	r24, Z
    60a4:	81 60       	ori	r24, 0x01	; 1
    60a6:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    60a8:	ea e7       	ldi	r30, 0x7A	; 122
    60aa:	f0 e0       	ldi	r31, 0x00	; 0
    60ac:	80 81       	ld	r24, Z
    60ae:	84 60       	ori	r24, 0x04	; 4
    60b0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    60b2:	80 81       	ld	r24, Z
    60b4:	82 60       	ori	r24, 0x02	; 2
    60b6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    60b8:	80 81       	ld	r24, Z
    60ba:	81 60       	ori	r24, 0x01	; 1
    60bc:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    60be:	80 81       	ld	r24, Z
    60c0:	80 68       	ori	r24, 0x80	; 128
    60c2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    60c4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    60c8:	08 95       	ret

000060ca <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	fc 01       	movw	r30, r24
    60ce:	31 97       	sbiw	r30, 0x01	; 1
    60d0:	e2 31       	cpi	r30, 0x12	; 18
    60d2:	f1 05       	cpc	r31, r1
    60d4:	08 f0       	brcs	.+2      	; 0x60d8 <turnOffPWM+0xe>
    60d6:	4d c0       	rjmp	.+154    	; 0x6172 <turnOffPWM+0xa8>
    60d8:	88 27       	eor	r24, r24
    60da:	e9 54       	subi	r30, 0x49	; 73
    60dc:	ff 4f       	sbci	r31, 0xFF	; 255
    60de:	8f 4f       	sbci	r24, 0xFF	; 255
    60e0:	ca c2       	rjmp	.+1428   	; 0x6676 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    60e2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    60e6:	8f 77       	andi	r24, 0x7F	; 127
    60e8:	03 c0       	rjmp	.+6      	; 0x60f0 <turnOffPWM+0x26>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    60ea:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    60ee:	8f 7d       	andi	r24, 0xDF	; 223
    60f0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    60f4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    60f6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    60fa:	87 7f       	andi	r24, 0xF7	; 247
    60fc:	f9 cf       	rjmp	.-14     	; 0x60f0 <turnOffPWM+0x26>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    60fe:	84 b5       	in	r24, 0x24	; 36
    6100:	8f 77       	andi	r24, 0x7F	; 127
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    6104:	84 b5       	in	r24, 0x24	; 36
    6106:	8f 7d       	andi	r24, 0xDF	; 223
    6108:	84 bd       	out	0x24, r24	; 36
    610a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    610c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    6110:	8f 77       	andi	r24, 0x7F	; 127
    6112:	03 c0       	rjmp	.+6      	; 0x611a <turnOffPWM+0x50>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    6114:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    6118:	8f 7d       	andi	r24, 0xDF	; 223
    611a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    611e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    6120:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    6124:	8f 77       	andi	r24, 0x7F	; 127
    6126:	07 c0       	rjmp	.+14     	; 0x6136 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    6128:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    612c:	8f 7d       	andi	r24, 0xDF	; 223
    612e:	03 c0       	rjmp	.+6      	; 0x6136 <turnOffPWM+0x6c>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    6130:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    6134:	87 7f       	andi	r24, 0xF7	; 247
    6136:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    613a:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    613c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6140:	8f 77       	andi	r24, 0x7F	; 127
    6142:	07 c0       	rjmp	.+14     	; 0x6152 <turnOffPWM+0x88>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    6144:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6148:	8f 7d       	andi	r24, 0xDF	; 223
    614a:	03 c0       	rjmp	.+6      	; 0x6152 <turnOffPWM+0x88>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    614c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6150:	87 7f       	andi	r24, 0xF7	; 247
    6152:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    6156:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    6158:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    615c:	8f 77       	andi	r24, 0x7F	; 127
    615e:	07 c0       	rjmp	.+14     	; 0x616e <turnOffPWM+0xa4>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    6160:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    6164:	8f 7d       	andi	r24, 0xDF	; 223
    6166:	03 c0       	rjmp	.+6      	; 0x616e <turnOffPWM+0xa4>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    6168:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    616c:	87 7f       	andi	r24, 0xF7	; 247
    616e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    6172:	08 95       	ret

00006174 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    6174:	cf 93       	push	r28
    6176:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	fc 01       	movw	r30, r24
    617c:	e8 52       	subi	r30, 0x28	; 40
    617e:	fd 4f       	sbci	r31, 0xFD	; 253
    6180:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    6182:	fc 01       	movw	r30, r24
    6184:	e2 5e       	subi	r30, 0xE2	; 226
    6186:	fc 4f       	sbci	r31, 0xFC	; 252
    6188:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    618a:	88 23       	and	r24, r24
    618c:	61 f1       	breq	.+88     	; 0x61e6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    618e:	90 e0       	ldi	r25, 0x00	; 0
    6190:	88 0f       	add	r24, r24
    6192:	99 1f       	adc	r25, r25
    6194:	fc 01       	movw	r30, r24
    6196:	e8 56       	subi	r30, 0x68	; 104
    6198:	fc 4f       	sbci	r31, 0xFC	; 252
    619a:	c5 91       	lpm	r28, Z+
    619c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    619e:	fc 01       	movw	r30, r24
    61a0:	e2 58       	subi	r30, 0x82	; 130
    61a2:	fc 4f       	sbci	r31, 0xFC	; 252
    61a4:	a5 91       	lpm	r26, Z+
    61a6:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    61a8:	61 11       	cpse	r22, r1
    61aa:	09 c0       	rjmp	.+18     	; 0x61be <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    61ac:	9f b7       	in	r25, 0x3f	; 63
                cli();
    61ae:	f8 94       	cli
		*reg &= ~bit;
    61b0:	88 81       	ld	r24, Y
    61b2:	20 95       	com	r18
    61b4:	82 23       	and	r24, r18
    61b6:	88 83       	st	Y, r24
		*out &= ~bit;
    61b8:	ec 91       	ld	r30, X
    61ba:	2e 23       	and	r18, r30
    61bc:	0b c0       	rjmp	.+22     	; 0x61d4 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    61be:	62 30       	cpi	r22, 0x02	; 2
    61c0:	61 f4       	brne	.+24     	; 0x61da <pinMode+0x66>
		uint8_t oldSREG = SREG;
    61c2:	9f b7       	in	r25, 0x3f	; 63
                cli();
    61c4:	f8 94       	cli
		*reg &= ~bit;
    61c6:	88 81       	ld	r24, Y
    61c8:	32 2f       	mov	r19, r18
    61ca:	30 95       	com	r19
    61cc:	83 23       	and	r24, r19
    61ce:	88 83       	st	Y, r24
		*out |= bit;
    61d0:	ec 91       	ld	r30, X
    61d2:	2e 2b       	or	r18, r30
    61d4:	2c 93       	st	X, r18
		SREG = oldSREG;
    61d6:	9f bf       	out	0x3f, r25	; 63
    61d8:	06 c0       	rjmp	.+12     	; 0x61e6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    61da:	8f b7       	in	r24, 0x3f	; 63
                cli();
    61dc:	f8 94       	cli
		*reg |= bit;
    61de:	e8 81       	ld	r30, Y
    61e0:	2e 2b       	or	r18, r30
    61e2:	28 83       	st	Y, r18
		SREG = oldSREG;
    61e4:	8f bf       	out	0x3f, r24	; 63
	}
}
    61e6:	df 91       	pop	r29
    61e8:	cf 91       	pop	r28
    61ea:	08 95       	ret

000061ec <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    61ec:	1f 93       	push	r17
    61ee:	cf 93       	push	r28
    61f0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    61f2:	28 2f       	mov	r18, r24
    61f4:	30 e0       	ldi	r19, 0x00	; 0
    61f6:	f9 01       	movw	r30, r18
    61f8:	ee 56       	subi	r30, 0x6E	; 110
    61fa:	fd 4f       	sbci	r31, 0xFD	; 253
    61fc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    61fe:	f9 01       	movw	r30, r18
    6200:	e8 52       	subi	r30, 0x28	; 40
    6202:	fd 4f       	sbci	r31, 0xFD	; 253
    6204:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6206:	f9 01       	movw	r30, r18
    6208:	e2 5e       	subi	r30, 0xE2	; 226
    620a:	fc 4f       	sbci	r31, 0xFC	; 252
    620c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    620e:	cc 23       	and	r28, r28
    6210:	b9 f0       	breq	.+46     	; 0x6240 <digitalWrite+0x54>
    6212:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    6214:	81 11       	cpse	r24, r1
    6216:	59 df       	rcall	.-334    	; 0x60ca <turnOffPWM>

	out = portOutputRegister(port);
    6218:	ec 2f       	mov	r30, r28
    621a:	f0 e0       	ldi	r31, 0x00	; 0
    621c:	ee 0f       	add	r30, r30
    621e:	ff 1f       	adc	r31, r31
    6220:	e2 58       	subi	r30, 0x82	; 130
    6222:	fc 4f       	sbci	r31, 0xFC	; 252
    6224:	a5 91       	lpm	r26, Z+
    6226:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    6228:	9f b7       	in	r25, 0x3f	; 63
	cli();
    622a:	f8 94       	cli

	if (val == LOW) {
    622c:	11 11       	cpse	r17, r1
    622e:	04 c0       	rjmp	.+8      	; 0x6238 <digitalWrite+0x4c>
		*out &= ~bit;
    6230:	8c 91       	ld	r24, X
    6232:	d0 95       	com	r29
    6234:	d8 23       	and	r29, r24
    6236:	02 c0       	rjmp	.+4      	; 0x623c <digitalWrite+0x50>
	} else {
		*out |= bit;
    6238:	ec 91       	ld	r30, X
    623a:	de 2b       	or	r29, r30
    623c:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    623e:	9f bf       	out	0x3f, r25	; 63
}
    6240:	df 91       	pop	r29
    6242:	cf 91       	pop	r28
    6244:	1f 91       	pop	r17
    6246:	08 95       	ret

00006248 <digitalRead>:

int digitalRead(uint8_t pin)
{
    6248:	cf 93       	push	r28
    624a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    624c:	28 2f       	mov	r18, r24
    624e:	30 e0       	ldi	r19, 0x00	; 0
    6250:	f9 01       	movw	r30, r18
    6252:	ee 56       	subi	r30, 0x6E	; 110
    6254:	fd 4f       	sbci	r31, 0xFD	; 253
    6256:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    6258:	f9 01       	movw	r30, r18
    625a:	e8 52       	subi	r30, 0x28	; 40
    625c:	fd 4f       	sbci	r31, 0xFD	; 253
    625e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    6260:	f9 01       	movw	r30, r18
    6262:	e2 5e       	subi	r30, 0xE2	; 226
    6264:	fc 4f       	sbci	r31, 0xFC	; 252
    6266:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    6268:	cc 23       	and	r28, r28
    626a:	89 f0       	breq	.+34     	; 0x628e <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    626c:	81 11       	cpse	r24, r1
    626e:	2d df       	rcall	.-422    	; 0x60ca <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    6270:	ec 2f       	mov	r30, r28
    6272:	f0 e0       	ldi	r31, 0x00	; 0
    6274:	ee 0f       	add	r30, r30
    6276:	ff 1f       	adc	r31, r31
    6278:	ec 59       	subi	r30, 0x9C	; 156
    627a:	fc 4f       	sbci	r31, 0xFC	; 252
    627c:	a5 91       	lpm	r26, Z+
    627e:	b4 91       	lpm	r27, Z
    6280:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    6282:	ed 23       	and	r30, r29
    6284:	81 e0       	ldi	r24, 0x01	; 1
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	21 f4       	brne	.+8      	; 0x6292 <digitalRead+0x4a>
    628a:	80 e0       	ldi	r24, 0x00	; 0
    628c:	02 c0       	rjmp	.+4      	; 0x6292 <digitalRead+0x4a>
    628e:	80 e0       	ldi	r24, 0x00	; 0
    6290:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    6292:	df 91       	pop	r29
    6294:	cf 91       	pop	r28
    6296:	08 95       	ret

00006298 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    6298:	bf 92       	push	r11
    629a:	cf 92       	push	r12
    629c:	df 92       	push	r13
    629e:	ef 92       	push	r14
    62a0:	ff 92       	push	r15
    62a2:	0f 93       	push	r16
    62a4:	1f 93       	push	r17
    62a6:	cf 93       	push	r28
    62a8:	df 93       	push	r29
    62aa:	c8 2e       	mov	r12, r24
    62ac:	d6 2e       	mov	r13, r22
    62ae:	b4 2e       	mov	r11, r20
    62b0:	c7 e0       	ldi	r28, 0x07	; 7
    62b2:	d0 e0       	ldi	r29, 0x00	; 0
    62b4:	02 2f       	mov	r16, r18
    62b6:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
    62b8:	87 e0       	ldi	r24, 0x07	; 7
    62ba:	e8 2e       	mov	r14, r24
    62bc:	f1 2c       	mov	r15, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    62be:	b1 10       	cpse	r11, r1
    62c0:	05 c0       	rjmp	.+10     	; 0x62cc <shiftOut+0x34>
			digitalWrite(dataPin, !!(val & (1 << i)));
    62c2:	c7 01       	movw	r24, r14
    62c4:	8c 1b       	sub	r24, r28
    62c6:	9d 0b       	sbc	r25, r29
    62c8:	b8 01       	movw	r22, r16
    62ca:	02 c0       	rjmp	.+4      	; 0x62d0 <shiftOut+0x38>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    62cc:	b8 01       	movw	r22, r16
    62ce:	8c 2f       	mov	r24, r28
    62d0:	02 c0       	rjmp	.+4      	; 0x62d6 <shiftOut+0x3e>
    62d2:	75 95       	asr	r23
    62d4:	67 95       	ror	r22
    62d6:	8a 95       	dec	r24
    62d8:	e2 f7       	brpl	.-8      	; 0x62d2 <shiftOut+0x3a>
    62da:	61 70       	andi	r22, 0x01	; 1
    62dc:	8c 2d       	mov	r24, r12
    62de:	86 df       	rcall	.-244    	; 0x61ec <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    62e0:	61 e0       	ldi	r22, 0x01	; 1
    62e2:	8d 2d       	mov	r24, r13
    62e4:	83 df       	rcall	.-250    	; 0x61ec <digitalWrite>
		digitalWrite(clockPin, LOW);		
    62e6:	60 e0       	ldi	r22, 0x00	; 0
    62e8:	8d 2d       	mov	r24, r13
    62ea:	80 df       	rcall	.-256    	; 0x61ec <digitalWrite>
    62ec:	21 97       	sbiw	r28, 0x01	; 1
    62ee:	38 f7       	brcc	.-50     	; 0x62be <shiftOut+0x26>
	}
}
    62f0:	df 91       	pop	r29
    62f2:	cf 91       	pop	r28
    62f4:	1f 91       	pop	r17
    62f6:	0f 91       	pop	r16
    62f8:	ff 90       	pop	r15
    62fa:	ef 90       	pop	r14
    62fc:	df 90       	pop	r13
    62fe:	cf 90       	pop	r12
    6300:	bf 90       	pop	r11
    6302:	08 95       	ret

00006304 <_ZN6StringD1Ev>:
	unsigned int newlen = len + length;
	if (!reserve(newlen)) return 0;
	strcpy_P(buffer + len, (const char *) str);
	len = newlen;
	return 1;
}
    6304:	fc 01       	movw	r30, r24
    6306:	80 81       	ld	r24, Z
    6308:	91 81       	ldd	r25, Z+1	; 0x01
    630a:	55 c2       	rjmp	.+1194   	; 0x67b6 <free>

0000630c <_ZN6String10invalidateEv>:
    630c:	cf 93       	push	r28
    630e:	df 93       	push	r29
    6310:	ec 01       	movw	r28, r24
    6312:	88 81       	ld	r24, Y
    6314:	99 81       	ldd	r25, Y+1	; 0x01
    6316:	00 97       	sbiw	r24, 0x00	; 0
    6318:	09 f0       	breq	.+2      	; 0x631c <_ZN6String10invalidateEv+0x10>
    631a:	4d d2       	rcall	.+1178   	; 0x67b6 <free>
    631c:	19 82       	std	Y+1, r1	; 0x01
    631e:	18 82       	st	Y, r1
    6320:	1d 82       	std	Y+5, r1	; 0x05
    6322:	1c 82       	std	Y+4, r1	; 0x04
    6324:	1b 82       	std	Y+3, r1	; 0x03
    6326:	1a 82       	std	Y+2, r1	; 0x02
    6328:	df 91       	pop	r29
    632a:	cf 91       	pop	r28
    632c:	08 95       	ret

0000632e <_ZN6String12changeBufferEj>:
    632e:	0f 93       	push	r16
    6330:	1f 93       	push	r17
    6332:	cf 93       	push	r28
    6334:	df 93       	push	r29
    6336:	ec 01       	movw	r28, r24
    6338:	8b 01       	movw	r16, r22
    633a:	6f 5f       	subi	r22, 0xFF	; 255
    633c:	7f 4f       	sbci	r23, 0xFF	; 255
    633e:	88 81       	ld	r24, Y
    6340:	99 81       	ldd	r25, Y+1	; 0x01
    6342:	c2 d2       	rcall	.+1412   	; 0x68c8 <realloc>
    6344:	00 97       	sbiw	r24, 0x00	; 0
    6346:	31 f0       	breq	.+12     	; 0x6354 <_ZN6String12changeBufferEj+0x26>
    6348:	99 83       	std	Y+1, r25	; 0x01
    634a:	88 83       	st	Y, r24
    634c:	1b 83       	std	Y+3, r17	; 0x03
    634e:	0a 83       	std	Y+2, r16	; 0x02
    6350:	81 e0       	ldi	r24, 0x01	; 1
    6352:	01 c0       	rjmp	.+2      	; 0x6356 <_ZN6String12changeBufferEj+0x28>
    6354:	80 e0       	ldi	r24, 0x00	; 0
    6356:	df 91       	pop	r29
    6358:	cf 91       	pop	r28
    635a:	1f 91       	pop	r17
    635c:	0f 91       	pop	r16
    635e:	08 95       	ret

00006360 <_ZN6String7reserveEj>:
    6360:	cf 93       	push	r28
    6362:	df 93       	push	r29
    6364:	ec 01       	movw	r28, r24
    6366:	88 81       	ld	r24, Y
    6368:	99 81       	ldd	r25, Y+1	; 0x01
    636a:	89 2b       	or	r24, r25
    636c:	29 f0       	breq	.+10     	; 0x6378 <_ZN6String7reserveEj+0x18>
    636e:	8a 81       	ldd	r24, Y+2	; 0x02
    6370:	9b 81       	ldd	r25, Y+3	; 0x03
    6372:	86 17       	cp	r24, r22
    6374:	97 07       	cpc	r25, r23
    6376:	58 f4       	brcc	.+22     	; 0x638e <_ZN6String7reserveEj+0x2e>
    6378:	ce 01       	movw	r24, r28
    637a:	d9 df       	rcall	.-78     	; 0x632e <_ZN6String12changeBufferEj>
    637c:	88 23       	and	r24, r24
    637e:	41 f0       	breq	.+16     	; 0x6390 <_ZN6String7reserveEj+0x30>
    6380:	8c 81       	ldd	r24, Y+4	; 0x04
    6382:	9d 81       	ldd	r25, Y+5	; 0x05
    6384:	89 2b       	or	r24, r25
    6386:	19 f4       	brne	.+6      	; 0x638e <_ZN6String7reserveEj+0x2e>
    6388:	e8 81       	ld	r30, Y
    638a:	f9 81       	ldd	r31, Y+1	; 0x01
    638c:	10 82       	st	Z, r1
    638e:	81 e0       	ldi	r24, 0x01	; 1
    6390:	df 91       	pop	r29
    6392:	cf 91       	pop	r28
    6394:	08 95       	ret

00006396 <_ZN6String4copyEPKcj>:
    6396:	ef 92       	push	r14
    6398:	ff 92       	push	r15
    639a:	0f 93       	push	r16
    639c:	1f 93       	push	r17
    639e:	cf 93       	push	r28
    63a0:	df 93       	push	r29
    63a2:	ec 01       	movw	r28, r24
    63a4:	7b 01       	movw	r14, r22
    63a6:	8a 01       	movw	r16, r20
    63a8:	ba 01       	movw	r22, r20
    63aa:	da df       	rcall	.-76     	; 0x6360 <_ZN6String7reserveEj>
    63ac:	81 11       	cpse	r24, r1
    63ae:	03 c0       	rjmp	.+6      	; 0x63b6 <_ZN6String4copyEPKcj+0x20>
    63b0:	ce 01       	movw	r24, r28
    63b2:	ac df       	rcall	.-168    	; 0x630c <_ZN6String10invalidateEv>
    63b4:	06 c0       	rjmp	.+12     	; 0x63c2 <_ZN6String4copyEPKcj+0x2c>
    63b6:	1d 83       	std	Y+5, r17	; 0x05
    63b8:	0c 83       	std	Y+4, r16	; 0x04
    63ba:	b7 01       	movw	r22, r14
    63bc:	88 81       	ld	r24, Y
    63be:	99 81       	ldd	r25, Y+1	; 0x01
    63c0:	77 d3       	rcall	.+1774   	; 0x6ab0 <strcpy>
    63c2:	ce 01       	movw	r24, r28
    63c4:	df 91       	pop	r29
    63c6:	cf 91       	pop	r28
    63c8:	1f 91       	pop	r17
    63ca:	0f 91       	pop	r16
    63cc:	ff 90       	pop	r15
    63ce:	ef 90       	pop	r14
    63d0:	08 95       	ret

000063d2 <_ZN6StringC1EPKc>:
    63d2:	fc 01       	movw	r30, r24
    63d4:	11 82       	std	Z+1, r1	; 0x01
    63d6:	10 82       	st	Z, r1
    63d8:	13 82       	std	Z+3, r1	; 0x03
    63da:	12 82       	std	Z+2, r1	; 0x02
    63dc:	15 82       	std	Z+5, r1	; 0x05
    63de:	14 82       	std	Z+4, r1	; 0x04
    63e0:	61 15       	cp	r22, r1
    63e2:	71 05       	cpc	r23, r1
    63e4:	49 f0       	breq	.+18     	; 0x63f8 <_ZN6StringC1EPKc+0x26>
    63e6:	fb 01       	movw	r30, r22
    63e8:	01 90       	ld	r0, Z+
    63ea:	00 20       	and	r0, r0
    63ec:	e9 f7       	brne	.-6      	; 0x63e8 <_ZN6StringC1EPKc+0x16>
    63ee:	31 97       	sbiw	r30, 0x01	; 1
    63f0:	af 01       	movw	r20, r30
    63f2:	46 1b       	sub	r20, r22
    63f4:	57 0b       	sbc	r21, r23
    63f6:	cf cf       	rjmp	.-98     	; 0x6396 <_ZN6String4copyEPKcj>
    63f8:	08 95       	ret

000063fa <_ZN6StringaSERKS_>:
    63fa:	cf 93       	push	r28
    63fc:	df 93       	push	r29
    63fe:	ec 01       	movw	r28, r24
    6400:	fb 01       	movw	r30, r22
    6402:	86 17       	cp	r24, r22
    6404:	97 07       	cpc	r25, r23
    6406:	51 f0       	breq	.+20     	; 0x641c <_ZN6StringaSERKS_+0x22>
    6408:	60 81       	ld	r22, Z
    640a:	71 81       	ldd	r23, Z+1	; 0x01
    640c:	61 15       	cp	r22, r1
    640e:	71 05       	cpc	r23, r1
    6410:	21 f0       	breq	.+8      	; 0x641a <_ZN6StringaSERKS_+0x20>
    6412:	44 81       	ldd	r20, Z+4	; 0x04
    6414:	55 81       	ldd	r21, Z+5	; 0x05
    6416:	bf df       	rcall	.-130    	; 0x6396 <_ZN6String4copyEPKcj>
    6418:	01 c0       	rjmp	.+2      	; 0x641c <_ZN6StringaSERKS_+0x22>
    641a:	78 df       	rcall	.-272    	; 0x630c <_ZN6String10invalidateEv>
    641c:	ce 01       	movw	r24, r28
    641e:	df 91       	pop	r29
    6420:	cf 91       	pop	r28
    6422:	08 95       	ret

00006424 <_ZN6String6concatEPKcj>:
    6424:	ef 92       	push	r14
    6426:	ff 92       	push	r15
    6428:	0f 93       	push	r16
    642a:	1f 93       	push	r17
    642c:	cf 93       	push	r28
    642e:	df 93       	push	r29
    6430:	61 15       	cp	r22, r1
    6432:	71 05       	cpc	r23, r1
    6434:	11 f4       	brne	.+4      	; 0x643a <_ZN6String6concatEPKcj+0x16>
    6436:	80 e0       	ldi	r24, 0x00	; 0
    6438:	1a c0       	rjmp	.+52     	; 0x646e <_ZN6String6concatEPKcj+0x4a>
    643a:	41 15       	cp	r20, r1
    643c:	51 05       	cpc	r21, r1
    643e:	b1 f0       	breq	.+44     	; 0x646c <_ZN6String6concatEPKcj+0x48>
    6440:	7b 01       	movw	r14, r22
    6442:	ec 01       	movw	r28, r24
    6444:	8c 81       	ldd	r24, Y+4	; 0x04
    6446:	9d 81       	ldd	r25, Y+5	; 0x05
    6448:	8a 01       	movw	r16, r20
    644a:	08 0f       	add	r16, r24
    644c:	19 1f       	adc	r17, r25
    644e:	b8 01       	movw	r22, r16
    6450:	ce 01       	movw	r24, r28
    6452:	86 df       	rcall	.-244    	; 0x6360 <_ZN6String7reserveEj>
    6454:	88 23       	and	r24, r24
    6456:	79 f3       	breq	.-34     	; 0x6436 <_ZN6String6concatEPKcj+0x12>
    6458:	28 81       	ld	r18, Y
    645a:	39 81       	ldd	r19, Y+1	; 0x01
    645c:	8c 81       	ldd	r24, Y+4	; 0x04
    645e:	9d 81       	ldd	r25, Y+5	; 0x05
    6460:	b7 01       	movw	r22, r14
    6462:	82 0f       	add	r24, r18
    6464:	93 1f       	adc	r25, r19
    6466:	24 d3       	rcall	.+1608   	; 0x6ab0 <strcpy>
    6468:	1d 83       	std	Y+5, r17	; 0x05
    646a:	0c 83       	std	Y+4, r16	; 0x04
    646c:	81 e0       	ldi	r24, 0x01	; 1
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	1f 91       	pop	r17
    6474:	0f 91       	pop	r16
    6476:	ff 90       	pop	r15
    6478:	ef 90       	pop	r14
    647a:	08 95       	ret

0000647c <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    647c:	cf 93       	push	r28
    647e:	df 93       	push	r29
    6480:	ec 01       	movw	r28, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    6482:	fb 01       	movw	r30, r22
    6484:	44 81       	ldd	r20, Z+4	; 0x04
    6486:	55 81       	ldd	r21, Z+5	; 0x05
    6488:	60 81       	ld	r22, Z
    648a:	71 81       	ldd	r23, Z+1	; 0x01
    648c:	cb df       	rcall	.-106    	; 0x6424 <_ZN6String6concatEPKcj>
    648e:	81 11       	cpse	r24, r1
    6490:	02 c0       	rjmp	.+4      	; 0x6496 <_ZplRK15StringSumHelperRK6String+0x1a>
    6492:	ce 01       	movw	r24, r28
    6494:	3b df       	rcall	.-394    	; 0x630c <_ZN6String10invalidateEv>
	return a;
}
    6496:	ce 01       	movw	r24, r28
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	08 95       	ret

0000649e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    649e:	08 95       	ret

000064a0 <__cmpsf2>:
    64a0:	b8 d8       	rcall	.-3728   	; 0x5612 <__fp_cmp>
    64a2:	08 f4       	brcc	.+2      	; 0x64a6 <__cmpsf2+0x6>
    64a4:	81 e0       	ldi	r24, 0x01	; 1
    64a6:	08 95       	ret

000064a8 <__divsf3>:
    64a8:	0e d0       	rcall	.+28     	; 0x64c6 <__divsf3x>
    64aa:	12 c8       	rjmp	.-4060   	; 0x54d0 <__fp_round>
    64ac:	0a d8       	rcall	.-4076   	; 0x54c2 <__fp_pscB>
    64ae:	48 f0       	brcs	.+18     	; 0x64c2 <__divsf3+0x1a>
    64b0:	01 d8       	rcall	.-4094   	; 0x54b4 <__fp_pscA>
    64b2:	38 f0       	brcs	.+14     	; 0x64c2 <__divsf3+0x1a>
    64b4:	29 f4       	brne	.+10     	; 0x64c0 <__divsf3+0x18>
    64b6:	5f 3f       	cpi	r21, 0xFF	; 255
    64b8:	21 f0       	breq	.+8      	; 0x64c2 <__divsf3+0x1a>
    64ba:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__fp_inf>
    64be:	51 11       	cpse	r21, r1
    64c0:	3b c8       	rjmp	.-3978   	; 0x5538 <__fp_szero>
    64c2:	0c 94 57 2a 	jmp	0x54ae	; 0x54ae <__fp_nan>

000064c6 <__divsf3x>:
    64c6:	15 d8       	rcall	.-4054   	; 0x54f2 <__fp_split3>
    64c8:	88 f3       	brcs	.-30     	; 0x64ac <__divsf3+0x4>

000064ca <__divsf3_pse>:
    64ca:	99 23       	and	r25, r25
    64cc:	c1 f3       	breq	.-16     	; 0x64be <__divsf3+0x16>
    64ce:	55 23       	and	r21, r21
    64d0:	a1 f3       	breq	.-24     	; 0x64ba <__divsf3+0x12>
    64d2:	95 1b       	sub	r25, r21
    64d4:	55 0b       	sbc	r21, r21
    64d6:	bb 27       	eor	r27, r27
    64d8:	aa 27       	eor	r26, r26
    64da:	62 17       	cp	r22, r18
    64dc:	73 07       	cpc	r23, r19
    64de:	84 07       	cpc	r24, r20
    64e0:	38 f0       	brcs	.+14     	; 0x64f0 <__divsf3_pse+0x26>
    64e2:	9f 5f       	subi	r25, 0xFF	; 255
    64e4:	5f 4f       	sbci	r21, 0xFF	; 255
    64e6:	22 0f       	add	r18, r18
    64e8:	33 1f       	adc	r19, r19
    64ea:	44 1f       	adc	r20, r20
    64ec:	aa 1f       	adc	r26, r26
    64ee:	a9 f3       	breq	.-22     	; 0x64da <__divsf3_pse+0x10>
    64f0:	34 d0       	rcall	.+104    	; 0x655a <__divsf3_pse+0x90>
    64f2:	0e 2e       	mov	r0, r30
    64f4:	3a f0       	brmi	.+14     	; 0x6504 <__divsf3_pse+0x3a>
    64f6:	e0 e8       	ldi	r30, 0x80	; 128
    64f8:	31 d0       	rcall	.+98     	; 0x655c <__divsf3_pse+0x92>
    64fa:	91 50       	subi	r25, 0x01	; 1
    64fc:	50 40       	sbci	r21, 0x00	; 0
    64fe:	e6 95       	lsr	r30
    6500:	00 1c       	adc	r0, r0
    6502:	ca f7       	brpl	.-14     	; 0x64f6 <__divsf3_pse+0x2c>
    6504:	2a d0       	rcall	.+84     	; 0x655a <__divsf3_pse+0x90>
    6506:	fe 2f       	mov	r31, r30
    6508:	28 d0       	rcall	.+80     	; 0x655a <__divsf3_pse+0x90>
    650a:	66 0f       	add	r22, r22
    650c:	77 1f       	adc	r23, r23
    650e:	88 1f       	adc	r24, r24
    6510:	bb 1f       	adc	r27, r27
    6512:	26 17       	cp	r18, r22
    6514:	37 07       	cpc	r19, r23
    6516:	48 07       	cpc	r20, r24
    6518:	ab 07       	cpc	r26, r27
    651a:	b0 e8       	ldi	r27, 0x80	; 128
    651c:	09 f0       	breq	.+2      	; 0x6520 <__divsf3_pse+0x56>
    651e:	bb 0b       	sbc	r27, r27
    6520:	80 2d       	mov	r24, r0
    6522:	bf 01       	movw	r22, r30
    6524:	ff 27       	eor	r31, r31
    6526:	93 58       	subi	r25, 0x83	; 131
    6528:	5f 4f       	sbci	r21, 0xFF	; 255
    652a:	32 f0       	brmi	.+12     	; 0x6538 <__divsf3_pse+0x6e>
    652c:	9e 3f       	cpi	r25, 0xFE	; 254
    652e:	51 05       	cpc	r21, r1
    6530:	70 f0       	brcs	.+28     	; 0x654e <__divsf3_pse+0x84>
    6532:	0c 94 51 2a 	jmp	0x54a2	; 0x54a2 <__fp_inf>
    6536:	00 c8       	rjmp	.-4096   	; 0x5538 <__fp_szero>
    6538:	5f 3f       	cpi	r21, 0xFF	; 255
    653a:	ec f3       	brlt	.-6      	; 0x6536 <__divsf3_pse+0x6c>
    653c:	98 3e       	cpi	r25, 0xE8	; 232
    653e:	dc f3       	brlt	.-10     	; 0x6536 <__divsf3_pse+0x6c>
    6540:	86 95       	lsr	r24
    6542:	77 95       	ror	r23
    6544:	67 95       	ror	r22
    6546:	b7 95       	ror	r27
    6548:	f7 95       	ror	r31
    654a:	9f 5f       	subi	r25, 0xFF	; 255
    654c:	c9 f7       	brne	.-14     	; 0x6540 <__divsf3_pse+0x76>
    654e:	88 0f       	add	r24, r24
    6550:	91 1d       	adc	r25, r1
    6552:	96 95       	lsr	r25
    6554:	87 95       	ror	r24
    6556:	97 f9       	bld	r25, 7
    6558:	08 95       	ret
    655a:	e1 e0       	ldi	r30, 0x01	; 1
    655c:	66 0f       	add	r22, r22
    655e:	77 1f       	adc	r23, r23
    6560:	88 1f       	adc	r24, r24
    6562:	bb 1f       	adc	r27, r27
    6564:	62 17       	cp	r22, r18
    6566:	73 07       	cpc	r23, r19
    6568:	84 07       	cpc	r24, r20
    656a:	ba 07       	cpc	r27, r26
    656c:	20 f0       	brcs	.+8      	; 0x6576 <__divsf3_pse+0xac>
    656e:	62 1b       	sub	r22, r18
    6570:	73 0b       	sbc	r23, r19
    6572:	84 0b       	sbc	r24, r20
    6574:	ba 0b       	sbc	r27, r26
    6576:	ee 1f       	adc	r30, r30
    6578:	88 f7       	brcc	.-30     	; 0x655c <__divsf3_pse+0x92>
    657a:	e0 95       	com	r30
    657c:	08 95       	ret

0000657e <__fixunssfsi>:
    657e:	0e 94 81 2a 	call	0x5502	; 0x5502 <__fp_splitA>
    6582:	88 f0       	brcs	.+34     	; 0x65a6 <__fixunssfsi+0x28>
    6584:	9f 57       	subi	r25, 0x7F	; 127
    6586:	98 f0       	brcs	.+38     	; 0x65ae <__fixunssfsi+0x30>
    6588:	b9 2f       	mov	r27, r25
    658a:	99 27       	eor	r25, r25
    658c:	b7 51       	subi	r27, 0x17	; 23
    658e:	b0 f0       	brcs	.+44     	; 0x65bc <__fixunssfsi+0x3e>
    6590:	e1 f0       	breq	.+56     	; 0x65ca <__fixunssfsi+0x4c>
    6592:	66 0f       	add	r22, r22
    6594:	77 1f       	adc	r23, r23
    6596:	88 1f       	adc	r24, r24
    6598:	99 1f       	adc	r25, r25
    659a:	1a f0       	brmi	.+6      	; 0x65a2 <__fixunssfsi+0x24>
    659c:	ba 95       	dec	r27
    659e:	c9 f7       	brne	.-14     	; 0x6592 <__fixunssfsi+0x14>
    65a0:	14 c0       	rjmp	.+40     	; 0x65ca <__fixunssfsi+0x4c>
    65a2:	b1 30       	cpi	r27, 0x01	; 1
    65a4:	91 f0       	breq	.+36     	; 0x65ca <__fixunssfsi+0x4c>
    65a6:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__fp_zero>
    65aa:	b1 e0       	ldi	r27, 0x01	; 1
    65ac:	08 95       	ret
    65ae:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__fp_zero>
    65b2:	67 2f       	mov	r22, r23
    65b4:	78 2f       	mov	r23, r24
    65b6:	88 27       	eor	r24, r24
    65b8:	b8 5f       	subi	r27, 0xF8	; 248
    65ba:	39 f0       	breq	.+14     	; 0x65ca <__fixunssfsi+0x4c>
    65bc:	b9 3f       	cpi	r27, 0xF9	; 249
    65be:	cc f3       	brlt	.-14     	; 0x65b2 <__fixunssfsi+0x34>
    65c0:	86 95       	lsr	r24
    65c2:	77 95       	ror	r23
    65c4:	67 95       	ror	r22
    65c6:	b3 95       	inc	r27
    65c8:	d9 f7       	brne	.-10     	; 0x65c0 <__fixunssfsi+0x42>
    65ca:	3e f4       	brtc	.+14     	; 0x65da <__fixunssfsi+0x5c>
    65cc:	90 95       	com	r25
    65ce:	80 95       	com	r24
    65d0:	70 95       	com	r23
    65d2:	61 95       	neg	r22
    65d4:	7f 4f       	sbci	r23, 0xFF	; 255
    65d6:	8f 4f       	sbci	r24, 0xFF	; 255
    65d8:	9f 4f       	sbci	r25, 0xFF	; 255
    65da:	08 95       	ret

000065dc <__unordsf2>:
    65dc:	1a d8       	rcall	.-4044   	; 0x5612 <__fp_cmp>
    65de:	88 0b       	sbc	r24, r24
    65e0:	99 0b       	sbc	r25, r25
    65e2:	08 95       	ret

000065e4 <__udivmodhi4>:
    65e4:	aa 1b       	sub	r26, r26
    65e6:	bb 1b       	sub	r27, r27
    65e8:	51 e1       	ldi	r21, 0x11	; 17
    65ea:	07 c0       	rjmp	.+14     	; 0x65fa <__udivmodhi4_ep>

000065ec <__udivmodhi4_loop>:
    65ec:	aa 1f       	adc	r26, r26
    65ee:	bb 1f       	adc	r27, r27
    65f0:	a6 17       	cp	r26, r22
    65f2:	b7 07       	cpc	r27, r23
    65f4:	10 f0       	brcs	.+4      	; 0x65fa <__udivmodhi4_ep>
    65f6:	a6 1b       	sub	r26, r22
    65f8:	b7 0b       	sbc	r27, r23

000065fa <__udivmodhi4_ep>:
    65fa:	88 1f       	adc	r24, r24
    65fc:	99 1f       	adc	r25, r25
    65fe:	5a 95       	dec	r21
    6600:	a9 f7       	brne	.-22     	; 0x65ec <__udivmodhi4_loop>
    6602:	80 95       	com	r24
    6604:	90 95       	com	r25
    6606:	bc 01       	movw	r22, r24
    6608:	cd 01       	movw	r24, r26
    660a:	08 95       	ret

0000660c <__divmodhi4>:
    660c:	97 fb       	bst	r25, 7
    660e:	07 2e       	mov	r0, r23
    6610:	16 f4       	brtc	.+4      	; 0x6616 <__divmodhi4+0xa>
    6612:	00 94       	com	r0
    6614:	06 d0       	rcall	.+12     	; 0x6622 <__divmodhi4_neg1>
    6616:	77 fd       	sbrc	r23, 7
    6618:	08 d0       	rcall	.+16     	; 0x662a <__divmodhi4_neg2>
    661a:	e4 df       	rcall	.-56     	; 0x65e4 <__udivmodhi4>
    661c:	07 fc       	sbrc	r0, 7
    661e:	05 d0       	rcall	.+10     	; 0x662a <__divmodhi4_neg2>
    6620:	3e f4       	brtc	.+14     	; 0x6630 <__divmodhi4_exit>

00006622 <__divmodhi4_neg1>:
    6622:	90 95       	com	r25
    6624:	81 95       	neg	r24
    6626:	9f 4f       	sbci	r25, 0xFF	; 255
    6628:	08 95       	ret

0000662a <__divmodhi4_neg2>:
    662a:	70 95       	com	r23
    662c:	61 95       	neg	r22
    662e:	7f 4f       	sbci	r23, 0xFF	; 255

00006630 <__divmodhi4_exit>:
    6630:	08 95       	ret

00006632 <__udivmodsi4>:
    6632:	a1 e2       	ldi	r26, 0x21	; 33
    6634:	1a 2e       	mov	r1, r26
    6636:	aa 1b       	sub	r26, r26
    6638:	bb 1b       	sub	r27, r27
    663a:	fd 01       	movw	r30, r26
    663c:	0d c0       	rjmp	.+26     	; 0x6658 <__udivmodsi4_ep>

0000663e <__udivmodsi4_loop>:
    663e:	aa 1f       	adc	r26, r26
    6640:	bb 1f       	adc	r27, r27
    6642:	ee 1f       	adc	r30, r30
    6644:	ff 1f       	adc	r31, r31
    6646:	a2 17       	cp	r26, r18
    6648:	b3 07       	cpc	r27, r19
    664a:	e4 07       	cpc	r30, r20
    664c:	f5 07       	cpc	r31, r21
    664e:	20 f0       	brcs	.+8      	; 0x6658 <__udivmodsi4_ep>
    6650:	a2 1b       	sub	r26, r18
    6652:	b3 0b       	sbc	r27, r19
    6654:	e4 0b       	sbc	r30, r20
    6656:	f5 0b       	sbc	r31, r21

00006658 <__udivmodsi4_ep>:
    6658:	66 1f       	adc	r22, r22
    665a:	77 1f       	adc	r23, r23
    665c:	88 1f       	adc	r24, r24
    665e:	99 1f       	adc	r25, r25
    6660:	1a 94       	dec	r1
    6662:	69 f7       	brne	.-38     	; 0x663e <__udivmodsi4_loop>
    6664:	60 95       	com	r22
    6666:	70 95       	com	r23
    6668:	80 95       	com	r24
    666a:	90 95       	com	r25
    666c:	9b 01       	movw	r18, r22
    666e:	ac 01       	movw	r20, r24
    6670:	bd 01       	movw	r22, r26
    6672:	cf 01       	movw	r24, r30
    6674:	08 95       	ret

00006676 <__tablejump2__>:
    6676:	ee 0f       	add	r30, r30
    6678:	ff 1f       	adc	r31, r31
    667a:	88 1f       	adc	r24, r24
    667c:	8b bf       	out	0x3b, r24	; 59
    667e:	07 90       	elpm	r0, Z+
    6680:	f6 91       	elpm	r31, Z
    6682:	e0 2d       	mov	r30, r0
    6684:	19 94       	eijmp

00006686 <malloc>:
    6686:	0f 93       	push	r16
    6688:	1f 93       	push	r17
    668a:	cf 93       	push	r28
    668c:	df 93       	push	r29
    668e:	82 30       	cpi	r24, 0x02	; 2
    6690:	91 05       	cpc	r25, r1
    6692:	10 f4       	brcc	.+4      	; 0x6698 <malloc+0x12>
    6694:	82 e0       	ldi	r24, 0x02	; 2
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	e0 91 b9 0a 	lds	r30, 0x0AB9	; 0x800ab9 <__flp>
    669c:	f0 91 ba 0a 	lds	r31, 0x0ABA	; 0x800aba <__flp+0x1>
    66a0:	20 e0       	ldi	r18, 0x00	; 0
    66a2:	30 e0       	ldi	r19, 0x00	; 0
    66a4:	a0 e0       	ldi	r26, 0x00	; 0
    66a6:	b0 e0       	ldi	r27, 0x00	; 0
    66a8:	30 97       	sbiw	r30, 0x00	; 0
    66aa:	19 f1       	breq	.+70     	; 0x66f2 <malloc+0x6c>
    66ac:	40 81       	ld	r20, Z
    66ae:	51 81       	ldd	r21, Z+1	; 0x01
    66b0:	02 81       	ldd	r16, Z+2	; 0x02
    66b2:	13 81       	ldd	r17, Z+3	; 0x03
    66b4:	48 17       	cp	r20, r24
    66b6:	59 07       	cpc	r21, r25
    66b8:	c8 f0       	brcs	.+50     	; 0x66ec <malloc+0x66>
    66ba:	84 17       	cp	r24, r20
    66bc:	95 07       	cpc	r25, r21
    66be:	69 f4       	brne	.+26     	; 0x66da <malloc+0x54>
    66c0:	10 97       	sbiw	r26, 0x00	; 0
    66c2:	31 f0       	breq	.+12     	; 0x66d0 <malloc+0x4a>
    66c4:	12 96       	adiw	r26, 0x02	; 2
    66c6:	0c 93       	st	X, r16
    66c8:	12 97       	sbiw	r26, 0x02	; 2
    66ca:	13 96       	adiw	r26, 0x03	; 3
    66cc:	1c 93       	st	X, r17
    66ce:	27 c0       	rjmp	.+78     	; 0x671e <malloc+0x98>
    66d0:	00 93 b9 0a 	sts	0x0AB9, r16	; 0x800ab9 <__flp>
    66d4:	10 93 ba 0a 	sts	0x0ABA, r17	; 0x800aba <__flp+0x1>
    66d8:	22 c0       	rjmp	.+68     	; 0x671e <malloc+0x98>
    66da:	21 15       	cp	r18, r1
    66dc:	31 05       	cpc	r19, r1
    66de:	19 f0       	breq	.+6      	; 0x66e6 <malloc+0x60>
    66e0:	42 17       	cp	r20, r18
    66e2:	53 07       	cpc	r21, r19
    66e4:	18 f4       	brcc	.+6      	; 0x66ec <malloc+0x66>
    66e6:	9a 01       	movw	r18, r20
    66e8:	bd 01       	movw	r22, r26
    66ea:	ef 01       	movw	r28, r30
    66ec:	df 01       	movw	r26, r30
    66ee:	f8 01       	movw	r30, r16
    66f0:	db cf       	rjmp	.-74     	; 0x66a8 <malloc+0x22>
    66f2:	21 15       	cp	r18, r1
    66f4:	31 05       	cpc	r19, r1
    66f6:	f9 f0       	breq	.+62     	; 0x6736 <malloc+0xb0>
    66f8:	28 1b       	sub	r18, r24
    66fa:	39 0b       	sbc	r19, r25
    66fc:	24 30       	cpi	r18, 0x04	; 4
    66fe:	31 05       	cpc	r19, r1
    6700:	80 f4       	brcc	.+32     	; 0x6722 <malloc+0x9c>
    6702:	8a 81       	ldd	r24, Y+2	; 0x02
    6704:	9b 81       	ldd	r25, Y+3	; 0x03
    6706:	61 15       	cp	r22, r1
    6708:	71 05       	cpc	r23, r1
    670a:	21 f0       	breq	.+8      	; 0x6714 <malloc+0x8e>
    670c:	fb 01       	movw	r30, r22
    670e:	93 83       	std	Z+3, r25	; 0x03
    6710:	82 83       	std	Z+2, r24	; 0x02
    6712:	04 c0       	rjmp	.+8      	; 0x671c <malloc+0x96>
    6714:	90 93 ba 0a 	sts	0x0ABA, r25	; 0x800aba <__flp+0x1>
    6718:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <__flp>
    671c:	fe 01       	movw	r30, r28
    671e:	32 96       	adiw	r30, 0x02	; 2
    6720:	44 c0       	rjmp	.+136    	; 0x67aa <malloc+0x124>
    6722:	fe 01       	movw	r30, r28
    6724:	e2 0f       	add	r30, r18
    6726:	f3 1f       	adc	r31, r19
    6728:	81 93       	st	Z+, r24
    672a:	91 93       	st	Z+, r25
    672c:	22 50       	subi	r18, 0x02	; 2
    672e:	31 09       	sbc	r19, r1
    6730:	39 83       	std	Y+1, r19	; 0x01
    6732:	28 83       	st	Y, r18
    6734:	3a c0       	rjmp	.+116    	; 0x67aa <malloc+0x124>
    6736:	20 91 b7 0a 	lds	r18, 0x0AB7	; 0x800ab7 <__brkval>
    673a:	30 91 b8 0a 	lds	r19, 0x0AB8	; 0x800ab8 <__brkval+0x1>
    673e:	23 2b       	or	r18, r19
    6740:	41 f4       	brne	.+16     	; 0x6752 <malloc+0xcc>
    6742:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6746:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    674a:	30 93 b8 0a 	sts	0x0AB8, r19	; 0x800ab8 <__brkval+0x1>
    674e:	20 93 b7 0a 	sts	0x0AB7, r18	; 0x800ab7 <__brkval>
    6752:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6756:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    675a:	21 15       	cp	r18, r1
    675c:	31 05       	cpc	r19, r1
    675e:	41 f4       	brne	.+16     	; 0x6770 <malloc+0xea>
    6760:	2d b7       	in	r18, 0x3d	; 61
    6762:	3e b7       	in	r19, 0x3e	; 62
    6764:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6768:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    676c:	24 1b       	sub	r18, r20
    676e:	35 0b       	sbc	r19, r21
    6770:	e0 91 b7 0a 	lds	r30, 0x0AB7	; 0x800ab7 <__brkval>
    6774:	f0 91 b8 0a 	lds	r31, 0x0AB8	; 0x800ab8 <__brkval+0x1>
    6778:	e2 17       	cp	r30, r18
    677a:	f3 07       	cpc	r31, r19
    677c:	a0 f4       	brcc	.+40     	; 0x67a6 <malloc+0x120>
    677e:	2e 1b       	sub	r18, r30
    6780:	3f 0b       	sbc	r19, r31
    6782:	28 17       	cp	r18, r24
    6784:	39 07       	cpc	r19, r25
    6786:	78 f0       	brcs	.+30     	; 0x67a6 <malloc+0x120>
    6788:	ac 01       	movw	r20, r24
    678a:	4e 5f       	subi	r20, 0xFE	; 254
    678c:	5f 4f       	sbci	r21, 0xFF	; 255
    678e:	24 17       	cp	r18, r20
    6790:	35 07       	cpc	r19, r21
    6792:	48 f0       	brcs	.+18     	; 0x67a6 <malloc+0x120>
    6794:	4e 0f       	add	r20, r30
    6796:	5f 1f       	adc	r21, r31
    6798:	50 93 b8 0a 	sts	0x0AB8, r21	; 0x800ab8 <__brkval+0x1>
    679c:	40 93 b7 0a 	sts	0x0AB7, r20	; 0x800ab7 <__brkval>
    67a0:	81 93       	st	Z+, r24
    67a2:	91 93       	st	Z+, r25
    67a4:	02 c0       	rjmp	.+4      	; 0x67aa <malloc+0x124>
    67a6:	e0 e0       	ldi	r30, 0x00	; 0
    67a8:	f0 e0       	ldi	r31, 0x00	; 0
    67aa:	cf 01       	movw	r24, r30
    67ac:	df 91       	pop	r29
    67ae:	cf 91       	pop	r28
    67b0:	1f 91       	pop	r17
    67b2:	0f 91       	pop	r16
    67b4:	08 95       	ret

000067b6 <free>:
    67b6:	cf 93       	push	r28
    67b8:	df 93       	push	r29
    67ba:	00 97       	sbiw	r24, 0x00	; 0
    67bc:	09 f4       	brne	.+2      	; 0x67c0 <free+0xa>
    67be:	81 c0       	rjmp	.+258    	; 0x68c2 <free+0x10c>
    67c0:	fc 01       	movw	r30, r24
    67c2:	32 97       	sbiw	r30, 0x02	; 2
    67c4:	13 82       	std	Z+3, r1	; 0x03
    67c6:	12 82       	std	Z+2, r1	; 0x02
    67c8:	a0 91 b9 0a 	lds	r26, 0x0AB9	; 0x800ab9 <__flp>
    67cc:	b0 91 ba 0a 	lds	r27, 0x0ABA	; 0x800aba <__flp+0x1>
    67d0:	10 97       	sbiw	r26, 0x00	; 0
    67d2:	81 f4       	brne	.+32     	; 0x67f4 <free+0x3e>
    67d4:	20 81       	ld	r18, Z
    67d6:	31 81       	ldd	r19, Z+1	; 0x01
    67d8:	82 0f       	add	r24, r18
    67da:	93 1f       	adc	r25, r19
    67dc:	20 91 b7 0a 	lds	r18, 0x0AB7	; 0x800ab7 <__brkval>
    67e0:	30 91 b8 0a 	lds	r19, 0x0AB8	; 0x800ab8 <__brkval+0x1>
    67e4:	28 17       	cp	r18, r24
    67e6:	39 07       	cpc	r19, r25
    67e8:	51 f5       	brne	.+84     	; 0x683e <free+0x88>
    67ea:	f0 93 b8 0a 	sts	0x0AB8, r31	; 0x800ab8 <__brkval+0x1>
    67ee:	e0 93 b7 0a 	sts	0x0AB7, r30	; 0x800ab7 <__brkval>
    67f2:	67 c0       	rjmp	.+206    	; 0x68c2 <free+0x10c>
    67f4:	ed 01       	movw	r28, r26
    67f6:	20 e0       	ldi	r18, 0x00	; 0
    67f8:	30 e0       	ldi	r19, 0x00	; 0
    67fa:	ce 17       	cp	r28, r30
    67fc:	df 07       	cpc	r29, r31
    67fe:	40 f4       	brcc	.+16     	; 0x6810 <free+0x5a>
    6800:	4a 81       	ldd	r20, Y+2	; 0x02
    6802:	5b 81       	ldd	r21, Y+3	; 0x03
    6804:	9e 01       	movw	r18, r28
    6806:	41 15       	cp	r20, r1
    6808:	51 05       	cpc	r21, r1
    680a:	f1 f0       	breq	.+60     	; 0x6848 <free+0x92>
    680c:	ea 01       	movw	r28, r20
    680e:	f5 cf       	rjmp	.-22     	; 0x67fa <free+0x44>
    6810:	d3 83       	std	Z+3, r29	; 0x03
    6812:	c2 83       	std	Z+2, r28	; 0x02
    6814:	40 81       	ld	r20, Z
    6816:	51 81       	ldd	r21, Z+1	; 0x01
    6818:	84 0f       	add	r24, r20
    681a:	95 1f       	adc	r25, r21
    681c:	c8 17       	cp	r28, r24
    681e:	d9 07       	cpc	r29, r25
    6820:	59 f4       	brne	.+22     	; 0x6838 <free+0x82>
    6822:	88 81       	ld	r24, Y
    6824:	99 81       	ldd	r25, Y+1	; 0x01
    6826:	84 0f       	add	r24, r20
    6828:	95 1f       	adc	r25, r21
    682a:	02 96       	adiw	r24, 0x02	; 2
    682c:	91 83       	std	Z+1, r25	; 0x01
    682e:	80 83       	st	Z, r24
    6830:	8a 81       	ldd	r24, Y+2	; 0x02
    6832:	9b 81       	ldd	r25, Y+3	; 0x03
    6834:	93 83       	std	Z+3, r25	; 0x03
    6836:	82 83       	std	Z+2, r24	; 0x02
    6838:	21 15       	cp	r18, r1
    683a:	31 05       	cpc	r19, r1
    683c:	29 f4       	brne	.+10     	; 0x6848 <free+0x92>
    683e:	f0 93 ba 0a 	sts	0x0ABA, r31	; 0x800aba <__flp+0x1>
    6842:	e0 93 b9 0a 	sts	0x0AB9, r30	; 0x800ab9 <__flp>
    6846:	3d c0       	rjmp	.+122    	; 0x68c2 <free+0x10c>
    6848:	e9 01       	movw	r28, r18
    684a:	fb 83       	std	Y+3, r31	; 0x03
    684c:	ea 83       	std	Y+2, r30	; 0x02
    684e:	49 91       	ld	r20, Y+
    6850:	59 91       	ld	r21, Y+
    6852:	c4 0f       	add	r28, r20
    6854:	d5 1f       	adc	r29, r21
    6856:	ec 17       	cp	r30, r28
    6858:	fd 07       	cpc	r31, r29
    685a:	61 f4       	brne	.+24     	; 0x6874 <free+0xbe>
    685c:	80 81       	ld	r24, Z
    685e:	91 81       	ldd	r25, Z+1	; 0x01
    6860:	84 0f       	add	r24, r20
    6862:	95 1f       	adc	r25, r21
    6864:	02 96       	adiw	r24, 0x02	; 2
    6866:	e9 01       	movw	r28, r18
    6868:	99 83       	std	Y+1, r25	; 0x01
    686a:	88 83       	st	Y, r24
    686c:	82 81       	ldd	r24, Z+2	; 0x02
    686e:	93 81       	ldd	r25, Z+3	; 0x03
    6870:	9b 83       	std	Y+3, r25	; 0x03
    6872:	8a 83       	std	Y+2, r24	; 0x02
    6874:	e0 e0       	ldi	r30, 0x00	; 0
    6876:	f0 e0       	ldi	r31, 0x00	; 0
    6878:	12 96       	adiw	r26, 0x02	; 2
    687a:	8d 91       	ld	r24, X+
    687c:	9c 91       	ld	r25, X
    687e:	13 97       	sbiw	r26, 0x03	; 3
    6880:	00 97       	sbiw	r24, 0x00	; 0
    6882:	19 f0       	breq	.+6      	; 0x688a <free+0xd4>
    6884:	fd 01       	movw	r30, r26
    6886:	dc 01       	movw	r26, r24
    6888:	f7 cf       	rjmp	.-18     	; 0x6878 <free+0xc2>
    688a:	8d 91       	ld	r24, X+
    688c:	9c 91       	ld	r25, X
    688e:	11 97       	sbiw	r26, 0x01	; 1
    6890:	9d 01       	movw	r18, r26
    6892:	2e 5f       	subi	r18, 0xFE	; 254
    6894:	3f 4f       	sbci	r19, 0xFF	; 255
    6896:	82 0f       	add	r24, r18
    6898:	93 1f       	adc	r25, r19
    689a:	20 91 b7 0a 	lds	r18, 0x0AB7	; 0x800ab7 <__brkval>
    689e:	30 91 b8 0a 	lds	r19, 0x0AB8	; 0x800ab8 <__brkval+0x1>
    68a2:	28 17       	cp	r18, r24
    68a4:	39 07       	cpc	r19, r25
    68a6:	69 f4       	brne	.+26     	; 0x68c2 <free+0x10c>
    68a8:	30 97       	sbiw	r30, 0x00	; 0
    68aa:	29 f4       	brne	.+10     	; 0x68b6 <free+0x100>
    68ac:	10 92 ba 0a 	sts	0x0ABA, r1	; 0x800aba <__flp+0x1>
    68b0:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <__flp>
    68b4:	02 c0       	rjmp	.+4      	; 0x68ba <free+0x104>
    68b6:	13 82       	std	Z+3, r1	; 0x03
    68b8:	12 82       	std	Z+2, r1	; 0x02
    68ba:	b0 93 b8 0a 	sts	0x0AB8, r27	; 0x800ab8 <__brkval+0x1>
    68be:	a0 93 b7 0a 	sts	0x0AB7, r26	; 0x800ab7 <__brkval>
    68c2:	df 91       	pop	r29
    68c4:	cf 91       	pop	r28
    68c6:	08 95       	ret

000068c8 <realloc>:
    68c8:	6f 92       	push	r6
    68ca:	7f 92       	push	r7
    68cc:	8f 92       	push	r8
    68ce:	9f 92       	push	r9
    68d0:	af 92       	push	r10
    68d2:	bf 92       	push	r11
    68d4:	cf 92       	push	r12
    68d6:	df 92       	push	r13
    68d8:	ef 92       	push	r14
    68da:	ff 92       	push	r15
    68dc:	0f 93       	push	r16
    68de:	1f 93       	push	r17
    68e0:	cf 93       	push	r28
    68e2:	df 93       	push	r29
    68e4:	00 97       	sbiw	r24, 0x00	; 0
    68e6:	81 f4       	brne	.+32     	; 0x6908 <realloc+0x40>
    68e8:	cb 01       	movw	r24, r22
    68ea:	df 91       	pop	r29
    68ec:	cf 91       	pop	r28
    68ee:	1f 91       	pop	r17
    68f0:	0f 91       	pop	r16
    68f2:	ff 90       	pop	r15
    68f4:	ef 90       	pop	r14
    68f6:	df 90       	pop	r13
    68f8:	cf 90       	pop	r12
    68fa:	bf 90       	pop	r11
    68fc:	af 90       	pop	r10
    68fe:	9f 90       	pop	r9
    6900:	8f 90       	pop	r8
    6902:	7f 90       	pop	r7
    6904:	6f 90       	pop	r6
    6906:	bf ce       	rjmp	.-642    	; 0x6686 <malloc>
    6908:	fc 01       	movw	r30, r24
    690a:	e6 0f       	add	r30, r22
    690c:	f7 1f       	adc	r31, r23
    690e:	9c 01       	movw	r18, r24
    6910:	22 50       	subi	r18, 0x02	; 2
    6912:	31 09       	sbc	r19, r1
    6914:	e2 17       	cp	r30, r18
    6916:	f3 07       	cpc	r31, r19
    6918:	08 f4       	brcc	.+2      	; 0x691c <realloc+0x54>
    691a:	a5 c0       	rjmp	.+330    	; 0x6a66 <realloc+0x19e>
    691c:	ec 01       	movw	r28, r24
    691e:	d9 01       	movw	r26, r18
    6920:	0d 91       	ld	r16, X+
    6922:	1c 91       	ld	r17, X
    6924:	11 97       	sbiw	r26, 0x01	; 1
    6926:	06 17       	cp	r16, r22
    6928:	17 07       	cpc	r17, r23
    692a:	a8 f0       	brcs	.+42     	; 0x6956 <realloc+0x8e>
    692c:	05 30       	cpi	r16, 0x05	; 5
    692e:	11 05       	cpc	r17, r1
    6930:	08 f4       	brcc	.+2      	; 0x6934 <realloc+0x6c>
    6932:	97 c0       	rjmp	.+302    	; 0x6a62 <realloc+0x19a>
    6934:	c8 01       	movw	r24, r16
    6936:	04 97       	sbiw	r24, 0x04	; 4
    6938:	86 17       	cp	r24, r22
    693a:	97 07       	cpc	r25, r23
    693c:	08 f4       	brcc	.+2      	; 0x6940 <realloc+0x78>
    693e:	91 c0       	rjmp	.+290    	; 0x6a62 <realloc+0x19a>
    6940:	02 50       	subi	r16, 0x02	; 2
    6942:	11 09       	sbc	r17, r1
    6944:	06 1b       	sub	r16, r22
    6946:	17 0b       	sbc	r17, r23
    6948:	01 93       	st	Z+, r16
    694a:	11 93       	st	Z+, r17
    694c:	6d 93       	st	X+, r22
    694e:	7c 93       	st	X, r23
    6950:	cf 01       	movw	r24, r30
    6952:	31 df       	rcall	.-414    	; 0x67b6 <free>
    6954:	86 c0       	rjmp	.+268    	; 0x6a62 <realloc+0x19a>
    6956:	5b 01       	movw	r10, r22
    6958:	a0 1a       	sub	r10, r16
    695a:	b1 0a       	sbc	r11, r17
    695c:	4c 01       	movw	r8, r24
    695e:	80 0e       	add	r8, r16
    6960:	91 1e       	adc	r9, r17
    6962:	a0 91 b9 0a 	lds	r26, 0x0AB9	; 0x800ab9 <__flp>
    6966:	b0 91 ba 0a 	lds	r27, 0x0ABA	; 0x800aba <__flp+0x1>
    696a:	61 2c       	mov	r6, r1
    696c:	71 2c       	mov	r7, r1
    696e:	e1 2c       	mov	r14, r1
    6970:	f1 2c       	mov	r15, r1
    6972:	10 97       	sbiw	r26, 0x00	; 0
    6974:	09 f4       	brne	.+2      	; 0x6978 <realloc+0xb0>
    6976:	46 c0       	rjmp	.+140    	; 0x6a04 <realloc+0x13c>
    6978:	8d 91       	ld	r24, X+
    697a:	9c 91       	ld	r25, X
    697c:	11 97       	sbiw	r26, 0x01	; 1
    697e:	a8 15       	cp	r26, r8
    6980:	b9 05       	cpc	r27, r9
    6982:	b1 f5       	brne	.+108    	; 0x69f0 <realloc+0x128>
    6984:	6c 01       	movw	r12, r24
    6986:	42 e0       	ldi	r20, 0x02	; 2
    6988:	c4 0e       	add	r12, r20
    698a:	d1 1c       	adc	r13, r1
    698c:	ca 14       	cp	r12, r10
    698e:	db 04       	cpc	r13, r11
    6990:	78 f1       	brcs	.+94     	; 0x69f0 <realloc+0x128>
    6992:	4c 01       	movw	r8, r24
    6994:	8a 18       	sub	r8, r10
    6996:	9b 08       	sbc	r9, r11
    6998:	64 01       	movw	r12, r8
    699a:	42 e0       	ldi	r20, 0x02	; 2
    699c:	c4 0e       	add	r12, r20
    699e:	d1 1c       	adc	r13, r1
    69a0:	12 96       	adiw	r26, 0x02	; 2
    69a2:	bc 90       	ld	r11, X
    69a4:	12 97       	sbiw	r26, 0x02	; 2
    69a6:	13 96       	adiw	r26, 0x03	; 3
    69a8:	ac 91       	ld	r26, X
    69aa:	b5 e0       	ldi	r27, 0x05	; 5
    69ac:	cb 16       	cp	r12, r27
    69ae:	d1 04       	cpc	r13, r1
    69b0:	40 f0       	brcs	.+16     	; 0x69c2 <realloc+0xfa>
    69b2:	b2 82       	std	Z+2, r11	; 0x02
    69b4:	a3 83       	std	Z+3, r26	; 0x03
    69b6:	91 82       	std	Z+1, r9	; 0x01
    69b8:	80 82       	st	Z, r8
    69ba:	d9 01       	movw	r26, r18
    69bc:	6d 93       	st	X+, r22
    69be:	7c 93       	st	X, r23
    69c0:	09 c0       	rjmp	.+18     	; 0x69d4 <realloc+0x10c>
    69c2:	0e 5f       	subi	r16, 0xFE	; 254
    69c4:	1f 4f       	sbci	r17, 0xFF	; 255
    69c6:	80 0f       	add	r24, r16
    69c8:	91 1f       	adc	r25, r17
    69ca:	f9 01       	movw	r30, r18
    69cc:	91 83       	std	Z+1, r25	; 0x01
    69ce:	80 83       	st	Z, r24
    69d0:	eb 2d       	mov	r30, r11
    69d2:	fa 2f       	mov	r31, r26
    69d4:	e1 14       	cp	r14, r1
    69d6:	f1 04       	cpc	r15, r1
    69d8:	31 f0       	breq	.+12     	; 0x69e6 <realloc+0x11e>
    69da:	d7 01       	movw	r26, r14
    69dc:	13 96       	adiw	r26, 0x03	; 3
    69de:	fc 93       	st	X, r31
    69e0:	ee 93       	st	-X, r30
    69e2:	12 97       	sbiw	r26, 0x02	; 2
    69e4:	3e c0       	rjmp	.+124    	; 0x6a62 <realloc+0x19a>
    69e6:	f0 93 ba 0a 	sts	0x0ABA, r31	; 0x800aba <__flp+0x1>
    69ea:	e0 93 b9 0a 	sts	0x0AB9, r30	; 0x800ab9 <__flp>
    69ee:	39 c0       	rjmp	.+114    	; 0x6a62 <realloc+0x19a>
    69f0:	68 16       	cp	r6, r24
    69f2:	79 06       	cpc	r7, r25
    69f4:	08 f4       	brcc	.+2      	; 0x69f8 <realloc+0x130>
    69f6:	3c 01       	movw	r6, r24
    69f8:	7d 01       	movw	r14, r26
    69fa:	12 96       	adiw	r26, 0x02	; 2
    69fc:	0d 90       	ld	r0, X+
    69fe:	bc 91       	ld	r27, X
    6a00:	a0 2d       	mov	r26, r0
    6a02:	b7 cf       	rjmp	.-146    	; 0x6972 <realloc+0xaa>
    6a04:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <__brkval>
    6a08:	90 91 b8 0a 	lds	r25, 0x0AB8	; 0x800ab8 <__brkval+0x1>
    6a0c:	88 16       	cp	r8, r24
    6a0e:	99 06       	cpc	r9, r25
    6a10:	e1 f4       	brne	.+56     	; 0x6a4a <realloc+0x182>
    6a12:	66 16       	cp	r6, r22
    6a14:	77 06       	cpc	r7, r23
    6a16:	c8 f4       	brcc	.+50     	; 0x6a4a <realloc+0x182>
    6a18:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    6a1c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    6a20:	00 97       	sbiw	r24, 0x00	; 0
    6a22:	41 f4       	brne	.+16     	; 0x6a34 <realloc+0x16c>
    6a24:	8d b7       	in	r24, 0x3d	; 61
    6a26:	9e b7       	in	r25, 0x3e	; 62
    6a28:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6a2c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    6a30:	84 1b       	sub	r24, r20
    6a32:	95 0b       	sbc	r25, r21
    6a34:	e8 17       	cp	r30, r24
    6a36:	f9 07       	cpc	r31, r25
    6a38:	b0 f4       	brcc	.+44     	; 0x6a66 <realloc+0x19e>
    6a3a:	f0 93 b8 0a 	sts	0x0AB8, r31	; 0x800ab8 <__brkval+0x1>
    6a3e:	e0 93 b7 0a 	sts	0x0AB7, r30	; 0x800ab7 <__brkval>
    6a42:	f9 01       	movw	r30, r18
    6a44:	71 83       	std	Z+1, r23	; 0x01
    6a46:	60 83       	st	Z, r22
    6a48:	0c c0       	rjmp	.+24     	; 0x6a62 <realloc+0x19a>
    6a4a:	cb 01       	movw	r24, r22
    6a4c:	1c de       	rcall	.-968    	; 0x6686 <malloc>
    6a4e:	7c 01       	movw	r14, r24
    6a50:	00 97       	sbiw	r24, 0x00	; 0
    6a52:	49 f0       	breq	.+18     	; 0x6a66 <realloc+0x19e>
    6a54:	a8 01       	movw	r20, r16
    6a56:	be 01       	movw	r22, r28
    6a58:	1b d0       	rcall	.+54     	; 0x6a90 <memcpy>
    6a5a:	ce 01       	movw	r24, r28
    6a5c:	ac de       	rcall	.-680    	; 0x67b6 <free>
    6a5e:	c7 01       	movw	r24, r14
    6a60:	04 c0       	rjmp	.+8      	; 0x6a6a <realloc+0x1a2>
    6a62:	ce 01       	movw	r24, r28
    6a64:	02 c0       	rjmp	.+4      	; 0x6a6a <realloc+0x1a2>
    6a66:	80 e0       	ldi	r24, 0x00	; 0
    6a68:	90 e0       	ldi	r25, 0x00	; 0
    6a6a:	df 91       	pop	r29
    6a6c:	cf 91       	pop	r28
    6a6e:	1f 91       	pop	r17
    6a70:	0f 91       	pop	r16
    6a72:	ff 90       	pop	r15
    6a74:	ef 90       	pop	r14
    6a76:	df 90       	pop	r13
    6a78:	cf 90       	pop	r12
    6a7a:	bf 90       	pop	r11
    6a7c:	af 90       	pop	r10
    6a7e:	9f 90       	pop	r9
    6a80:	8f 90       	pop	r8
    6a82:	7f 90       	pop	r7
    6a84:	6f 90       	pop	r6
    6a86:	08 95       	ret

00006a88 <abort>:
    6a88:	81 e0       	ldi	r24, 0x01	; 1
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	f8 94       	cli
    6a8e:	17 c0       	rjmp	.+46     	; 0x6abe <__do_global_dtors>

00006a90 <memcpy>:
    6a90:	fb 01       	movw	r30, r22
    6a92:	dc 01       	movw	r26, r24
    6a94:	02 c0       	rjmp	.+4      	; 0x6a9a <memcpy+0xa>
    6a96:	01 90       	ld	r0, Z+
    6a98:	0d 92       	st	X+, r0
    6a9a:	41 50       	subi	r20, 0x01	; 1
    6a9c:	50 40       	sbci	r21, 0x00	; 0
    6a9e:	d8 f7       	brcc	.-10     	; 0x6a96 <memcpy+0x6>
    6aa0:	08 95       	ret

00006aa2 <memset>:
    6aa2:	dc 01       	movw	r26, r24
    6aa4:	01 c0       	rjmp	.+2      	; 0x6aa8 <memset+0x6>
    6aa6:	6d 93       	st	X+, r22
    6aa8:	41 50       	subi	r20, 0x01	; 1
    6aaa:	50 40       	sbci	r21, 0x00	; 0
    6aac:	e0 f7       	brcc	.-8      	; 0x6aa6 <memset+0x4>
    6aae:	08 95       	ret

00006ab0 <strcpy>:
    6ab0:	fb 01       	movw	r30, r22
    6ab2:	dc 01       	movw	r26, r24
    6ab4:	01 90       	ld	r0, Z+
    6ab6:	0d 92       	st	X+, r0
    6ab8:	00 20       	and	r0, r0
    6aba:	e1 f7       	brne	.-8      	; 0x6ab4 <strcpy+0x4>
    6abc:	08 95       	ret

00006abe <__do_global_dtors>:
    6abe:	11 e0       	ldi	r17, 0x01	; 1
    6ac0:	cb ed       	ldi	r28, 0xDB	; 219
    6ac2:	d1 e0       	ldi	r29, 0x01	; 1
    6ac4:	00 e0       	ldi	r16, 0x00	; 0
    6ac6:	05 c0       	rjmp	.+10     	; 0x6ad2 <__do_global_dtors+0x14>
    6ac8:	80 2f       	mov	r24, r16
    6aca:	fe 01       	movw	r30, r28
    6acc:	d4 dd       	rcall	.-1112   	; 0x6676 <__tablejump2__>
    6ace:	21 96       	adiw	r28, 0x01	; 1
    6ad0:	01 1d       	adc	r16, r1
    6ad2:	cc 3d       	cpi	r28, 0xDC	; 220
    6ad4:	d1 07       	cpc	r29, r17
    6ad6:	80 e0       	ldi	r24, 0x00	; 0
    6ad8:	08 07       	cpc	r16, r24
    6ada:	b1 f7       	brne	.-20     	; 0x6ac8 <__do_global_dtors+0xa>
    6adc:	f8 94       	cli

00006ade <__stop_program>:
    6ade:	ff cf       	rjmp	.-2      	; 0x6ade <__stop_program>
